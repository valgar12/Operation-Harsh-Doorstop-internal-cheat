#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HDMain

#include "Basic.hpp"

#include "DonkehFramework_structs.hpp"
#include "Engine_structs.hpp"
#include "HDMain_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function HDMain.HDServerListFilterRule.MatchesServer
// 0x0010 (0x0010 - 0x0000)
struct HDServerListFilterRule_MatchesServer final 
{
public:
	class UHDServerListItemData*                  ListItem;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1147[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDServerListFilterRule_MatchesServer) == 0x000008, "Wrong alignment on HDServerListFilterRule_MatchesServer");
//(sizeof(HDServerListFilterRule_MatchesServer) == 0x000010, "Wrong size on HDServerListFilterRule_MatchesServer");
//(offsetof(HDServerListFilterRule_MatchesServer, ListItem) == 0x000000, "Member 'HDServerListFilterRule_MatchesServer::ListItem' has a wrong offset!");
//(offsetof(HDServerListFilterRule_MatchesServer, ReturnValue) == 0x000008, "Member 'HDServerListFilterRule_MatchesServer::ReturnValue' has a wrong offset!");

// Function HDMain.DeployMenu_PlatoonSquadListBase.DeconstructSquad
// 0x0010 (0x0010 - 0x0000)
struct DeployMenu_PlatoonSquadListBase_DeconstructSquad final 
{
public:
	class USquadListEntry*                        RemovedSquadData;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemovedSquadIdx;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1149[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DeployMenu_PlatoonSquadListBase_DeconstructSquad) == 0x000008, "Wrong alignment on DeployMenu_PlatoonSquadListBase_DeconstructSquad");
//(sizeof(DeployMenu_PlatoonSquadListBase_DeconstructSquad) == 0x000010, "Wrong size on DeployMenu_PlatoonSquadListBase_DeconstructSquad");
//(offsetof(DeployMenu_PlatoonSquadListBase_DeconstructSquad, RemovedSquadData) == 0x000000, "Member 'DeployMenu_PlatoonSquadListBase_DeconstructSquad::RemovedSquadData' has a wrong offset!");
//(offsetof(DeployMenu_PlatoonSquadListBase_DeconstructSquad, RemovedSquadIdx) == 0x000008, "Member 'DeployMenu_PlatoonSquadListBase_DeconstructSquad::RemovedSquadIdx' has a wrong offset!");

// Function HDMain.DeployMenu_PlatoonSquadListBase.GenerateSquad
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_PlatoonSquadListBase_GenerateSquad final 
{
public:
	class USquadListEntry*                        SquadData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_PlatoonSquadListBase_GenerateSquad) == 0x000008, "Wrong alignment on DeployMenu_PlatoonSquadListBase_GenerateSquad");
//(sizeof(DeployMenu_PlatoonSquadListBase_GenerateSquad) == 0x000008, "Wrong size on DeployMenu_PlatoonSquadListBase_GenerateSquad");
//(offsetof(DeployMenu_PlatoonSquadListBase_GenerateSquad, SquadData) == 0x000000, "Member 'DeployMenu_PlatoonSquadListBase_GenerateSquad::SquadData' has a wrong offset!");

// Function HDMain.DeployMenu_PlatoonSquadListBase.SetupPlatoon
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_PlatoonSquadListBase_SetupPlatoon final 
{
public:
	class UPlatoonListEntry*                      InPlatoonData;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_PlatoonSquadListBase_SetupPlatoon) == 0x000008, "Wrong alignment on DeployMenu_PlatoonSquadListBase_SetupPlatoon");
//(sizeof(DeployMenu_PlatoonSquadListBase_SetupPlatoon) == 0x000008, "Wrong size on DeployMenu_PlatoonSquadListBase_SetupPlatoon");
//(offsetof(DeployMenu_PlatoonSquadListBase_SetupPlatoon, InPlatoonData) == 0x000000, "Member 'DeployMenu_PlatoonSquadListBase_SetupPlatoon::InPlatoonData' has a wrong offset!");

// Function HDMain.DeployMenu_PlatoonSquadListBase.SquadAddedToPlatoon
// 0x0010 (0x0010 - 0x0000)
struct DeployMenu_PlatoonSquadListBase_SquadAddedToPlatoon final 
{
public:
	class AHDPlatoonState*                        SourcePlatoon;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDSquadState*                          NewSquad;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_PlatoonSquadListBase_SquadAddedToPlatoon) == 0x000008, "Wrong alignment on DeployMenu_PlatoonSquadListBase_SquadAddedToPlatoon");
//(sizeof(DeployMenu_PlatoonSquadListBase_SquadAddedToPlatoon) == 0x000010, "Wrong size on DeployMenu_PlatoonSquadListBase_SquadAddedToPlatoon");
//(offsetof(DeployMenu_PlatoonSquadListBase_SquadAddedToPlatoon, SourcePlatoon) == 0x000000, "Member 'DeployMenu_PlatoonSquadListBase_SquadAddedToPlatoon::SourcePlatoon' has a wrong offset!");
//(offsetof(DeployMenu_PlatoonSquadListBase_SquadAddedToPlatoon, NewSquad) == 0x000008, "Member 'DeployMenu_PlatoonSquadListBase_SquadAddedToPlatoon::NewSquad' has a wrong offset!");

// Function HDMain.DeployMenu_PlatoonSquadListBase.SquadPreRemoveFromPlatoon
// 0x0010 (0x0010 - 0x0000)
struct DeployMenu_PlatoonSquadListBase_SquadPreRemoveFromPlatoon final 
{
public:
	class AHDPlatoonState*                        SourcePlatoon;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDSquadState*                          SquadToBeRemoved;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_PlatoonSquadListBase_SquadPreRemoveFromPlatoon) == 0x000008, "Wrong alignment on DeployMenu_PlatoonSquadListBase_SquadPreRemoveFromPlatoon");
//(sizeof(DeployMenu_PlatoonSquadListBase_SquadPreRemoveFromPlatoon) == 0x000010, "Wrong size on DeployMenu_PlatoonSquadListBase_SquadPreRemoveFromPlatoon");
//(offsetof(DeployMenu_PlatoonSquadListBase_SquadPreRemoveFromPlatoon, SourcePlatoon) == 0x000000, "Member 'DeployMenu_PlatoonSquadListBase_SquadPreRemoveFromPlatoon::SourcePlatoon' has a wrong offset!");
//(offsetof(DeployMenu_PlatoonSquadListBase_SquadPreRemoveFromPlatoon, SquadToBeRemoved) == 0x000008, "Member 'DeployMenu_PlatoonSquadListBase_SquadPreRemoveFromPlatoon::SquadToBeRemoved' has a wrong offset!");

// Function HDMain.DeployMenu_PlatoonSquadListBase.GetPlatoonStateFromData
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_PlatoonSquadListBase_GetPlatoonStateFromData final 
{
public:
	class AHDPlatoonState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_PlatoonSquadListBase_GetPlatoonStateFromData) == 0x000008, "Wrong alignment on DeployMenu_PlatoonSquadListBase_GetPlatoonStateFromData");
//(sizeof(DeployMenu_PlatoonSquadListBase_GetPlatoonStateFromData) == 0x000008, "Wrong size on DeployMenu_PlatoonSquadListBase_GetPlatoonStateFromData");
//(offsetof(DeployMenu_PlatoonSquadListBase_GetPlatoonStateFromData, ReturnValue) == 0x000000, "Member 'DeployMenu_PlatoonSquadListBase_GetPlatoonStateFromData::ReturnValue' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.DeconstructSquadMember
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_SquadListBase_DeconstructSquadMember final 
{
public:
	class USquadMemberInfo*                       RemovedMemberData;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_DeconstructSquadMember) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_DeconstructSquadMember");
//(sizeof(DeployMenu_SquadListBase_DeconstructSquadMember) == 0x000008, "Wrong size on DeployMenu_SquadListBase_DeconstructSquadMember");
//(offsetof(DeployMenu_SquadListBase_DeconstructSquadMember, RemovedMemberData) == 0x000000, "Member 'DeployMenu_SquadListBase_DeconstructSquadMember::RemovedMemberData' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.GenerateSquadMember
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_SquadListBase_GenerateSquadMember final 
{
public:
	class USquadMemberInfo*                       MemberData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_GenerateSquadMember) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_GenerateSquadMember");
//(sizeof(DeployMenu_SquadListBase_GenerateSquadMember) == 0x000008, "Wrong size on DeployMenu_SquadListBase_GenerateSquadMember");
//(offsetof(DeployMenu_SquadListBase_GenerateSquadMember, MemberData) == 0x000000, "Member 'DeployMenu_SquadListBase_GenerateSquadMember::MemberData' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.MemberAddedToSquad
// 0x0010 (0x0010 - 0x0000)
struct DeployMenu_SquadListBase_MemberAddedToSquad final 
{
public:
	class AHDSquadState*                          SourceSquad;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDPlayerState*                         NewMemberPS;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_MemberAddedToSquad) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_MemberAddedToSquad");
//(sizeof(DeployMenu_SquadListBase_MemberAddedToSquad) == 0x000010, "Wrong size on DeployMenu_SquadListBase_MemberAddedToSquad");
//(offsetof(DeployMenu_SquadListBase_MemberAddedToSquad, SourceSquad) == 0x000000, "Member 'DeployMenu_SquadListBase_MemberAddedToSquad::SourceSquad' has a wrong offset!");
//(offsetof(DeployMenu_SquadListBase_MemberAddedToSquad, NewMemberPS) == 0x000008, "Member 'DeployMenu_SquadListBase_MemberAddedToSquad::NewMemberPS' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.MemberPreRemoveFromSquad
// 0x0010 (0x0010 - 0x0000)
struct DeployMenu_SquadListBase_MemberPreRemoveFromSquad final 
{
public:
	class AHDSquadState*                          SourceSquad;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDPlayerState*                         MemberPSToBeRemoved;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_MemberPreRemoveFromSquad) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_MemberPreRemoveFromSquad");
//(sizeof(DeployMenu_SquadListBase_MemberPreRemoveFromSquad) == 0x000010, "Wrong size on DeployMenu_SquadListBase_MemberPreRemoveFromSquad");
//(offsetof(DeployMenu_SquadListBase_MemberPreRemoveFromSquad, SourceSquad) == 0x000000, "Member 'DeployMenu_SquadListBase_MemberPreRemoveFromSquad::SourceSquad' has a wrong offset!");
//(offsetof(DeployMenu_SquadListBase_MemberPreRemoveFromSquad, MemberPSToBeRemoved) == 0x000008, "Member 'DeployMenu_SquadListBase_MemberPreRemoveFromSquad::MemberPSToBeRemoved' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.MemberSquadInfoUpdated
// 0x0020 (0x0020 - 0x0000)
struct DeployMenu_SquadListBase_MemberSquadInfoUpdated final 
{
public:
	class AHDSquadState*                          SourceSquad;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDPlayerState*                         MemberPS;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHDSquadAssignmentInfo                 MemberSQInfo;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_MemberSquadInfoUpdated) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_MemberSquadInfoUpdated");
//(sizeof(DeployMenu_SquadListBase_MemberSquadInfoUpdated) == 0x000020, "Wrong size on DeployMenu_SquadListBase_MemberSquadInfoUpdated");
//(offsetof(DeployMenu_SquadListBase_MemberSquadInfoUpdated, SourceSquad) == 0x000000, "Member 'DeployMenu_SquadListBase_MemberSquadInfoUpdated::SourceSquad' has a wrong offset!");
//(offsetof(DeployMenu_SquadListBase_MemberSquadInfoUpdated, MemberPS) == 0x000008, "Member 'DeployMenu_SquadListBase_MemberSquadInfoUpdated::MemberPS' has a wrong offset!");
//(offsetof(DeployMenu_SquadListBase_MemberSquadInfoUpdated, MemberSQInfo) == 0x000010, "Member 'DeployMenu_SquadListBase_MemberSquadInfoUpdated::MemberSQInfo' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.OnSquadLeaderUpdated
// 0x0010 (0x0010 - 0x0000)
struct DeployMenu_SquadListBase_OnSquadLeaderUpdated final 
{
public:
	class AHDPlayerState*                         NewLeaderPS;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDPlayerState*                         PrevLeaderPS;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_OnSquadLeaderUpdated) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_OnSquadLeaderUpdated");
//(sizeof(DeployMenu_SquadListBase_OnSquadLeaderUpdated) == 0x000010, "Wrong size on DeployMenu_SquadListBase_OnSquadLeaderUpdated");
//(offsetof(DeployMenu_SquadListBase_OnSquadLeaderUpdated, NewLeaderPS) == 0x000000, "Member 'DeployMenu_SquadListBase_OnSquadLeaderUpdated::NewLeaderPS' has a wrong offset!");
//(offsetof(DeployMenu_SquadListBase_OnSquadLeaderUpdated, PrevLeaderPS) == 0x000008, "Member 'DeployMenu_SquadListBase_OnSquadLeaderUpdated::PrevLeaderPS' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.OnSquadLockStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct DeployMenu_SquadListBase_OnSquadLockStateUpdated final 
{
public:
	bool                                          bNewLockedState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_OnSquadLockStateUpdated) == 0x000001, "Wrong alignment on DeployMenu_SquadListBase_OnSquadLockStateUpdated");
//(sizeof(DeployMenu_SquadListBase_OnSquadLockStateUpdated) == 0x000001, "Wrong size on DeployMenu_SquadListBase_OnSquadLockStateUpdated");
//(offsetof(DeployMenu_SquadListBase_OnSquadLockStateUpdated, bNewLockedState) == 0x000000, "Member 'DeployMenu_SquadListBase_OnSquadLockStateUpdated::bNewLockedState' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.OnSquadNameUpdated
// 0x0030 (0x0030 - 0x0000)
struct DeployMenu_SquadListBase_OnSquadNameUpdated final 
{
public:
	class FText                                   NewSquadName;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   PreviousSquadName;                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_OnSquadNameUpdated) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_OnSquadNameUpdated");
//(sizeof(DeployMenu_SquadListBase_OnSquadNameUpdated) == 0x000030, "Wrong size on DeployMenu_SquadListBase_OnSquadNameUpdated");
//(offsetof(DeployMenu_SquadListBase_OnSquadNameUpdated, NewSquadName) == 0x000000, "Member 'DeployMenu_SquadListBase_OnSquadNameUpdated::NewSquadName' has a wrong offset!");
//(offsetof(DeployMenu_SquadListBase_OnSquadNameUpdated, PreviousSquadName) == 0x000018, "Member 'DeployMenu_SquadListBase_OnSquadNameUpdated::PreviousSquadName' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.SetupSquad
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_SquadListBase_SetupSquad final 
{
public:
	class USquadListEntry*                        InSquadData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_SetupSquad) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_SetupSquad");
//(sizeof(DeployMenu_SquadListBase_SetupSquad) == 0x000008, "Wrong size on DeployMenu_SquadListBase_SetupSquad");
//(offsetof(DeployMenu_SquadListBase_SetupSquad, InSquadData) == 0x000000, "Member 'DeployMenu_SquadListBase_SetupSquad::InSquadData' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.SquadLeaderChanged
// 0x0018 (0x0018 - 0x0000)
struct DeployMenu_SquadListBase_SquadLeaderChanged final 
{
public:
	class AHDSquadState*                          SourceSquad;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDPlayerState*                         NewLeaderPS;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDPlayerState*                         PrevLeaderPS;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_SquadLeaderChanged) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_SquadLeaderChanged");
//(sizeof(DeployMenu_SquadListBase_SquadLeaderChanged) == 0x000018, "Wrong size on DeployMenu_SquadListBase_SquadLeaderChanged");
//(offsetof(DeployMenu_SquadListBase_SquadLeaderChanged, SourceSquad) == 0x000000, "Member 'DeployMenu_SquadListBase_SquadLeaderChanged::SourceSquad' has a wrong offset!");
//(offsetof(DeployMenu_SquadListBase_SquadLeaderChanged, NewLeaderPS) == 0x000008, "Member 'DeployMenu_SquadListBase_SquadLeaderChanged::NewLeaderPS' has a wrong offset!");
//(offsetof(DeployMenu_SquadListBase_SquadLeaderChanged, PrevLeaderPS) == 0x000010, "Member 'DeployMenu_SquadListBase_SquadLeaderChanged::PrevLeaderPS' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.SquadLockStateUpdated
// 0x0010 (0x0010 - 0x0000)
struct DeployMenu_SquadListBase_SquadLockStateUpdated final 
{
public:
	class AHDSquadState*                          SourceSquad;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewLocked;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DeployMenu_SquadListBase_SquadLockStateUpdated) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_SquadLockStateUpdated");
//(sizeof(DeployMenu_SquadListBase_SquadLockStateUpdated) == 0x000010, "Wrong size on DeployMenu_SquadListBase_SquadLockStateUpdated");
//(offsetof(DeployMenu_SquadListBase_SquadLockStateUpdated, SourceSquad) == 0x000000, "Member 'DeployMenu_SquadListBase_SquadLockStateUpdated::SourceSquad' has a wrong offset!");
//(offsetof(DeployMenu_SquadListBase_SquadLockStateUpdated, bNewLocked) == 0x000008, "Member 'DeployMenu_SquadListBase_SquadLockStateUpdated::bNewLocked' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.SquadNameChanged
// 0x0038 (0x0038 - 0x0000)
struct DeployMenu_SquadListBase_SquadNameChanged final 
{
public:
	class AHDSquadState*                          SourceSquad;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NewName;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   PrevName;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_SquadNameChanged) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_SquadNameChanged");
//(sizeof(DeployMenu_SquadListBase_SquadNameChanged) == 0x000038, "Wrong size on DeployMenu_SquadListBase_SquadNameChanged");
//(offsetof(DeployMenu_SquadListBase_SquadNameChanged, SourceSquad) == 0x000000, "Member 'DeployMenu_SquadListBase_SquadNameChanged::SourceSquad' has a wrong offset!");
//(offsetof(DeployMenu_SquadListBase_SquadNameChanged, NewName) == 0x000008, "Member 'DeployMenu_SquadListBase_SquadNameChanged::NewName' has a wrong offset!");
//(offsetof(DeployMenu_SquadListBase_SquadNameChanged, PrevName) == 0x000020, "Member 'DeployMenu_SquadListBase_SquadNameChanged::PrevName' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.GetParentPlatoonStateFromData
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_SquadListBase_GetParentPlatoonStateFromData final 
{
public:
	class AHDPlatoonState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_GetParentPlatoonStateFromData) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_GetParentPlatoonStateFromData");
//(sizeof(DeployMenu_SquadListBase_GetParentPlatoonStateFromData) == 0x000008, "Wrong size on DeployMenu_SquadListBase_GetParentPlatoonStateFromData");
//(offsetof(DeployMenu_SquadListBase_GetParentPlatoonStateFromData, ReturnValue) == 0x000000, "Member 'DeployMenu_SquadListBase_GetParentPlatoonStateFromData::ReturnValue' has a wrong offset!");

// Function HDMain.DeployMenu_SquadListBase.GetSquadStateFromData
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_SquadListBase_GetSquadStateFromData final 
{
public:
	class AHDSquadState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadListBase_GetSquadStateFromData) == 0x000008, "Wrong alignment on DeployMenu_SquadListBase_GetSquadStateFromData");
//(sizeof(DeployMenu_SquadListBase_GetSquadStateFromData) == 0x000008, "Wrong size on DeployMenu_SquadListBase_GetSquadStateFromData");
//(offsetof(DeployMenu_SquadListBase_GetSquadStateFromData, ReturnValue) == 0x000000, "Member 'DeployMenu_SquadListBase_GetSquadStateFromData::ReturnValue' has a wrong offset!");

// Function HDMain.DeployMenu_SquadMemberListingBase.MemberPlayerNameChanged
// 0x0018 (0x0018 - 0x0000)
struct DeployMenu_SquadMemberListingBase_MemberPlayerNameChanged final 
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPlayerName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadMemberListingBase_MemberPlayerNameChanged) == 0x000008, "Wrong alignment on DeployMenu_SquadMemberListingBase_MemberPlayerNameChanged");
//(sizeof(DeployMenu_SquadMemberListingBase_MemberPlayerNameChanged) == 0x000018, "Wrong size on DeployMenu_SquadMemberListingBase_MemberPlayerNameChanged");
//(offsetof(DeployMenu_SquadMemberListingBase_MemberPlayerNameChanged, PlayerState) == 0x000000, "Member 'DeployMenu_SquadMemberListingBase_MemberPlayerNameChanged::PlayerState' has a wrong offset!");
//(offsetof(DeployMenu_SquadMemberListingBase_MemberPlayerNameChanged, NewPlayerName) == 0x000008, "Member 'DeployMenu_SquadMemberListingBase_MemberPlayerNameChanged::NewPlayerName' has a wrong offset!");

// Function HDMain.DeployMenu_SquadMemberListingBase.OnMemberPlayerNameUpdated
// 0x0010 (0x0010 - 0x0000)
struct DeployMenu_SquadMemberListingBase_OnMemberPlayerNameUpdated final 
{
public:
	class FString                                 NewPlayerName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadMemberListingBase_OnMemberPlayerNameUpdated) == 0x000008, "Wrong alignment on DeployMenu_SquadMemberListingBase_OnMemberPlayerNameUpdated");
//(sizeof(DeployMenu_SquadMemberListingBase_OnMemberPlayerNameUpdated) == 0x000010, "Wrong size on DeployMenu_SquadMemberListingBase_OnMemberPlayerNameUpdated");
//(offsetof(DeployMenu_SquadMemberListingBase_OnMemberPlayerNameUpdated, NewPlayerName) == 0x000000, "Member 'DeployMenu_SquadMemberListingBase_OnMemberPlayerNameUpdated::NewPlayerName' has a wrong offset!");

// Function HDMain.DeployMenu_SquadMemberListingBase.SetupMember
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_SquadMemberListingBase_SetupMember final 
{
public:
	class USquadMemberInfo*                       InMemberData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadMemberListingBase_SetupMember) == 0x000008, "Wrong alignment on DeployMenu_SquadMemberListingBase_SetupMember");
//(sizeof(DeployMenu_SquadMemberListingBase_SetupMember) == 0x000008, "Wrong size on DeployMenu_SquadMemberListingBase_SetupMember");
//(offsetof(DeployMenu_SquadMemberListingBase_SetupMember, InMemberData) == 0x000000, "Member 'DeployMenu_SquadMemberListingBase_SetupMember::InMemberData' has a wrong offset!");

// Function HDMain.DeployMenu_SquadMemberListingBase.GetParentPlatoonStateFromData
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_SquadMemberListingBase_GetParentPlatoonStateFromData final 
{
public:
	class AHDPlatoonState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadMemberListingBase_GetParentPlatoonStateFromData) == 0x000008, "Wrong alignment on DeployMenu_SquadMemberListingBase_GetParentPlatoonStateFromData");
//(sizeof(DeployMenu_SquadMemberListingBase_GetParentPlatoonStateFromData) == 0x000008, "Wrong size on DeployMenu_SquadMemberListingBase_GetParentPlatoonStateFromData");
//(offsetof(DeployMenu_SquadMemberListingBase_GetParentPlatoonStateFromData, ReturnValue) == 0x000000, "Member 'DeployMenu_SquadMemberListingBase_GetParentPlatoonStateFromData::ReturnValue' has a wrong offset!");

// Function HDMain.DeployMenu_SquadMemberListingBase.GetParentSquadStateFromData
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_SquadMemberListingBase_GetParentSquadStateFromData final 
{
public:
	class AHDSquadState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadMemberListingBase_GetParentSquadStateFromData) == 0x000008, "Wrong alignment on DeployMenu_SquadMemberListingBase_GetParentSquadStateFromData");
//(sizeof(DeployMenu_SquadMemberListingBase_GetParentSquadStateFromData) == 0x000008, "Wrong size on DeployMenu_SquadMemberListingBase_GetParentSquadStateFromData");
//(offsetof(DeployMenu_SquadMemberListingBase_GetParentSquadStateFromData, ReturnValue) == 0x000000, "Member 'DeployMenu_SquadMemberListingBase_GetParentSquadStateFromData::ReturnValue' has a wrong offset!");

// Function HDMain.DeployMenu_SquadMemberListingBase.GetPlayerStateFromData
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_SquadMemberListingBase_GetPlayerStateFromData final 
{
public:
	class AHDPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadMemberListingBase_GetPlayerStateFromData) == 0x000008, "Wrong alignment on DeployMenu_SquadMemberListingBase_GetPlayerStateFromData");
//(sizeof(DeployMenu_SquadMemberListingBase_GetPlayerStateFromData) == 0x000008, "Wrong size on DeployMenu_SquadMemberListingBase_GetPlayerStateFromData");
//(offsetof(DeployMenu_SquadMemberListingBase_GetPlayerStateFromData, ReturnValue) == 0x000000, "Member 'DeployMenu_SquadMemberListingBase_GetPlayerStateFromData::ReturnValue' has a wrong offset!");

// Function HDMain.HDScoreboardListingRowBase.Init
// 0x0018 (0x0018 - 0x0000)
struct HDScoreboardListingRowBase_Init final 
{
public:
	class UHDScoreboardBase*                      InParentMenu;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBasePlayerState*                     InPlayerState;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRefreshListingOnTick;                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDScoreboardListingRowBase_Init) == 0x000008, "Wrong alignment on HDScoreboardListingRowBase_Init");
//(sizeof(HDScoreboardListingRowBase_Init) == 0x000018, "Wrong size on HDScoreboardListingRowBase_Init");
//(offsetof(HDScoreboardListingRowBase_Init, InParentMenu) == 0x000000, "Member 'HDScoreboardListingRowBase_Init::InParentMenu' has a wrong offset!");
//(offsetof(HDScoreboardListingRowBase_Init, InPlayerState) == 0x000008, "Member 'HDScoreboardListingRowBase_Init::InPlayerState' has a wrong offset!");
//(offsetof(HDScoreboardListingRowBase_Init, bInRefreshListingOnTick) == 0x000010, "Member 'HDScoreboardListingRowBase_Init::bInRefreshListingOnTick' has a wrong offset!");

// Function HDMain.HDScoreboardListingRowBase.ReceivePlayerVoiceStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HDScoreboardListingRowBase_ReceivePlayerVoiceStateChanged final 
{
public:
	EPlayerVoiceState                             NewVoiceState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDScoreboardListingRowBase_ReceivePlayerVoiceStateChanged) == 0x000001, "Wrong alignment on HDScoreboardListingRowBase_ReceivePlayerVoiceStateChanged");
//(sizeof(HDScoreboardListingRowBase_ReceivePlayerVoiceStateChanged) == 0x000001, "Wrong size on HDScoreboardListingRowBase_ReceivePlayerVoiceStateChanged");
//(offsetof(HDScoreboardListingRowBase_ReceivePlayerVoiceStateChanged, NewVoiceState) == 0x000000, "Member 'HDScoreboardListingRowBase_ReceivePlayerVoiceStateChanged::NewVoiceState' has a wrong offset!");

// Function HDMain.HDScoreboardListingRowBase.SetVoiceStateIcon
// 0x0008 (0x0008 - 0x0000)
struct HDScoreboardListingRowBase_SetVoiceStateIcon final 
{
public:
	class UTexture2D*                             NewIcon;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDScoreboardListingRowBase_SetVoiceStateIcon) == 0x000008, "Wrong alignment on HDScoreboardListingRowBase_SetVoiceStateIcon");
//(sizeof(HDScoreboardListingRowBase_SetVoiceStateIcon) == 0x000008, "Wrong size on HDScoreboardListingRowBase_SetVoiceStateIcon");
//(offsetof(HDScoreboardListingRowBase_SetVoiceStateIcon, NewIcon) == 0x000000, "Member 'HDScoreboardListingRowBase_SetVoiceStateIcon::NewIcon' has a wrong offset!");

// Function HDMain.HDScoreboardListingRowBase.GetCurrentPing
// 0x0004 (0x0004 - 0x0000)
struct HDScoreboardListingRowBase_GetCurrentPing final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDScoreboardListingRowBase_GetCurrentPing) == 0x000004, "Wrong alignment on HDScoreboardListingRowBase_GetCurrentPing");
//(sizeof(HDScoreboardListingRowBase_GetCurrentPing) == 0x000004, "Wrong size on HDScoreboardListingRowBase_GetCurrentPing");
//(offsetof(HDScoreboardListingRowBase_GetCurrentPing, ReturnValue) == 0x000000, "Member 'HDScoreboardListingRowBase_GetCurrentPing::ReturnValue' has a wrong offset!");

// Function HDMain.HDScoreboardListingRowBase.GetIconForVoiceState
// 0x0030 (0x0030 - 0x0000)
struct HDScoreboardListingRowBase_GetIconForVoiceState final 
{
public:
	EPlayerVoiceState                             VoiceState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1150[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDScoreboardListingRowBase_GetIconForVoiceState) == 0x000008, "Wrong alignment on HDScoreboardListingRowBase_GetIconForVoiceState");
//(sizeof(HDScoreboardListingRowBase_GetIconForVoiceState) == 0x000030, "Wrong size on HDScoreboardListingRowBase_GetIconForVoiceState");
//(offsetof(HDScoreboardListingRowBase_GetIconForVoiceState, VoiceState) == 0x000000, "Member 'HDScoreboardListingRowBase_GetIconForVoiceState::VoiceState' has a wrong offset!");
//(offsetof(HDScoreboardListingRowBase_GetIconForVoiceState, ReturnValue) == 0x000008, "Member 'HDScoreboardListingRowBase_GetIconForVoiceState::ReturnValue' has a wrong offset!");

// Function HDMain.HDScoreboardListingRowBase.HasInitialized
// 0x0001 (0x0001 - 0x0000)
struct HDScoreboardListingRowBase_HasInitialized final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDScoreboardListingRowBase_HasInitialized) == 0x000001, "Wrong alignment on HDScoreboardListingRowBase_HasInitialized");
//(sizeof(HDScoreboardListingRowBase_HasInitialized) == 0x000001, "Wrong size on HDScoreboardListingRowBase_HasInitialized");
//(offsetof(HDScoreboardListingRowBase_HasInitialized, ReturnValue) == 0x000000, "Member 'HDScoreboardListingRowBase_HasInitialized::ReturnValue' has a wrong offset!");

// Function HDMain.DeployMenu_SquadSelectionWidgetBase.DeconstructPlatoon
// 0x0010 (0x0010 - 0x0000)
struct DeployMenu_SquadSelectionWidgetBase_DeconstructPlatoon final 
{
public:
	class UPlatoonListEntry*                      RemovedPlatoonData;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemovedPlatoonIdx;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1152[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DeployMenu_SquadSelectionWidgetBase_DeconstructPlatoon) == 0x000008, "Wrong alignment on DeployMenu_SquadSelectionWidgetBase_DeconstructPlatoon");
//(sizeof(DeployMenu_SquadSelectionWidgetBase_DeconstructPlatoon) == 0x000010, "Wrong size on DeployMenu_SquadSelectionWidgetBase_DeconstructPlatoon");
//(offsetof(DeployMenu_SquadSelectionWidgetBase_DeconstructPlatoon, RemovedPlatoonData) == 0x000000, "Member 'DeployMenu_SquadSelectionWidgetBase_DeconstructPlatoon::RemovedPlatoonData' has a wrong offset!");
//(offsetof(DeployMenu_SquadSelectionWidgetBase_DeconstructPlatoon, RemovedPlatoonIdx) == 0x000008, "Member 'DeployMenu_SquadSelectionWidgetBase_DeconstructPlatoon::RemovedPlatoonIdx' has a wrong offset!");

// Function HDMain.DeployMenu_SquadSelectionWidgetBase.GeneratePlatoon
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_SquadSelectionWidgetBase_GeneratePlatoon final 
{
public:
	class UPlatoonListEntry*                      PlatoonData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadSelectionWidgetBase_GeneratePlatoon) == 0x000008, "Wrong alignment on DeployMenu_SquadSelectionWidgetBase_GeneratePlatoon");
//(sizeof(DeployMenu_SquadSelectionWidgetBase_GeneratePlatoon) == 0x000008, "Wrong size on DeployMenu_SquadSelectionWidgetBase_GeneratePlatoon");
//(offsetof(DeployMenu_SquadSelectionWidgetBase_GeneratePlatoon, PlatoonData) == 0x000000, "Member 'DeployMenu_SquadSelectionWidgetBase_GeneratePlatoon::PlatoonData' has a wrong offset!");

// Function HDMain.DeployMenu_SquadSelectionWidgetBase.PlatoonAddedToTeam
// 0x0010 (0x0010 - 0x0000)
struct DeployMenu_SquadSelectionWidgetBase_PlatoonAddedToTeam final 
{
public:
	class AHDTeamState*                           SourceTeam;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDPlatoonState*                        NewPlatoon;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadSelectionWidgetBase_PlatoonAddedToTeam) == 0x000008, "Wrong alignment on DeployMenu_SquadSelectionWidgetBase_PlatoonAddedToTeam");
//(sizeof(DeployMenu_SquadSelectionWidgetBase_PlatoonAddedToTeam) == 0x000010, "Wrong size on DeployMenu_SquadSelectionWidgetBase_PlatoonAddedToTeam");
//(offsetof(DeployMenu_SquadSelectionWidgetBase_PlatoonAddedToTeam, SourceTeam) == 0x000000, "Member 'DeployMenu_SquadSelectionWidgetBase_PlatoonAddedToTeam::SourceTeam' has a wrong offset!");
//(offsetof(DeployMenu_SquadSelectionWidgetBase_PlatoonAddedToTeam, NewPlatoon) == 0x000008, "Member 'DeployMenu_SquadSelectionWidgetBase_PlatoonAddedToTeam::NewPlatoon' has a wrong offset!");

// Function HDMain.DeployMenu_SquadSelectionWidgetBase.PlatoonPreRemoveFromTeam
// 0x0010 (0x0010 - 0x0000)
struct DeployMenu_SquadSelectionWidgetBase_PlatoonPreRemoveFromTeam final 
{
public:
	class AHDTeamState*                           SourceTeam;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDPlatoonState*                        PlatoonToBeRemoved;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadSelectionWidgetBase_PlatoonPreRemoveFromTeam) == 0x000008, "Wrong alignment on DeployMenu_SquadSelectionWidgetBase_PlatoonPreRemoveFromTeam");
//(sizeof(DeployMenu_SquadSelectionWidgetBase_PlatoonPreRemoveFromTeam) == 0x000010, "Wrong size on DeployMenu_SquadSelectionWidgetBase_PlatoonPreRemoveFromTeam");
//(offsetof(DeployMenu_SquadSelectionWidgetBase_PlatoonPreRemoveFromTeam, SourceTeam) == 0x000000, "Member 'DeployMenu_SquadSelectionWidgetBase_PlatoonPreRemoveFromTeam::SourceTeam' has a wrong offset!");
//(offsetof(DeployMenu_SquadSelectionWidgetBase_PlatoonPreRemoveFromTeam, PlatoonToBeRemoved) == 0x000008, "Member 'DeployMenu_SquadSelectionWidgetBase_PlatoonPreRemoveFromTeam::PlatoonToBeRemoved' has a wrong offset!");

// Function HDMain.DeployMenu_SquadSelectionWidgetBase.SetupSquadSelection
// 0x0008 (0x0008 - 0x0000)
struct DeployMenu_SquadSelectionWidgetBase_SetupSquadSelection final 
{
public:
	class AHDTeamState*                           InPlatoonTeamState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DeployMenu_SquadSelectionWidgetBase_SetupSquadSelection) == 0x000008, "Wrong alignment on DeployMenu_SquadSelectionWidgetBase_SetupSquadSelection");
//(sizeof(DeployMenu_SquadSelectionWidgetBase_SetupSquadSelection) == 0x000008, "Wrong size on DeployMenu_SquadSelectionWidgetBase_SetupSquadSelection");
//(offsetof(DeployMenu_SquadSelectionWidgetBase_SetupSquadSelection, InPlatoonTeamState) == 0x000000, "Member 'DeployMenu_SquadSelectionWidgetBase_SetupSquadSelection::InPlatoonTeamState' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.EstablishNewControlPoint
// 0x0001 (0x0001 - 0x0000)
struct HDAICaptureHandler_EstablishNewControlPoint final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_EstablishNewControlPoint) == 0x000001, "Wrong alignment on HDAICaptureHandler_EstablishNewControlPoint");
//(sizeof(HDAICaptureHandler_EstablishNewControlPoint) == 0x000001, "Wrong size on HDAICaptureHandler_EstablishNewControlPoint");
//(offsetof(HDAICaptureHandler_EstablishNewControlPoint, ReturnValue) == 0x000000, "Member 'HDAICaptureHandler_EstablishNewControlPoint::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.GetCurrentCPLocation
// 0x000C (0x000C - 0x0000)
struct HDAICaptureHandler_GetCurrentCPLocation final 
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_GetCurrentCPLocation) == 0x000004, "Wrong alignment on HDAICaptureHandler_GetCurrentCPLocation");
//(sizeof(HDAICaptureHandler_GetCurrentCPLocation) == 0x00000C, "Wrong size on HDAICaptureHandler_GetCurrentCPLocation");
//(offsetof(HDAICaptureHandler_GetCurrentCPLocation, ReturnValue) == 0x000000, "Member 'HDAICaptureHandler_GetCurrentCPLocation::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.GetTotalNumberOfCapturePoints
// 0x0004 (0x0004 - 0x0000)
struct HDAICaptureHandler_GetTotalNumberOfCapturePoints final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_GetTotalNumberOfCapturePoints) == 0x000004, "Wrong alignment on HDAICaptureHandler_GetTotalNumberOfCapturePoints");
//(sizeof(HDAICaptureHandler_GetTotalNumberOfCapturePoints) == 0x000004, "Wrong size on HDAICaptureHandler_GetTotalNumberOfCapturePoints");
//(offsetof(HDAICaptureHandler_GetTotalNumberOfCapturePoints, ReturnValue) == 0x000000, "Member 'HDAICaptureHandler_GetTotalNumberOfCapturePoints::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.SetCurrentCaptureMode
// 0x0001 (0x0001 - 0x0000)
struct HDAICaptureHandler_SetCurrentCaptureMode final 
{
public:
	EHDAICaptureMode                              NewCaptureMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_SetCurrentCaptureMode) == 0x000001, "Wrong alignment on HDAICaptureHandler_SetCurrentCaptureMode");
//(sizeof(HDAICaptureHandler_SetCurrentCaptureMode) == 0x000001, "Wrong size on HDAICaptureHandler_SetCurrentCaptureMode");
//(offsetof(HDAICaptureHandler_SetCurrentCaptureMode, NewCaptureMode) == 0x000000, "Member 'HDAICaptureHandler_SetCurrentCaptureMode::NewCaptureMode' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.SetCurrentCP
// 0x0008 (0x0008 - 0x0000)
struct HDAICaptureHandler_SetCurrentCP final 
{
public:
	class AHDBaseCapturePoint*                    InCurrentCP;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_SetCurrentCP) == 0x000008, "Wrong alignment on HDAICaptureHandler_SetCurrentCP");
//(sizeof(HDAICaptureHandler_SetCurrentCP) == 0x000008, "Wrong size on HDAICaptureHandler_SetCurrentCP");
//(offsetof(HDAICaptureHandler_SetCurrentCP, InCurrentCP) == 0x000000, "Member 'HDAICaptureHandler_SetCurrentCP::InCurrentCP' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.FindAvailableControlPointsOfType
// 0x0018 (0x0018 - 0x0000)
struct HDAICaptureHandler_FindAvailableControlPointsOfType final 
{
public:
	EHDAICaptureMode                              InCaptureMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1157[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHDBaseCapturePoint*>            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_FindAvailableControlPointsOfType) == 0x000008, "Wrong alignment on HDAICaptureHandler_FindAvailableControlPointsOfType");
//(sizeof(HDAICaptureHandler_FindAvailableControlPointsOfType) == 0x000018, "Wrong size on HDAICaptureHandler_FindAvailableControlPointsOfType");
//(offsetof(HDAICaptureHandler_FindAvailableControlPointsOfType, InCaptureMode) == 0x000000, "Member 'HDAICaptureHandler_FindAvailableControlPointsOfType::InCaptureMode' has a wrong offset!");
//(offsetof(HDAICaptureHandler_FindAvailableControlPointsOfType, ReturnValue) == 0x000008, "Member 'HDAICaptureHandler_FindAvailableControlPointsOfType::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.FindAvailableControlPointsOfTypeV1
// 0x0018 (0x0018 - 0x0000)
struct HDAICaptureHandler_FindAvailableControlPointsOfTypeV1 final 
{
public:
	EHDAICaptureMode                              InCaptureMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1158[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHDBaseCapturePoint*>            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_FindAvailableControlPointsOfTypeV1) == 0x000008, "Wrong alignment on HDAICaptureHandler_FindAvailableControlPointsOfTypeV1");
//(sizeof(HDAICaptureHandler_FindAvailableControlPointsOfTypeV1) == 0x000018, "Wrong size on HDAICaptureHandler_FindAvailableControlPointsOfTypeV1");
//(offsetof(HDAICaptureHandler_FindAvailableControlPointsOfTypeV1, InCaptureMode) == 0x000000, "Member 'HDAICaptureHandler_FindAvailableControlPointsOfTypeV1::InCaptureMode' has a wrong offset!");
//(offsetof(HDAICaptureHandler_FindAvailableControlPointsOfTypeV1, ReturnValue) == 0x000008, "Member 'HDAICaptureHandler_FindAvailableControlPointsOfTypeV1::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.FindAvailableControlPointsOfTypeV2
// 0x0018 (0x0018 - 0x0000)
struct HDAICaptureHandler_FindAvailableControlPointsOfTypeV2 final 
{
public:
	EHDAICaptureMode                              InCaptureMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1159[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHDBaseCapturePoint*>            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_FindAvailableControlPointsOfTypeV2) == 0x000008, "Wrong alignment on HDAICaptureHandler_FindAvailableControlPointsOfTypeV2");
//(sizeof(HDAICaptureHandler_FindAvailableControlPointsOfTypeV2) == 0x000018, "Wrong size on HDAICaptureHandler_FindAvailableControlPointsOfTypeV2");
//(offsetof(HDAICaptureHandler_FindAvailableControlPointsOfTypeV2, InCaptureMode) == 0x000000, "Member 'HDAICaptureHandler_FindAvailableControlPointsOfTypeV2::InCaptureMode' has a wrong offset!");
//(offsetof(HDAICaptureHandler_FindAvailableControlPointsOfTypeV2, ReturnValue) == 0x000008, "Member 'HDAICaptureHandler_FindAvailableControlPointsOfTypeV2::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.FindAvailableControlPointsOfTypeV3
// 0x0018 (0x0018 - 0x0000)
struct HDAICaptureHandler_FindAvailableControlPointsOfTypeV3 final 
{
public:
	EHDAICaptureMode                              InCaptureMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHDBaseCapturePoint*>            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_FindAvailableControlPointsOfTypeV3) == 0x000008, "Wrong alignment on HDAICaptureHandler_FindAvailableControlPointsOfTypeV3");
//(sizeof(HDAICaptureHandler_FindAvailableControlPointsOfTypeV3) == 0x000018, "Wrong size on HDAICaptureHandler_FindAvailableControlPointsOfTypeV3");
//(offsetof(HDAICaptureHandler_FindAvailableControlPointsOfTypeV3, InCaptureMode) == 0x000000, "Member 'HDAICaptureHandler_FindAvailableControlPointsOfTypeV3::InCaptureMode' has a wrong offset!");
//(offsetof(HDAICaptureHandler_FindAvailableControlPointsOfTypeV3, ReturnValue) == 0x000008, "Member 'HDAICaptureHandler_FindAvailableControlPointsOfTypeV3::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.FindControlPointClosestToPawn
// 0x0018 (0x0018 - 0x0000)
struct HDAICaptureHandler_FindControlPointClosestToPawn final 
{
public:
	TArray<class AHDBaseCapturePoint*>            CPs;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDBaseCapturePoint*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_FindControlPointClosestToPawn) == 0x000008, "Wrong alignment on HDAICaptureHandler_FindControlPointClosestToPawn");
//(sizeof(HDAICaptureHandler_FindControlPointClosestToPawn) == 0x000018, "Wrong size on HDAICaptureHandler_FindControlPointClosestToPawn");
//(offsetof(HDAICaptureHandler_FindControlPointClosestToPawn, CPs) == 0x000000, "Member 'HDAICaptureHandler_FindControlPointClosestToPawn::CPs' has a wrong offset!");
//(offsetof(HDAICaptureHandler_FindControlPointClosestToPawn, ReturnValue) == 0x000010, "Member 'HDAICaptureHandler_FindControlPointClosestToPawn::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.FindControlPointRandom
// 0x0018 (0x0018 - 0x0000)
struct HDAICaptureHandler_FindControlPointRandom final 
{
public:
	TArray<class AHDBaseCapturePoint*>            CPs;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDBaseCapturePoint*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_FindControlPointRandom) == 0x000008, "Wrong alignment on HDAICaptureHandler_FindControlPointRandom");
//(sizeof(HDAICaptureHandler_FindControlPointRandom) == 0x000018, "Wrong size on HDAICaptureHandler_FindControlPointRandom");
//(offsetof(HDAICaptureHandler_FindControlPointRandom, CPs) == 0x000000, "Member 'HDAICaptureHandler_FindControlPointRandom::CPs' has a wrong offset!");
//(offsetof(HDAICaptureHandler_FindControlPointRandom, ReturnValue) == 0x000010, "Member 'HDAICaptureHandler_FindControlPointRandom::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.FindControlPointToCapture
// 0x0010 (0x0010 - 0x0000)
struct HDAICaptureHandler_FindControlPointToCapture final 
{
public:
	class AHDBaseCapturePoint*                    OutFoundCP;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAICaptureHandler_FindControlPointToCapture) == 0x000008, "Wrong alignment on HDAICaptureHandler_FindControlPointToCapture");
//(sizeof(HDAICaptureHandler_FindControlPointToCapture) == 0x000010, "Wrong size on HDAICaptureHandler_FindControlPointToCapture");
//(offsetof(HDAICaptureHandler_FindControlPointToCapture, OutFoundCP) == 0x000000, "Member 'HDAICaptureHandler_FindControlPointToCapture::OutFoundCP' has a wrong offset!");
//(offsetof(HDAICaptureHandler_FindControlPointToCapture, ReturnValue) == 0x000008, "Member 'HDAICaptureHandler_FindControlPointToCapture::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.GetStartSpotClosestToControlPoint
// 0x0010 (0x0010 - 0x0000)
struct HDAICaptureHandler_GetStartSpotClosestToControlPoint final 
{
public:
	class AActor*                                 InCapturePoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_GetStartSpotClosestToControlPoint) == 0x000008, "Wrong alignment on HDAICaptureHandler_GetStartSpotClosestToControlPoint");
//(sizeof(HDAICaptureHandler_GetStartSpotClosestToControlPoint) == 0x000010, "Wrong size on HDAICaptureHandler_GetStartSpotClosestToControlPoint");
//(offsetof(HDAICaptureHandler_GetStartSpotClosestToControlPoint, InCapturePoint) == 0x000000, "Member 'HDAICaptureHandler_GetStartSpotClosestToControlPoint::InCapturePoint' has a wrong offset!");
//(offsetof(HDAICaptureHandler_GetStartSpotClosestToControlPoint, ReturnValue) == 0x000008, "Member 'HDAICaptureHandler_GetStartSpotClosestToControlPoint::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICaptureHandler.ShouldEstablishNewControlPoint
// 0x0001 (0x0001 - 0x0000)
struct HDAICaptureHandler_ShouldEstablishNewControlPoint final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICaptureHandler_ShouldEstablishNewControlPoint) == 0x000001, "Wrong alignment on HDAICaptureHandler_ShouldEstablishNewControlPoint");
//(sizeof(HDAICaptureHandler_ShouldEstablishNewControlPoint) == 0x000001, "Wrong size on HDAICaptureHandler_ShouldEstablishNewControlPoint");
//(offsetof(HDAICaptureHandler_ShouldEstablishNewControlPoint, ReturnValue) == 0x000000, "Member 'HDAICaptureHandler_ShouldEstablishNewControlPoint::ReturnValue' has a wrong offset!");

// Function HDMain.HDSQCommChannelState.GetChannelNameForSquad
// 0x0010 (0x0010 - 0x0000)
struct HDSQCommChannelState_GetChannelNameForSquad final 
{
public:
	class AHDSquadState*                          Squad;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDSQCommChannelState_GetChannelNameForSquad) == 0x000008, "Wrong alignment on HDSQCommChannelState_GetChannelNameForSquad");
//(sizeof(HDSQCommChannelState_GetChannelNameForSquad) == 0x000010, "Wrong size on HDSQCommChannelState_GetChannelNameForSquad");
//(offsetof(HDSQCommChannelState_GetChannelNameForSquad, Squad) == 0x000000, "Member 'HDSQCommChannelState_GetChannelNameForSquad::Squad' has a wrong offset!");
//(offsetof(HDSQCommChannelState_GetChannelNameForSquad, ReturnValue) == 0x000008, "Member 'HDSQCommChannelState_GetChannelNameForSquad::ReturnValue' has a wrong offset!");

// Function HDMain.HDSQCommChannelState.SetupSQChannelState
// 0x0008 (0x0008 - 0x0000)
struct HDSQCommChannelState_SetupSQChannelState final 
{
public:
	class AHDSquadState*                          ForSquadState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDSQCommChannelState_SetupSQChannelState) == 0x000008, "Wrong alignment on HDSQCommChannelState_SetupSQChannelState");
//(sizeof(HDSQCommChannelState_SetupSQChannelState) == 0x000008, "Wrong size on HDSQCommChannelState_SetupSQChannelState");
//(offsetof(HDSQCommChannelState_SetupSQChannelState, ForSquadState) == 0x000000, "Member 'HDSQCommChannelState_SetupSQChannelState::ForSquadState' has a wrong offset!");

// Function HDMain.HDAIAimingHandler.CheckForTarget
// 0x0048 (0x0048 - 0x0000)
struct HDAIAimingHandler_CheckForTarget final 
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x003C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1163[0x3];                                     // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAIAimingHandler_CheckForTarget) == 0x000008, "Wrong alignment on HDAIAimingHandler_CheckForTarget");
//(sizeof(HDAIAimingHandler_CheckForTarget) == 0x000048, "Wrong size on HDAIAimingHandler_CheckForTarget");
//(offsetof(HDAIAimingHandler_CheckForTarget, TargetActor) == 0x000000, "Member 'HDAIAimingHandler_CheckForTarget::TargetActor' has a wrong offset!");
//(offsetof(HDAIAimingHandler_CheckForTarget, Stimulus) == 0x000008, "Member 'HDAIAimingHandler_CheckForTarget::Stimulus' has a wrong offset!");
//(offsetof(HDAIAimingHandler_CheckForTarget, ReturnValue) == 0x000044, "Member 'HDAIAimingHandler_CheckForTarget::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIAimingHandler.EstablishNewTargetFromPerception
// 0x0008 (0x0008 - 0x0000)
struct HDAIAimingHandler_EstablishNewTargetFromPerception final 
{
public:
	TSubclassOf<class UAISense>                   SenseToUse;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIAimingHandler_EstablishNewTargetFromPerception) == 0x000008, "Wrong alignment on HDAIAimingHandler_EstablishNewTargetFromPerception");
//(sizeof(HDAIAimingHandler_EstablishNewTargetFromPerception) == 0x000008, "Wrong size on HDAIAimingHandler_EstablishNewTargetFromPerception");
//(offsetof(HDAIAimingHandler_EstablishNewTargetFromPerception, SenseToUse) == 0x000000, "Member 'HDAIAimingHandler_EstablishNewTargetFromPerception::SenseToUse' has a wrong offset!");

// Function HDMain.HDAIAimingHandler.SetEnableNoEnemyLookAround
// 0x0001 (0x0001 - 0x0000)
struct HDAIAimingHandler_SetEnableNoEnemyLookAround final 
{
public:
	bool                                          bInEnableNoEnemyLookAround;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIAimingHandler_SetEnableNoEnemyLookAround) == 0x000001, "Wrong alignment on HDAIAimingHandler_SetEnableNoEnemyLookAround");
//(sizeof(HDAIAimingHandler_SetEnableNoEnemyLookAround) == 0x000001, "Wrong size on HDAIAimingHandler_SetEnableNoEnemyLookAround");
//(offsetof(HDAIAimingHandler_SetEnableNoEnemyLookAround, bInEnableNoEnemyLookAround) == 0x000000, "Member 'HDAIAimingHandler_SetEnableNoEnemyLookAround::bInEnableNoEnemyLookAround' has a wrong offset!");

// Function HDMain.HDAIAimingHandler.ShouldChangeNoEnemyFocalPoint
// 0x0001 (0x0001 - 0x0000)
struct HDAIAimingHandler_ShouldChangeNoEnemyFocalPoint final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIAimingHandler_ShouldChangeNoEnemyFocalPoint) == 0x000001, "Wrong alignment on HDAIAimingHandler_ShouldChangeNoEnemyFocalPoint");
//(sizeof(HDAIAimingHandler_ShouldChangeNoEnemyFocalPoint) == 0x000001, "Wrong size on HDAIAimingHandler_ShouldChangeNoEnemyFocalPoint");
//(offsetof(HDAIAimingHandler_ShouldChangeNoEnemyFocalPoint, ReturnValue) == 0x000000, "Member 'HDAIAimingHandler_ShouldChangeNoEnemyFocalPoint::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIAimingHandler.SuggestProjectileVelocity
// 0x002C (0x002C - 0x0000)
struct HDAIAimingHandler_SuggestProjectileVelocity final 
{
public:
	struct FVector                                TossVelocity;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TossSpeed;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1164[0x3];                                     // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAIAimingHandler_SuggestProjectileVelocity) == 0x000004, "Wrong alignment on HDAIAimingHandler_SuggestProjectileVelocity");
//(sizeof(HDAIAimingHandler_SuggestProjectileVelocity) == 0x00002C, "Wrong size on HDAIAimingHandler_SuggestProjectileVelocity");
//(offsetof(HDAIAimingHandler_SuggestProjectileVelocity, TossVelocity) == 0x000000, "Member 'HDAIAimingHandler_SuggestProjectileVelocity::TossVelocity' has a wrong offset!");
//(offsetof(HDAIAimingHandler_SuggestProjectileVelocity, StartLocation) == 0x00000C, "Member 'HDAIAimingHandler_SuggestProjectileVelocity::StartLocation' has a wrong offset!");
//(offsetof(HDAIAimingHandler_SuggestProjectileVelocity, EndLocation) == 0x000018, "Member 'HDAIAimingHandler_SuggestProjectileVelocity::EndLocation' has a wrong offset!");
//(offsetof(HDAIAimingHandler_SuggestProjectileVelocity, TossSpeed) == 0x000024, "Member 'HDAIAimingHandler_SuggestProjectileVelocity::TossSpeed' has a wrong offset!");
//(offsetof(HDAIAimingHandler_SuggestProjectileVelocity, ReturnValue) == 0x000028, "Member 'HDAIAimingHandler_SuggestProjectileVelocity::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIAimingHandler.GetActorStimulusData
// 0x0020 (0x0020 - 0x0000)
struct HDAIAimingHandler_GetActorStimulusData final 
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutStrength;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutAge;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1165[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAIAimingHandler_GetActorStimulusData) == 0x000008, "Wrong alignment on HDAIAimingHandler_GetActorStimulusData");
//(sizeof(HDAIAimingHandler_GetActorStimulusData) == 0x000020, "Wrong size on HDAIAimingHandler_GetActorStimulusData");
//(offsetof(HDAIAimingHandler_GetActorStimulusData, InActor) == 0x000000, "Member 'HDAIAimingHandler_GetActorStimulusData::InActor' has a wrong offset!");
//(offsetof(HDAIAimingHandler_GetActorStimulusData, OutLocation) == 0x000008, "Member 'HDAIAimingHandler_GetActorStimulusData::OutLocation' has a wrong offset!");
//(offsetof(HDAIAimingHandler_GetActorStimulusData, OutStrength) == 0x000014, "Member 'HDAIAimingHandler_GetActorStimulusData::OutStrength' has a wrong offset!");
//(offsetof(HDAIAimingHandler_GetActorStimulusData, OutAge) == 0x000018, "Member 'HDAIAimingHandler_GetActorStimulusData::OutAge' has a wrong offset!");

// Function HDMain.HDAIAimingHandler.GetEnableNoEnemyLookAround
// 0x0001 (0x0001 - 0x0000)
struct HDAIAimingHandler_GetEnableNoEnemyLookAround final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIAimingHandler_GetEnableNoEnemyLookAround) == 0x000001, "Wrong alignment on HDAIAimingHandler_GetEnableNoEnemyLookAround");
//(sizeof(HDAIAimingHandler_GetEnableNoEnemyLookAround) == 0x000001, "Wrong size on HDAIAimingHandler_GetEnableNoEnemyLookAround");
//(offsetof(HDAIAimingHandler_GetEnableNoEnemyLookAround, ReturnValue) == 0x000000, "Member 'HDAIAimingHandler_GetEnableNoEnemyLookAround::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIAimingHandler.GetIsNewTargetMoreRelevant
// 0x000C (0x000C - 0x0000)
struct HDAIAimingHandler_GetIsNewTargetMoreRelevant final 
{
public:
	float                                         OldTargetStrength;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewTargetStrength;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1166[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAIAimingHandler_GetIsNewTargetMoreRelevant) == 0x000004, "Wrong alignment on HDAIAimingHandler_GetIsNewTargetMoreRelevant");
//(sizeof(HDAIAimingHandler_GetIsNewTargetMoreRelevant) == 0x00000C, "Wrong size on HDAIAimingHandler_GetIsNewTargetMoreRelevant");
//(offsetof(HDAIAimingHandler_GetIsNewTargetMoreRelevant, OldTargetStrength) == 0x000000, "Member 'HDAIAimingHandler_GetIsNewTargetMoreRelevant::OldTargetStrength' has a wrong offset!");
//(offsetof(HDAIAimingHandler_GetIsNewTargetMoreRelevant, NewTargetStrength) == 0x000004, "Member 'HDAIAimingHandler_GetIsNewTargetMoreRelevant::NewTargetStrength' has a wrong offset!");
//(offsetof(HDAIAimingHandler_GetIsNewTargetMoreRelevant, ReturnValue) == 0x000008, "Member 'HDAIAimingHandler_GetIsNewTargetMoreRelevant::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIAimingHandler.GetNoEnemyFocalPoint
// 0x000C (0x000C - 0x0000)
struct HDAIAimingHandler_GetNoEnemyFocalPoint final 
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIAimingHandler_GetNoEnemyFocalPoint) == 0x000004, "Wrong alignment on HDAIAimingHandler_GetNoEnemyFocalPoint");
//(sizeof(HDAIAimingHandler_GetNoEnemyFocalPoint) == 0x00000C, "Wrong size on HDAIAimingHandler_GetNoEnemyFocalPoint");
//(offsetof(HDAIAimingHandler_GetNoEnemyFocalPoint, ReturnValue) == 0x000000, "Member 'HDAIAimingHandler_GetNoEnemyFocalPoint::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIAimingHandler.HasValidCustomAimingTarget
// 0x0001 (0x0001 - 0x0000)
struct HDAIAimingHandler_HasValidCustomAimingTarget final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIAimingHandler_HasValidCustomAimingTarget) == 0x000001, "Wrong alignment on HDAIAimingHandler_HasValidCustomAimingTarget");
//(sizeof(HDAIAimingHandler_HasValidCustomAimingTarget) == 0x000001, "Wrong size on HDAIAimingHandler_HasValidCustomAimingTarget");
//(offsetof(HDAIAimingHandler_HasValidCustomAimingTarget, ReturnValue) == 0x000000, "Member 'HDAIAimingHandler_HasValidCustomAimingTarget::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIAimingHandler.IsAimingAtTarget
// 0x0001 (0x0001 - 0x0000)
struct HDAIAimingHandler_IsAimingAtTarget final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIAimingHandler_IsAimingAtTarget) == 0x000001, "Wrong alignment on HDAIAimingHandler_IsAimingAtTarget");
//(sizeof(HDAIAimingHandler_IsAimingAtTarget) == 0x000001, "Wrong size on HDAIAimingHandler_IsAimingAtTarget");
//(offsetof(HDAIAimingHandler_IsAimingAtTarget, ReturnValue) == 0x000000, "Member 'HDAIAimingHandler_IsAimingAtTarget::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIAimingHandler.IsCandidateTarget
// 0x0010 (0x0010 - 0x0000)
struct HDAIAimingHandler_IsCandidateTarget final 
{
public:
	class AActor*                                 ActorToCheck;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1167[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAIAimingHandler_IsCandidateTarget) == 0x000008, "Wrong alignment on HDAIAimingHandler_IsCandidateTarget");
//(sizeof(HDAIAimingHandler_IsCandidateTarget) == 0x000010, "Wrong size on HDAIAimingHandler_IsCandidateTarget");
//(offsetof(HDAIAimingHandler_IsCandidateTarget, ActorToCheck) == 0x000000, "Member 'HDAIAimingHandler_IsCandidateTarget::ActorToCheck' has a wrong offset!");
//(offsetof(HDAIAimingHandler_IsCandidateTarget, ReturnValue) == 0x000008, "Member 'HDAIAimingHandler_IsCandidateTarget::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIBehaviorStateBase.CanEnterState
// 0x0001 (0x0001 - 0x0000)
struct HDAIBehaviorStateBase_CanEnterState final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorStateBase_CanEnterState) == 0x000001, "Wrong alignment on HDAIBehaviorStateBase_CanEnterState");
//(sizeof(HDAIBehaviorStateBase_CanEnterState) == 0x000001, "Wrong size on HDAIBehaviorStateBase_CanEnterState");
//(offsetof(HDAIBehaviorStateBase_CanEnterState, ReturnValue) == 0x000000, "Member 'HDAIBehaviorStateBase_CanEnterState::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIBehaviorStateBase.CanExitState
// 0x0001 (0x0001 - 0x0000)
struct HDAIBehaviorStateBase_CanExitState final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorStateBase_CanExitState) == 0x000001, "Wrong alignment on HDAIBehaviorStateBase_CanExitState");
//(sizeof(HDAIBehaviorStateBase_CanExitState) == 0x000001, "Wrong size on HDAIBehaviorStateBase_CanExitState");
//(offsetof(HDAIBehaviorStateBase_CanExitState, ReturnValue) == 0x000000, "Member 'HDAIBehaviorStateBase_CanExitState::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIBehaviorStateBase.CanUpdateState
// 0x0008 (0x0008 - 0x0000)
struct HDAIBehaviorStateBase_CanUpdateState final 
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116A[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAIBehaviorStateBase_CanUpdateState) == 0x000004, "Wrong alignment on HDAIBehaviorStateBase_CanUpdateState");
//(sizeof(HDAIBehaviorStateBase_CanUpdateState) == 0x000008, "Wrong size on HDAIBehaviorStateBase_CanUpdateState");
//(offsetof(HDAIBehaviorStateBase_CanUpdateState, DeltaTime) == 0x000000, "Member 'HDAIBehaviorStateBase_CanUpdateState::DeltaTime' has a wrong offset!");
//(offsetof(HDAIBehaviorStateBase_CanUpdateState, ReturnValue) == 0x000004, "Member 'HDAIBehaviorStateBase_CanUpdateState::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIBehaviorStateBase.ExitCurrentSubState
// 0x0001 (0x0001 - 0x0000)
struct HDAIBehaviorStateBase_ExitCurrentSubState final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorStateBase_ExitCurrentSubState) == 0x000001, "Wrong alignment on HDAIBehaviorStateBase_ExitCurrentSubState");
//(sizeof(HDAIBehaviorStateBase_ExitCurrentSubState) == 0x000001, "Wrong size on HDAIBehaviorStateBase_ExitCurrentSubState");
//(offsetof(HDAIBehaviorStateBase_ExitCurrentSubState, ReturnValue) == 0x000000, "Member 'HDAIBehaviorStateBase_ExitCurrentSubState::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIBehaviorStateBase.Init
// 0x0018 (0x0018 - 0x0000)
struct HDAIBehaviorStateBase_Init final 
{
public:
	class AHDAIController*                        InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHDGOAPComponent*                       InGOAPComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHDAIBehaviorStateBase*                 InParentState;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorStateBase_Init) == 0x000008, "Wrong alignment on HDAIBehaviorStateBase_Init");
//(sizeof(HDAIBehaviorStateBase_Init) == 0x000018, "Wrong size on HDAIBehaviorStateBase_Init");
//(offsetof(HDAIBehaviorStateBase_Init, InController) == 0x000000, "Member 'HDAIBehaviorStateBase_Init::InController' has a wrong offset!");
//(offsetof(HDAIBehaviorStateBase_Init, InGOAPComponent) == 0x000008, "Member 'HDAIBehaviorStateBase_Init::InGOAPComponent' has a wrong offset!");
//(offsetof(HDAIBehaviorStateBase_Init, InParentState) == 0x000010, "Member 'HDAIBehaviorStateBase_Init::InParentState' has a wrong offset!");

// Function HDMain.HDAIBehaviorStateBase.ResetUpdateTimer
// 0x0004 (0x0004 - 0x0000)
struct HDAIBehaviorStateBase_ResetUpdateTimer final 
{
public:
	float                                         InTimerInterval;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorStateBase_ResetUpdateTimer) == 0x000004, "Wrong alignment on HDAIBehaviorStateBase_ResetUpdateTimer");
//(sizeof(HDAIBehaviorStateBase_ResetUpdateTimer) == 0x000004, "Wrong size on HDAIBehaviorStateBase_ResetUpdateTimer");
//(offsetof(HDAIBehaviorStateBase_ResetUpdateTimer, InTimerInterval) == 0x000000, "Member 'HDAIBehaviorStateBase_ResetUpdateTimer::InTimerInterval' has a wrong offset!");

// Function HDMain.HDAIBehaviorStateBase.SwitchToSubState
// 0x0010 (0x0010 - 0x0000)
struct HDAIBehaviorStateBase_SwitchToSubState final 
{
public:
	class UHDAIBehaviorStateBase*                 InNewState;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAIBehaviorStateBase_SwitchToSubState) == 0x000008, "Wrong alignment on HDAIBehaviorStateBase_SwitchToSubState");
//(sizeof(HDAIBehaviorStateBase_SwitchToSubState) == 0x000010, "Wrong size on HDAIBehaviorStateBase_SwitchToSubState");
//(offsetof(HDAIBehaviorStateBase_SwitchToSubState, InNewState) == 0x000000, "Member 'HDAIBehaviorStateBase_SwitchToSubState::InNewState' has a wrong offset!");
//(offsetof(HDAIBehaviorStateBase_SwitchToSubState, ReturnValue) == 0x000008, "Member 'HDAIBehaviorStateBase_SwitchToSubState::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIBehaviorStateBase.UpdateCurrentSubState
// 0x0008 (0x0008 - 0x0000)
struct HDAIBehaviorStateBase_UpdateCurrentSubState final 
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116C[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAIBehaviorStateBase_UpdateCurrentSubState) == 0x000004, "Wrong alignment on HDAIBehaviorStateBase_UpdateCurrentSubState");
//(sizeof(HDAIBehaviorStateBase_UpdateCurrentSubState) == 0x000008, "Wrong size on HDAIBehaviorStateBase_UpdateCurrentSubState");
//(offsetof(HDAIBehaviorStateBase_UpdateCurrentSubState, DeltaTime) == 0x000000, "Member 'HDAIBehaviorStateBase_UpdateCurrentSubState::DeltaTime' has a wrong offset!");
//(offsetof(HDAIBehaviorStateBase_UpdateCurrentSubState, ReturnValue) == 0x000004, "Member 'HDAIBehaviorStateBase_UpdateCurrentSubState::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIBehaviorStateBase.UpdateState
// 0x0004 (0x0004 - 0x0000)
struct HDAIBehaviorStateBase_UpdateState final 
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorStateBase_UpdateState) == 0x000004, "Wrong alignment on HDAIBehaviorStateBase_UpdateState");
//(sizeof(HDAIBehaviorStateBase_UpdateState) == 0x000004, "Wrong size on HDAIBehaviorStateBase_UpdateState");
//(offsetof(HDAIBehaviorStateBase_UpdateState, DeltaTime) == 0x000000, "Member 'HDAIBehaviorStateBase_UpdateState::DeltaTime' has a wrong offset!");

// Function HDMain.HDAIBehState_BasicAASCombat.HandleExitCombatStateTimer
// 0x0001 (0x0001 - 0x0000)
struct HDAIBehState_BasicAASCombat_HandleExitCombatStateTimer final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehState_BasicAASCombat_HandleExitCombatStateTimer) == 0x000001, "Wrong alignment on HDAIBehState_BasicAASCombat_HandleExitCombatStateTimer");
//(sizeof(HDAIBehState_BasicAASCombat_HandleExitCombatStateTimer) == 0x000001, "Wrong size on HDAIBehState_BasicAASCombat_HandleExitCombatStateTimer");
//(offsetof(HDAIBehState_BasicAASCombat_HandleExitCombatStateTimer, ReturnValue) == 0x000000, "Member 'HDAIBehState_BasicAASCombat_HandleExitCombatStateTimer::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIBehState_BasicAASCombat.IsValidAttackSpot
// 0x0010 (0x0010 - 0x0000)
struct HDAIBehState_BasicAASCombat_IsValidAttackSpot final 
{
public:
	struct FVector                                InAttackSpot;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116F[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAIBehState_BasicAASCombat_IsValidAttackSpot) == 0x000004, "Wrong alignment on HDAIBehState_BasicAASCombat_IsValidAttackSpot");
//(sizeof(HDAIBehState_BasicAASCombat_IsValidAttackSpot) == 0x000010, "Wrong size on HDAIBehState_BasicAASCombat_IsValidAttackSpot");
//(offsetof(HDAIBehState_BasicAASCombat_IsValidAttackSpot, InAttackSpot) == 0x000000, "Member 'HDAIBehState_BasicAASCombat_IsValidAttackSpot::InAttackSpot' has a wrong offset!");
//(offsetof(HDAIBehState_BasicAASCombat_IsValidAttackSpot, ReturnValue) == 0x00000C, "Member 'HDAIBehState_BasicAASCombat_IsValidAttackSpot::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIBehState_BasicAASCombat.IsValidSafeSpot
// 0x0010 (0x0010 - 0x0000)
struct HDAIBehState_BasicAASCombat_IsValidSafeSpot final 
{
public:
	struct FVector                                InSafeSpot;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1170[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAIBehState_BasicAASCombat_IsValidSafeSpot) == 0x000004, "Wrong alignment on HDAIBehState_BasicAASCombat_IsValidSafeSpot");
//(sizeof(HDAIBehState_BasicAASCombat_IsValidSafeSpot) == 0x000010, "Wrong size on HDAIBehState_BasicAASCombat_IsValidSafeSpot");
//(offsetof(HDAIBehState_BasicAASCombat_IsValidSafeSpot, InSafeSpot) == 0x000000, "Member 'HDAIBehState_BasicAASCombat_IsValidSafeSpot::InSafeSpot' has a wrong offset!");
//(offsetof(HDAIBehState_BasicAASCombat_IsValidSafeSpot, ReturnValue) == 0x00000C, "Member 'HDAIBehState_BasicAASCombat_IsValidSafeSpot::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIBehState_BasicAASCombat.StartCombatRepositioning
// 0x000C (0x000C - 0x0000)
struct HDAIBehState_BasicAASCombat_StartCombatRepositioning final 
{
public:
	struct FVector                                InMoveTarget;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehState_BasicAASCombat_StartCombatRepositioning) == 0x000004, "Wrong alignment on HDAIBehState_BasicAASCombat_StartCombatRepositioning");
//(sizeof(HDAIBehState_BasicAASCombat_StartCombatRepositioning) == 0x00000C, "Wrong size on HDAIBehState_BasicAASCombat_StartCombatRepositioning");
//(offsetof(HDAIBehState_BasicAASCombat_StartCombatRepositioning, InMoveTarget) == 0x000000, "Member 'HDAIBehState_BasicAASCombat_StartCombatRepositioning::InMoveTarget' has a wrong offset!");

// Function HDMain.HDURLStatics.GetDisableKitRestrictionsOptionName
// 0x0010 (0x0010 - 0x0000)
struct HDURLStatics_GetDisableKitRestrictionsOptionName final 
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDURLStatics_GetDisableKitRestrictionsOptionName) == 0x000008, "Wrong alignment on HDURLStatics_GetDisableKitRestrictionsOptionName");
//(sizeof(HDURLStatics_GetDisableKitRestrictionsOptionName) == 0x000010, "Wrong size on HDURLStatics_GetDisableKitRestrictionsOptionName");
//(offsetof(HDURLStatics_GetDisableKitRestrictionsOptionName, ReturnValue) == 0x000000, "Member 'HDURLStatics_GetDisableKitRestrictionsOptionName::ReturnValue' has a wrong offset!");

// Function HDMain.HDURLStatics.GetFactionOptionName
// 0x0018 (0x0018 - 0x0000)
struct HDURLStatics_GetFactionOptionName final 
{
public:
	EHDTeam                                       Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1171[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDURLStatics_GetFactionOptionName) == 0x000008, "Wrong alignment on HDURLStatics_GetFactionOptionName");
//(sizeof(HDURLStatics_GetFactionOptionName) == 0x000018, "Wrong size on HDURLStatics_GetFactionOptionName");
//(offsetof(HDURLStatics_GetFactionOptionName, Team) == 0x000000, "Member 'HDURLStatics_GetFactionOptionName::Team' has a wrong offset!");
//(offsetof(HDURLStatics_GetFactionOptionName, ReturnValue) == 0x000008, "Member 'HDURLStatics_GetFactionOptionName::ReturnValue' has a wrong offset!");

// Function HDMain.HDURLStatics.GetNumBotsOptionName
// 0x0018 (0x0018 - 0x0000)
struct HDURLStatics_GetNumBotsOptionName final 
{
public:
	EHDTeam                                       Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1172[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDURLStatics_GetNumBotsOptionName) == 0x000008, "Wrong alignment on HDURLStatics_GetNumBotsOptionName");
//(sizeof(HDURLStatics_GetNumBotsOptionName) == 0x000018, "Wrong size on HDURLStatics_GetNumBotsOptionName");
//(offsetof(HDURLStatics_GetNumBotsOptionName, Team) == 0x000000, "Member 'HDURLStatics_GetNumBotsOptionName::Team' has a wrong offset!");
//(offsetof(HDURLStatics_GetNumBotsOptionName, ReturnValue) == 0x000008, "Member 'HDURLStatics_GetNumBotsOptionName::ReturnValue' has a wrong offset!");

// Function HDMain.HDURLStatics.GetNumTicketsOptionName
// 0x0018 (0x0018 - 0x0000)
struct HDURLStatics_GetNumTicketsOptionName final 
{
public:
	EHDTeam                                       Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1173[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDURLStatics_GetNumTicketsOptionName) == 0x000008, "Wrong alignment on HDURLStatics_GetNumTicketsOptionName");
//(sizeof(HDURLStatics_GetNumTicketsOptionName) == 0x000018, "Wrong size on HDURLStatics_GetNumTicketsOptionName");
//(offsetof(HDURLStatics_GetNumTicketsOptionName, Team) == 0x000000, "Member 'HDURLStatics_GetNumTicketsOptionName::Team' has a wrong offset!");
//(offsetof(HDURLStatics_GetNumTicketsOptionName, ReturnValue) == 0x000008, "Member 'HDURLStatics_GetNumTicketsOptionName::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIBehaviorHandler.HandleBehaviorStates
// 0x0004 (0x0004 - 0x0000)
struct HDAIBehaviorHandler_HandleBehaviorStates final 
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorHandler_HandleBehaviorStates) == 0x000004, "Wrong alignment on HDAIBehaviorHandler_HandleBehaviorStates");
//(sizeof(HDAIBehaviorHandler_HandleBehaviorStates) == 0x000004, "Wrong size on HDAIBehaviorHandler_HandleBehaviorStates");
//(offsetof(HDAIBehaviorHandler_HandleBehaviorStates, DeltaTime) == 0x000000, "Member 'HDAIBehaviorHandler_HandleBehaviorStates::DeltaTime' has a wrong offset!");

// Function HDMain.HDAIBehaviorHandler.OnOwnerDeath
// 0x0038 (0x0038 - 0x0000)
struct HDAIBehaviorHandler_OnOwnerDeath final 
{
public:
	class APawn*                                  VictimPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            VictimController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillingDamage;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1177[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class APawn*                                  InstigatingPawn;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorHandler_OnOwnerDeath) == 0x000008, "Wrong alignment on HDAIBehaviorHandler_OnOwnerDeath");
//(sizeof(HDAIBehaviorHandler_OnOwnerDeath) == 0x000038, "Wrong size on HDAIBehaviorHandler_OnOwnerDeath");
//(offsetof(HDAIBehaviorHandler_OnOwnerDeath, VictimPawn) == 0x000000, "Member 'HDAIBehaviorHandler_OnOwnerDeath::VictimPawn' has a wrong offset!");
//(offsetof(HDAIBehaviorHandler_OnOwnerDeath, VictimController) == 0x000008, "Member 'HDAIBehaviorHandler_OnOwnerDeath::VictimController' has a wrong offset!");
//(offsetof(HDAIBehaviorHandler_OnOwnerDeath, KillingDamage) == 0x000010, "Member 'HDAIBehaviorHandler_OnOwnerDeath::KillingDamage' has a wrong offset!");
//(offsetof(HDAIBehaviorHandler_OnOwnerDeath, DamageEvent) == 0x000018, "Member 'HDAIBehaviorHandler_OnOwnerDeath::DamageEvent' has a wrong offset!");
//(offsetof(HDAIBehaviorHandler_OnOwnerDeath, InstigatingPawn) == 0x000028, "Member 'HDAIBehaviorHandler_OnOwnerDeath::InstigatingPawn' has a wrong offset!");
//(offsetof(HDAIBehaviorHandler_OnOwnerDeath, DamageCauser) == 0x000030, "Member 'HDAIBehaviorHandler_OnOwnerDeath::DamageCauser' has a wrong offset!");

// Function HDMain.HDAIBehaviorHandler.StartCombatBehaviorState
// 0x0018 (0x0018 - 0x0000)
struct HDAIBehaviorHandler_StartCombatBehaviorState final 
{
public:
	struct FVector                                InCombatTarget;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InNavigationAnchor;                                // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorHandler_StartCombatBehaviorState) == 0x000004, "Wrong alignment on HDAIBehaviorHandler_StartCombatBehaviorState");
//(sizeof(HDAIBehaviorHandler_StartCombatBehaviorState) == 0x000018, "Wrong size on HDAIBehaviorHandler_StartCombatBehaviorState");
//(offsetof(HDAIBehaviorHandler_StartCombatBehaviorState, InCombatTarget) == 0x000000, "Member 'HDAIBehaviorHandler_StartCombatBehaviorState::InCombatTarget' has a wrong offset!");
//(offsetof(HDAIBehaviorHandler_StartCombatBehaviorState, InNavigationAnchor) == 0x00000C, "Member 'HDAIBehaviorHandler_StartCombatBehaviorState::InNavigationAnchor' has a wrong offset!");

// Function HDMain.HDAIBehaviorHandler.StartCombatRepositioning
// 0x000C (0x000C - 0x0000)
struct HDAIBehaviorHandler_StartCombatRepositioning final 
{
public:
	struct FVector                                InMoveTarget;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorHandler_StartCombatRepositioning) == 0x000004, "Wrong alignment on HDAIBehaviorHandler_StartCombatRepositioning");
//(sizeof(HDAIBehaviorHandler_StartCombatRepositioning) == 0x00000C, "Wrong size on HDAIBehaviorHandler_StartCombatRepositioning");
//(offsetof(HDAIBehaviorHandler_StartCombatRepositioning, InMoveTarget) == 0x000000, "Member 'HDAIBehaviorHandler_StartCombatRepositioning::InMoveTarget' has a wrong offset!");

// Function HDMain.HDAIBehaviorHandler.UpdateCurrentBehaviorState
// 0x0004 (0x0004 - 0x0000)
struct HDAIBehaviorHandler_UpdateCurrentBehaviorState final 
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorHandler_UpdateCurrentBehaviorState) == 0x000004, "Wrong alignment on HDAIBehaviorHandler_UpdateCurrentBehaviorState");
//(sizeof(HDAIBehaviorHandler_UpdateCurrentBehaviorState) == 0x000004, "Wrong size on HDAIBehaviorHandler_UpdateCurrentBehaviorState");
//(offsetof(HDAIBehaviorHandler_UpdateCurrentBehaviorState, DeltaTime) == 0x000000, "Member 'HDAIBehaviorHandler_UpdateCurrentBehaviorState::DeltaTime' has a wrong offset!");

// Function HDMain.HDAIBehaviorHandler.GetIsBeingHit
// 0x0001 (0x0001 - 0x0000)
struct HDAIBehaviorHandler_GetIsBeingHit final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorHandler_GetIsBeingHit) == 0x000001, "Wrong alignment on HDAIBehaviorHandler_GetIsBeingHit");
//(sizeof(HDAIBehaviorHandler_GetIsBeingHit) == 0x000001, "Wrong size on HDAIBehaviorHandler_GetIsBeingHit");
//(offsetof(HDAIBehaviorHandler_GetIsBeingHit, ReturnValue) == 0x000000, "Member 'HDAIBehaviorHandler_GetIsBeingHit::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIBehaviorHandler.GetIsUnderSuppression
// 0x0001 (0x0001 - 0x0000)
struct HDAIBehaviorHandler_GetIsUnderSuppression final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehaviorHandler_GetIsUnderSuppression) == 0x000001, "Wrong alignment on HDAIBehaviorHandler_GetIsUnderSuppression");
//(sizeof(HDAIBehaviorHandler_GetIsUnderSuppression) == 0x000001, "Wrong size on HDAIBehaviorHandler_GetIsUnderSuppression");
//(offsetof(HDAIBehaviorHandler_GetIsUnderSuppression, ReturnValue) == 0x000000, "Member 'HDAIBehaviorHandler_GetIsUnderSuppression::ReturnValue' has a wrong offset!");

// Function HDMain.HDServerListView.SetItemFilterRules
// 0x0050 (0x0050 - 0x0000)
struct HDServerListView_SetItemFilterRules final 
{
public:
	TMap<TSubclassOf<class UHDServerListFilterRule>, struct FHDFilterRuleParams> FilterRules;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(HDServerListView_SetItemFilterRules) == 0x000008, "Wrong alignment on HDServerListView_SetItemFilterRules");
//(sizeof(HDServerListView_SetItemFilterRules) == 0x000050, "Wrong size on HDServerListView_SetItemFilterRules");
//(offsetof(HDServerListView_SetItemFilterRules, FilterRules) == 0x000000, "Member 'HDServerListView_SetItemFilterRules::FilterRules' has a wrong offset!");

// Function HDMain.HDServerListView.SetItemSortAscending
// 0x0001 (0x0001 - 0x0000)
struct HDServerListView_SetItemSortAscending final 
{
public:
	bool                                          bSortAscending;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDServerListView_SetItemSortAscending) == 0x000001, "Wrong alignment on HDServerListView_SetItemSortAscending");
//(sizeof(HDServerListView_SetItemSortAscending) == 0x000001, "Wrong size on HDServerListView_SetItemSortAscending");
//(offsetof(HDServerListView_SetItemSortAscending, bSortAscending) == 0x000000, "Member 'HDServerListView_SetItemSortAscending::bSortAscending' has a wrong offset!");

// Function HDMain.HDServerListView.SetItemSortBy
// 0x0001 (0x0001 - 0x0000)
struct HDServerListView_SetItemSortBy final 
{
public:
	EHDServerListSortBy                           SortBy;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDServerListView_SetItemSortBy) == 0x000001, "Wrong alignment on HDServerListView_SetItemSortBy");
//(sizeof(HDServerListView_SetItemSortBy) == 0x000001, "Wrong size on HDServerListView_SetItemSortBy");
//(offsetof(HDServerListView_SetItemSortBy, SortBy) == 0x000000, "Member 'HDServerListView_SetItemSortBy::SortBy' has a wrong offset!");

// Function HDMain.HDServerListView.SortListItems
// 0x0002 (0x0002 - 0x0000)
struct HDServerListView_SortListItems final 
{
public:
	bool                                          bSortAscending;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDServerListSortBy                           SortBy;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDServerListView_SortListItems) == 0x000001, "Wrong alignment on HDServerListView_SortListItems");
//(sizeof(HDServerListView_SortListItems) == 0x000002, "Wrong size on HDServerListView_SortListItems");
//(offsetof(HDServerListView_SortListItems, bSortAscending) == 0x000000, "Member 'HDServerListView_SortListItems::bSortAscending' has a wrong offset!");
//(offsetof(HDServerListView_SortListItems, SortBy) == 0x000001, "Member 'HDServerListView_SortListItems::SortBy' has a wrong offset!");

// Function HDMain.HDServerListView.DoesFilterExcludeListItem
// 0x0010 (0x0010 - 0x0000)
struct HDServerListView_DoesFilterExcludeListItem final 
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDServerListView_DoesFilterExcludeListItem) == 0x000008, "Wrong alignment on HDServerListView_DoesFilterExcludeListItem");
//(sizeof(HDServerListView_DoesFilterExcludeListItem) == 0x000010, "Wrong size on HDServerListView_DoesFilterExcludeListItem");
//(offsetof(HDServerListView_DoesFilterExcludeListItem, Item) == 0x000000, "Member 'HDServerListView_DoesFilterExcludeListItem::Item' has a wrong offset!");
//(offsetof(HDServerListView_DoesFilterExcludeListItem, ReturnValue) == 0x000008, "Member 'HDServerListView_DoesFilterExcludeListItem::ReturnValue' has a wrong offset!");

// Function HDMain.HDServerListView.GetDesiredEntryPaddingForItem
// 0x0018 (0x0018 - 0x0000)
struct HDServerListView_GetDesiredEntryPaddingForItem final 
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(HDServerListView_GetDesiredEntryPaddingForItem) == 0x000008, "Wrong alignment on HDServerListView_GetDesiredEntryPaddingForItem");
//(sizeof(HDServerListView_GetDesiredEntryPaddingForItem) == 0x000018, "Wrong size on HDServerListView_GetDesiredEntryPaddingForItem");
//(offsetof(HDServerListView_GetDesiredEntryPaddingForItem, Item) == 0x000000, "Member 'HDServerListView_GetDesiredEntryPaddingForItem::Item' has a wrong offset!");
//(offsetof(HDServerListView_GetDesiredEntryPaddingForItem, ReturnValue) == 0x000008, "Member 'HDServerListView_GetDesiredEntryPaddingForItem::ReturnValue' has a wrong offset!");

// Function HDMain.HDServerListView.GetEntrySpacing
// 0x0004 (0x0004 - 0x0000)
struct HDServerListView_GetEntrySpacing final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDServerListView_GetEntrySpacing) == 0x000004, "Wrong alignment on HDServerListView_GetEntrySpacing");
//(sizeof(HDServerListView_GetEntrySpacing) == 0x000004, "Wrong size on HDServerListView_GetEntrySpacing");
//(offsetof(HDServerListView_GetEntrySpacing, ReturnValue) == 0x000000, "Member 'HDServerListView_GetEntrySpacing::ReturnValue' has a wrong offset!");

// Function HDMain.HDTeamCommChannelState.GetChannelNameForCommand
// 0x0010 (0x0010 - 0x0000)
struct HDTeamCommChannelState_GetChannelNameForCommand final 
{
public:
	class AHDTeamState*                           CmdTeam;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTeamCommChannelState_GetChannelNameForCommand) == 0x000008, "Wrong alignment on HDTeamCommChannelState_GetChannelNameForCommand");
//(sizeof(HDTeamCommChannelState_GetChannelNameForCommand) == 0x000010, "Wrong size on HDTeamCommChannelState_GetChannelNameForCommand");
//(offsetof(HDTeamCommChannelState_GetChannelNameForCommand, CmdTeam) == 0x000000, "Member 'HDTeamCommChannelState_GetChannelNameForCommand::CmdTeam' has a wrong offset!");
//(offsetof(HDTeamCommChannelState_GetChannelNameForCommand, ReturnValue) == 0x000008, "Member 'HDTeamCommChannelState_GetChannelNameForCommand::ReturnValue' has a wrong offset!");

// Function HDMain.HDTeamCommChannelState.GetChannelNameForTeam
// 0x0010 (0x0010 - 0x0000)
struct HDTeamCommChannelState_GetChannelNameForTeam final 
{
public:
	class AHDTeamState*                           Team;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTeamCommChannelState_GetChannelNameForTeam) == 0x000008, "Wrong alignment on HDTeamCommChannelState_GetChannelNameForTeam");
//(sizeof(HDTeamCommChannelState_GetChannelNameForTeam) == 0x000010, "Wrong size on HDTeamCommChannelState_GetChannelNameForTeam");
//(offsetof(HDTeamCommChannelState_GetChannelNameForTeam, Team) == 0x000000, "Member 'HDTeamCommChannelState_GetChannelNameForTeam::Team' has a wrong offset!");
//(offsetof(HDTeamCommChannelState_GetChannelNameForTeam, ReturnValue) == 0x000008, "Member 'HDTeamCommChannelState_GetChannelNameForTeam::ReturnValue' has a wrong offset!");

// Function HDMain.HDTeamCommChannelState.SetupTeamChannelState
// 0x0008 (0x0008 - 0x0000)
struct HDTeamCommChannelState_SetupTeamChannelState final 
{
public:
	class AHDTeamState*                           ForTeamState;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTeamCommChannelState_SetupTeamChannelState) == 0x000008, "Wrong alignment on HDTeamCommChannelState_SetupTeamChannelState");
//(sizeof(HDTeamCommChannelState_SetupTeamChannelState) == 0x000008, "Wrong size on HDTeamCommChannelState_SetupTeamChannelState");
//(offsetof(HDTeamCommChannelState_SetupTeamChannelState, ForTeamState) == 0x000000, "Member 'HDTeamCommChannelState_SetupTeamChannelState::ForTeamState' has a wrong offset!");

// Function HDMain.HDAIBehState_BasicAAS.StartCombatRepositioning
// 0x000C (0x000C - 0x0000)
struct HDAIBehState_BasicAAS_StartCombatRepositioning final 
{
public:
	struct FVector                                InMoveTarget;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehState_BasicAAS_StartCombatRepositioning) == 0x000004, "Wrong alignment on HDAIBehState_BasicAAS_StartCombatRepositioning");
//(sizeof(HDAIBehState_BasicAAS_StartCombatRepositioning) == 0x00000C, "Wrong size on HDAIBehState_BasicAAS_StartCombatRepositioning");
//(offsetof(HDAIBehState_BasicAAS_StartCombatRepositioning, InMoveTarget) == 0x000000, "Member 'HDAIBehState_BasicAAS_StartCombatRepositioning::InMoveTarget' has a wrong offset!");

// Function HDMain.HDAIBehState_BasicAAS.StartCombatState
// 0x0018 (0x0018 - 0x0000)
struct HDAIBehState_BasicAAS_StartCombatState final 
{
public:
	struct FVector                                InCombatTarget;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InNavigationAnchor;                                // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIBehState_BasicAAS_StartCombatState) == 0x000004, "Wrong alignment on HDAIBehState_BasicAAS_StartCombatState");
//(sizeof(HDAIBehState_BasicAAS_StartCombatState) == 0x000018, "Wrong size on HDAIBehState_BasicAAS_StartCombatState");
//(offsetof(HDAIBehState_BasicAAS_StartCombatState, InCombatTarget) == 0x000000, "Member 'HDAIBehState_BasicAAS_StartCombatState::InCombatTarget' has a wrong offset!");
//(offsetof(HDAIBehState_BasicAAS_StartCombatState, InNavigationAnchor) == 0x00000C, "Member 'HDAIBehState_BasicAAS_StartCombatState::InNavigationAnchor' has a wrong offset!");

// Function HDMain.HDAICombatHandler.AddSuppressionSource
// 0x0018 (0x0018 - 0x0000)
struct HDAICombatHandler_AddSuppressionSource final 
{
public:
	struct FHDAISuppressionSource                 InSuppressionSource;                               // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_AddSuppressionSource) == 0x000008, "Wrong alignment on HDAICombatHandler_AddSuppressionSource");
//(sizeof(HDAICombatHandler_AddSuppressionSource) == 0x000018, "Wrong size on HDAICombatHandler_AddSuppressionSource");
//(offsetof(HDAICombatHandler_AddSuppressionSource, InSuppressionSource) == 0x000000, "Member 'HDAICombatHandler_AddSuppressionSource::InSuppressionSource' has a wrong offset!");

// Function HDMain.HDAICombatHandler.GetMostRelevantSuppressionSource
// 0x000C (0x000C - 0x0000)
struct HDAICombatHandler_GetMostRelevantSuppressionSource final 
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_GetMostRelevantSuppressionSource) == 0x000004, "Wrong alignment on HDAICombatHandler_GetMostRelevantSuppressionSource");
//(sizeof(HDAICombatHandler_GetMostRelevantSuppressionSource) == 0x00000C, "Wrong size on HDAICombatHandler_GetMostRelevantSuppressionSource");
//(offsetof(HDAICombatHandler_GetMostRelevantSuppressionSource, ReturnValue) == 0x000000, "Member 'HDAICombatHandler_GetMostRelevantSuppressionSource::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICombatHandler.GetOldestSuppressionSource
// 0x000C (0x000C - 0x0000)
struct HDAICombatHandler_GetOldestSuppressionSource final 
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_GetOldestSuppressionSource) == 0x000004, "Wrong alignment on HDAICombatHandler_GetOldestSuppressionSource");
//(sizeof(HDAICombatHandler_GetOldestSuppressionSource) == 0x00000C, "Wrong size on HDAICombatHandler_GetOldestSuppressionSource");
//(offsetof(HDAICombatHandler_GetOldestSuppressionSource, ReturnValue) == 0x000000, "Member 'HDAICombatHandler_GetOldestSuppressionSource::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICombatHandler.ReceiveHitDamage
// 0x0010 (0x0010 - 0x0000)
struct HDAICombatHandler_ReceiveHitDamage final 
{
public:
	class ADFBaseProjectile*                      OtherProjectile;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBasePickup*                          Pickup;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_ReceiveHitDamage) == 0x000008, "Wrong alignment on HDAICombatHandler_ReceiveHitDamage");
//(sizeof(HDAICombatHandler_ReceiveHitDamage) == 0x000010, "Wrong size on HDAICombatHandler_ReceiveHitDamage");
//(offsetof(HDAICombatHandler_ReceiveHitDamage, OtherProjectile) == 0x000000, "Member 'HDAICombatHandler_ReceiveHitDamage::OtherProjectile' has a wrong offset!");
//(offsetof(HDAICombatHandler_ReceiveHitDamage, Pickup) == 0x000008, "Member 'HDAICombatHandler_ReceiveHitDamage::Pickup' has a wrong offset!");

// Function HDMain.HDAICombatHandler.ReceiveSuppression
// 0x0010 (0x0010 - 0x0000)
struct HDAICombatHandler_ReceiveSuppression final 
{
public:
	class ADFBaseProjectile*                      OtherProjectile;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBasePickup*                          Pickup;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_ReceiveSuppression) == 0x000008, "Wrong alignment on HDAICombatHandler_ReceiveSuppression");
//(sizeof(HDAICombatHandler_ReceiveSuppression) == 0x000010, "Wrong size on HDAICombatHandler_ReceiveSuppression");
//(offsetof(HDAICombatHandler_ReceiveSuppression, OtherProjectile) == 0x000000, "Member 'HDAICombatHandler_ReceiveSuppression::OtherProjectile' has a wrong offset!");
//(offsetof(HDAICombatHandler_ReceiveSuppression, Pickup) == 0x000008, "Member 'HDAICombatHandler_ReceiveSuppression::Pickup' has a wrong offset!");

// Function HDMain.HDAICombatHandler.Reload
// 0x0008 (0x0008 - 0x0000)
struct HDAICombatHandler_Reload final 
{
public:
	class AHDBaseWeapon*                          InWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_Reload) == 0x000008, "Wrong alignment on HDAICombatHandler_Reload");
//(sizeof(HDAICombatHandler_Reload) == 0x000008, "Wrong size on HDAICombatHandler_Reload");
//(offsetof(HDAICombatHandler_Reload, InWeapon) == 0x000000, "Member 'HDAICombatHandler_Reload::InWeapon' has a wrong offset!");

// Function HDMain.HDAICombatHandler.SetEnemy
// 0x0008 (0x0008 - 0x0000)
struct HDAICombatHandler_SetEnemy final 
{
public:
	class AActor*                                 NewEnemy;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_SetEnemy) == 0x000008, "Wrong alignment on HDAICombatHandler_SetEnemy");
//(sizeof(HDAICombatHandler_SetEnemy) == 0x000008, "Wrong size on HDAICombatHandler_SetEnemy");
//(offsetof(HDAICombatHandler_SetEnemy, NewEnemy) == 0x000000, "Member 'HDAICombatHandler_SetEnemy::NewEnemy' has a wrong offset!");

// Function HDMain.HDAICombatHandler.SetItemAttackParameters
// 0x002C (0x002C - 0x0000)
struct HDAICombatHandler_SetItemAttackParameters final 
{
public:
	struct FHDAISpecificItemTypeAttackData        InAttackData;                                      // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_SetItemAttackParameters) == 0x000004, "Wrong alignment on HDAICombatHandler_SetItemAttackParameters");
//(sizeof(HDAICombatHandler_SetItemAttackParameters) == 0x00002C, "Wrong size on HDAICombatHandler_SetItemAttackParameters");
//(offsetof(HDAICombatHandler_SetItemAttackParameters, InAttackData) == 0x000000, "Member 'HDAICombatHandler_SetItemAttackParameters::InAttackData' has a wrong offset!");

// Function HDMain.HDAICombatHandler.CanAttackEnemy
// 0x0003 (0x0003 - 0x0000)
struct HDAICombatHandler_CanAttackEnemy final 
{
public:
	bool                                          bCheckFireTime;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreAmmoReloadCheck;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_CanAttackEnemy) == 0x000001, "Wrong alignment on HDAICombatHandler_CanAttackEnemy");
//(sizeof(HDAICombatHandler_CanAttackEnemy) == 0x000003, "Wrong size on HDAICombatHandler_CanAttackEnemy");
//(offsetof(HDAICombatHandler_CanAttackEnemy, bCheckFireTime) == 0x000000, "Member 'HDAICombatHandler_CanAttackEnemy::bCheckFireTime' has a wrong offset!");
//(offsetof(HDAICombatHandler_CanAttackEnemy, bIgnoreAmmoReloadCheck) == 0x000001, "Member 'HDAICombatHandler_CanAttackEnemy::bIgnoreAmmoReloadCheck' has a wrong offset!");
//(offsetof(HDAICombatHandler_CanAttackEnemy, ReturnValue) == 0x000002, "Member 'HDAICombatHandler_CanAttackEnemy::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICombatHandler.HasAmmoLoaded
// 0x0001 (0x0001 - 0x0000)
struct HDAICombatHandler_HasAmmoLoaded final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_HasAmmoLoaded) == 0x000001, "Wrong alignment on HDAICombatHandler_HasAmmoLoaded");
//(sizeof(HDAICombatHandler_HasAmmoLoaded) == 0x000001, "Wrong size on HDAICombatHandler_HasAmmoLoaded");
//(offsetof(HDAICombatHandler_HasAmmoLoaded, ReturnValue) == 0x000000, "Member 'HDAICombatHandler_HasAmmoLoaded::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICombatHandler.HasValidCombatTargetLocation
// 0x0001 (0x0001 - 0x0000)
struct HDAICombatHandler_HasValidCombatTargetLocation final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_HasValidCombatTargetLocation) == 0x000001, "Wrong alignment on HDAICombatHandler_HasValidCombatTargetLocation");
//(sizeof(HDAICombatHandler_HasValidCombatTargetLocation) == 0x000001, "Wrong size on HDAICombatHandler_HasValidCombatTargetLocation");
//(offsetof(HDAICombatHandler_HasValidCombatTargetLocation, ReturnValue) == 0x000000, "Member 'HDAICombatHandler_HasValidCombatTargetLocation::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICombatHandler.HasValidCustomCombatTargetLocation
// 0x0001 (0x0001 - 0x0000)
struct HDAICombatHandler_HasValidCustomCombatTargetLocation final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_HasValidCustomCombatTargetLocation) == 0x000001, "Wrong alignment on HDAICombatHandler_HasValidCustomCombatTargetLocation");
//(sizeof(HDAICombatHandler_HasValidCustomCombatTargetLocation) == 0x000001, "Wrong size on HDAICombatHandler_HasValidCustomCombatTargetLocation");
//(offsetof(HDAICombatHandler_HasValidCustomCombatTargetLocation, ReturnValue) == 0x000000, "Member 'HDAICombatHandler_HasValidCustomCombatTargetLocation::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICombatHandler.HasValidEnemy
// 0x0002 (0x0002 - 0x0000)
struct HDAICombatHandler_HasValidEnemy final 
{
public:
	bool                                          bAliveCheck;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_HasValidEnemy) == 0x000001, "Wrong alignment on HDAICombatHandler_HasValidEnemy");
//(sizeof(HDAICombatHandler_HasValidEnemy) == 0x000002, "Wrong size on HDAICombatHandler_HasValidEnemy");
//(offsetof(HDAICombatHandler_HasValidEnemy, bAliveCheck) == 0x000000, "Member 'HDAICombatHandler_HasValidEnemy::bAliveCheck' has a wrong offset!");
//(offsetof(HDAICombatHandler_HasValidEnemy, ReturnValue) == 0x000001, "Member 'HDAICombatHandler_HasValidEnemy::ReturnValue' has a wrong offset!");

// Function HDMain.HDAICombatHandler.IsFiring
// 0x0001 (0x0001 - 0x0000)
struct HDAICombatHandler_IsFiring final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAICombatHandler_IsFiring) == 0x000001, "Wrong alignment on HDAICombatHandler_IsFiring");
//(sizeof(HDAICombatHandler_IsFiring) == 0x000001, "Wrong size on HDAICombatHandler_IsFiring");
//(offsetof(HDAICombatHandler_IsFiring, ReturnValue) == 0x000000, "Member 'HDAICombatHandler_IsFiring::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIController.JoinOrCreateSquad
// 0x0001 (0x0001 - 0x0000)
struct HDAIController_JoinOrCreateSquad final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIController_JoinOrCreateSquad) == 0x000001, "Wrong alignment on HDAIController_JoinOrCreateSquad");
//(sizeof(HDAIController_JoinOrCreateSquad) == 0x000001, "Wrong size on HDAIController_JoinOrCreateSquad");
//(offsetof(HDAIController_JoinOrCreateSquad, ReturnValue) == 0x000000, "Member 'HDAIController_JoinOrCreateSquad::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIController.GetFactionSpecifiedSquadLeaderKit
// 0x0008 (0x0008 - 0x0000)
struct HDAIController_GetFactionSpecifiedSquadLeaderKit final 
{
public:
	class UHDKit*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIController_GetFactionSpecifiedSquadLeaderKit) == 0x000008, "Wrong alignment on HDAIController_GetFactionSpecifiedSquadLeaderKit");
//(sizeof(HDAIController_GetFactionSpecifiedSquadLeaderKit) == 0x000008, "Wrong size on HDAIController_GetFactionSpecifiedSquadLeaderKit");
//(offsetof(HDAIController_GetFactionSpecifiedSquadLeaderKit, ReturnValue) == 0x000000, "Member 'HDAIController_GetFactionSpecifiedSquadLeaderKit::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIController.GetFactionSpecifiedSquadMemberKit
// 0x0008 (0x0008 - 0x0000)
struct HDAIController_GetFactionSpecifiedSquadMemberKit final 
{
public:
	class UHDKit*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIController_GetFactionSpecifiedSquadMemberKit) == 0x000008, "Wrong alignment on HDAIController_GetFactionSpecifiedSquadMemberKit");
//(sizeof(HDAIController_GetFactionSpecifiedSquadMemberKit) == 0x000008, "Wrong size on HDAIController_GetFactionSpecifiedSquadMemberKit");
//(offsetof(HDAIController_GetFactionSpecifiedSquadMemberKit, ReturnValue) == 0x000000, "Member 'HDAIController_GetFactionSpecifiedSquadMemberKit::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIController.GetStartPawnClass
// 0x0008 (0x0008 - 0x0000)
struct HDAIController_GetStartPawnClass final 
{
public:
	TSubclassOf<class APawn>                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIController_GetStartPawnClass) == 0x000008, "Wrong alignment on HDAIController_GetStartPawnClass");
//(sizeof(HDAIController_GetStartPawnClass) == 0x000008, "Wrong size on HDAIController_GetStartPawnClass");
//(offsetof(HDAIController_GetStartPawnClass, ReturnValue) == 0x000000, "Member 'HDAIController_GetStartPawnClass::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIGroupBehaviorHandler.AllGroupMembersAreOnPoint
// 0x0001 (0x0001 - 0x0000)
struct HDAIGroupBehaviorHandler_AllGroupMembersAreOnPoint final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIGroupBehaviorHandler_AllGroupMembersAreOnPoint) == 0x000001, "Wrong alignment on HDAIGroupBehaviorHandler_AllGroupMembersAreOnPoint");
//(sizeof(HDAIGroupBehaviorHandler_AllGroupMembersAreOnPoint) == 0x000001, "Wrong size on HDAIGroupBehaviorHandler_AllGroupMembersAreOnPoint");
//(offsetof(HDAIGroupBehaviorHandler_AllGroupMembersAreOnPoint, ReturnValue) == 0x000000, "Member 'HDAIGroupBehaviorHandler_AllGroupMembersAreOnPoint::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIGroupBehaviorHandler.GetGroupData
// 0x0038 (0x0038 - 0x0000)
struct HDAIGroupBehaviorHandler_GetGroupData final 
{
public:
	struct FHDAIGroupData                         ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(HDAIGroupBehaviorHandler_GetGroupData) == 0x000008, "Wrong alignment on HDAIGroupBehaviorHandler_GetGroupData");
//(sizeof(HDAIGroupBehaviorHandler_GetGroupData) == 0x000038, "Wrong size on HDAIGroupBehaviorHandler_GetGroupData");
//(offsetof(HDAIGroupBehaviorHandler_GetGroupData, ReturnValue) == 0x000000, "Member 'HDAIGroupBehaviorHandler_GetGroupData::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIGroupBehaviorHandler.GetGroupLeader
// 0x0008 (0x0008 - 0x0000)
struct HDAIGroupBehaviorHandler_GetGroupLeader final 
{
public:
	class AHDPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIGroupBehaviorHandler_GetGroupLeader) == 0x000008, "Wrong alignment on HDAIGroupBehaviorHandler_GetGroupLeader");
//(sizeof(HDAIGroupBehaviorHandler_GetGroupLeader) == 0x000008, "Wrong size on HDAIGroupBehaviorHandler_GetGroupLeader");
//(offsetof(HDAIGroupBehaviorHandler_GetGroupLeader, ReturnValue) == 0x000000, "Member 'HDAIGroupBehaviorHandler_GetGroupLeader::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIGroupBehaviorHandler.GetGroupMembers
// 0x0010 (0x0010 - 0x0000)
struct HDAIGroupBehaviorHandler_GetGroupMembers final 
{
public:
	TArray<class AHDAIController*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIGroupBehaviorHandler_GetGroupMembers) == 0x000008, "Wrong alignment on HDAIGroupBehaviorHandler_GetGroupMembers");
//(sizeof(HDAIGroupBehaviorHandler_GetGroupMembers) == 0x000010, "Wrong size on HDAIGroupBehaviorHandler_GetGroupMembers");
//(offsetof(HDAIGroupBehaviorHandler_GetGroupMembers, ReturnValue) == 0x000000, "Member 'HDAIGroupBehaviorHandler_GetGroupMembers::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIGroupBehaviorHandler.InformGroupOnContact
// 0x0018 (0x0018 - 0x0000)
struct HDAIGroupBehaviorHandler_InformGroupOnContact final 
{
public:
	struct FVector                                InCombatTarget;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InNavigationAnchor;                                // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIGroupBehaviorHandler_InformGroupOnContact) == 0x000004, "Wrong alignment on HDAIGroupBehaviorHandler_InformGroupOnContact");
//(sizeof(HDAIGroupBehaviorHandler_InformGroupOnContact) == 0x000018, "Wrong size on HDAIGroupBehaviorHandler_InformGroupOnContact");
//(offsetof(HDAIGroupBehaviorHandler_InformGroupOnContact, InCombatTarget) == 0x000000, "Member 'HDAIGroupBehaviorHandler_InformGroupOnContact::InCombatTarget' has a wrong offset!");
//(offsetof(HDAIGroupBehaviorHandler_InformGroupOnContact, InNavigationAnchor) == 0x00000C, "Member 'HDAIGroupBehaviorHandler_InformGroupOnContact::InNavigationAnchor' has a wrong offset!");

// Function HDMain.HDAIGroupBehaviorHandler.InformLeaderOnContact
// 0x0018 (0x0018 - 0x0000)
struct HDAIGroupBehaviorHandler_InformLeaderOnContact final 
{
public:
	struct FVector                                InCombatTarget;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InNavigationAnchor;                                // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIGroupBehaviorHandler_InformLeaderOnContact) == 0x000004, "Wrong alignment on HDAIGroupBehaviorHandler_InformLeaderOnContact");
//(sizeof(HDAIGroupBehaviorHandler_InformLeaderOnContact) == 0x000018, "Wrong size on HDAIGroupBehaviorHandler_InformLeaderOnContact");
//(offsetof(HDAIGroupBehaviorHandler_InformLeaderOnContact, InCombatTarget) == 0x000000, "Member 'HDAIGroupBehaviorHandler_InformLeaderOnContact::InCombatTarget' has a wrong offset!");
//(offsetof(HDAIGroupBehaviorHandler_InformLeaderOnContact, InNavigationAnchor) == 0x00000C, "Member 'HDAIGroupBehaviorHandler_InformLeaderOnContact::InNavigationAnchor' has a wrong offset!");

// Function HDMain.HDAIGroupBehaviorHandler.IsGroupWaitTimeOver
// 0x0001 (0x0001 - 0x0000)
struct HDAIGroupBehaviorHandler_IsGroupWaitTimeOver final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIGroupBehaviorHandler_IsGroupWaitTimeOver) == 0x000001, "Wrong alignment on HDAIGroupBehaviorHandler_IsGroupWaitTimeOver");
//(sizeof(HDAIGroupBehaviorHandler_IsGroupWaitTimeOver) == 0x000001, "Wrong size on HDAIGroupBehaviorHandler_IsGroupWaitTimeOver");
//(offsetof(HDAIGroupBehaviorHandler_IsGroupWaitTimeOver, ReturnValue) == 0x000000, "Member 'HDAIGroupBehaviorHandler_IsGroupWaitTimeOver::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIGroupBehaviorHandler.OnOwnerDeath
// 0x0038 (0x0038 - 0x0000)
struct HDAIGroupBehaviorHandler_OnOwnerDeath final 
{
public:
	class APawn*                                  VictimPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            VictimController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillingDamage;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1196[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class APawn*                                  InstigatingPawn;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIGroupBehaviorHandler_OnOwnerDeath) == 0x000008, "Wrong alignment on HDAIGroupBehaviorHandler_OnOwnerDeath");
//(sizeof(HDAIGroupBehaviorHandler_OnOwnerDeath) == 0x000038, "Wrong size on HDAIGroupBehaviorHandler_OnOwnerDeath");
//(offsetof(HDAIGroupBehaviorHandler_OnOwnerDeath, VictimPawn) == 0x000000, "Member 'HDAIGroupBehaviorHandler_OnOwnerDeath::VictimPawn' has a wrong offset!");
//(offsetof(HDAIGroupBehaviorHandler_OnOwnerDeath, VictimController) == 0x000008, "Member 'HDAIGroupBehaviorHandler_OnOwnerDeath::VictimController' has a wrong offset!");
//(offsetof(HDAIGroupBehaviorHandler_OnOwnerDeath, KillingDamage) == 0x000010, "Member 'HDAIGroupBehaviorHandler_OnOwnerDeath::KillingDamage' has a wrong offset!");
//(offsetof(HDAIGroupBehaviorHandler_OnOwnerDeath, DamageEvent) == 0x000018, "Member 'HDAIGroupBehaviorHandler_OnOwnerDeath::DamageEvent' has a wrong offset!");
//(offsetof(HDAIGroupBehaviorHandler_OnOwnerDeath, InstigatingPawn) == 0x000028, "Member 'HDAIGroupBehaviorHandler_OnOwnerDeath::InstigatingPawn' has a wrong offset!");
//(offsetof(HDAIGroupBehaviorHandler_OnOwnerDeath, DamageCauser) == 0x000030, "Member 'HDAIGroupBehaviorHandler_OnOwnerDeath::DamageCauser' has a wrong offset!");

// Function HDMain.HDAIGroupBehaviorHandler.RequestGroupDataSync
// 0x0001 (0x0001 - 0x0000)
struct HDAIGroupBehaviorHandler_RequestGroupDataSync final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIGroupBehaviorHandler_RequestGroupDataSync) == 0x000001, "Wrong alignment on HDAIGroupBehaviorHandler_RequestGroupDataSync");
//(sizeof(HDAIGroupBehaviorHandler_RequestGroupDataSync) == 0x000001, "Wrong size on HDAIGroupBehaviorHandler_RequestGroupDataSync");
//(offsetof(HDAIGroupBehaviorHandler_RequestGroupDataSync, ReturnValue) == 0x000000, "Member 'HDAIGroupBehaviorHandler_RequestGroupDataSync::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIGroupBehaviorHandler.SyncGroupData
// 0x0038 (0x0038 - 0x0000)
struct HDAIGroupBehaviorHandler_SyncGroupData final 
{
public:
	struct FHDAIGroupData                         InGroupData;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(HDAIGroupBehaviorHandler_SyncGroupData) == 0x000008, "Wrong alignment on HDAIGroupBehaviorHandler_SyncGroupData");
//(sizeof(HDAIGroupBehaviorHandler_SyncGroupData) == 0x000038, "Wrong size on HDAIGroupBehaviorHandler_SyncGroupData");
//(offsetof(HDAIGroupBehaviorHandler_SyncGroupData, InGroupData) == 0x000000, "Member 'HDAIGroupBehaviorHandler_SyncGroupData::InGroupData' has a wrong offset!");

// Function HDMain.HDAIGroupBehaviorHandler.GetNumGroupMembersInCombat
// 0x0004 (0x0004 - 0x0000)
struct HDAIGroupBehaviorHandler_GetNumGroupMembersInCombat final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIGroupBehaviorHandler_GetNumGroupMembersInCombat) == 0x000004, "Wrong alignment on HDAIGroupBehaviorHandler_GetNumGroupMembersInCombat");
//(sizeof(HDAIGroupBehaviorHandler_GetNumGroupMembersInCombat) == 0x000004, "Wrong size on HDAIGroupBehaviorHandler_GetNumGroupMembersInCombat");
//(offsetof(HDAIGroupBehaviorHandler_GetNumGroupMembersInCombat, ReturnValue) == 0x000000, "Member 'HDAIGroupBehaviorHandler_GetNumGroupMembersInCombat::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIGroupBehaviorHandler.GetNumValidGroupMembers
// 0x0004 (0x0004 - 0x0000)
struct HDAIGroupBehaviorHandler_GetNumValidGroupMembers final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIGroupBehaviorHandler_GetNumValidGroupMembers) == 0x000004, "Wrong alignment on HDAIGroupBehaviorHandler_GetNumValidGroupMembers");
//(sizeof(HDAIGroupBehaviorHandler_GetNumValidGroupMembers) == 0x000004, "Wrong size on HDAIGroupBehaviorHandler_GetNumValidGroupMembers");
//(offsetof(HDAIGroupBehaviorHandler_GetNumValidGroupMembers, ReturnValue) == 0x000000, "Member 'HDAIGroupBehaviorHandler_GetNumValidGroupMembers::ReturnValue' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.PointsAreEqualXY
// 0x0020 (0x0020 - 0x0000)
struct HDAINavigationHandler_PointsAreEqualXY final 
{
public:
	struct FVector                                Vector1;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector2;                                           // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119F[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAINavigationHandler_PointsAreEqualXY) == 0x000004, "Wrong alignment on HDAINavigationHandler_PointsAreEqualXY");
//(sizeof(HDAINavigationHandler_PointsAreEqualXY) == 0x000020, "Wrong size on HDAINavigationHandler_PointsAreEqualXY");
//(offsetof(HDAINavigationHandler_PointsAreEqualXY, Vector1) == 0x000000, "Member 'HDAINavigationHandler_PointsAreEqualXY::Vector1' has a wrong offset!");
//(offsetof(HDAINavigationHandler_PointsAreEqualXY, Vector2) == 0x00000C, "Member 'HDAINavigationHandler_PointsAreEqualXY::Vector2' has a wrong offset!");
//(offsetof(HDAINavigationHandler_PointsAreEqualXY, Tolerance) == 0x000018, "Member 'HDAINavigationHandler_PointsAreEqualXY::Tolerance' has a wrong offset!");
//(offsetof(HDAINavigationHandler_PointsAreEqualXY, ReturnValue) == 0x00001C, "Member 'HDAINavigationHandler_PointsAreEqualXY::ReturnValue' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.CheckPawnStuckStatus
// 0x0001 (0x0001 - 0x0000)
struct HDAINavigationHandler_CheckPawnStuckStatus final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAINavigationHandler_CheckPawnStuckStatus) == 0x000001, "Wrong alignment on HDAINavigationHandler_CheckPawnStuckStatus");
//(sizeof(HDAINavigationHandler_CheckPawnStuckStatus) == 0x000001, "Wrong size on HDAINavigationHandler_CheckPawnStuckStatus");
//(offsetof(HDAINavigationHandler_CheckPawnStuckStatus, ReturnValue) == 0x000000, "Member 'HDAINavigationHandler_CheckPawnStuckStatus::ReturnValue' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.GotoLocation
// 0x000C (0x000C - 0x0000)
struct HDAINavigationHandler_GotoLocation final 
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAINavigationHandler_GotoLocation) == 0x000004, "Wrong alignment on HDAINavigationHandler_GotoLocation");
//(sizeof(HDAINavigationHandler_GotoLocation) == 0x00000C, "Wrong size on HDAINavigationHandler_GotoLocation");
//(offsetof(HDAINavigationHandler_GotoLocation, InLocation) == 0x000000, "Member 'HDAINavigationHandler_GotoLocation::InLocation' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.GotoLocationRandomized
// 0x0010 (0x0010 - 0x0000)
struct HDAINavigationHandler_GotoLocationRandomized final 
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRandomizationRadius;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAINavigationHandler_GotoLocationRandomized) == 0x000004, "Wrong alignment on HDAINavigationHandler_GotoLocationRandomized");
//(sizeof(HDAINavigationHandler_GotoLocationRandomized) == 0x000010, "Wrong size on HDAINavigationHandler_GotoLocationRandomized");
//(offsetof(HDAINavigationHandler_GotoLocationRandomized, InLocation) == 0x000000, "Member 'HDAINavigationHandler_GotoLocationRandomized::InLocation' has a wrong offset!");
//(offsetof(HDAINavigationHandler_GotoLocationRandomized, InRandomizationRadius) == 0x00000C, "Member 'HDAINavigationHandler_GotoLocationRandomized::InRandomizationRadius' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.MakeNewMasterNavPath
// 0x001C (0x001C - 0x0000)
struct HDAINavigationHandler_MakeNewMasterNavPath final 
{
public:
	struct FVector                                InStart;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InDestination;                                     // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A0[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAINavigationHandler_MakeNewMasterNavPath) == 0x000004, "Wrong alignment on HDAINavigationHandler_MakeNewMasterNavPath");
//(sizeof(HDAINavigationHandler_MakeNewMasterNavPath) == 0x00001C, "Wrong size on HDAINavigationHandler_MakeNewMasterNavPath");
//(offsetof(HDAINavigationHandler_MakeNewMasterNavPath, InStart) == 0x000000, "Member 'HDAINavigationHandler_MakeNewMasterNavPath::InStart' has a wrong offset!");
//(offsetof(HDAINavigationHandler_MakeNewMasterNavPath, InDestination) == 0x00000C, "Member 'HDAINavigationHandler_MakeNewMasterNavPath::InDestination' has a wrong offset!");
//(offsetof(HDAINavigationHandler_MakeNewMasterNavPath, ReturnValue) == 0x000018, "Member 'HDAINavigationHandler_MakeNewMasterNavPath::ReturnValue' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.MakePathToDesiredLocation
// 0x0001 (0x0001 - 0x0000)
struct HDAINavigationHandler_MakePathToDesiredLocation final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAINavigationHandler_MakePathToDesiredLocation) == 0x000001, "Wrong alignment on HDAINavigationHandler_MakePathToDesiredLocation");
//(sizeof(HDAINavigationHandler_MakePathToDesiredLocation) == 0x000001, "Wrong size on HDAINavigationHandler_MakePathToDesiredLocation");
//(offsetof(HDAINavigationHandler_MakePathToDesiredLocation, ReturnValue) == 0x000000, "Member 'HDAINavigationHandler_MakePathToDesiredLocation::ReturnValue' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.SetDesiredLocation
// 0x000C (0x000C - 0x0000)
struct HDAINavigationHandler_SetDesiredLocation final 
{
public:
	struct FVector                                InDesiredLocation;                                 // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAINavigationHandler_SetDesiredLocation) == 0x000004, "Wrong alignment on HDAINavigationHandler_SetDesiredLocation");
//(sizeof(HDAINavigationHandler_SetDesiredLocation) == 0x00000C, "Wrong size on HDAINavigationHandler_SetDesiredLocation");
//(offsetof(HDAINavigationHandler_SetDesiredLocation, InDesiredLocation) == 0x000000, "Member 'HDAINavigationHandler_SetDesiredLocation::InDesiredLocation' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.FindNavLocationInsideControlPoint
// 0x0018 (0x0018 - 0x0000)
struct HDAINavigationHandler_FindNavLocationInsideControlPoint final 
{
public:
	class AHDBaseCapturePoint*                    CP;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutNavLoc;                                         // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A1[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAINavigationHandler_FindNavLocationInsideControlPoint) == 0x000008, "Wrong alignment on HDAINavigationHandler_FindNavLocationInsideControlPoint");
//(sizeof(HDAINavigationHandler_FindNavLocationInsideControlPoint) == 0x000018, "Wrong size on HDAINavigationHandler_FindNavLocationInsideControlPoint");
//(offsetof(HDAINavigationHandler_FindNavLocationInsideControlPoint, CP) == 0x000000, "Member 'HDAINavigationHandler_FindNavLocationInsideControlPoint::CP' has a wrong offset!");
//(offsetof(HDAINavigationHandler_FindNavLocationInsideControlPoint, OutNavLoc) == 0x000008, "Member 'HDAINavigationHandler_FindNavLocationInsideControlPoint::OutNavLoc' has a wrong offset!");
//(offsetof(HDAINavigationHandler_FindNavLocationInsideControlPoint, ReturnValue) == 0x000014, "Member 'HDAINavigationHandler_FindNavLocationInsideControlPoint::ReturnValue' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.FixVectorValuesNaN
// 0x0010 (0x0010 - 0x0000)
struct HDAINavigationHandler_FixVectorValuesNaN final 
{
public:
	struct FVector                                InVector;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomize;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A2[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAINavigationHandler_FixVectorValuesNaN) == 0x000004, "Wrong alignment on HDAINavigationHandler_FixVectorValuesNaN");
//(sizeof(HDAINavigationHandler_FixVectorValuesNaN) == 0x000010, "Wrong size on HDAINavigationHandler_FixVectorValuesNaN");
//(offsetof(HDAINavigationHandler_FixVectorValuesNaN, InVector) == 0x000000, "Member 'HDAINavigationHandler_FixVectorValuesNaN::InVector' has a wrong offset!");
//(offsetof(HDAINavigationHandler_FixVectorValuesNaN, bRandomize) == 0x00000C, "Member 'HDAINavigationHandler_FixVectorValuesNaN::bRandomize' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct HDAINavigationHandler_IsMoving final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAINavigationHandler_IsMoving) == 0x000001, "Wrong alignment on HDAINavigationHandler_IsMoving");
//(sizeof(HDAINavigationHandler_IsMoving) == 0x000001, "Wrong size on HDAINavigationHandler_IsMoving");
//(offsetof(HDAINavigationHandler_IsMoving, ReturnValue) == 0x000000, "Member 'HDAINavigationHandler_IsMoving::ReturnValue' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.IsNavDataValidForAllControlPoints
// 0x0001 (0x0001 - 0x0000)
struct HDAINavigationHandler_IsNavDataValidForAllControlPoints final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAINavigationHandler_IsNavDataValidForAllControlPoints) == 0x000001, "Wrong alignment on HDAINavigationHandler_IsNavDataValidForAllControlPoints");
//(sizeof(HDAINavigationHandler_IsNavDataValidForAllControlPoints) == 0x000001, "Wrong size on HDAINavigationHandler_IsNavDataValidForAllControlPoints");
//(offsetof(HDAINavigationHandler_IsNavDataValidForAllControlPoints, ReturnValue) == 0x000000, "Member 'HDAINavigationHandler_IsNavDataValidForAllControlPoints::ReturnValue' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.IsNavigationPossible
// 0x0001 (0x0001 - 0x0000)
struct HDAINavigationHandler_IsNavigationPossible final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAINavigationHandler_IsNavigationPossible) == 0x000001, "Wrong alignment on HDAINavigationHandler_IsNavigationPossible");
//(sizeof(HDAINavigationHandler_IsNavigationPossible) == 0x000001, "Wrong size on HDAINavigationHandler_IsNavigationPossible");
//(offsetof(HDAINavigationHandler_IsNavigationPossible, ReturnValue) == 0x000000, "Member 'HDAINavigationHandler_IsNavigationPossible::ReturnValue' has a wrong offset!");

// Function HDMain.HDAINavigationHandler.IsPawnAtDestination
// 0x0001 (0x0001 - 0x0000)
struct HDAINavigationHandler_IsPawnAtDestination final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAINavigationHandler_IsPawnAtDestination) == 0x000001, "Wrong alignment on HDAINavigationHandler_IsPawnAtDestination");
//(sizeof(HDAINavigationHandler_IsPawnAtDestination) == 0x000001, "Wrong size on HDAINavigationHandler_IsPawnAtDestination");
//(offsetof(HDAINavigationHandler_IsPawnAtDestination, ReturnValue) == 0x000000, "Member 'HDAINavigationHandler_IsPawnAtDestination::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIPerceptionComponent.CalcSightStrength
// 0x0008 (0x0008 - 0x0000)
struct HDAIPerceptionComponent_CalcSightStrength final 
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIPerceptionComponent_CalcSightStrength) == 0x000004, "Wrong alignment on HDAIPerceptionComponent_CalcSightStrength");
//(sizeof(HDAIPerceptionComponent_CalcSightStrength) == 0x000008, "Wrong size on HDAIPerceptionComponent_CalcSightStrength");
//(offsetof(HDAIPerceptionComponent_CalcSightStrength, Distance) == 0x000000, "Member 'HDAIPerceptionComponent_CalcSightStrength::Distance' has a wrong offset!");
//(offsetof(HDAIPerceptionComponent_CalcSightStrength, ReturnValue) == 0x000004, "Member 'HDAIPerceptionComponent_CalcSightStrength::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIPerceptionComponent.CanBeSeenFrom
// 0x0030 (0x0030 - 0x0000)
struct HDAIPerceptionComponent_CanBeSeenFrom final 
{
public:
	struct FVector                                ObserverLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutSeenLocation;                                   // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLoSChecksPerformed;                        // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutSightStrength;                                  // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 IgnoreActor;                                       // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A5[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDAIPerceptionComponent_CanBeSeenFrom) == 0x000008, "Wrong alignment on HDAIPerceptionComponent_CanBeSeenFrom");
//(sizeof(HDAIPerceptionComponent_CanBeSeenFrom) == 0x000030, "Wrong size on HDAIPerceptionComponent_CanBeSeenFrom");
//(offsetof(HDAIPerceptionComponent_CanBeSeenFrom, ObserverLocation) == 0x000000, "Member 'HDAIPerceptionComponent_CanBeSeenFrom::ObserverLocation' has a wrong offset!");
//(offsetof(HDAIPerceptionComponent_CanBeSeenFrom, OutSeenLocation) == 0x00000C, "Member 'HDAIPerceptionComponent_CanBeSeenFrom::OutSeenLocation' has a wrong offset!");
//(offsetof(HDAIPerceptionComponent_CanBeSeenFrom, NumberOfLoSChecksPerformed) == 0x000018, "Member 'HDAIPerceptionComponent_CanBeSeenFrom::NumberOfLoSChecksPerformed' has a wrong offset!");
//(offsetof(HDAIPerceptionComponent_CanBeSeenFrom, OutSightStrength) == 0x00001C, "Member 'HDAIPerceptionComponent_CanBeSeenFrom::OutSightStrength' has a wrong offset!");
//(offsetof(HDAIPerceptionComponent_CanBeSeenFrom, IgnoreActor) == 0x000020, "Member 'HDAIPerceptionComponent_CanBeSeenFrom::IgnoreActor' has a wrong offset!");
//(offsetof(HDAIPerceptionComponent_CanBeSeenFrom, ReturnValue) == 0x000028, "Member 'HDAIPerceptionComponent_CanBeSeenFrom::ReturnValue' has a wrong offset!");

// Function HDMain.HDAIVocalHandler.NotifySurroundingCharacters
// 0x0001 (0x0001 - 0x0000)
struct HDAIVocalHandler_NotifySurroundingCharacters final 
{
public:
	EHDAIVocalizationType                         InVocalType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIVocalHandler_NotifySurroundingCharacters) == 0x000001, "Wrong alignment on HDAIVocalHandler_NotifySurroundingCharacters");
//(sizeof(HDAIVocalHandler_NotifySurroundingCharacters) == 0x000001, "Wrong size on HDAIVocalHandler_NotifySurroundingCharacters");
//(offsetof(HDAIVocalHandler_NotifySurroundingCharacters, InVocalType) == 0x000000, "Member 'HDAIVocalHandler_NotifySurroundingCharacters::InVocalType' has a wrong offset!");

// Function HDMain.HDAIVocalHandler.PlayVocalSound
// 0x0001 (0x0001 - 0x0000)
struct HDAIVocalHandler_PlayVocalSound final 
{
public:
	EHDAIVocalizationType                         InVocalType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIVocalHandler_PlayVocalSound) == 0x000001, "Wrong alignment on HDAIVocalHandler_PlayVocalSound");
//(sizeof(HDAIVocalHandler_PlayVocalSound) == 0x000001, "Wrong size on HDAIVocalHandler_PlayVocalSound");
//(offsetof(HDAIVocalHandler_PlayVocalSound, InVocalType) == 0x000000, "Member 'HDAIVocalHandler_PlayVocalSound::InVocalType' has a wrong offset!");

// Function HDMain.HDAIVocalHandler.SetPitchMultiplier
// 0x0004 (0x0004 - 0x0000)
struct HDAIVocalHandler_SetPitchMultiplier final 
{
public:
	float                                         InPitchMultiplier;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIVocalHandler_SetPitchMultiplier) == 0x000004, "Wrong alignment on HDAIVocalHandler_SetPitchMultiplier");
//(sizeof(HDAIVocalHandler_SetPitchMultiplier) == 0x000004, "Wrong size on HDAIVocalHandler_SetPitchMultiplier");
//(offsetof(HDAIVocalHandler_SetPitchMultiplier, InPitchMultiplier) == 0x000000, "Member 'HDAIVocalHandler_SetPitchMultiplier::InPitchMultiplier' has a wrong offset!");

// Function HDMain.HDAIVocalHandler.SetTimeLimit
// 0x0001 (0x0001 - 0x0000)
struct HDAIVocalHandler_SetTimeLimit final 
{
public:
	EHDAIVocalizationType                         InVocalType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIVocalHandler_SetTimeLimit) == 0x000001, "Wrong alignment on HDAIVocalHandler_SetTimeLimit");
//(sizeof(HDAIVocalHandler_SetTimeLimit) == 0x000001, "Wrong size on HDAIVocalHandler_SetTimeLimit");
//(offsetof(HDAIVocalHandler_SetTimeLimit, InVocalType) == 0x000000, "Member 'HDAIVocalHandler_SetTimeLimit::InVocalType' has a wrong offset!");

// Function HDMain.HDAIVocalHandler.Vocalize
// 0x0001 (0x0001 - 0x0000)
struct HDAIVocalHandler_Vocalize final 
{
public:
	EHDAIVocalizationType                         InVocalType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIVocalHandler_Vocalize) == 0x000001, "Wrong alignment on HDAIVocalHandler_Vocalize");
//(sizeof(HDAIVocalHandler_Vocalize) == 0x000001, "Wrong size on HDAIVocalHandler_Vocalize");
//(offsetof(HDAIVocalHandler_Vocalize, InVocalType) == 0x000000, "Member 'HDAIVocalHandler_Vocalize::InVocalType' has a wrong offset!");

// Function HDMain.HDAIVocalHandler.VocalizeContact
// 0x0001 (0x0001 - 0x0000)
struct HDAIVocalHandler_VocalizeContact final 
{
public:
	bool                                          bHasContact;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDAIVocalHandler_VocalizeContact) == 0x000001, "Wrong alignment on HDAIVocalHandler_VocalizeContact");
//(sizeof(HDAIVocalHandler_VocalizeContact) == 0x000001, "Wrong size on HDAIVocalHandler_VocalizeContact");
//(offsetof(HDAIVocalHandler_VocalizeContact, bHasContact) == 0x000000, "Member 'HDAIVocalHandler_VocalizeContact::bHasContact' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.ChoosePlayerStart
// 0x0010 (0x0010 - 0x0000)
struct HDBaseCapturePoint_ChoosePlayerStart final 
{
public:
	class AHDPlayerController*                    Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_ChoosePlayerStart) == 0x000008, "Wrong alignment on HDBaseCapturePoint_ChoosePlayerStart");
//(sizeof(HDBaseCapturePoint_ChoosePlayerStart) == 0x000010, "Wrong size on HDBaseCapturePoint_ChoosePlayerStart");
//(offsetof(HDBaseCapturePoint_ChoosePlayerStart, Player) == 0x000000, "Member 'HDBaseCapturePoint_ChoosePlayerStart::Player' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_ChoosePlayerStart, ReturnValue) == 0x000008, "Member 'HDBaseCapturePoint_ChoosePlayerStart::ReturnValue' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct HDBaseCapturePoint_OnBeginOverlap final 
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B1[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_OnBeginOverlap) == 0x000008, "Wrong alignment on HDBaseCapturePoint_OnBeginOverlap");
//(sizeof(HDBaseCapturePoint_OnBeginOverlap) == 0x0000A8, "Wrong size on HDBaseCapturePoint_OnBeginOverlap");
//(offsetof(HDBaseCapturePoint_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'HDBaseCapturePoint_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_OnBeginOverlap, OtherActor) == 0x000008, "Member 'HDBaseCapturePoint_OnBeginOverlap::OtherActor' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_OnBeginOverlap, OtherComp) == 0x000010, "Member 'HDBaseCapturePoint_OnBeginOverlap::OtherComp' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'HDBaseCapturePoint_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'HDBaseCapturePoint_OnBeginOverlap::bFromSweep' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_OnBeginOverlap, SweepResult) == 0x000020, "Member 'HDBaseCapturePoint_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct HDBaseCapturePoint_OnEndOverlap final 
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B2[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDBaseCapturePoint_OnEndOverlap) == 0x000008, "Wrong alignment on HDBaseCapturePoint_OnEndOverlap");
//(sizeof(HDBaseCapturePoint_OnEndOverlap) == 0x000020, "Wrong size on HDBaseCapturePoint_OnEndOverlap");
//(offsetof(HDBaseCapturePoint_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'HDBaseCapturePoint_OnEndOverlap::OverlappedComponent' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_OnEndOverlap, OtherActor) == 0x000008, "Member 'HDBaseCapturePoint_OnEndOverlap::OtherActor' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_OnEndOverlap, OtherComp) == 0x000010, "Member 'HDBaseCapturePoint_OnEndOverlap::OtherComp' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'HDBaseCapturePoint_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.OnOwningTeamUpdated
// 0x0001 (0x0001 - 0x0000)
struct HDBaseCapturePoint_OnOwningTeamUpdated final 
{
public:
	EHDTeam                                       LastOwningTeam;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_OnOwningTeamUpdated) == 0x000001, "Wrong alignment on HDBaseCapturePoint_OnOwningTeamUpdated");
//(sizeof(HDBaseCapturePoint_OnOwningTeamUpdated) == 0x000001, "Wrong size on HDBaseCapturePoint_OnOwningTeamUpdated");
//(offsetof(HDBaseCapturePoint_OnOwningTeamUpdated, LastOwningTeam) == 0x000000, "Member 'HDBaseCapturePoint_OnOwningTeamUpdated::LastOwningTeam' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.OnRep_OwningTeam
// 0x0001 (0x0001 - 0x0000)
struct HDBaseCapturePoint_OnRep_OwningTeam final 
{
public:
	EHDTeam                                       LastOwningTeam;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_OnRep_OwningTeam) == 0x000001, "Wrong alignment on HDBaseCapturePoint_OnRep_OwningTeam");
//(sizeof(HDBaseCapturePoint_OnRep_OwningTeam) == 0x000001, "Wrong size on HDBaseCapturePoint_OnRep_OwningTeam");
//(offsetof(HDBaseCapturePoint_OnRep_OwningTeam, LastOwningTeam) == 0x000000, "Member 'HDBaseCapturePoint_OnRep_OwningTeam::LastOwningTeam' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.ReceiveOnActive
// 0x0001 (0x0001 - 0x0000)
struct HDBaseCapturePoint_ReceiveOnActive final 
{
public:
	bool                                          bNewActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_ReceiveOnActive) == 0x000001, "Wrong alignment on HDBaseCapturePoint_ReceiveOnActive");
//(sizeof(HDBaseCapturePoint_ReceiveOnActive) == 0x000001, "Wrong size on HDBaseCapturePoint_ReceiveOnActive");
//(offsetof(HDBaseCapturePoint_ReceiveOnActive, bNewActive) == 0x000000, "Member 'HDBaseCapturePoint_ReceiveOnActive::bNewActive' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.ReceiveOnCaptureProgress
// 0x0001 (0x0001 - 0x0000)
struct HDBaseCapturePoint_ReceiveOnCaptureProgress final 
{
public:
	bool                                          bNewContested;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_ReceiveOnCaptureProgress) == 0x000001, "Wrong alignment on HDBaseCapturePoint_ReceiveOnCaptureProgress");
//(sizeof(HDBaseCapturePoint_ReceiveOnCaptureProgress) == 0x000001, "Wrong size on HDBaseCapturePoint_ReceiveOnCaptureProgress");
//(offsetof(HDBaseCapturePoint_ReceiveOnCaptureProgress, bNewContested) == 0x000000, "Member 'HDBaseCapturePoint_ReceiveOnCaptureProgress::bNewContested' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.ReceiveOnLocked
// 0x0001 (0x0001 - 0x0000)
struct HDBaseCapturePoint_ReceiveOnLocked final 
{
public:
	bool                                          bNewLocked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_ReceiveOnLocked) == 0x000001, "Wrong alignment on HDBaseCapturePoint_ReceiveOnLocked");
//(sizeof(HDBaseCapturePoint_ReceiveOnLocked) == 0x000001, "Wrong size on HDBaseCapturePoint_ReceiveOnLocked");
//(offsetof(HDBaseCapturePoint_ReceiveOnLocked, bNewLocked) == 0x000000, "Member 'HDBaseCapturePoint_ReceiveOnLocked::bNewLocked' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.ReceiveOnOwningTeamUpdated
// 0x0001 (0x0001 - 0x0000)
struct HDBaseCapturePoint_ReceiveOnOwningTeamUpdated final 
{
public:
	EHDTeam                                       LastOwningTeam;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_ReceiveOnOwningTeamUpdated) == 0x000001, "Wrong alignment on HDBaseCapturePoint_ReceiveOnOwningTeamUpdated");
//(sizeof(HDBaseCapturePoint_ReceiveOnOwningTeamUpdated) == 0x000001, "Wrong size on HDBaseCapturePoint_ReceiveOnOwningTeamUpdated");
//(offsetof(HDBaseCapturePoint_ReceiveOnOwningTeamUpdated, LastOwningTeam) == 0x000000, "Member 'HDBaseCapturePoint_ReceiveOnOwningTeamUpdated::LastOwningTeam' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.SetActive
// 0x0001 (0x0001 - 0x0000)
struct HDBaseCapturePoint_SetActive final 
{
public:
	bool                                          bNewActive;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_SetActive) == 0x000001, "Wrong alignment on HDBaseCapturePoint_SetActive");
//(sizeof(HDBaseCapturePoint_SetActive) == 0x000001, "Wrong size on HDBaseCapturePoint_SetActive");
//(offsetof(HDBaseCapturePoint_SetActive, bNewActive) == 0x000000, "Member 'HDBaseCapturePoint_SetActive::bNewActive' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.SetActiveRoute
// 0x0004 (0x0004 - 0x0000)
struct HDBaseCapturePoint_SetActiveRoute final 
{
public:
	int32                                         NewActiveRoute;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_SetActiveRoute) == 0x000004, "Wrong alignment on HDBaseCapturePoint_SetActiveRoute");
//(sizeof(HDBaseCapturePoint_SetActiveRoute) == 0x000004, "Wrong size on HDBaseCapturePoint_SetActiveRoute");
//(offsetof(HDBaseCapturePoint_SetActiveRoute, NewActiveRoute) == 0x000000, "Member 'HDBaseCapturePoint_SetActiveRoute::NewActiveRoute' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.CanCapture
// 0x0001 (0x0001 - 0x0000)
struct HDBaseCapturePoint_CanCapture final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_CanCapture) == 0x000001, "Wrong alignment on HDBaseCapturePoint_CanCapture");
//(sizeof(HDBaseCapturePoint_CanCapture) == 0x000001, "Wrong size on HDBaseCapturePoint_CanCapture");
//(offsetof(HDBaseCapturePoint_CanCapture, ReturnValue) == 0x000000, "Member 'HDBaseCapturePoint_CanCapture::ReturnValue' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.CanRestartPlayer
// 0x0010 (0x0010 - 0x0000)
struct HDBaseCapturePoint_CanRestartPlayer final 
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDBaseCapturePoint_CanRestartPlayer) == 0x000008, "Wrong alignment on HDBaseCapturePoint_CanRestartPlayer");
//(sizeof(HDBaseCapturePoint_CanRestartPlayer) == 0x000010, "Wrong size on HDBaseCapturePoint_CanRestartPlayer");
//(offsetof(HDBaseCapturePoint_CanRestartPlayer, Player) == 0x000000, "Member 'HDBaseCapturePoint_CanRestartPlayer::Player' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_CanRestartPlayer, ReturnValue) == 0x000008, "Member 'HDBaseCapturePoint_CanRestartPlayer::ReturnValue' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.GetMinPlayersRequiredForCaptureTeam
// 0x0008 (0x0008 - 0x0000)
struct HDBaseCapturePoint_GetMinPlayersRequiredForCaptureTeam final 
{
public:
	EHDTeam                                       CaptureTeam;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_GetMinPlayersRequiredForCaptureTeam) == 0x000004, "Wrong alignment on HDBaseCapturePoint_GetMinPlayersRequiredForCaptureTeam");
//(sizeof(HDBaseCapturePoint_GetMinPlayersRequiredForCaptureTeam) == 0x000008, "Wrong size on HDBaseCapturePoint_GetMinPlayersRequiredForCaptureTeam");
//(offsetof(HDBaseCapturePoint_GetMinPlayersRequiredForCaptureTeam, CaptureTeam) == 0x000000, "Member 'HDBaseCapturePoint_GetMinPlayersRequiredForCaptureTeam::CaptureTeam' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_GetMinPlayersRequiredForCaptureTeam, ReturnValue) == 0x000004, "Member 'HDBaseCapturePoint_GetMinPlayersRequiredForCaptureTeam::ReturnValue' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.GetObjectiveTypeForTeam
// 0x0002 (0x0002 - 0x0000)
struct HDBaseCapturePoint_GetObjectiveTypeForTeam final 
{
public:
	EHDTeam                                       ObjTeam;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDControlPointObjectiveType                  ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_GetObjectiveTypeForTeam) == 0x000001, "Wrong alignment on HDBaseCapturePoint_GetObjectiveTypeForTeam");
//(sizeof(HDBaseCapturePoint_GetObjectiveTypeForTeam) == 0x000002, "Wrong size on HDBaseCapturePoint_GetObjectiveTypeForTeam");
//(offsetof(HDBaseCapturePoint_GetObjectiveTypeForTeam, ObjTeam) == 0x000000, "Member 'HDBaseCapturePoint_GetObjectiveTypeForTeam::ObjTeam' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_GetObjectiveTypeForTeam, ReturnValue) == 0x000001, "Member 'HDBaseCapturePoint_GetObjectiveTypeForTeam::ReturnValue' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.GetOverlappingCharactersByTeam
// 0x0020 (0x0020 - 0x0000)
struct HDBaseCapturePoint_GetOverlappingCharactersByTeam final 
{
public:
	TArray<class ADFBaseCharacter*>               OverlappingCharsRed;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADFBaseCharacter*>               OverlappingCharsBlue;                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_GetOverlappingCharactersByTeam) == 0x000008, "Wrong alignment on HDBaseCapturePoint_GetOverlappingCharactersByTeam");
//(sizeof(HDBaseCapturePoint_GetOverlappingCharactersByTeam) == 0x000020, "Wrong size on HDBaseCapturePoint_GetOverlappingCharactersByTeam");
//(offsetof(HDBaseCapturePoint_GetOverlappingCharactersByTeam, OverlappingCharsRed) == 0x000000, "Member 'HDBaseCapturePoint_GetOverlappingCharactersByTeam::OverlappingCharsRed' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_GetOverlappingCharactersByTeam, OverlappingCharsBlue) == 0x000010, "Member 'HDBaseCapturePoint_GetOverlappingCharactersByTeam::OverlappingCharsBlue' has a wrong offset!");

// Function HDMain.HDBaseCapturePoint.IsCapturableByTeam
// 0x0002 (0x0002 - 0x0000)
struct HDBaseCapturePoint_IsCapturableByTeam final 
{
public:
	EHDTeam                                       CaptureTeam;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseCapturePoint_IsCapturableByTeam) == 0x000001, "Wrong alignment on HDBaseCapturePoint_IsCapturableByTeam");
//(sizeof(HDBaseCapturePoint_IsCapturableByTeam) == 0x000002, "Wrong size on HDBaseCapturePoint_IsCapturableByTeam");
//(offsetof(HDBaseCapturePoint_IsCapturableByTeam, CaptureTeam) == 0x000000, "Member 'HDBaseCapturePoint_IsCapturableByTeam::CaptureTeam' has a wrong offset!");
//(offsetof(HDBaseCapturePoint_IsCapturableByTeam, ReturnValue) == 0x000001, "Member 'HDBaseCapturePoint_IsCapturableByTeam::ReturnValue' has a wrong offset!");

// Function HDMain.HDBaseGameMode.AddBluforBots
// 0x0004 (0x0004 - 0x0000)
struct HDBaseGameMode_AddBluforBots final 
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseGameMode_AddBluforBots) == 0x000004, "Wrong alignment on HDBaseGameMode_AddBluforBots");
//(sizeof(HDBaseGameMode_AddBluforBots) == 0x000004, "Wrong size on HDBaseGameMode_AddBluforBots");
//(offsetof(HDBaseGameMode_AddBluforBots, Num) == 0x000000, "Member 'HDBaseGameMode_AddBluforBots::Num' has a wrong offset!");

// Function HDMain.HDBaseGameMode.AddOpforBots
// 0x0004 (0x0004 - 0x0000)
struct HDBaseGameMode_AddOpforBots final 
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseGameMode_AddOpforBots) == 0x000004, "Wrong alignment on HDBaseGameMode_AddOpforBots");
//(sizeof(HDBaseGameMode_AddOpforBots) == 0x000004, "Wrong size on HDBaseGameMode_AddOpforBots");
//(offsetof(HDBaseGameMode_AddOpforBots, Num) == 0x000000, "Member 'HDBaseGameMode_AddOpforBots::Num' has a wrong offset!");

// Function HDMain.HDBaseGameMode.PlayerCanRestartAtPlayerStart
// 0x0020 (0x0020 - 0x0000)
struct HDBaseGameMode_PlayerCanRestartAtPlayerStart final 
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 StartSpot;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFLoadout*                             StartLoadout;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B7[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDBaseGameMode_PlayerCanRestartAtPlayerStart) == 0x000008, "Wrong alignment on HDBaseGameMode_PlayerCanRestartAtPlayerStart");
//(sizeof(HDBaseGameMode_PlayerCanRestartAtPlayerStart) == 0x000020, "Wrong size on HDBaseGameMode_PlayerCanRestartAtPlayerStart");
//(offsetof(HDBaseGameMode_PlayerCanRestartAtPlayerStart, Player) == 0x000000, "Member 'HDBaseGameMode_PlayerCanRestartAtPlayerStart::Player' has a wrong offset!");
//(offsetof(HDBaseGameMode_PlayerCanRestartAtPlayerStart, StartSpot) == 0x000008, "Member 'HDBaseGameMode_PlayerCanRestartAtPlayerStart::StartSpot' has a wrong offset!");
//(offsetof(HDBaseGameMode_PlayerCanRestartAtPlayerStart, StartLoadout) == 0x000010, "Member 'HDBaseGameMode_PlayerCanRestartAtPlayerStart::StartLoadout' has a wrong offset!");
//(offsetof(HDBaseGameMode_PlayerCanRestartAtPlayerStart, ReturnValue) == 0x000018, "Member 'HDBaseGameMode_PlayerCanRestartAtPlayerStart::ReturnValue' has a wrong offset!");

// Function HDMain.HDBaseGameMode.RemoveBluforBots
// 0x0004 (0x0004 - 0x0000)
struct HDBaseGameMode_RemoveBluforBots final 
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseGameMode_RemoveBluforBots) == 0x000004, "Wrong alignment on HDBaseGameMode_RemoveBluforBots");
//(sizeof(HDBaseGameMode_RemoveBluforBots) == 0x000004, "Wrong size on HDBaseGameMode_RemoveBluforBots");
//(offsetof(HDBaseGameMode_RemoveBluforBots, Num) == 0x000000, "Member 'HDBaseGameMode_RemoveBluforBots::Num' has a wrong offset!");

// Function HDMain.HDBaseGameMode.RemoveOpforBots
// 0x0004 (0x0004 - 0x0000)
struct HDBaseGameMode_RemoveOpforBots final 
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseGameMode_RemoveOpforBots) == 0x000004, "Wrong alignment on HDBaseGameMode_RemoveOpforBots");
//(sizeof(HDBaseGameMode_RemoveOpforBots) == 0x000004, "Wrong size on HDBaseGameMode_RemoveOpforBots");
//(offsetof(HDBaseGameMode_RemoveOpforBots, Num) == 0x000000, "Member 'HDBaseGameMode_RemoveOpforBots::Num' has a wrong offset!");

// Function HDMain.HDBaseWeapon.IsSelectableEquipment
// 0x0001 (0x0001 - 0x0000)
struct HDBaseWeapon_IsSelectableEquipment final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDBaseWeapon_IsSelectableEquipment) == 0x000001, "Wrong alignment on HDBaseWeapon_IsSelectableEquipment");
//(sizeof(HDBaseWeapon_IsSelectableEquipment) == 0x000001, "Wrong size on HDBaseWeapon_IsSelectableEquipment");
//(offsetof(HDBaseWeapon_IsSelectableEquipment, ReturnValue) == 0x000000, "Member 'HDBaseWeapon_IsSelectableEquipment::ReturnValue' has a wrong offset!");

// Function HDMain.HDButtonBase.SetButtonText
// 0x0018 (0x0018 - 0x0000)
struct HDButtonBase_SetButtonText final 
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(HDButtonBase_SetButtonText) == 0x000008, "Wrong alignment on HDButtonBase_SetButtonText");
//(sizeof(HDButtonBase_SetButtonText) == 0x000018, "Wrong size on HDButtonBase_SetButtonText");
//(offsetof(HDButtonBase_SetButtonText, InText) == 0x000000, "Member 'HDButtonBase_SetButtonText::InText' has a wrong offset!");

// Function HDMain.HDButtonBase.UpdateButtonText
// 0x0018 (0x0018 - 0x0000)
struct HDButtonBase_UpdateButtonText final 
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(HDButtonBase_UpdateButtonText) == 0x000008, "Wrong alignment on HDButtonBase_UpdateButtonText");
//(sizeof(HDButtonBase_UpdateButtonText) == 0x000018, "Wrong size on HDButtonBase_UpdateButtonText");
//(offsetof(HDButtonBase_UpdateButtonText, InText) == 0x000000, "Member 'HDButtonBase_UpdateButtonText::InText' has a wrong offset!");

// Function HDMain.HDPlayerController.CanTalkOverChannel
// 0x000C (0x000C - 0x0000)
struct HDPlayerController_CanTalkOverChannel final 
{
public:
	class FName                                   TalkChannelName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BD[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlayerController_CanTalkOverChannel) == 0x000004, "Wrong alignment on HDPlayerController_CanTalkOverChannel");
//(sizeof(HDPlayerController_CanTalkOverChannel) == 0x00000C, "Wrong size on HDPlayerController_CanTalkOverChannel");
//(offsetof(HDPlayerController_CanTalkOverChannel, TalkChannelName) == 0x000000, "Member 'HDPlayerController_CanTalkOverChannel::TalkChannelName' has a wrong offset!");
//(offsetof(HDPlayerController_CanTalkOverChannel, ReturnValue) == 0x000008, "Member 'HDPlayerController_CanTalkOverChannel::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerController.ClientCheatSetAllowIdleSway
// 0x0001 (0x0001 - 0x0000)
struct HDPlayerController_ClientCheatSetAllowIdleSway final 
{
public:
	bool                                          bIdleSwayDisallowed;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_ClientCheatSetAllowIdleSway) == 0x000001, "Wrong alignment on HDPlayerController_ClientCheatSetAllowIdleSway");
//(sizeof(HDPlayerController_ClientCheatSetAllowIdleSway) == 0x000001, "Wrong size on HDPlayerController_ClientCheatSetAllowIdleSway");
//(offsetof(HDPlayerController_ClientCheatSetAllowIdleSway, bIdleSwayDisallowed) == 0x000000, "Member 'HDPlayerController_ClientCheatSetAllowIdleSway::bIdleSwayDisallowed' has a wrong offset!");

// Function HDMain.HDPlayerController.ClientLoadTeamData
// 0x0010 (0x0010 - 0x0000)
struct HDPlayerController_ClientLoadTeamData final 
{
public:
	TArray<class FString>                         FactionAssetPaths;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_ClientLoadTeamData) == 0x000008, "Wrong alignment on HDPlayerController_ClientLoadTeamData");
//(sizeof(HDPlayerController_ClientLoadTeamData) == 0x000010, "Wrong size on HDPlayerController_ClientLoadTeamData");
//(offsetof(HDPlayerController_ClientLoadTeamData, FactionAssetPaths) == 0x000000, "Member 'HDPlayerController_ClientLoadTeamData::FactionAssetPaths' has a wrong offset!");

// Function HDMain.HDPlayerController.ClientRoundEnd
// 0x0014 (0x0014 - 0x0000)
struct HDPlayerController_ClientRoundEnd final 
{
public:
	struct FHDGameRoundEndEventDetails            RoundDetails;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsWinner;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BE[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlayerController_ClientRoundEnd) == 0x000004, "Wrong alignment on HDPlayerController_ClientRoundEnd");
//(sizeof(HDPlayerController_ClientRoundEnd) == 0x000014, "Wrong size on HDPlayerController_ClientRoundEnd");
//(offsetof(HDPlayerController_ClientRoundEnd, RoundDetails) == 0x000000, "Member 'HDPlayerController_ClientRoundEnd::RoundDetails' has a wrong offset!");
//(offsetof(HDPlayerController_ClientRoundEnd, bIsWinner) == 0x000010, "Member 'HDPlayerController_ClientRoundEnd::bIsWinner' has a wrong offset!");

// Function HDMain.HDPlayerController.GetPlayerCommsComponent
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerController_GetPlayerCommsComponent final 
{
public:
	class UDFPlayerCommsComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_GetPlayerCommsComponent) == 0x000008, "Wrong alignment on HDPlayerController_GetPlayerCommsComponent");
//(sizeof(HDPlayerController_GetPlayerCommsComponent) == 0x000008, "Wrong size on HDPlayerController_GetPlayerCommsComponent");
//(offsetof(HDPlayerController_GetPlayerCommsComponent, ReturnValue) == 0x000000, "Member 'HDPlayerController_GetPlayerCommsComponent::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerController.GetTalkChannel
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerController_GetTalkChannel final 
{
public:
	class UDFCommChannel*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_GetTalkChannel) == 0x000008, "Wrong alignment on HDPlayerController_GetTalkChannel");
//(sizeof(HDPlayerController_GetTalkChannel) == 0x000008, "Wrong size on HDPlayerController_GetTalkChannel");
//(offsetof(HDPlayerController_GetTalkChannel, ReturnValue) == 0x000000, "Member 'HDPlayerController_GetTalkChannel::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerController.IsTalkingOverChannel
// 0x0010 (0x0010 - 0x0000)
struct HDPlayerController_IsTalkingOverChannel final 
{
public:
	class UDFCommChannel*                         TalkChannel;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlayerController_IsTalkingOverChannel) == 0x000008, "Wrong alignment on HDPlayerController_IsTalkingOverChannel");
//(sizeof(HDPlayerController_IsTalkingOverChannel) == 0x000010, "Wrong size on HDPlayerController_IsTalkingOverChannel");
//(offsetof(HDPlayerController_IsTalkingOverChannel, TalkChannel) == 0x000000, "Member 'HDPlayerController_IsTalkingOverChannel::TalkChannel' has a wrong offset!");
//(offsetof(HDPlayerController_IsTalkingOverChannel, ReturnValue) == 0x000008, "Member 'HDPlayerController_IsTalkingOverChannel::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerController.IsTalkingOverChannelGroup
// 0x000C (0x000C - 0x0000)
struct HDPlayerController_IsTalkingOverChannelGroup final 
{
public:
	class FName                                   TalkGroupName;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C0[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlayerController_IsTalkingOverChannelGroup) == 0x000004, "Wrong alignment on HDPlayerController_IsTalkingOverChannelGroup");
//(sizeof(HDPlayerController_IsTalkingOverChannelGroup) == 0x00000C, "Wrong size on HDPlayerController_IsTalkingOverChannelGroup");
//(offsetof(HDPlayerController_IsTalkingOverChannelGroup, TalkGroupName) == 0x000000, "Member 'HDPlayerController_IsTalkingOverChannelGroup::TalkGroupName' has a wrong offset!");
//(offsetof(HDPlayerController_IsTalkingOverChannelGroup, ReturnValue) == 0x000008, "Member 'HDPlayerController_IsTalkingOverChannelGroup::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerController.IsTalkingOverChannelName
// 0x000C (0x000C - 0x0000)
struct HDPlayerController_IsTalkingOverChannelName final 
{
public:
	class FName                                   TalkChannelName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C1[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlayerController_IsTalkingOverChannelName) == 0x000004, "Wrong alignment on HDPlayerController_IsTalkingOverChannelName");
//(sizeof(HDPlayerController_IsTalkingOverChannelName) == 0x00000C, "Wrong size on HDPlayerController_IsTalkingOverChannelName");
//(offsetof(HDPlayerController_IsTalkingOverChannelName, TalkChannelName) == 0x000000, "Member 'HDPlayerController_IsTalkingOverChannelName::TalkChannelName' has a wrong offset!");
//(offsetof(HDPlayerController_IsTalkingOverChannelName, ReturnValue) == 0x000008, "Member 'HDPlayerController_IsTalkingOverChannelName::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerController.LoadVictoryMenu
// 0x0014 (0x0014 - 0x0000)
struct HDPlayerController_LoadVictoryMenu final 
{
public:
	struct FHDGameRoundEndEventDetails            RoundDetails;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWinner;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C2[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlayerController_LoadVictoryMenu) == 0x000004, "Wrong alignment on HDPlayerController_LoadVictoryMenu");
//(sizeof(HDPlayerController_LoadVictoryMenu) == 0x000014, "Wrong size on HDPlayerController_LoadVictoryMenu");
//(offsetof(HDPlayerController_LoadVictoryMenu, RoundDetails) == 0x000000, "Member 'HDPlayerController_LoadVictoryMenu::RoundDetails' has a wrong offset!");
//(offsetof(HDPlayerController_LoadVictoryMenu, bWinner) == 0x000010, "Member 'HDPlayerController_LoadVictoryMenu::bWinner' has a wrong offset!");

// Function HDMain.HDPlayerController.ReceiveVoipTalkerMsgReceived
// 0x0018 (0x0018 - 0x0000)
struct HDPlayerController_ReceiveVoipTalkerMsgReceived final 
{
public:
	class UDFCommChannel*                         MsgTalkerChannel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           MsgTalkerPS;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMsgIsTalking;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C3[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlayerController_ReceiveVoipTalkerMsgReceived) == 0x000008, "Wrong alignment on HDPlayerController_ReceiveVoipTalkerMsgReceived");
//(sizeof(HDPlayerController_ReceiveVoipTalkerMsgReceived) == 0x000018, "Wrong size on HDPlayerController_ReceiveVoipTalkerMsgReceived");
//(offsetof(HDPlayerController_ReceiveVoipTalkerMsgReceived, MsgTalkerChannel) == 0x000000, "Member 'HDPlayerController_ReceiveVoipTalkerMsgReceived::MsgTalkerChannel' has a wrong offset!");
//(offsetof(HDPlayerController_ReceiveVoipTalkerMsgReceived, MsgTalkerPS) == 0x000008, "Member 'HDPlayerController_ReceiveVoipTalkerMsgReceived::MsgTalkerPS' has a wrong offset!");
//(offsetof(HDPlayerController_ReceiveVoipTalkerMsgReceived, bMsgIsTalking) == 0x000010, "Member 'HDPlayerController_ReceiveVoipTalkerMsgReceived::bMsgIsTalking' has a wrong offset!");

// Function HDMain.HDPlayerController.ServerCheatSetAllowIdleSway
// 0x0001 (0x0001 - 0x0000)
struct HDPlayerController_ServerCheatSetAllowIdleSway final 
{
public:
	bool                                          bIdleSwayDisallowed;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_ServerCheatSetAllowIdleSway) == 0x000001, "Wrong alignment on HDPlayerController_ServerCheatSetAllowIdleSway");
//(sizeof(HDPlayerController_ServerCheatSetAllowIdleSway) == 0x000001, "Wrong size on HDPlayerController_ServerCheatSetAllowIdleSway");
//(offsetof(HDPlayerController_ServerCheatSetAllowIdleSway, bIdleSwayDisallowed) == 0x000000, "Member 'HDPlayerController_ServerCheatSetAllowIdleSway::bIdleSwayDisallowed' has a wrong offset!");

// Function HDMain.HDPlayerController.ServerPickTeam
// 0x0001 (0x0001 - 0x0000)
struct HDPlayerController_ServerPickTeam final 
{
public:
	EHDTeam                                       DesiredTeam;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_ServerPickTeam) == 0x000001, "Wrong alignment on HDPlayerController_ServerPickTeam");
//(sizeof(HDPlayerController_ServerPickTeam) == 0x000001, "Wrong size on HDPlayerController_ServerPickTeam");
//(offsetof(HDPlayerController_ServerPickTeam, DesiredTeam) == 0x000000, "Member 'HDPlayerController_ServerPickTeam::DesiredTeam' has a wrong offset!");

// Function HDMain.HDPlayerController.ServerRestartPlayerAtStartSpot
// 0x0010 (0x0010 - 0x0000)
struct HDPlayerController_ServerRestartPlayerAtStartSpot final 
{
public:
	class AActor*                                 DesiredStartSpot;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFLoadout*                             DesiredStartLoadout;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_ServerRestartPlayerAtStartSpot) == 0x000008, "Wrong alignment on HDPlayerController_ServerRestartPlayerAtStartSpot");
//(sizeof(HDPlayerController_ServerRestartPlayerAtStartSpot) == 0x000010, "Wrong size on HDPlayerController_ServerRestartPlayerAtStartSpot");
//(offsetof(HDPlayerController_ServerRestartPlayerAtStartSpot, DesiredStartSpot) == 0x000000, "Member 'HDPlayerController_ServerRestartPlayerAtStartSpot::DesiredStartSpot' has a wrong offset!");
//(offsetof(HDPlayerController_ServerRestartPlayerAtStartSpot, DesiredStartLoadout) == 0x000008, "Member 'HDPlayerController_ServerRestartPlayerAtStartSpot::DesiredStartLoadout' has a wrong offset!");

// Function HDMain.HDPlayerController.StartTalkingOverChannel
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerController_StartTalkingOverChannel final 
{
public:
	class FName                                   TalkStartChannelName;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_StartTalkingOverChannel) == 0x000004, "Wrong alignment on HDPlayerController_StartTalkingOverChannel");
//(sizeof(HDPlayerController_StartTalkingOverChannel) == 0x000008, "Wrong size on HDPlayerController_StartTalkingOverChannel");
//(offsetof(HDPlayerController_StartTalkingOverChannel, TalkStartChannelName) == 0x000000, "Member 'HDPlayerController_StartTalkingOverChannel::TalkStartChannelName' has a wrong offset!");

// Function HDMain.HDPlayerController.StartTalkingOverChannelGroup
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerController_StartTalkingOverChannelGroup final 
{
public:
	class FName                                   TalkStartGroupName;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_StartTalkingOverChannelGroup) == 0x000004, "Wrong alignment on HDPlayerController_StartTalkingOverChannelGroup");
//(sizeof(HDPlayerController_StartTalkingOverChannelGroup) == 0x000008, "Wrong size on HDPlayerController_StartTalkingOverChannelGroup");
//(offsetof(HDPlayerController_StartTalkingOverChannelGroup, TalkStartGroupName) == 0x000000, "Member 'HDPlayerController_StartTalkingOverChannelGroup::TalkStartGroupName' has a wrong offset!");

// Function HDMain.HDPlayerController.StopTalkingOverChannelGroupIfActive
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerController_StopTalkingOverChannelGroupIfActive final 
{
public:
	class FName                                   TalkStopGroupName;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_StopTalkingOverChannelGroupIfActive) == 0x000004, "Wrong alignment on HDPlayerController_StopTalkingOverChannelGroupIfActive");
//(sizeof(HDPlayerController_StopTalkingOverChannelGroupIfActive) == 0x000008, "Wrong size on HDPlayerController_StopTalkingOverChannelGroupIfActive");
//(offsetof(HDPlayerController_StopTalkingOverChannelGroupIfActive, TalkStopGroupName) == 0x000000, "Member 'HDPlayerController_StopTalkingOverChannelGroupIfActive::TalkStopGroupName' has a wrong offset!");

// Function HDMain.HDPlayerController.StopTalkingOverChannelIfActive
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerController_StopTalkingOverChannelIfActive final 
{
public:
	class FName                                   TalkStopChannelName;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_StopTalkingOverChannelIfActive) == 0x000004, "Wrong alignment on HDPlayerController_StopTalkingOverChannelIfActive");
//(sizeof(HDPlayerController_StopTalkingOverChannelIfActive) == 0x000008, "Wrong size on HDPlayerController_StopTalkingOverChannelIfActive");
//(offsetof(HDPlayerController_StopTalkingOverChannelIfActive, TalkStopChannelName) == 0x000000, "Member 'HDPlayerController_StopTalkingOverChannelIfActive::TalkStopChannelName' has a wrong offset!");

// Function HDMain.HDPlayerController.IsIdleSwayAllowed
// 0x0001 (0x0001 - 0x0000)
struct HDPlayerController_IsIdleSwayAllowed final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_IsIdleSwayAllowed) == 0x000001, "Wrong alignment on HDPlayerController_IsIdleSwayAllowed");
//(sizeof(HDPlayerController_IsIdleSwayAllowed) == 0x000001, "Wrong size on HDPlayerController_IsIdleSwayAllowed");
//(offsetof(HDPlayerController_IsIdleSwayAllowed, ReturnValue) == 0x000000, "Member 'HDPlayerController_IsIdleSwayAllowed::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerController.IsInVehicle
// 0x0001 (0x0001 - 0x0000)
struct HDPlayerController_IsInVehicle final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_IsInVehicle) == 0x000001, "Wrong alignment on HDPlayerController_IsInVehicle");
//(sizeof(HDPlayerController_IsInVehicle) == 0x000001, "Wrong size on HDPlayerController_IsInVehicle");
//(offsetof(HDPlayerController_IsInVehicle, ReturnValue) == 0x000000, "Member 'HDPlayerController_IsInVehicle::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerController.IsTalking
// 0x0002 (0x0002 - 0x0000)
struct HDPlayerController_IsTalking final 
{
public:
	bool                                          bIncludeWantsToTalk;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerController_IsTalking) == 0x000001, "Wrong alignment on HDPlayerController_IsTalking");
//(sizeof(HDPlayerController_IsTalking) == 0x000002, "Wrong size on HDPlayerController_IsTalking");
//(offsetof(HDPlayerController_IsTalking, bIncludeWantsToTalk) == 0x000000, "Member 'HDPlayerController_IsTalking::bIncludeWantsToTalk' has a wrong offset!");
//(offsetof(HDPlayerController_IsTalking, ReturnValue) == 0x000001, "Member 'HDPlayerController_IsTalking::ReturnValue' has a wrong offset!");

// Function HDMain.HDCheatManager.SetFreeAimDeadzoneCameraSpeedFactor
// 0x0004 (0x0004 - 0x0000)
struct HDCheatManager_SetFreeAimDeadzoneCameraSpeedFactor final 
{
public:
	float                                         NewSpeedFactor;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDCheatManager_SetFreeAimDeadzoneCameraSpeedFactor) == 0x000004, "Wrong alignment on HDCheatManager_SetFreeAimDeadzoneCameraSpeedFactor");
//(sizeof(HDCheatManager_SetFreeAimDeadzoneCameraSpeedFactor) == 0x000004, "Wrong size on HDCheatManager_SetFreeAimDeadzoneCameraSpeedFactor");
//(offsetof(HDCheatManager_SetFreeAimDeadzoneCameraSpeedFactor, NewSpeedFactor) == 0x000000, "Member 'HDCheatManager_SetFreeAimDeadzoneCameraSpeedFactor::NewSpeedFactor' has a wrong offset!");

// Function HDMain.HDCheatManager.SetFreeAimReturnToCenterInterpSpeed
// 0x0004 (0x0004 - 0x0000)
struct HDCheatManager_SetFreeAimReturnToCenterInterpSpeed final 
{
public:
	float                                         NewInterpSpeed;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDCheatManager_SetFreeAimReturnToCenterInterpSpeed) == 0x000004, "Wrong alignment on HDCheatManager_SetFreeAimReturnToCenterInterpSpeed");
//(sizeof(HDCheatManager_SetFreeAimReturnToCenterInterpSpeed) == 0x000004, "Wrong size on HDCheatManager_SetFreeAimReturnToCenterInterpSpeed");
//(offsetof(HDCheatManager_SetFreeAimReturnToCenterInterpSpeed, NewInterpSpeed) == 0x000000, "Member 'HDCheatManager_SetFreeAimReturnToCenterInterpSpeed::NewInterpSpeed' has a wrong offset!");

// Function HDMain.HDCheatManager.SetMaxFreeAimPitch
// 0x0004 (0x0004 - 0x0000)
struct HDCheatManager_SetMaxFreeAimPitch final 
{
public:
	float                                         NewPitch;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDCheatManager_SetMaxFreeAimPitch) == 0x000004, "Wrong alignment on HDCheatManager_SetMaxFreeAimPitch");
//(sizeof(HDCheatManager_SetMaxFreeAimPitch) == 0x000004, "Wrong size on HDCheatManager_SetMaxFreeAimPitch");
//(offsetof(HDCheatManager_SetMaxFreeAimPitch, NewPitch) == 0x000000, "Member 'HDCheatManager_SetMaxFreeAimPitch::NewPitch' has a wrong offset!");

// Function HDMain.HDCheatManager.SetMaxFreeAimPitchADS
// 0x0004 (0x0004 - 0x0000)
struct HDCheatManager_SetMaxFreeAimPitchADS final 
{
public:
	float                                         NewPitch;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDCheatManager_SetMaxFreeAimPitchADS) == 0x000004, "Wrong alignment on HDCheatManager_SetMaxFreeAimPitchADS");
//(sizeof(HDCheatManager_SetMaxFreeAimPitchADS) == 0x000004, "Wrong size on HDCheatManager_SetMaxFreeAimPitchADS");
//(offsetof(HDCheatManager_SetMaxFreeAimPitchADS, NewPitch) == 0x000000, "Member 'HDCheatManager_SetMaxFreeAimPitchADS::NewPitch' has a wrong offset!");

// Function HDMain.HDCheatManager.SetMaxFreeAimYaw
// 0x0004 (0x0004 - 0x0000)
struct HDCheatManager_SetMaxFreeAimYaw final 
{
public:
	float                                         NewYaw;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDCheatManager_SetMaxFreeAimYaw) == 0x000004, "Wrong alignment on HDCheatManager_SetMaxFreeAimYaw");
//(sizeof(HDCheatManager_SetMaxFreeAimYaw) == 0x000004, "Wrong size on HDCheatManager_SetMaxFreeAimYaw");
//(offsetof(HDCheatManager_SetMaxFreeAimYaw, NewYaw) == 0x000000, "Member 'HDCheatManager_SetMaxFreeAimYaw::NewYaw' has a wrong offset!");

// Function HDMain.HDCheatManager.SetMaxFreeAimYawADS
// 0x0004 (0x0004 - 0x0000)
struct HDCheatManager_SetMaxFreeAimYawADS final 
{
public:
	float                                         NewYaw;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDCheatManager_SetMaxFreeAimYawADS) == 0x000004, "Wrong alignment on HDCheatManager_SetMaxFreeAimYawADS");
//(sizeof(HDCheatManager_SetMaxFreeAimYawADS) == 0x000004, "Wrong size on HDCheatManager_SetMaxFreeAimYawADS");
//(offsetof(HDCheatManager_SetMaxFreeAimYawADS, NewYaw) == 0x000000, "Member 'HDCheatManager_SetMaxFreeAimYawADS::NewYaw' has a wrong offset!");

// Function HDMain.HDConfirmationDialog.UpdateDialogText
// 0x0030 (0x0030 - 0x0000)
struct HDConfirmationDialog_UpdateDialogText final 
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(HDConfirmationDialog_UpdateDialogText) == 0x000008, "Wrong alignment on HDConfirmationDialog_UpdateDialogText");
//(sizeof(HDConfirmationDialog_UpdateDialogText) == 0x000030, "Wrong size on HDConfirmationDialog_UpdateDialogText");
//(offsetof(HDConfirmationDialog_UpdateDialogText, TitleText) == 0x000000, "Member 'HDConfirmationDialog_UpdateDialogText::TitleText' has a wrong offset!");
//(offsetof(HDConfirmationDialog_UpdateDialogText, DescriptionText) == 0x000018, "Member 'HDConfirmationDialog_UpdateDialogText::DescriptionText' has a wrong offset!");

// Function HDMain.HDGame_AdvanceAndSecure.GetCurrentBlueCaptureTier
// 0x0004 (0x0004 - 0x0000)
struct HDGame_AdvanceAndSecure_GetCurrentBlueCaptureTier final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGame_AdvanceAndSecure_GetCurrentBlueCaptureTier) == 0x000004, "Wrong alignment on HDGame_AdvanceAndSecure_GetCurrentBlueCaptureTier");
//(sizeof(HDGame_AdvanceAndSecure_GetCurrentBlueCaptureTier) == 0x000004, "Wrong size on HDGame_AdvanceAndSecure_GetCurrentBlueCaptureTier");
//(offsetof(HDGame_AdvanceAndSecure_GetCurrentBlueCaptureTier, ReturnValue) == 0x000000, "Member 'HDGame_AdvanceAndSecure_GetCurrentBlueCaptureTier::ReturnValue' has a wrong offset!");

// Function HDMain.HDGame_AdvanceAndSecure.GetCurrentRedCaptureTier
// 0x0004 (0x0004 - 0x0000)
struct HDGame_AdvanceAndSecure_GetCurrentRedCaptureTier final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGame_AdvanceAndSecure_GetCurrentRedCaptureTier) == 0x000004, "Wrong alignment on HDGame_AdvanceAndSecure_GetCurrentRedCaptureTier");
//(sizeof(HDGame_AdvanceAndSecure_GetCurrentRedCaptureTier) == 0x000004, "Wrong size on HDGame_AdvanceAndSecure_GetCurrentRedCaptureTier");
//(offsetof(HDGame_AdvanceAndSecure_GetCurrentRedCaptureTier, ReturnValue) == 0x000000, "Member 'HDGame_AdvanceAndSecure_GetCurrentRedCaptureTier::ReturnValue' has a wrong offset!");

// Function HDMain.HDGameInstance.HasDLCBP
// 0x0010 (0x0010 - 0x0000)
struct HDGameInstance_HasDLCBP final 
{
public:
	int64                                         DLCAppID;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDGameInstance_HasDLCBP) == 0x000008, "Wrong alignment on HDGameInstance_HasDLCBP");
//(sizeof(HDGameInstance_HasDLCBP) == 0x000010, "Wrong size on HDGameInstance_HasDLCBP");
//(offsetof(HDGameInstance_HasDLCBP, DLCAppID) == 0x000000, "Member 'HDGameInstance_HasDLCBP::DLCAppID' has a wrong offset!");
//(offsetof(HDGameInstance_HasDLCBP, ReturnValue) == 0x000008, "Member 'HDGameInstance_HasDLCBP::ReturnValue' has a wrong offset!");

// Function HDMain.HDGameInstance.HasModsLoaded
// 0x0001 (0x0001 - 0x0000)
struct HDGameInstance_HasModsLoaded final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGameInstance_HasModsLoaded) == 0x000001, "Wrong alignment on HDGameInstance_HasModsLoaded");
//(sizeof(HDGameInstance_HasModsLoaded) == 0x000001, "Wrong size on HDGameInstance_HasModsLoaded");
//(offsetof(HDGameInstance_HasModsLoaded, ReturnValue) == 0x000000, "Member 'HDGameInstance_HasModsLoaded::ReturnValue' has a wrong offset!");

// Function HDMain.HDGameInstance.OwnsAppBP
// 0x0010 (0x0010 - 0x0000)
struct HDGameInstance_OwnsAppBP final 
{
public:
	int64                                         AppID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDGameInstance_OwnsAppBP) == 0x000008, "Wrong alignment on HDGameInstance_OwnsAppBP");
//(sizeof(HDGameInstance_OwnsAppBP) == 0x000010, "Wrong size on HDGameInstance_OwnsAppBP");
//(offsetof(HDGameInstance_OwnsAppBP, AppID) == 0x000000, "Member 'HDGameInstance_OwnsAppBP::AppID' has a wrong offset!");
//(offsetof(HDGameInstance_OwnsAppBP, ReturnValue) == 0x000008, "Member 'HDGameInstance_OwnsAppBP::ReturnValue' has a wrong offset!");

// Function HDMain.HDGameInstance.ShowConfirmationDialog
// 0x0030 (0x0030 - 0x0000)
struct HDGameInstance_ShowConfirmationDialog final 
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(HDGameInstance_ShowConfirmationDialog) == 0x000008, "Wrong alignment on HDGameInstance_ShowConfirmationDialog");
//(sizeof(HDGameInstance_ShowConfirmationDialog) == 0x000030, "Wrong size on HDGameInstance_ShowConfirmationDialog");
//(offsetof(HDGameInstance_ShowConfirmationDialog, Title) == 0x000000, "Member 'HDGameInstance_ShowConfirmationDialog::Title' has a wrong offset!");
//(offsetof(HDGameInstance_ShowConfirmationDialog, Message) == 0x000018, "Member 'HDGameInstance_ShowConfirmationDialog::Message' has a wrong offset!");

// Function HDMain.HDGameInstance.ShowErrorDialog
// 0x0030 (0x0030 - 0x0000)
struct HDGameInstance_ShowErrorDialog final 
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(HDGameInstance_ShowErrorDialog) == 0x000008, "Wrong alignment on HDGameInstance_ShowErrorDialog");
//(sizeof(HDGameInstance_ShowErrorDialog) == 0x000030, "Wrong size on HDGameInstance_ShowErrorDialog");
//(offsetof(HDGameInstance_ShowErrorDialog, Title) == 0x000000, "Member 'HDGameInstance_ShowErrorDialog::Title' has a wrong offset!");
//(offsetof(HDGameInstance_ShowErrorDialog, Message) == 0x000018, "Member 'HDGameInstance_ShowErrorDialog::Message' has a wrong offset!");

// Function HDMain.HDGameProjectBuildSettings.IsDemoBuild
// 0x0001 (0x0001 - 0x0000)
struct HDGameProjectBuildSettings_IsDemoBuild final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGameProjectBuildSettings_IsDemoBuild) == 0x000001, "Wrong alignment on HDGameProjectBuildSettings_IsDemoBuild");
//(sizeof(HDGameProjectBuildSettings_IsDemoBuild) == 0x000001, "Wrong size on HDGameProjectBuildSettings_IsDemoBuild");
//(offsetof(HDGameProjectBuildSettings_IsDemoBuild, ReturnValue) == 0x000000, "Member 'HDGameProjectBuildSettings_IsDemoBuild::ReturnValue' has a wrong offset!");

// Function HDMain.HDGameRulesetBase.GiveTicketsToTeam
// 0x0008 (0x0008 - 0x0000)
struct HDGameRulesetBase_GiveTicketsToTeam final 
{
public:
	EHDTeam                                       TicketTeam;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TicketsToAdd;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGameRulesetBase_GiveTicketsToTeam) == 0x000004, "Wrong alignment on HDGameRulesetBase_GiveTicketsToTeam");
//(sizeof(HDGameRulesetBase_GiveTicketsToTeam) == 0x000008, "Wrong size on HDGameRulesetBase_GiveTicketsToTeam");
//(offsetof(HDGameRulesetBase_GiveTicketsToTeam, TicketTeam) == 0x000000, "Member 'HDGameRulesetBase_GiveTicketsToTeam::TicketTeam' has a wrong offset!");
//(offsetof(HDGameRulesetBase_GiveTicketsToTeam, TicketsToAdd) == 0x000004, "Member 'HDGameRulesetBase_GiveTicketsToTeam::TicketsToAdd' has a wrong offset!");

// Function HDMain.HDGameRulesetBase.RevokeTicketsFromTeam
// 0x0008 (0x0008 - 0x0000)
struct HDGameRulesetBase_RevokeTicketsFromTeam final 
{
public:
	EHDTeam                                       TicketTeam;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TicketsToRemove;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGameRulesetBase_RevokeTicketsFromTeam) == 0x000004, "Wrong alignment on HDGameRulesetBase_RevokeTicketsFromTeam");
//(sizeof(HDGameRulesetBase_RevokeTicketsFromTeam) == 0x000008, "Wrong size on HDGameRulesetBase_RevokeTicketsFromTeam");
//(offsetof(HDGameRulesetBase_RevokeTicketsFromTeam, TicketTeam) == 0x000000, "Member 'HDGameRulesetBase_RevokeTicketsFromTeam::TicketTeam' has a wrong offset!");
//(offsetof(HDGameRulesetBase_RevokeTicketsFromTeam, TicketsToRemove) == 0x000004, "Member 'HDGameRulesetBase_RevokeTicketsFromTeam::TicketsToRemove' has a wrong offset!");

// Function HDMain.HDGameRulesetBase.GetHDGameMode
// 0x0008 (0x0008 - 0x0000)
struct HDGameRulesetBase_GetHDGameMode final 
{
public:
	class AHDBaseGameMode*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGameRulesetBase_GetHDGameMode) == 0x000008, "Wrong alignment on HDGameRulesetBase_GetHDGameMode");
//(sizeof(HDGameRulesetBase_GetHDGameMode) == 0x000008, "Wrong size on HDGameRulesetBase_GetHDGameMode");
//(offsetof(HDGameRulesetBase_GetHDGameMode, ReturnValue) == 0x000000, "Member 'HDGameRulesetBase_GetHDGameMode::ReturnValue' has a wrong offset!");

// Function HDMain.HDGameRulesetBase.GetHDGameState
// 0x0008 (0x0008 - 0x0000)
struct HDGameRulesetBase_GetHDGameState final 
{
public:
	class AHDGameState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGameRulesetBase_GetHDGameState) == 0x000008, "Wrong alignment on HDGameRulesetBase_GetHDGameState");
//(sizeof(HDGameRulesetBase_GetHDGameState) == 0x000008, "Wrong size on HDGameRulesetBase_GetHDGameState");
//(offsetof(HDGameRulesetBase_GetHDGameState, ReturnValue) == 0x000000, "Member 'HDGameRulesetBase_GetHDGameState::ReturnValue' has a wrong offset!");

// Function HDMain.HDGameState.GiveTicketsToTeam
// 0x0008 (0x0008 - 0x0000)
struct HDGameState_GiveTicketsToTeam final 
{
public:
	EHDTeam                                       TicketTeam;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TicketsToAdd;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGameState_GiveTicketsToTeam) == 0x000004, "Wrong alignment on HDGameState_GiveTicketsToTeam");
//(sizeof(HDGameState_GiveTicketsToTeam) == 0x000008, "Wrong size on HDGameState_GiveTicketsToTeam");
//(offsetof(HDGameState_GiveTicketsToTeam, TicketTeam) == 0x000000, "Member 'HDGameState_GiveTicketsToTeam::TicketTeam' has a wrong offset!");
//(offsetof(HDGameState_GiveTicketsToTeam, TicketsToAdd) == 0x000004, "Member 'HDGameState_GiveTicketsToTeam::TicketsToAdd' has a wrong offset!");

// Function HDMain.HDGameState.RevokeTicketsFromTeam
// 0x0008 (0x0008 - 0x0000)
struct HDGameState_RevokeTicketsFromTeam final 
{
public:
	EHDTeam                                       TicketTeam;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TicketsToRemove;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGameState_RevokeTicketsFromTeam) == 0x000004, "Wrong alignment on HDGameState_RevokeTicketsFromTeam");
//(sizeof(HDGameState_RevokeTicketsFromTeam) == 0x000008, "Wrong size on HDGameState_RevokeTicketsFromTeam");
//(offsetof(HDGameState_RevokeTicketsFromTeam, TicketTeam) == 0x000000, "Member 'HDGameState_RevokeTicketsFromTeam::TicketTeam' has a wrong offset!");
//(offsetof(HDGameState_RevokeTicketsFromTeam, TicketsToRemove) == 0x000004, "Member 'HDGameState_RevokeTicketsFromTeam::TicketsToRemove' has a wrong offset!");

// Function HDMain.HDGameState.GetNumPlayersOnTeam
// 0x0008 (0x0008 - 0x0000)
struct HDGameState_GetNumPlayersOnTeam final 
{
public:
	EHDTeam                                       TeamToCheck;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGameState_GetNumPlayersOnTeam) == 0x000004, "Wrong alignment on HDGameState_GetNumPlayersOnTeam");
//(sizeof(HDGameState_GetNumPlayersOnTeam) == 0x000008, "Wrong size on HDGameState_GetNumPlayersOnTeam");
//(offsetof(HDGameState_GetNumPlayersOnTeam, TeamToCheck) == 0x000000, "Member 'HDGameState_GetNumPlayersOnTeam::TeamToCheck' has a wrong offset!");
//(offsetof(HDGameState_GetNumPlayersOnTeam, ReturnValue) == 0x000004, "Member 'HDGameState_GetNumPlayersOnTeam::ReturnValue' has a wrong offset!");

// Function HDMain.HDGameState.IsGameUsingPlayerSpawnKitRestrictions
// 0x0010 (0x0010 - 0x0000)
struct HDGameState_IsGameUsingPlayerSpawnKitRestrictions final 
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDGameState_IsGameUsingPlayerSpawnKitRestrictions) == 0x000008, "Wrong alignment on HDGameState_IsGameUsingPlayerSpawnKitRestrictions");
//(sizeof(HDGameState_IsGameUsingPlayerSpawnKitRestrictions) == 0x000010, "Wrong size on HDGameState_IsGameUsingPlayerSpawnKitRestrictions");
//(offsetof(HDGameState_IsGameUsingPlayerSpawnKitRestrictions, Controller) == 0x000000, "Member 'HDGameState_IsGameUsingPlayerSpawnKitRestrictions::Controller' has a wrong offset!");
//(offsetof(HDGameState_IsGameUsingPlayerSpawnKitRestrictions, ReturnValue) == 0x000008, "Member 'HDGameState_IsGameUsingPlayerSpawnKitRestrictions::ReturnValue' has a wrong offset!");

// Function HDMain.HDGameState.IsGameUsingTickets
// 0x0001 (0x0001 - 0x0000)
struct HDGameState_IsGameUsingTickets final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGameState_IsGameUsingTickets) == 0x000001, "Wrong alignment on HDGameState_IsGameUsingTickets");
//(sizeof(HDGameState_IsGameUsingTickets) == 0x000001, "Wrong size on HDGameState_IsGameUsingTickets");
//(offsetof(HDGameState_IsGameUsingTickets, ReturnValue) == 0x000000, "Member 'HDGameState_IsGameUsingTickets::ReturnValue' has a wrong offset!");

// Function HDMain.HDGOAPComponent.TargetPerceptionUpdated
// 0x0048 (0x0048 - 0x0000)
struct HDGOAPComponent_TargetPerceptionUpdated final 
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x003C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D5[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDGOAPComponent_TargetPerceptionUpdated) == 0x000008, "Wrong alignment on HDGOAPComponent_TargetPerceptionUpdated");
//(sizeof(HDGOAPComponent_TargetPerceptionUpdated) == 0x000048, "Wrong size on HDGOAPComponent_TargetPerceptionUpdated");
//(offsetof(HDGOAPComponent_TargetPerceptionUpdated, Actor) == 0x000000, "Member 'HDGOAPComponent_TargetPerceptionUpdated::Actor' has a wrong offset!");
//(offsetof(HDGOAPComponent_TargetPerceptionUpdated, Stimulus) == 0x000008, "Member 'HDGOAPComponent_TargetPerceptionUpdated::Stimulus' has a wrong offset!");

// Function HDMain.HDGOAPComponent.GetAIHandler
// 0x0010 (0x0010 - 0x0000)
struct HDGOAPComponent_GetAIHandler final 
{
public:
	TSubclassOf<class UHDAIHandlerBase>           HandlerClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHDAIHandlerBase*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGOAPComponent_GetAIHandler) == 0x000008, "Wrong alignment on HDGOAPComponent_GetAIHandler");
//(sizeof(HDGOAPComponent_GetAIHandler) == 0x000010, "Wrong size on HDGOAPComponent_GetAIHandler");
//(offsetof(HDGOAPComponent_GetAIHandler, HandlerClass) == 0x000000, "Member 'HDGOAPComponent_GetAIHandler::HandlerClass' has a wrong offset!");
//(offsetof(HDGOAPComponent_GetAIHandler, ReturnValue) == 0x000008, "Member 'HDGOAPComponent_GetAIHandler::ReturnValue' has a wrong offset!");

// Function HDMain.HDGOAPComponent.IsAIActive
// 0x0001 (0x0001 - 0x0000)
struct HDGOAPComponent_IsAIActive final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGOAPComponent_IsAIActive) == 0x000001, "Wrong alignment on HDGOAPComponent_IsAIActive");
//(sizeof(HDGOAPComponent_IsAIActive) == 0x000001, "Wrong size on HDGOAPComponent_IsAIActive");
//(offsetof(HDGOAPComponent_IsAIActive, ReturnValue) == 0x000000, "Member 'HDGOAPComponent_IsAIActive::ReturnValue' has a wrong offset!");

// Function HDMain.HDGOAPComponent.IsAIActiveInWorld
// 0x0001 (0x0001 - 0x0000)
struct HDGOAPComponent_IsAIActiveInWorld final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDGOAPComponent_IsAIActiveInWorld) == 0x000001, "Wrong alignment on HDGOAPComponent_IsAIActiveInWorld");
//(sizeof(HDGOAPComponent_IsAIActiveInWorld) == 0x000001, "Wrong size on HDGOAPComponent_IsAIActiveInWorld");
//(offsetof(HDGOAPComponent_IsAIActiveInWorld, ReturnValue) == 0x000000, "Member 'HDGOAPComponent_IsAIActiveInWorld::ReturnValue' has a wrong offset!");

// Function HDMain.HDJoinGameMenu.JoinGame
// 0x0018 (0x0018 - 0x0000)
struct HDJoinGameMenu_JoinGame final 
{
public:
	class UHDServerListItemData*                  ServerItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoinPassword;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDJoinGameMenu_JoinGame) == 0x000008, "Wrong alignment on HDJoinGameMenu_JoinGame");
//(sizeof(HDJoinGameMenu_JoinGame) == 0x000018, "Wrong size on HDJoinGameMenu_JoinGame");
//(offsetof(HDJoinGameMenu_JoinGame, ServerItem) == 0x000000, "Member 'HDJoinGameMenu_JoinGame::ServerItem' has a wrong offset!");
//(offsetof(HDJoinGameMenu_JoinGame, JoinPassword) == 0x000008, "Member 'HDJoinGameMenu_JoinGame::JoinPassword' has a wrong offset!");

// Function HDMain.HDJoinGameMenu.OnRefresh
// 0x0002 (0x0002 - 0x0000)
struct HDJoinGameMenu_OnRefresh final 
{
public:
	bool                                          bSortAscending;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDServerListSortBy                           SortBy;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDJoinGameMenu_OnRefresh) == 0x000001, "Wrong alignment on HDJoinGameMenu_OnRefresh");
//(sizeof(HDJoinGameMenu_OnRefresh) == 0x000002, "Wrong size on HDJoinGameMenu_OnRefresh");
//(offsetof(HDJoinGameMenu_OnRefresh, bSortAscending) == 0x000000, "Member 'HDJoinGameMenu_OnRefresh::bSortAscending' has a wrong offset!");
//(offsetof(HDJoinGameMenu_OnRefresh, SortBy) == 0x000001, "Member 'HDJoinGameMenu_OnRefresh::SortBy' has a wrong offset!");

// Function HDMain.HDJoinGameMenu.ReceiveOnRefreshComplete
// 0x0002 (0x0002 - 0x0000)
struct HDJoinGameMenu_ReceiveOnRefreshComplete final 
{
public:
	bool                                          bSortAscending;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDServerListSortBy                           SortBy;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDJoinGameMenu_ReceiveOnRefreshComplete) == 0x000001, "Wrong alignment on HDJoinGameMenu_ReceiveOnRefreshComplete");
//(sizeof(HDJoinGameMenu_ReceiveOnRefreshComplete) == 0x000002, "Wrong size on HDJoinGameMenu_ReceiveOnRefreshComplete");
//(offsetof(HDJoinGameMenu_ReceiveOnRefreshComplete, bSortAscending) == 0x000000, "Member 'HDJoinGameMenu_ReceiveOnRefreshComplete::bSortAscending' has a wrong offset!");
//(offsetof(HDJoinGameMenu_ReceiveOnRefreshComplete, SortBy) == 0x000001, "Member 'HDJoinGameMenu_ReceiveOnRefreshComplete::SortBy' has a wrong offset!");

// Function HDMain.HDJoinGameMenu.IsUsingDebugServerListings
// 0x0001 (0x0001 - 0x0000)
struct HDJoinGameMenu_IsUsingDebugServerListings final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDJoinGameMenu_IsUsingDebugServerListings) == 0x000001, "Wrong alignment on HDJoinGameMenu_IsUsingDebugServerListings");
//(sizeof(HDJoinGameMenu_IsUsingDebugServerListings) == 0x000001, "Wrong size on HDJoinGameMenu_IsUsingDebugServerListings");
//(offsetof(HDJoinGameMenu_IsUsingDebugServerListings, ReturnValue) == 0x000000, "Member 'HDJoinGameMenu_IsUsingDebugServerListings::ReturnValue' has a wrong offset!");

// Function HDMain.HDKit.GetItemEntryDisplayEquipmentSymbol
// 0x0020 (0x0020 - 0x0000)
struct HDKit_GetItemEntryDisplayEquipmentSymbol final 
{
public:
	struct FHDItemEntry                           ItemEntry;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             OutDisplayEquipmentSymbol;                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D9[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDKit_GetItemEntryDisplayEquipmentSymbol) == 0x000008, "Wrong alignment on HDKit_GetItemEntryDisplayEquipmentSymbol");
//(sizeof(HDKit_GetItemEntryDisplayEquipmentSymbol) == 0x000020, "Wrong size on HDKit_GetItemEntryDisplayEquipmentSymbol");
//(offsetof(HDKit_GetItemEntryDisplayEquipmentSymbol, ItemEntry) == 0x000000, "Member 'HDKit_GetItemEntryDisplayEquipmentSymbol::ItemEntry' has a wrong offset!");
//(offsetof(HDKit_GetItemEntryDisplayEquipmentSymbol, OutDisplayEquipmentSymbol) == 0x000010, "Member 'HDKit_GetItemEntryDisplayEquipmentSymbol::OutDisplayEquipmentSymbol' has a wrong offset!");
//(offsetof(HDKit_GetItemEntryDisplayEquipmentSymbol, ReturnValue) == 0x000018, "Member 'HDKit_GetItemEntryDisplayEquipmentSymbol::ReturnValue' has a wrong offset!");

// Function HDMain.HDKit.GetItemEntryDisplayIcon
// 0x0020 (0x0020 - 0x0000)
struct HDKit_GetItemEntryDisplayIcon final 
{
public:
	struct FHDItemEntry                           ItemEntry;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             OutDisplayIcon;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DA[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDKit_GetItemEntryDisplayIcon) == 0x000008, "Wrong alignment on HDKit_GetItemEntryDisplayIcon");
//(sizeof(HDKit_GetItemEntryDisplayIcon) == 0x000020, "Wrong size on HDKit_GetItemEntryDisplayIcon");
//(offsetof(HDKit_GetItemEntryDisplayIcon, ItemEntry) == 0x000000, "Member 'HDKit_GetItemEntryDisplayIcon::ItemEntry' has a wrong offset!");
//(offsetof(HDKit_GetItemEntryDisplayIcon, OutDisplayIcon) == 0x000010, "Member 'HDKit_GetItemEntryDisplayIcon::OutDisplayIcon' has a wrong offset!");
//(offsetof(HDKit_GetItemEntryDisplayIcon, ReturnValue) == 0x000018, "Member 'HDKit_GetItemEntryDisplayIcon::ReturnValue' has a wrong offset!");

// Function HDMain.HDKit.GetItemEntryBySlotNum
// 0x0020 (0x0020 - 0x0000)
struct HDKit_GetItemEntryBySlotNum final 
{
public:
	int32                                         SlotNum;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHDItemEntry                           OutEntry;                                          // 0x0008(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DC[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDKit_GetItemEntryBySlotNum) == 0x000008, "Wrong alignment on HDKit_GetItemEntryBySlotNum");
//(sizeof(HDKit_GetItemEntryBySlotNum) == 0x000020, "Wrong size on HDKit_GetItemEntryBySlotNum");
//(offsetof(HDKit_GetItemEntryBySlotNum, SlotNum) == 0x000000, "Member 'HDKit_GetItemEntryBySlotNum::SlotNum' has a wrong offset!");
//(offsetof(HDKit_GetItemEntryBySlotNum, OutEntry) == 0x000008, "Member 'HDKit_GetItemEntryBySlotNum::OutEntry' has a wrong offset!");
//(offsetof(HDKit_GetItemEntryBySlotNum, ReturnValue) == 0x000018, "Member 'HDKit_GetItemEntryBySlotNum::ReturnValue' has a wrong offset!");

// Function HDMain.HDKit.GetNumPlayersUsingKit
// 0x0010 (0x0010 - 0x0000)
struct HDKit_GetNumPlayersUsingKit final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DD[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDKit_GetNumPlayersUsingKit) == 0x000008, "Wrong alignment on HDKit_GetNumPlayersUsingKit");
//(sizeof(HDKit_GetNumPlayersUsingKit) == 0x000010, "Wrong size on HDKit_GetNumPlayersUsingKit");
//(offsetof(HDKit_GetNumPlayersUsingKit, WorldContextObject) == 0x000000, "Member 'HDKit_GetNumPlayersUsingKit::WorldContextObject' has a wrong offset!");
//(offsetof(HDKit_GetNumPlayersUsingKit, ReturnValue) == 0x000008, "Member 'HDKit_GetNumPlayersUsingKit::ReturnValue' has a wrong offset!");

// Function HDMain.HDKit.GetPlayersUsingKit
// 0x0020 (0x0020 - 0x0000)
struct HDKit_GetPlayersUsingKit final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AHDPlayerState*>                 OutPSArray;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DE[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDKit_GetPlayersUsingKit) == 0x000008, "Wrong alignment on HDKit_GetPlayersUsingKit");
//(sizeof(HDKit_GetPlayersUsingKit) == 0x000020, "Wrong size on HDKit_GetPlayersUsingKit");
//(offsetof(HDKit_GetPlayersUsingKit, WorldContextObject) == 0x000000, "Member 'HDKit_GetPlayersUsingKit::WorldContextObject' has a wrong offset!");
//(offsetof(HDKit_GetPlayersUsingKit, OutPSArray) == 0x000008, "Member 'HDKit_GetPlayersUsingKit::OutPSArray' has a wrong offset!");
//(offsetof(HDKit_GetPlayersUsingKit, ReturnValue) == 0x000018, "Member 'HDKit_GetPlayersUsingKit::ReturnValue' has a wrong offset!");

// Function HDMain.HDKit.GetPrimaryItemEntry
// 0x0018 (0x0018 - 0x0000)
struct HDKit_GetPrimaryItemEntry final 
{
public:
	struct FHDItemEntry                           OutPrimaryEntry;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DF[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDKit_GetPrimaryItemEntry) == 0x000008, "Wrong alignment on HDKit_GetPrimaryItemEntry");
//(sizeof(HDKit_GetPrimaryItemEntry) == 0x000018, "Wrong size on HDKit_GetPrimaryItemEntry");
//(offsetof(HDKit_GetPrimaryItemEntry, OutPrimaryEntry) == 0x000000, "Member 'HDKit_GetPrimaryItemEntry::OutPrimaryEntry' has a wrong offset!");
//(offsetof(HDKit_GetPrimaryItemEntry, ReturnValue) == 0x000010, "Member 'HDKit_GetPrimaryItemEntry::ReturnValue' has a wrong offset!");

// Function HDMain.HDKit.GetPrimaryItemEntryDisplayIcon
// 0x0010 (0x0010 - 0x0000)
struct HDKit_GetPrimaryItemEntryDisplayIcon final 
{
public:
	class UTexture2D*                             OutDisplayIcon;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDKit_GetPrimaryItemEntryDisplayIcon) == 0x000008, "Wrong alignment on HDKit_GetPrimaryItemEntryDisplayIcon");
//(sizeof(HDKit_GetPrimaryItemEntryDisplayIcon) == 0x000010, "Wrong size on HDKit_GetPrimaryItemEntryDisplayIcon");
//(offsetof(HDKit_GetPrimaryItemEntryDisplayIcon, OutDisplayIcon) == 0x000000, "Member 'HDKit_GetPrimaryItemEntryDisplayIcon::OutDisplayIcon' has a wrong offset!");
//(offsetof(HDKit_GetPrimaryItemEntryDisplayIcon, ReturnValue) == 0x000008, "Member 'HDKit_GetPrimaryItemEntryDisplayIcon::ReturnValue' has a wrong offset!");

// Function HDMain.HDKit.HasKitRequirements
// 0x0001 (0x0001 - 0x0000)
struct HDKit_HasKitRequirements final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDKit_HasKitRequirements) == 0x000001, "Wrong alignment on HDKit_HasKitRequirements");
//(sizeof(HDKit_HasKitRequirements) == 0x000001, "Wrong size on HDKit_HasKitRequirements");
//(offsetof(HDKit_HasKitRequirements, ReturnValue) == 0x000000, "Member 'HDKit_HasKitRequirements::ReturnValue' has a wrong offset!");

// Function HDMain.HDKit.PlayerCanStartWithKit
// 0x0028 (0x0028 - 0x0000)
struct HDKit_PlayerCanStartWithKit final 
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutKitDenialReason;                                // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E1[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDKit_PlayerCanStartWithKit) == 0x000008, "Wrong alignment on HDKit_PlayerCanStartWithKit");
//(sizeof(HDKit_PlayerCanStartWithKit) == 0x000028, "Wrong size on HDKit_PlayerCanStartWithKit");
//(offsetof(HDKit_PlayerCanStartWithKit, Player) == 0x000000, "Member 'HDKit_PlayerCanStartWithKit::Player' has a wrong offset!");
//(offsetof(HDKit_PlayerCanStartWithKit, OutKitDenialReason) == 0x000008, "Member 'HDKit_PlayerCanStartWithKit::OutKitDenialReason' has a wrong offset!");
//(offsetof(HDKit_PlayerCanStartWithKit, ReturnValue) == 0x000020, "Member 'HDKit_PlayerCanStartWithKit::ReturnValue' has a wrong offset!");

// Function HDMain.HDKit.RandomCharacterVariationDataFromKit
// 0x0018 (0x0018 - 0x0000)
struct HDKit_RandomCharacterVariationDataFromKit final 
{
public:
	struct FDFCharacterVariationDataHandle        ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//(alignof(HDKit_RandomCharacterVariationDataFromKit) == 0x000008, "Wrong alignment on HDKit_RandomCharacterVariationDataFromKit");
//(sizeof(HDKit_RandomCharacterVariationDataFromKit) == 0x000018, "Wrong size on HDKit_RandomCharacterVariationDataFromKit");
//(offsetof(HDKit_RandomCharacterVariationDataFromKit, ReturnValue) == 0x000000, "Member 'HDKit_RandomCharacterVariationDataFromKit::ReturnValue' has a wrong offset!");

// Function HDMain.HDModData.DoesModPluginUseLegacyMapScanning
// 0x0018 (0x0018 - 0x0000)
struct HDModData_DoesModPluginUseLegacyMapScanning final 
{
public:
	class FString                                 PluginName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDModData_DoesModPluginUseLegacyMapScanning) == 0x000008, "Wrong alignment on HDModData_DoesModPluginUseLegacyMapScanning");
//(sizeof(HDModData_DoesModPluginUseLegacyMapScanning) == 0x000018, "Wrong size on HDModData_DoesModPluginUseLegacyMapScanning");
//(offsetof(HDModData_DoesModPluginUseLegacyMapScanning, PluginName) == 0x000000, "Member 'HDModData_DoesModPluginUseLegacyMapScanning::PluginName' has a wrong offset!");
//(offsetof(HDModData_DoesModPluginUseLegacyMapScanning, ReturnValue) == 0x000010, "Member 'HDModData_DoesModPluginUseLegacyMapScanning::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlatoonCreationRuleBase.SatisfiesRule
// 0x0010 (0x0010 - 0x0000)
struct HDPlatoonCreationRuleBase_SatisfiesRule final 
{
public:
	class UHDTeamDefinition*                      TeamDef;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlatoonCreationRuleBase_SatisfiesRule) == 0x000008, "Wrong alignment on HDPlatoonCreationRuleBase_SatisfiesRule");
//(sizeof(HDPlatoonCreationRuleBase_SatisfiesRule) == 0x000010, "Wrong size on HDPlatoonCreationRuleBase_SatisfiesRule");
//(offsetof(HDPlatoonCreationRuleBase_SatisfiesRule, TeamDef) == 0x000000, "Member 'HDPlatoonCreationRuleBase_SatisfiesRule::TeamDef' has a wrong offset!");
//(offsetof(HDPlatoonCreationRuleBase_SatisfiesRule, ReturnValue) == 0x000008, "Member 'HDPlatoonCreationRuleBase_SatisfiesRule::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlatoonInfo.ShouldCreateForTeam
// 0x0010 (0x0010 - 0x0000)
struct HDPlatoonInfo_ShouldCreateForTeam final 
{
public:
	class UHDTeamDefinition*                      TeamDef;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11EB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlatoonInfo_ShouldCreateForTeam) == 0x000008, "Wrong alignment on HDPlatoonInfo_ShouldCreateForTeam");
//(sizeof(HDPlatoonInfo_ShouldCreateForTeam) == 0x000010, "Wrong size on HDPlatoonInfo_ShouldCreateForTeam");
//(offsetof(HDPlatoonInfo_ShouldCreateForTeam, TeamDef) == 0x000000, "Member 'HDPlatoonInfo_ShouldCreateForTeam::TeamDef' has a wrong offset!");
//(offsetof(HDPlatoonInfo_ShouldCreateForTeam, ReturnValue) == 0x000008, "Member 'HDPlatoonInfo_ShouldCreateForTeam::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlatoonState.AddSquad
// 0x0030 (0x0030 - 0x0000)
struct HDPlatoonState_AddSquad final 
{
public:
	class FText                                   SquadDisplayName;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AHDPlayerState*                         SquadLeader;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartLocked;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11EF[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHDSquadState*                          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlatoonState_AddSquad) == 0x000008, "Wrong alignment on HDPlatoonState_AddSquad");
//(sizeof(HDPlatoonState_AddSquad) == 0x000030, "Wrong size on HDPlatoonState_AddSquad");
//(offsetof(HDPlatoonState_AddSquad, SquadDisplayName) == 0x000000, "Member 'HDPlatoonState_AddSquad::SquadDisplayName' has a wrong offset!");
//(offsetof(HDPlatoonState_AddSquad, SquadLeader) == 0x000018, "Member 'HDPlatoonState_AddSquad::SquadLeader' has a wrong offset!");
//(offsetof(HDPlatoonState_AddSquad, bStartLocked) == 0x000020, "Member 'HDPlatoonState_AddSquad::bStartLocked' has a wrong offset!");
//(offsetof(HDPlatoonState_AddSquad, ReturnValue) == 0x000028, "Member 'HDPlatoonState_AddSquad::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlatoonState.FindSquadByName
// 0x0028 (0x0028 - 0x0000)
struct HDPlatoonState_FindSquadByName final 
{
public:
	class FText                                   SquadDisplayName;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AHDSquadState*                          OutFoundSquad;                                     // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F0[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlatoonState_FindSquadByName) == 0x000008, "Wrong alignment on HDPlatoonState_FindSquadByName");
//(sizeof(HDPlatoonState_FindSquadByName) == 0x000028, "Wrong size on HDPlatoonState_FindSquadByName");
//(offsetof(HDPlatoonState_FindSquadByName, SquadDisplayName) == 0x000000, "Member 'HDPlatoonState_FindSquadByName::SquadDisplayName' has a wrong offset!");
//(offsetof(HDPlatoonState_FindSquadByName, OutFoundSquad) == 0x000018, "Member 'HDPlatoonState_FindSquadByName::OutFoundSquad' has a wrong offset!");
//(offsetof(HDPlatoonState_FindSquadByName, ReturnValue) == 0x000020, "Member 'HDPlatoonState_FindSquadByName::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlatoonState.ReceiveSquadAdded
// 0x0008 (0x0008 - 0x0000)
struct HDPlatoonState_ReceiveSquadAdded final 
{
public:
	class AHDSquadState*                          Squad;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlatoonState_ReceiveSquadAdded) == 0x000008, "Wrong alignment on HDPlatoonState_ReceiveSquadAdded");
//(sizeof(HDPlatoonState_ReceiveSquadAdded) == 0x000008, "Wrong size on HDPlatoonState_ReceiveSquadAdded");
//(offsetof(HDPlatoonState_ReceiveSquadAdded, Squad) == 0x000000, "Member 'HDPlatoonState_ReceiveSquadAdded::Squad' has a wrong offset!");

// Function HDMain.HDPlatoonState.ReceiveSquadPreRemove
// 0x0008 (0x0008 - 0x0000)
struct HDPlatoonState_ReceiveSquadPreRemove final 
{
public:
	class AHDSquadState*                          Squad;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlatoonState_ReceiveSquadPreRemove) == 0x000008, "Wrong alignment on HDPlatoonState_ReceiveSquadPreRemove");
//(sizeof(HDPlatoonState_ReceiveSquadPreRemove) == 0x000008, "Wrong size on HDPlatoonState_ReceiveSquadPreRemove");
//(offsetof(HDPlatoonState_ReceiveSquadPreRemove, Squad) == 0x000000, "Member 'HDPlatoonState_ReceiveSquadPreRemove::Squad' has a wrong offset!");

// Function HDMain.HDPlatoonState.RemoveSquad
// 0x0008 (0x0008 - 0x0000)
struct HDPlatoonState_RemoveSquad final 
{
public:
	class AHDSquadState*                          SquadToRemove;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlatoonState_RemoveSquad) == 0x000008, "Wrong alignment on HDPlatoonState_RemoveSquad");
//(sizeof(HDPlatoonState_RemoveSquad) == 0x000008, "Wrong size on HDPlatoonState_RemoveSquad");
//(offsetof(HDPlatoonState_RemoveSquad, SquadToRemove) == 0x000000, "Member 'HDPlatoonState_RemoveSquad::SquadToRemove' has a wrong offset!");

// Function HDMain.HDPlatoonState.RemoveSquadAt
// 0x0004 (0x0004 - 0x0000)
struct HDPlatoonState_RemoveSquadAt final 
{
public:
	int32                                         RemoveIdx;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlatoonState_RemoveSquadAt) == 0x000004, "Wrong alignment on HDPlatoonState_RemoveSquadAt");
//(sizeof(HDPlatoonState_RemoveSquadAt) == 0x000004, "Wrong size on HDPlatoonState_RemoveSquadAt");
//(offsetof(HDPlatoonState_RemoveSquadAt, RemoveIdx) == 0x000000, "Member 'HDPlatoonState_RemoveSquadAt::RemoveIdx' has a wrong offset!");

// Function HDMain.HDPlatoonState.GetMaxSquadLimit
// 0x0004 (0x0004 - 0x0000)
struct HDPlatoonState_GetMaxSquadLimit final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlatoonState_GetMaxSquadLimit) == 0x000004, "Wrong alignment on HDPlatoonState_GetMaxSquadLimit");
//(sizeof(HDPlatoonState_GetMaxSquadLimit) == 0x000004, "Wrong size on HDPlatoonState_GetMaxSquadLimit");
//(offsetof(HDPlatoonState_GetMaxSquadLimit, ReturnValue) == 0x000000, "Member 'HDPlatoonState_GetMaxSquadLimit::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlatoonState.GetNumSquads
// 0x0008 (0x0008 - 0x0000)
struct HDPlatoonState_GetNumSquads final 
{
public:
	bool                                          bValidSquadsOnly;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlatoonState_GetNumSquads) == 0x000004, "Wrong alignment on HDPlatoonState_GetNumSquads");
//(sizeof(HDPlatoonState_GetNumSquads) == 0x000008, "Wrong size on HDPlatoonState_GetNumSquads");
//(offsetof(HDPlatoonState_GetNumSquads, bValidSquadsOnly) == 0x000000, "Member 'HDPlatoonState_GetNumSquads::bValidSquadsOnly' has a wrong offset!");
//(offsetof(HDPlatoonState_GetNumSquads, ReturnValue) == 0x000004, "Member 'HDPlatoonState_GetNumSquads::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlatoonState.GetSquadAt
// 0x0010 (0x0010 - 0x0000)
struct HDPlatoonState_GetSquadAt final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePendingRemoval;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F2[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHDSquadState*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlatoonState_GetSquadAt) == 0x000008, "Wrong alignment on HDPlatoonState_GetSquadAt");
//(sizeof(HDPlatoonState_GetSquadAt) == 0x000010, "Wrong size on HDPlatoonState_GetSquadAt");
//(offsetof(HDPlatoonState_GetSquadAt, Param_Index) == 0x000000, "Member 'HDPlatoonState_GetSquadAt::Param_Index' has a wrong offset!");
//(offsetof(HDPlatoonState_GetSquadAt, bIgnorePendingRemoval) == 0x000004, "Member 'HDPlatoonState_GetSquadAt::bIgnorePendingRemoval' has a wrong offset!");
//(offsetof(HDPlatoonState_GetSquadAt, ReturnValue) == 0x000008, "Member 'HDPlatoonState_GetSquadAt::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlatoonState.HasReachedMaxSquadLimit
// 0x0001 (0x0001 - 0x0000)
struct HDPlatoonState_HasReachedMaxSquadLimit final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlatoonState_HasReachedMaxSquadLimit) == 0x000001, "Wrong alignment on HDPlatoonState_HasReachedMaxSquadLimit");
//(sizeof(HDPlatoonState_HasReachedMaxSquadLimit) == 0x000001, "Wrong size on HDPlatoonState_HasReachedMaxSquadLimit");
//(offsetof(HDPlatoonState_HasReachedMaxSquadLimit, ReturnValue) == 0x000000, "Member 'HDPlatoonState_HasReachedMaxSquadLimit::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlatoonState.IsSquadPendingRemovalFromPlatoon
// 0x0010 (0x0010 - 0x0000)
struct HDPlatoonState_IsSquadPendingRemovalFromPlatoon final 
{
public:
	class AHDSquadState*                          Squad;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlatoonState_IsSquadPendingRemovalFromPlatoon) == 0x000008, "Wrong alignment on HDPlatoonState_IsSquadPendingRemovalFromPlatoon");
//(sizeof(HDPlatoonState_IsSquadPendingRemovalFromPlatoon) == 0x000010, "Wrong size on HDPlatoonState_IsSquadPendingRemovalFromPlatoon");
//(offsetof(HDPlatoonState_IsSquadPendingRemovalFromPlatoon, Squad) == 0x000000, "Member 'HDPlatoonState_IsSquadPendingRemovalFromPlatoon::Squad' has a wrong offset!");
//(offsetof(HDPlatoonState_IsSquadPendingRemovalFromPlatoon, ReturnValue) == 0x000008, "Member 'HDPlatoonState_IsSquadPendingRemovalFromPlatoon::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlatoonState.SquadExists
// 0x0010 (0x0010 - 0x0000)
struct HDPlatoonState_SquadExists final 
{
public:
	class AHDSquadState*                          Squad;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePendingRemoval;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F4[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlatoonState_SquadExists) == 0x000008, "Wrong alignment on HDPlatoonState_SquadExists");
//(sizeof(HDPlatoonState_SquadExists) == 0x000010, "Wrong size on HDPlatoonState_SquadExists");
//(offsetof(HDPlatoonState_SquadExists, Squad) == 0x000000, "Member 'HDPlatoonState_SquadExists::Squad' has a wrong offset!");
//(offsetof(HDPlatoonState_SquadExists, bIgnorePendingRemoval) == 0x000008, "Member 'HDPlatoonState_SquadExists::bIgnorePendingRemoval' has a wrong offset!");
//(offsetof(HDPlatoonState_SquadExists, ReturnValue) == 0x000009, "Member 'HDPlatoonState_SquadExists::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.EquipPrimaryItem
// 0x0001 (0x0001 - 0x0000)
struct HDPlayerCharacter_EquipPrimaryItem final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_EquipPrimaryItem) == 0x000001, "Wrong alignment on HDPlayerCharacter_EquipPrimaryItem");
//(sizeof(HDPlayerCharacter_EquipPrimaryItem) == 0x000001, "Wrong size on HDPlayerCharacter_EquipPrimaryItem");
//(offsetof(HDPlayerCharacter_EquipPrimaryItem, ReturnValue) == 0x000000, "Member 'HDPlayerCharacter_EquipPrimaryItem::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.FreeAim
// 0x0004 (0x0004 - 0x0000)
struct HDPlayerCharacter_FreeAim final 
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_FreeAim) == 0x000004, "Wrong alignment on HDPlayerCharacter_FreeAim");
//(sizeof(HDPlayerCharacter_FreeAim) == 0x000004, "Wrong size on HDPlayerCharacter_FreeAim");
//(offsetof(HDPlayerCharacter_FreeAim, DeltaSeconds) == 0x000000, "Member 'HDPlayerCharacter_FreeAim::DeltaSeconds' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.NotifyPlayerStateChanged
// 0x0010 (0x0010 - 0x0000)
struct HDPlayerCharacter_NotifyPlayerStateChanged final 
{
public:
	class APlayerState*                           NewPlayerState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           OldPlayerState;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_NotifyPlayerStateChanged) == 0x000008, "Wrong alignment on HDPlayerCharacter_NotifyPlayerStateChanged");
//(sizeof(HDPlayerCharacter_NotifyPlayerStateChanged) == 0x000010, "Wrong size on HDPlayerCharacter_NotifyPlayerStateChanged");
//(offsetof(HDPlayerCharacter_NotifyPlayerStateChanged, NewPlayerState) == 0x000000, "Member 'HDPlayerCharacter_NotifyPlayerStateChanged::NewPlayerState' has a wrong offset!");
//(offsetof(HDPlayerCharacter_NotifyPlayerStateChanged, OldPlayerState) == 0x000008, "Member 'HDPlayerCharacter_NotifyPlayerStateChanged::OldPlayerState' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.OnPickupKit
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerCharacter_OnPickupKit final 
{
public:
	class AHDBasePickup_Kit*                      Kit;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_OnPickupKit) == 0x000008, "Wrong alignment on HDPlayerCharacter_OnPickupKit");
//(sizeof(HDPlayerCharacter_OnPickupKit) == 0x000008, "Wrong size on HDPlayerCharacter_OnPickupKit");
//(offsetof(HDPlayerCharacter_OnPickupKit, Kit) == 0x000000, "Member 'HDPlayerCharacter_OnPickupKit::Kit' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.PlayVocalSoundAI
// 0x0010 (0x0010 - 0x0000)
struct HDPlayerCharacter_PlayVocalSoundAI final 
{
public:
	class USoundBase*                             SoundToUse;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDAIVocalizationType                         VocalType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FC[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PitchMultiplier;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_PlayVocalSoundAI) == 0x000008, "Wrong alignment on HDPlayerCharacter_PlayVocalSoundAI");
//(sizeof(HDPlayerCharacter_PlayVocalSoundAI) == 0x000010, "Wrong size on HDPlayerCharacter_PlayVocalSoundAI");
//(offsetof(HDPlayerCharacter_PlayVocalSoundAI, SoundToUse) == 0x000000, "Member 'HDPlayerCharacter_PlayVocalSoundAI::SoundToUse' has a wrong offset!");
//(offsetof(HDPlayerCharacter_PlayVocalSoundAI, VocalType) == 0x000008, "Member 'HDPlayerCharacter_PlayVocalSoundAI::VocalType' has a wrong offset!");
//(offsetof(HDPlayerCharacter_PlayVocalSoundAI, PitchMultiplier) == 0x00000C, "Member 'HDPlayerCharacter_PlayVocalSoundAI::PitchMultiplier' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.ReceiveAimStyleChanged
// 0x0003 (0x0003 - 0x0000)
struct HDPlayerCharacter_ReceiveAimStyleChanged final 
{
public:
	EHDWeaponAimStyle                             NewAimStyle;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDWeaponAimStyle                             PrevAimStyle;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromPlayerInput;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_ReceiveAimStyleChanged) == 0x000001, "Wrong alignment on HDPlayerCharacter_ReceiveAimStyleChanged");
//(sizeof(HDPlayerCharacter_ReceiveAimStyleChanged) == 0x000003, "Wrong size on HDPlayerCharacter_ReceiveAimStyleChanged");
//(offsetof(HDPlayerCharacter_ReceiveAimStyleChanged, NewAimStyle) == 0x000000, "Member 'HDPlayerCharacter_ReceiveAimStyleChanged::NewAimStyle' has a wrong offset!");
//(offsetof(HDPlayerCharacter_ReceiveAimStyleChanged, PrevAimStyle) == 0x000001, "Member 'HDPlayerCharacter_ReceiveAimStyleChanged::PrevAimStyle' has a wrong offset!");
//(offsetof(HDPlayerCharacter_ReceiveAimStyleChanged, bFromPlayerInput) == 0x000002, "Member 'HDPlayerCharacter_ReceiveAimStyleChanged::bFromPlayerInput' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.ReceiveFreeAim
// 0x0004 (0x0004 - 0x0000)
struct HDPlayerCharacter_ReceiveFreeAim final 
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_ReceiveFreeAim) == 0x000004, "Wrong alignment on HDPlayerCharacter_ReceiveFreeAim");
//(sizeof(HDPlayerCharacter_ReceiveFreeAim) == 0x000004, "Wrong size on HDPlayerCharacter_ReceiveFreeAim");
//(offsetof(HDPlayerCharacter_ReceiveFreeAim, DeltaSeconds) == 0x000000, "Member 'HDPlayerCharacter_ReceiveFreeAim::DeltaSeconds' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.ReceiveVariationDataChanged
// 0x00D0 (0x00D0 - 0x0000)
struct HDPlayerCharacter_ReceiveVariationDataChanged final 
{
public:
	struct FDFCharacterVariationData              NewVariation;                                      // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDFCharacterVariationData              PreviousVariation;                                 // 0x0068(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_ReceiveVariationDataChanged) == 0x000008, "Wrong alignment on HDPlayerCharacter_ReceiveVariationDataChanged");
//(sizeof(HDPlayerCharacter_ReceiveVariationDataChanged) == 0x0000D0, "Wrong size on HDPlayerCharacter_ReceiveVariationDataChanged");
//(offsetof(HDPlayerCharacter_ReceiveVariationDataChanged, NewVariation) == 0x000000, "Member 'HDPlayerCharacter_ReceiveVariationDataChanged::NewVariation' has a wrong offset!");
//(offsetof(HDPlayerCharacter_ReceiveVariationDataChanged, PreviousVariation) == 0x000068, "Member 'HDPlayerCharacter_ReceiveVariationDataChanged::PreviousVariation' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.ReceiveVoipTalkerMsgReceived
// 0x0018 (0x0018 - 0x0000)
struct HDPlayerCharacter_ReceiveVoipTalkerMsgReceived final 
{
public:
	class UDFCommChannel*                         MsgTalkerChannel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           MsgTalkerPS;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMsgIsTalking;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDPlayerCharacter_ReceiveVoipTalkerMsgReceived) == 0x000008, "Wrong alignment on HDPlayerCharacter_ReceiveVoipTalkerMsgReceived");
//(sizeof(HDPlayerCharacter_ReceiveVoipTalkerMsgReceived) == 0x000018, "Wrong size on HDPlayerCharacter_ReceiveVoipTalkerMsgReceived");
//(offsetof(HDPlayerCharacter_ReceiveVoipTalkerMsgReceived, MsgTalkerChannel) == 0x000000, "Member 'HDPlayerCharacter_ReceiveVoipTalkerMsgReceived::MsgTalkerChannel' has a wrong offset!");
//(offsetof(HDPlayerCharacter_ReceiveVoipTalkerMsgReceived, MsgTalkerPS) == 0x000008, "Member 'HDPlayerCharacter_ReceiveVoipTalkerMsgReceived::MsgTalkerPS' has a wrong offset!");
//(offsetof(HDPlayerCharacter_ReceiveVoipTalkerMsgReceived, bMsgIsTalking) == 0x000010, "Member 'HDPlayerCharacter_ReceiveVoipTalkerMsgReceived::bMsgIsTalking' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.SetAimStyle
// 0x0002 (0x0002 - 0x0000)
struct HDPlayerCharacter_SetAimStyle final 
{
public:
	EHDWeaponAimStyle                             InAimStyle;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromPlayerInput;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_SetAimStyle) == 0x000001, "Wrong alignment on HDPlayerCharacter_SetAimStyle");
//(sizeof(HDPlayerCharacter_SetAimStyle) == 0x000002, "Wrong size on HDPlayerCharacter_SetAimStyle");
//(offsetof(HDPlayerCharacter_SetAimStyle, InAimStyle) == 0x000000, "Member 'HDPlayerCharacter_SetAimStyle::InAimStyle' has a wrong offset!");
//(offsetof(HDPlayerCharacter_SetAimStyle, bFromPlayerInput) == 0x000001, "Member 'HDPlayerCharacter_SetAimStyle::bFromPlayerInput' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.SetAllowFreeAim
// 0x0001 (0x0001 - 0x0000)
struct HDPlayerCharacter_SetAllowFreeAim final 
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_SetAllowFreeAim) == 0x000001, "Wrong alignment on HDPlayerCharacter_SetAllowFreeAim");
//(sizeof(HDPlayerCharacter_SetAllowFreeAim) == 0x000001, "Wrong size on HDPlayerCharacter_SetAllowFreeAim");
//(offsetof(HDPlayerCharacter_SetAllowFreeAim, bEnabled) == 0x000000, "Member 'HDPlayerCharacter_SetAllowFreeAim::bEnabled' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.SetAllowFreeAimADS
// 0x0001 (0x0001 - 0x0000)
struct HDPlayerCharacter_SetAllowFreeAimADS final 
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_SetAllowFreeAimADS) == 0x000001, "Wrong alignment on HDPlayerCharacter_SetAllowFreeAimADS");
//(sizeof(HDPlayerCharacter_SetAllowFreeAimADS) == 0x000001, "Wrong size on HDPlayerCharacter_SetAllowFreeAimADS");
//(offsetof(HDPlayerCharacter_SetAllowFreeAimADS, bEnabled) == 0x000000, "Member 'HDPlayerCharacter_SetAllowFreeAimADS::bEnabled' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.SetFreeAimDeadzoneCameraSpeedFactor
// 0x0004 (0x0004 - 0x0000)
struct HDPlayerCharacter_SetFreeAimDeadzoneCameraSpeedFactor final 
{
public:
	float                                         NewSpeedFactor;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_SetFreeAimDeadzoneCameraSpeedFactor) == 0x000004, "Wrong alignment on HDPlayerCharacter_SetFreeAimDeadzoneCameraSpeedFactor");
//(sizeof(HDPlayerCharacter_SetFreeAimDeadzoneCameraSpeedFactor) == 0x000004, "Wrong size on HDPlayerCharacter_SetFreeAimDeadzoneCameraSpeedFactor");
//(offsetof(HDPlayerCharacter_SetFreeAimDeadzoneCameraSpeedFactor, NewSpeedFactor) == 0x000000, "Member 'HDPlayerCharacter_SetFreeAimDeadzoneCameraSpeedFactor::NewSpeedFactor' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.SetFreeAimReturnToCenterInterpSpeed
// 0x0004 (0x0004 - 0x0000)
struct HDPlayerCharacter_SetFreeAimReturnToCenterInterpSpeed final 
{
public:
	float                                         NewInterpSpeed;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_SetFreeAimReturnToCenterInterpSpeed) == 0x000004, "Wrong alignment on HDPlayerCharacter_SetFreeAimReturnToCenterInterpSpeed");
//(sizeof(HDPlayerCharacter_SetFreeAimReturnToCenterInterpSpeed) == 0x000004, "Wrong size on HDPlayerCharacter_SetFreeAimReturnToCenterInterpSpeed");
//(offsetof(HDPlayerCharacter_SetFreeAimReturnToCenterInterpSpeed, NewInterpSpeed) == 0x000000, "Member 'HDPlayerCharacter_SetFreeAimReturnToCenterInterpSpeed::NewInterpSpeed' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.SetMaxFreeAimPitch
// 0x0004 (0x0004 - 0x0000)
struct HDPlayerCharacter_SetMaxFreeAimPitch final 
{
public:
	float                                         NewPitch;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_SetMaxFreeAimPitch) == 0x000004, "Wrong alignment on HDPlayerCharacter_SetMaxFreeAimPitch");
//(sizeof(HDPlayerCharacter_SetMaxFreeAimPitch) == 0x000004, "Wrong size on HDPlayerCharacter_SetMaxFreeAimPitch");
//(offsetof(HDPlayerCharacter_SetMaxFreeAimPitch, NewPitch) == 0x000000, "Member 'HDPlayerCharacter_SetMaxFreeAimPitch::NewPitch' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.SetMaxFreeAimPitchADS
// 0x0004 (0x0004 - 0x0000)
struct HDPlayerCharacter_SetMaxFreeAimPitchADS final 
{
public:
	float                                         NewPitch;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_SetMaxFreeAimPitchADS) == 0x000004, "Wrong alignment on HDPlayerCharacter_SetMaxFreeAimPitchADS");
//(sizeof(HDPlayerCharacter_SetMaxFreeAimPitchADS) == 0x000004, "Wrong size on HDPlayerCharacter_SetMaxFreeAimPitchADS");
//(offsetof(HDPlayerCharacter_SetMaxFreeAimPitchADS, NewPitch) == 0x000000, "Member 'HDPlayerCharacter_SetMaxFreeAimPitchADS::NewPitch' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.SetMaxFreeAimYaw
// 0x0004 (0x0004 - 0x0000)
struct HDPlayerCharacter_SetMaxFreeAimYaw final 
{
public:
	float                                         NewYaw;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_SetMaxFreeAimYaw) == 0x000004, "Wrong alignment on HDPlayerCharacter_SetMaxFreeAimYaw");
//(sizeof(HDPlayerCharacter_SetMaxFreeAimYaw) == 0x000004, "Wrong size on HDPlayerCharacter_SetMaxFreeAimYaw");
//(offsetof(HDPlayerCharacter_SetMaxFreeAimYaw, NewYaw) == 0x000000, "Member 'HDPlayerCharacter_SetMaxFreeAimYaw::NewYaw' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.SetMaxFreeAimYawADS
// 0x0004 (0x0004 - 0x0000)
struct HDPlayerCharacter_SetMaxFreeAimYawADS final 
{
public:
	float                                         NewYaw;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_SetMaxFreeAimYawADS) == 0x000004, "Wrong alignment on HDPlayerCharacter_SetMaxFreeAimYawADS");
//(sizeof(HDPlayerCharacter_SetMaxFreeAimYawADS) == 0x000004, "Wrong size on HDPlayerCharacter_SetMaxFreeAimYawADS");
//(offsetof(HDPlayerCharacter_SetMaxFreeAimYawADS, NewYaw) == 0x000000, "Member 'HDPlayerCharacter_SetMaxFreeAimYawADS::NewYaw' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.SetVariationHandle
// 0x0018 (0x0018 - 0x0000)
struct HDPlayerCharacter_SetVariationHandle final 
{
public:
	struct FDFCharacterVariationDataHandle        InVariationHandle;                                 // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_SetVariationHandle) == 0x000008, "Wrong alignment on HDPlayerCharacter_SetVariationHandle");
//(sizeof(HDPlayerCharacter_SetVariationHandle) == 0x000018, "Wrong size on HDPlayerCharacter_SetVariationHandle");
//(offsetof(HDPlayerCharacter_SetVariationHandle, InVariationHandle) == 0x000000, "Member 'HDPlayerCharacter_SetVariationHandle::InVariationHandle' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.VariationDataChangedInternal
// 0x0018 (0x0018 - 0x0000)
struct HDPlayerCharacter_VariationDataChangedInternal final 
{
public:
	struct FDFCharacterVariationDataHandle        PreviousHandle;                                    // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_VariationDataChangedInternal) == 0x000008, "Wrong alignment on HDPlayerCharacter_VariationDataChangedInternal");
//(sizeof(HDPlayerCharacter_VariationDataChangedInternal) == 0x000018, "Wrong size on HDPlayerCharacter_VariationDataChangedInternal");
//(offsetof(HDPlayerCharacter_VariationDataChangedInternal, PreviousHandle) == 0x000000, "Member 'HDPlayerCharacter_VariationDataChangedInternal::PreviousHandle' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.GetKitClassToUse
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerCharacter_GetKitClassToUse final 
{
public:
	TSubclassOf<class AHDBasePickup_Kit>          ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_GetKitClassToUse) == 0x000008, "Wrong alignment on HDPlayerCharacter_GetKitClassToUse");
//(sizeof(HDPlayerCharacter_GetKitClassToUse) == 0x000008, "Wrong size on HDPlayerCharacter_GetKitClassToUse");
//(offsetof(HDPlayerCharacter_GetKitClassToUse, ReturnValue) == 0x000000, "Member 'HDPlayerCharacter_GetKitClassToUse::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.GetMaxFreeAimPitchToUse
// 0x0004 (0x0004 - 0x0000)
struct HDPlayerCharacter_GetMaxFreeAimPitchToUse final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_GetMaxFreeAimPitchToUse) == 0x000004, "Wrong alignment on HDPlayerCharacter_GetMaxFreeAimPitchToUse");
//(sizeof(HDPlayerCharacter_GetMaxFreeAimPitchToUse) == 0x000004, "Wrong size on HDPlayerCharacter_GetMaxFreeAimPitchToUse");
//(offsetof(HDPlayerCharacter_GetMaxFreeAimPitchToUse, ReturnValue) == 0x000000, "Member 'HDPlayerCharacter_GetMaxFreeAimPitchToUse::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.GetMaxFreeAimYawToUse
// 0x0004 (0x0004 - 0x0000)
struct HDPlayerCharacter_GetMaxFreeAimYawToUse final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_GetMaxFreeAimYawToUse) == 0x000004, "Wrong alignment on HDPlayerCharacter_GetMaxFreeAimYawToUse");
//(sizeof(HDPlayerCharacter_GetMaxFreeAimYawToUse) == 0x000004, "Wrong size on HDPlayerCharacter_GetMaxFreeAimYawToUse");
//(offsetof(HDPlayerCharacter_GetMaxFreeAimYawToUse, ReturnValue) == 0x000000, "Member 'HDPlayerCharacter_GetMaxFreeAimYawToUse::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.GetPlayerComponent
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerCharacter_GetPlayerComponent final 
{
public:
	class UHDPlayerComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_GetPlayerComponent) == 0x000008, "Wrong alignment on HDPlayerCharacter_GetPlayerComponent");
//(sizeof(HDPlayerCharacter_GetPlayerComponent) == 0x000008, "Wrong size on HDPlayerCharacter_GetPlayerComponent");
//(offsetof(HDPlayerCharacter_GetPlayerComponent, ReturnValue) == 0x000000, "Member 'HDPlayerCharacter_GetPlayerComponent::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerCharacter.IsInVehicle
// 0x0001 (0x0001 - 0x0000)
struct HDPlayerCharacter_IsInVehicle final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerCharacter_IsInVehicle) == 0x000001, "Wrong alignment on HDPlayerCharacter_IsInVehicle");
//(sizeof(HDPlayerCharacter_IsInVehicle) == 0x000001, "Wrong size on HDPlayerCharacter_IsInVehicle");
//(offsetof(HDPlayerCharacter_IsInVehicle, ReturnValue) == 0x000000, "Member 'HDPlayerCharacter_IsInVehicle::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerComponent.PickTeam
// 0x0001 (0x0001 - 0x0000)
struct HDPlayerComponent_PickTeam final 
{
public:
	EHDTeam                                       DesiredTeam;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerComponent_PickTeam) == 0x000001, "Wrong alignment on HDPlayerComponent_PickTeam");
//(sizeof(HDPlayerComponent_PickTeam) == 0x000001, "Wrong size on HDPlayerComponent_PickTeam");
//(offsetof(HDPlayerComponent_PickTeam, DesiredTeam) == 0x000000, "Member 'HDPlayerComponent_PickTeam::DesiredTeam' has a wrong offset!");

// Function HDMain.HDPlayerComponent.RestartPlayerAtStartSpot
// 0x0010 (0x0010 - 0x0000)
struct HDPlayerComponent_RestartPlayerAtStartSpot final 
{
public:
	class AActor*                                 DesiredStartSpot;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFLoadout*                             DesiredStartLoadout;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerComponent_RestartPlayerAtStartSpot) == 0x000008, "Wrong alignment on HDPlayerComponent_RestartPlayerAtStartSpot");
//(sizeof(HDPlayerComponent_RestartPlayerAtStartSpot) == 0x000010, "Wrong size on HDPlayerComponent_RestartPlayerAtStartSpot");
//(offsetof(HDPlayerComponent_RestartPlayerAtStartSpot, DesiredStartSpot) == 0x000000, "Member 'HDPlayerComponent_RestartPlayerAtStartSpot::DesiredStartSpot' has a wrong offset!");
//(offsetof(HDPlayerComponent_RestartPlayerAtStartSpot, DesiredStartLoadout) == 0x000008, "Member 'HDPlayerComponent_RestartPlayerAtStartSpot::DesiredStartLoadout' has a wrong offset!");

// Function HDMain.HDPlayerStart.K2_GetCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerStart_K2_GetCapsuleComponent final 
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerStart_K2_GetCapsuleComponent) == 0x000008, "Wrong alignment on HDPlayerStart_K2_GetCapsuleComponent");
//(sizeof(HDPlayerStart_K2_GetCapsuleComponent) == 0x000008, "Wrong size on HDPlayerStart_K2_GetCapsuleComponent");
//(offsetof(HDPlayerStart_K2_GetCapsuleComponent, ReturnValue) == 0x000000, "Member 'HDPlayerStart_K2_GetCapsuleComponent::ReturnValue' has a wrong offset!");

// Function HDMain.HDPlayerState.AssignCurrentLoadout
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerState_AssignCurrentLoadout final 
{
public:
	class UHDKit*                                 NewCurrentLoadout;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerState_AssignCurrentLoadout) == 0x000008, "Wrong alignment on HDPlayerState_AssignCurrentLoadout");
//(sizeof(HDPlayerState_AssignCurrentLoadout) == 0x000008, "Wrong size on HDPlayerState_AssignCurrentLoadout");
//(offsetof(HDPlayerState_AssignCurrentLoadout, NewCurrentLoadout) == 0x000000, "Member 'HDPlayerState_AssignCurrentLoadout::NewCurrentLoadout' has a wrong offset!");

// Function HDMain.HDPlayerState.AssignSpawnLoadout
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerState_AssignSpawnLoadout final 
{
public:
	class UHDKit*                                 NewSpawnLoadout;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerState_AssignSpawnLoadout) == 0x000008, "Wrong alignment on HDPlayerState_AssignSpawnLoadout");
//(sizeof(HDPlayerState_AssignSpawnLoadout) == 0x000008, "Wrong size on HDPlayerState_AssignSpawnLoadout");
//(offsetof(HDPlayerState_AssignSpawnLoadout, NewSpawnLoadout) == 0x000000, "Member 'HDPlayerState_AssignSpawnLoadout::NewSpawnLoadout' has a wrong offset!");

// Function HDMain.HDPlayerState.OnRep_CurrentLoadout
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerState_OnRep_CurrentLoadout final 
{
public:
	class UHDKit*                                 PrevLoadout;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerState_OnRep_CurrentLoadout) == 0x000008, "Wrong alignment on HDPlayerState_OnRep_CurrentLoadout");
//(sizeof(HDPlayerState_OnRep_CurrentLoadout) == 0x000008, "Wrong size on HDPlayerState_OnRep_CurrentLoadout");
//(offsetof(HDPlayerState_OnRep_CurrentLoadout, PrevLoadout) == 0x000000, "Member 'HDPlayerState_OnRep_CurrentLoadout::PrevLoadout' has a wrong offset!");

// Function HDMain.HDPlayerState.OnRep_SpawnLoadout
// 0x0008 (0x0008 - 0x0000)
struct HDPlayerState_OnRep_SpawnLoadout final 
{
public:
	class UHDKit*                                 PrevSpawnLoadout;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDPlayerState_OnRep_SpawnLoadout) == 0x000008, "Wrong alignment on HDPlayerState_OnRep_SpawnLoadout");
//(sizeof(HDPlayerState_OnRep_SpawnLoadout) == 0x000008, "Wrong size on HDPlayerState_OnRep_SpawnLoadout");
//(offsetof(HDPlayerState_OnRep_SpawnLoadout, PrevSpawnLoadout) == 0x000000, "Member 'HDPlayerState_OnRep_SpawnLoadout::PrevSpawnLoadout' has a wrong offset!");

// Function HDMain.HDRuleset_ControlPoint.ControlPointCaptureProgressUpdated
// 0x0010 (0x0010 - 0x0000)
struct HDRuleset_ControlPoint_ControlPointCaptureProgressUpdated final 
{
public:
	class AHDBaseCapturePoint*                    ControlPoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContested;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1201[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Progress;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDRuleset_ControlPoint_ControlPointCaptureProgressUpdated) == 0x000008, "Wrong alignment on HDRuleset_ControlPoint_ControlPointCaptureProgressUpdated");
//(sizeof(HDRuleset_ControlPoint_ControlPointCaptureProgressUpdated) == 0x000010, "Wrong size on HDRuleset_ControlPoint_ControlPointCaptureProgressUpdated");
//(offsetof(HDRuleset_ControlPoint_ControlPointCaptureProgressUpdated, ControlPoint) == 0x000000, "Member 'HDRuleset_ControlPoint_ControlPointCaptureProgressUpdated::ControlPoint' has a wrong offset!");
//(offsetof(HDRuleset_ControlPoint_ControlPointCaptureProgressUpdated, bContested) == 0x000008, "Member 'HDRuleset_ControlPoint_ControlPointCaptureProgressUpdated::bContested' has a wrong offset!");
//(offsetof(HDRuleset_ControlPoint_ControlPointCaptureProgressUpdated, Progress) == 0x00000C, "Member 'HDRuleset_ControlPoint_ControlPointCaptureProgressUpdated::Progress' has a wrong offset!");

// Function HDMain.HDRuleset_ControlPoint.ControlPointTeamUpdated
// 0x0010 (0x0010 - 0x0000)
struct HDRuleset_ControlPoint_ControlPointTeamUpdated final 
{
public:
	class AHDBaseCapturePoint*                    ControlPoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDTeam                                       PrevTeam;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDTeam                                       NewTeam;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptured;                                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1202[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDRuleset_ControlPoint_ControlPointTeamUpdated) == 0x000008, "Wrong alignment on HDRuleset_ControlPoint_ControlPointTeamUpdated");
//(sizeof(HDRuleset_ControlPoint_ControlPointTeamUpdated) == 0x000010, "Wrong size on HDRuleset_ControlPoint_ControlPointTeamUpdated");
//(offsetof(HDRuleset_ControlPoint_ControlPointTeamUpdated, ControlPoint) == 0x000000, "Member 'HDRuleset_ControlPoint_ControlPointTeamUpdated::ControlPoint' has a wrong offset!");
//(offsetof(HDRuleset_ControlPoint_ControlPointTeamUpdated, PrevTeam) == 0x000008, "Member 'HDRuleset_ControlPoint_ControlPointTeamUpdated::PrevTeam' has a wrong offset!");
//(offsetof(HDRuleset_ControlPoint_ControlPointTeamUpdated, NewTeam) == 0x000009, "Member 'HDRuleset_ControlPoint_ControlPointTeamUpdated::NewTeam' has a wrong offset!");
//(offsetof(HDRuleset_ControlPoint_ControlPointTeamUpdated, bCaptured) == 0x00000A, "Member 'HDRuleset_ControlPoint_ControlPointTeamUpdated::bCaptured' has a wrong offset!");

// Function HDMain.HDRuleset_ControlPoint.GetControlPointSettingsForTeam
// 0x0024 (0x0024 - 0x0000)
struct HDRuleset_ControlPoint_GetControlPointSettingsForTeam final 
{
public:
	EHDTeam                                       ControlPointTeam;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1203[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlPointRulesetSettings           ReturnValue;                                       // 0x0004(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(HDRuleset_ControlPoint_GetControlPointSettingsForTeam) == 0x000004, "Wrong alignment on HDRuleset_ControlPoint_GetControlPointSettingsForTeam");
//(sizeof(HDRuleset_ControlPoint_GetControlPointSettingsForTeam) == 0x000024, "Wrong size on HDRuleset_ControlPoint_GetControlPointSettingsForTeam");
//(offsetof(HDRuleset_ControlPoint_GetControlPointSettingsForTeam, ControlPointTeam) == 0x000000, "Member 'HDRuleset_ControlPoint_GetControlPointSettingsForTeam::ControlPointTeam' has a wrong offset!");
//(offsetof(HDRuleset_ControlPoint_GetControlPointSettingsForTeam, ReturnValue) == 0x000004, "Member 'HDRuleset_ControlPoint_GetControlPointSettingsForTeam::ReturnValue' has a wrong offset!");

// Function HDMain.HDRuleset_KillDeath.PlayerTeamKilled
// 0x0010 (0x0010 - 0x0000)
struct HDRuleset_KillDeath_PlayerTeamKilled final 
{
public:
	class AController*                            Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDRuleset_KillDeath_PlayerTeamKilled) == 0x000008, "Wrong alignment on HDRuleset_KillDeath_PlayerTeamKilled");
//(sizeof(HDRuleset_KillDeath_PlayerTeamKilled) == 0x000010, "Wrong size on HDRuleset_KillDeath_PlayerTeamKilled");
//(offsetof(HDRuleset_KillDeath_PlayerTeamKilled, Killer) == 0x000000, "Member 'HDRuleset_KillDeath_PlayerTeamKilled::Killer' has a wrong offset!");
//(offsetof(HDRuleset_KillDeath_PlayerTeamKilled, Victim) == 0x000008, "Member 'HDRuleset_KillDeath_PlayerTeamKilled::Victim' has a wrong offset!");

// Function HDMain.HDRuleset_KillDeath.GetKillDeathSettingsForTeam
// 0x002C (0x002C - 0x0000)
struct HDRuleset_KillDeath_GetKillDeathSettingsForTeam final 
{
public:
	EHDTeam                                       KillDeathTeam;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1204[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKillDeathRulesetSettings              ReturnValue;                                       // 0x0004(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(HDRuleset_KillDeath_GetKillDeathSettingsForTeam) == 0x000004, "Wrong alignment on HDRuleset_KillDeath_GetKillDeathSettingsForTeam");
//(sizeof(HDRuleset_KillDeath_GetKillDeathSettingsForTeam) == 0x00002C, "Wrong size on HDRuleset_KillDeath_GetKillDeathSettingsForTeam");
//(offsetof(HDRuleset_KillDeath_GetKillDeathSettingsForTeam, KillDeathTeam) == 0x000000, "Member 'HDRuleset_KillDeath_GetKillDeathSettingsForTeam::KillDeathTeam' has a wrong offset!");
//(offsetof(HDRuleset_KillDeath_GetKillDeathSettingsForTeam, ReturnValue) == 0x000004, "Member 'HDRuleset_KillDeath_GetKillDeathSettingsForTeam::ReturnValue' has a wrong offset!");

// Function HDMain.HDRuleset_TicketBleed.ApplyTicketBleed
// 0x000C (0x000C - 0x0000)
struct HDRuleset_TicketBleed_ApplyTicketBleed final 
{
public:
	EHDTeam                                       BleedTeam;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1206[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TicketBleedMultiplier;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMercyTicketBleed;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1207[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDRuleset_TicketBleed_ApplyTicketBleed) == 0x000004, "Wrong alignment on HDRuleset_TicketBleed_ApplyTicketBleed");
//(sizeof(HDRuleset_TicketBleed_ApplyTicketBleed) == 0x00000C, "Wrong size on HDRuleset_TicketBleed_ApplyTicketBleed");
//(offsetof(HDRuleset_TicketBleed_ApplyTicketBleed, BleedTeam) == 0x000000, "Member 'HDRuleset_TicketBleed_ApplyTicketBleed::BleedTeam' has a wrong offset!");
//(offsetof(HDRuleset_TicketBleed_ApplyTicketBleed, TicketBleedMultiplier) == 0x000004, "Member 'HDRuleset_TicketBleed_ApplyTicketBleed::TicketBleedMultiplier' has a wrong offset!");
//(offsetof(HDRuleset_TicketBleed_ApplyTicketBleed, bUseMercyTicketBleed) == 0x000008, "Member 'HDRuleset_TicketBleed_ApplyTicketBleed::bUseMercyTicketBleed' has a wrong offset!");

// Function HDMain.HDRuleset_TicketBleed.ControlPointTeamUpdated
// 0x0010 (0x0010 - 0x0000)
struct HDRuleset_TicketBleed_ControlPointTeamUpdated final 
{
public:
	class AHDBaseCapturePoint*                    ControlPoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDTeam                                       PrevTeam;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDTeam                                       NewTeam;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptured;                                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1208[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDRuleset_TicketBleed_ControlPointTeamUpdated) == 0x000008, "Wrong alignment on HDRuleset_TicketBleed_ControlPointTeamUpdated");
//(sizeof(HDRuleset_TicketBleed_ControlPointTeamUpdated) == 0x000010, "Wrong size on HDRuleset_TicketBleed_ControlPointTeamUpdated");
//(offsetof(HDRuleset_TicketBleed_ControlPointTeamUpdated, ControlPoint) == 0x000000, "Member 'HDRuleset_TicketBleed_ControlPointTeamUpdated::ControlPoint' has a wrong offset!");
//(offsetof(HDRuleset_TicketBleed_ControlPointTeamUpdated, PrevTeam) == 0x000008, "Member 'HDRuleset_TicketBleed_ControlPointTeamUpdated::PrevTeam' has a wrong offset!");
//(offsetof(HDRuleset_TicketBleed_ControlPointTeamUpdated, NewTeam) == 0x000009, "Member 'HDRuleset_TicketBleed_ControlPointTeamUpdated::NewTeam' has a wrong offset!");
//(offsetof(HDRuleset_TicketBleed_ControlPointTeamUpdated, bCaptured) == 0x00000A, "Member 'HDRuleset_TicketBleed_ControlPointTeamUpdated::bCaptured' has a wrong offset!");

// Function HDMain.HDRuleset_TicketBleed.GetTicketBleedSettingsForTeam
// 0x0010 (0x0010 - 0x0000)
struct HDRuleset_TicketBleed_GetTicketBleedSettingsForTeam final 
{
public:
	EHDTeam                                       TicketBleedTeam;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1209[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTicketBleedRulesetSettings            ReturnValue;                                       // 0x0004(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(HDRuleset_TicketBleed_GetTicketBleedSettingsForTeam) == 0x000004, "Wrong alignment on HDRuleset_TicketBleed_GetTicketBleedSettingsForTeam");
//(sizeof(HDRuleset_TicketBleed_GetTicketBleedSettingsForTeam) == 0x000010, "Wrong size on HDRuleset_TicketBleed_GetTicketBleedSettingsForTeam");
//(offsetof(HDRuleset_TicketBleed_GetTicketBleedSettingsForTeam, TicketBleedTeam) == 0x000000, "Member 'HDRuleset_TicketBleed_GetTicketBleedSettingsForTeam::TicketBleedTeam' has a wrong offset!");
//(offsetof(HDRuleset_TicketBleed_GetTicketBleedSettingsForTeam, ReturnValue) == 0x000004, "Member 'HDRuleset_TicketBleed_GetTicketBleedSettingsForTeam::ReturnValue' has a wrong offset!");

// Function HDMain.HDScoreboardBase.ReceiveScoreboardListRowAdded
// 0x0008 (0x0008 - 0x0000)
struct HDScoreboardBase_ReceiveScoreboardListRowAdded final 
{
public:
	class UHDScoreboardListingRowBase*            NewListEntry;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDScoreboardBase_ReceiveScoreboardListRowAdded) == 0x000008, "Wrong alignment on HDScoreboardBase_ReceiveScoreboardListRowAdded");
//(sizeof(HDScoreboardBase_ReceiveScoreboardListRowAdded) == 0x000008, "Wrong size on HDScoreboardBase_ReceiveScoreboardListRowAdded");
//(offsetof(HDScoreboardBase_ReceiveScoreboardListRowAdded, NewListEntry) == 0x000000, "Member 'HDScoreboardBase_ReceiveScoreboardListRowAdded::NewListEntry' has a wrong offset!");

// Function HDMain.HDServerListing.OnServerItemDataSet
// 0x0001 (0x0001 - 0x0000)
struct HDServerListing_OnServerItemDataSet final 
{
public:
	bool                                          bIsDesignTime;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDServerListing_OnServerItemDataSet) == 0x000001, "Wrong alignment on HDServerListing_OnServerItemDataSet");
//(sizeof(HDServerListing_OnServerItemDataSet) == 0x000001, "Wrong size on HDServerListing_OnServerItemDataSet");
//(offsetof(HDServerListing_OnServerItemDataSet, bIsDesignTime) == 0x000000, "Member 'HDServerListing_OnServerItemDataSet::bIsDesignTime' has a wrong offset!");

// Function HDMain.HDServerListing.SetupListing
// 0x0008 (0x0008 - 0x0000)
struct HDServerListing_SetupListing final 
{
public:
	class UHDServerListItemData*                  InServerItemData;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDServerListing_SetupListing) == 0x000008, "Wrong alignment on HDServerListing_SetupListing");
//(sizeof(HDServerListing_SetupListing) == 0x000008, "Wrong size on HDServerListing_SetupListing");
//(offsetof(HDServerListing_SetupListing, InServerItemData) == 0x000000, "Member 'HDServerListing_SetupListing::InServerItemData' has a wrong offset!");

// Function HDMain.HDSquadState.AssignSquadLeader
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_AssignSquadLeader final 
{
public:
	class AHDPlayerState*                         NewLeaderPS;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1211[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_AssignSquadLeader) == 0x000008, "Wrong alignment on HDSquadState_AssignSquadLeader");
//(sizeof(HDSquadState_AssignSquadLeader) == 0x000010, "Wrong size on HDSquadState_AssignSquadLeader");
//(offsetof(HDSquadState_AssignSquadLeader, NewLeaderPS) == 0x000000, "Member 'HDSquadState_AssignSquadLeader::NewLeaderPS' has a wrong offset!");
//(offsetof(HDSquadState_AssignSquadLeader, ReturnValue) == 0x000008, "Member 'HDSquadState_AssignSquadLeader::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.OnRep_DisplayName
// 0x0018 (0x0018 - 0x0000)
struct HDSquadState_OnRep_DisplayName final 
{
public:
	class FText                                   PrevDisplayName;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_OnRep_DisplayName) == 0x000008, "Wrong alignment on HDSquadState_OnRep_DisplayName");
//(sizeof(HDSquadState_OnRep_DisplayName) == 0x000018, "Wrong size on HDSquadState_OnRep_DisplayName");
//(offsetof(HDSquadState_OnRep_DisplayName, PrevDisplayName) == 0x000000, "Member 'HDSquadState_OnRep_DisplayName::PrevDisplayName' has a wrong offset!");

// Function HDMain.HDSquadState.OnRep_SquadLeader
// 0x0008 (0x0008 - 0x0000)
struct HDSquadState_OnRep_SquadLeader final 
{
public:
	class AHDPlayerState*                         PrevSquadLeader;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_OnRep_SquadLeader) == 0x000008, "Wrong alignment on HDSquadState_OnRep_SquadLeader");
//(sizeof(HDSquadState_OnRep_SquadLeader) == 0x000008, "Wrong size on HDSquadState_OnRep_SquadLeader");
//(offsetof(HDSquadState_OnRep_SquadLeader, PrevSquadLeader) == 0x000000, "Member 'HDSquadState_OnRep_SquadLeader::PrevSquadLeader' has a wrong offset!");

// Function HDMain.HDSquadState.ReceiveInit
// 0x0030 (0x0030 - 0x0000)
struct HDSquadState_ReceiveInit final 
{
public:
	struct FHDSquadCreationParams                 CreationParams;                                    // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_ReceiveInit) == 0x000008, "Wrong alignment on HDSquadState_ReceiveInit");
//(sizeof(HDSquadState_ReceiveInit) == 0x000030, "Wrong size on HDSquadState_ReceiveInit");
//(offsetof(HDSquadState_ReceiveInit, CreationParams) == 0x000000, "Member 'HDSquadState_ReceiveInit::CreationParams' has a wrong offset!");

// Function HDMain.HDSquadState.ReceiveSquadLeaderAssigned
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_ReceiveSquadLeaderAssigned final 
{
public:
	class AHDPlayerState*                         NewLeaderPS;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDPlayerState*                         PrevLeaderPS;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_ReceiveSquadLeaderAssigned) == 0x000008, "Wrong alignment on HDSquadState_ReceiveSquadLeaderAssigned");
//(sizeof(HDSquadState_ReceiveSquadLeaderAssigned) == 0x000010, "Wrong size on HDSquadState_ReceiveSquadLeaderAssigned");
//(offsetof(HDSquadState_ReceiveSquadLeaderAssigned, NewLeaderPS) == 0x000000, "Member 'HDSquadState_ReceiveSquadLeaderAssigned::NewLeaderPS' has a wrong offset!");
//(offsetof(HDSquadState_ReceiveSquadLeaderAssigned, PrevLeaderPS) == 0x000008, "Member 'HDSquadState_ReceiveSquadLeaderAssigned::PrevLeaderPS' has a wrong offset!");

// Function HDMain.HDSquadState.ReceiveSquadMemberPreUnregister
// 0x0008 (0x0008 - 0x0000)
struct HDSquadState_ReceiveSquadMemberPreUnregister final 
{
public:
	class AHDPlayerState*                         MemberPS;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_ReceiveSquadMemberPreUnregister) == 0x000008, "Wrong alignment on HDSquadState_ReceiveSquadMemberPreUnregister");
//(sizeof(HDSquadState_ReceiveSquadMemberPreUnregister) == 0x000008, "Wrong size on HDSquadState_ReceiveSquadMemberPreUnregister");
//(offsetof(HDSquadState_ReceiveSquadMemberPreUnregister, MemberPS) == 0x000000, "Member 'HDSquadState_ReceiveSquadMemberPreUnregister::MemberPS' has a wrong offset!");

// Function HDMain.HDSquadState.ReceiveSquadMemberRegistered
// 0x0008 (0x0008 - 0x0000)
struct HDSquadState_ReceiveSquadMemberRegistered final 
{
public:
	class AHDPlayerState*                         MemberPS;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_ReceiveSquadMemberRegistered) == 0x000008, "Wrong alignment on HDSquadState_ReceiveSquadMemberRegistered");
//(sizeof(HDSquadState_ReceiveSquadMemberRegistered) == 0x000008, "Wrong size on HDSquadState_ReceiveSquadMemberRegistered");
//(offsetof(HDSquadState_ReceiveSquadMemberRegistered, MemberPS) == 0x000000, "Member 'HDSquadState_ReceiveSquadMemberRegistered::MemberPS' has a wrong offset!");

// Function HDMain.HDSquadState.ReceiveSquadRenamed
// 0x0030 (0x0030 - 0x0000)
struct HDSquadState_ReceiveSquadRenamed final 
{
public:
	class FText                                   NewName;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   PrevName;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_ReceiveSquadRenamed) == 0x000008, "Wrong alignment on HDSquadState_ReceiveSquadRenamed");
//(sizeof(HDSquadState_ReceiveSquadRenamed) == 0x000030, "Wrong size on HDSquadState_ReceiveSquadRenamed");
//(offsetof(HDSquadState_ReceiveSquadRenamed, NewName) == 0x000000, "Member 'HDSquadState_ReceiveSquadRenamed::NewName' has a wrong offset!");
//(offsetof(HDSquadState_ReceiveSquadRenamed, PrevName) == 0x000018, "Member 'HDSquadState_ReceiveSquadRenamed::PrevName' has a wrong offset!");

// Function HDMain.HDSquadState.RegisterPlayerSquadMember
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_RegisterPlayerSquadMember final 
{
public:
	class AHDPlayerController*                    NewMemberPC;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1212[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_RegisterPlayerSquadMember) == 0x000008, "Wrong alignment on HDSquadState_RegisterPlayerSquadMember");
//(sizeof(HDSquadState_RegisterPlayerSquadMember) == 0x000010, "Wrong size on HDSquadState_RegisterPlayerSquadMember");
//(offsetof(HDSquadState_RegisterPlayerSquadMember, NewMemberPC) == 0x000000, "Member 'HDSquadState_RegisterPlayerSquadMember::NewMemberPC' has a wrong offset!");
//(offsetof(HDSquadState_RegisterPlayerSquadMember, ReturnValue) == 0x000008, "Member 'HDSquadState_RegisterPlayerSquadMember::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.RegisterSquadMember
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_RegisterSquadMember final 
{
public:
	class AHDPlayerState*                         NewMemberPS;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1213[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_RegisterSquadMember) == 0x000008, "Wrong alignment on HDSquadState_RegisterSquadMember");
//(sizeof(HDSquadState_RegisterSquadMember) == 0x000010, "Wrong size on HDSquadState_RegisterSquadMember");
//(offsetof(HDSquadState_RegisterSquadMember, NewMemberPS) == 0x000000, "Member 'HDSquadState_RegisterSquadMember::NewMemberPS' has a wrong offset!");
//(offsetof(HDSquadState_RegisterSquadMember, ReturnValue) == 0x000008, "Member 'HDSquadState_RegisterSquadMember::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.RenameSquad
// 0x0018 (0x0018 - 0x0000)
struct HDSquadState_RenameSquad final 
{
public:
	class FText                                   NewDisplayName;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_RenameSquad) == 0x000008, "Wrong alignment on HDSquadState_RenameSquad");
//(sizeof(HDSquadState_RenameSquad) == 0x000018, "Wrong size on HDSquadState_RenameSquad");
//(offsetof(HDSquadState_RenameSquad, NewDisplayName) == 0x000000, "Member 'HDSquadState_RenameSquad::NewDisplayName' has a wrong offset!");

// Function HDMain.HDSquadState.SquadMemberPSEndPlay
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_SquadMemberPSEndPlay final 
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1214[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_SquadMemberPSEndPlay) == 0x000008, "Wrong alignment on HDSquadState_SquadMemberPSEndPlay");
//(sizeof(HDSquadState_SquadMemberPSEndPlay) == 0x000010, "Wrong size on HDSquadState_SquadMemberPSEndPlay");
//(offsetof(HDSquadState_SquadMemberPSEndPlay, Actor) == 0x000000, "Member 'HDSquadState_SquadMemberPSEndPlay::Actor' has a wrong offset!");
//(offsetof(HDSquadState_SquadMemberPSEndPlay, EndPlayReason) == 0x000008, "Member 'HDSquadState_SquadMemberPSEndPlay::EndPlayReason' has a wrong offset!");

// Function HDMain.HDSquadState.SquadMemberPSSquadUpdated
// 0x0018 (0x0018 - 0x0000)
struct HDSquadState_SquadMemberPSSquadUpdated final 
{
public:
	class AHDPlayerState*                         MemberPS;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHDSquadAssignmentInfo                 MemberSQInfo;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_SquadMemberPSSquadUpdated) == 0x000008, "Wrong alignment on HDSquadState_SquadMemberPSSquadUpdated");
//(sizeof(HDSquadState_SquadMemberPSSquadUpdated) == 0x000018, "Wrong size on HDSquadState_SquadMemberPSSquadUpdated");
//(offsetof(HDSquadState_SquadMemberPSSquadUpdated, MemberPS) == 0x000000, "Member 'HDSquadState_SquadMemberPSSquadUpdated::MemberPS' has a wrong offset!");
//(offsetof(HDSquadState_SquadMemberPSSquadUpdated, MemberSQInfo) == 0x000008, "Member 'HDSquadState_SquadMemberPSSquadUpdated::MemberSQInfo' has a wrong offset!");

// Function HDMain.HDSquadState.SquadMemberPSTeamUpdated
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_SquadMemberPSTeamUpdated final 
{
public:
	class APlayerState*                           MemberPS;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LastTeamNum;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewTeamNum;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1215[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_SquadMemberPSTeamUpdated) == 0x000008, "Wrong alignment on HDSquadState_SquadMemberPSTeamUpdated");
//(sizeof(HDSquadState_SquadMemberPSTeamUpdated) == 0x000010, "Wrong size on HDSquadState_SquadMemberPSTeamUpdated");
//(offsetof(HDSquadState_SquadMemberPSTeamUpdated, MemberPS) == 0x000000, "Member 'HDSquadState_SquadMemberPSTeamUpdated::MemberPS' has a wrong offset!");
//(offsetof(HDSquadState_SquadMemberPSTeamUpdated, LastTeamNum) == 0x000008, "Member 'HDSquadState_SquadMemberPSTeamUpdated::LastTeamNum' has a wrong offset!");
//(offsetof(HDSquadState_SquadMemberPSTeamUpdated, NewTeamNum) == 0x000009, "Member 'HDSquadState_SquadMemberPSTeamUpdated::NewTeamNum' has a wrong offset!");

// Function HDMain.HDSquadState.UnregisterPlayerSquadMember
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_UnregisterPlayerSquadMember final 
{
public:
	class AHDPlayerController*                    MemberPCToRemove;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1216[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_UnregisterPlayerSquadMember) == 0x000008, "Wrong alignment on HDSquadState_UnregisterPlayerSquadMember");
//(sizeof(HDSquadState_UnregisterPlayerSquadMember) == 0x000010, "Wrong size on HDSquadState_UnregisterPlayerSquadMember");
//(offsetof(HDSquadState_UnregisterPlayerSquadMember, MemberPCToRemove) == 0x000000, "Member 'HDSquadState_UnregisterPlayerSquadMember::MemberPCToRemove' has a wrong offset!");
//(offsetof(HDSquadState_UnregisterPlayerSquadMember, ReturnValue) == 0x000008, "Member 'HDSquadState_UnregisterPlayerSquadMember::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.UnregisterSquadMember
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_UnregisterSquadMember final 
{
public:
	class AHDPlayerState*                         MemberPSToRemove;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1217[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_UnregisterSquadMember) == 0x000008, "Wrong alignment on HDSquadState_UnregisterSquadMember");
//(sizeof(HDSquadState_UnregisterSquadMember) == 0x000010, "Wrong size on HDSquadState_UnregisterSquadMember");
//(offsetof(HDSquadState_UnregisterSquadMember, MemberPSToRemove) == 0x000000, "Member 'HDSquadState_UnregisterSquadMember::MemberPSToRemove' has a wrong offset!");
//(offsetof(HDSquadState_UnregisterSquadMember, ReturnValue) == 0x000008, "Member 'HDSquadState_UnregisterSquadMember::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.UnregisterSquadMemberAt
// 0x0008 (0x0008 - 0x0000)
struct HDSquadState_UnregisterSquadMemberAt final 
{
public:
	int32                                         RemoveIdx;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1218[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_UnregisterSquadMemberAt) == 0x000004, "Wrong alignment on HDSquadState_UnregisterSquadMemberAt");
//(sizeof(HDSquadState_UnregisterSquadMemberAt) == 0x000008, "Wrong size on HDSquadState_UnregisterSquadMemberAt");
//(offsetof(HDSquadState_UnregisterSquadMemberAt, RemoveIdx) == 0x000000, "Member 'HDSquadState_UnregisterSquadMemberAt::RemoveIdx' has a wrong offset!");
//(offsetof(HDSquadState_UnregisterSquadMemberAt, ReturnValue) == 0x000004, "Member 'HDSquadState_UnregisterSquadMemberAt::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.CanRegisterPlayerSquadMember
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_CanRegisterPlayerSquadMember final 
{
public:
	class AHDPlayerController*                    NewMemberPC;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1219[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_CanRegisterPlayerSquadMember) == 0x000008, "Wrong alignment on HDSquadState_CanRegisterPlayerSquadMember");
//(sizeof(HDSquadState_CanRegisterPlayerSquadMember) == 0x000010, "Wrong size on HDSquadState_CanRegisterPlayerSquadMember");
//(offsetof(HDSquadState_CanRegisterPlayerSquadMember, NewMemberPC) == 0x000000, "Member 'HDSquadState_CanRegisterPlayerSquadMember::NewMemberPC' has a wrong offset!");
//(offsetof(HDSquadState_CanRegisterPlayerSquadMember, ReturnValue) == 0x000008, "Member 'HDSquadState_CanRegisterPlayerSquadMember::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.CanRegisterSquadMember
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_CanRegisterSquadMember final 
{
public:
	class AHDPlayerState*                         NewMemberPS;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_CanRegisterSquadMember) == 0x000008, "Wrong alignment on HDSquadState_CanRegisterSquadMember");
//(sizeof(HDSquadState_CanRegisterSquadMember) == 0x000010, "Wrong size on HDSquadState_CanRegisterSquadMember");
//(offsetof(HDSquadState_CanRegisterSquadMember, NewMemberPS) == 0x000000, "Member 'HDSquadState_CanRegisterSquadMember::NewMemberPS' has a wrong offset!");
//(offsetof(HDSquadState_CanRegisterSquadMember, ReturnValue) == 0x000008, "Member 'HDSquadState_CanRegisterSquadMember::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.GetNumSquadMembers
// 0x0008 (0x0008 - 0x0000)
struct HDSquadState_GetNumSquadMembers final 
{
public:
	bool                                          bValidMembersOnly;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_GetNumSquadMembers) == 0x000004, "Wrong alignment on HDSquadState_GetNumSquadMembers");
//(sizeof(HDSquadState_GetNumSquadMembers) == 0x000008, "Wrong size on HDSquadState_GetNumSquadMembers");
//(offsetof(HDSquadState_GetNumSquadMembers, bValidMembersOnly) == 0x000000, "Member 'HDSquadState_GetNumSquadMembers::bValidMembersOnly' has a wrong offset!");
//(offsetof(HDSquadState_GetNumSquadMembers, ReturnValue) == 0x000004, "Member 'HDSquadState_GetNumSquadMembers::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.GetNumSquadMembersBots
// 0x0008 (0x0008 - 0x0000)
struct HDSquadState_GetNumSquadMembersBots final 
{
public:
	bool                                          bValidMembersOnly;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_GetNumSquadMembersBots) == 0x000004, "Wrong alignment on HDSquadState_GetNumSquadMembersBots");
//(sizeof(HDSquadState_GetNumSquadMembersBots) == 0x000008, "Wrong size on HDSquadState_GetNumSquadMembersBots");
//(offsetof(HDSquadState_GetNumSquadMembersBots, bValidMembersOnly) == 0x000000, "Member 'HDSquadState_GetNumSquadMembersBots::bValidMembersOnly' has a wrong offset!");
//(offsetof(HDSquadState_GetNumSquadMembersBots, ReturnValue) == 0x000004, "Member 'HDSquadState_GetNumSquadMembersBots::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.GetSquadMemberAt
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_GetSquadMemberAt final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePendingRemoval;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHDPlayerState*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_GetSquadMemberAt) == 0x000008, "Wrong alignment on HDSquadState_GetSquadMemberAt");
//(sizeof(HDSquadState_GetSquadMemberAt) == 0x000010, "Wrong size on HDSquadState_GetSquadMemberAt");
//(offsetof(HDSquadState_GetSquadMemberAt, Param_Index) == 0x000000, "Member 'HDSquadState_GetSquadMemberAt::Param_Index' has a wrong offset!");
//(offsetof(HDSquadState_GetSquadMemberAt, bIgnorePendingRemoval) == 0x000004, "Member 'HDSquadState_GetSquadMemberAt::bIgnorePendingRemoval' has a wrong offset!");
//(offsetof(HDSquadState_GetSquadMemberAt, ReturnValue) == 0x000008, "Member 'HDSquadState_GetSquadMemberAt::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.HasReachedMaxSquadMemberLimit
// 0x0001 (0x0001 - 0x0000)
struct HDSquadState_HasReachedMaxSquadMemberLimit final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDSquadState_HasReachedMaxSquadMemberLimit) == 0x000001, "Wrong alignment on HDSquadState_HasReachedMaxSquadMemberLimit");
//(sizeof(HDSquadState_HasReachedMaxSquadMemberLimit) == 0x000001, "Wrong size on HDSquadState_HasReachedMaxSquadMemberLimit");
//(offsetof(HDSquadState_HasReachedMaxSquadMemberLimit, ReturnValue) == 0x000000, "Member 'HDSquadState_HasReachedMaxSquadMemberLimit::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.IsPendingRemovalFromSquad
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_IsPendingRemovalFromSquad final 
{
public:
	class AHDPlayerState*                         PS;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_IsPendingRemovalFromSquad) == 0x000008, "Wrong alignment on HDSquadState_IsPendingRemovalFromSquad");
//(sizeof(HDSquadState_IsPendingRemovalFromSquad) == 0x000010, "Wrong size on HDSquadState_IsPendingRemovalFromSquad");
//(offsetof(HDSquadState_IsPendingRemovalFromSquad, PS) == 0x000000, "Member 'HDSquadState_IsPendingRemovalFromSquad::PS' has a wrong offset!");
//(offsetof(HDSquadState_IsPendingRemovalFromSquad, ReturnValue) == 0x000008, "Member 'HDSquadState_IsPendingRemovalFromSquad::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.IsPlayerPendingRemovalFromSquad
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_IsPlayerPendingRemovalFromSquad final 
{
public:
	class AHDPlayerController*                    PC;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_IsPlayerPendingRemovalFromSquad) == 0x000008, "Wrong alignment on HDSquadState_IsPlayerPendingRemovalFromSquad");
//(sizeof(HDSquadState_IsPlayerPendingRemovalFromSquad) == 0x000010, "Wrong size on HDSquadState_IsPlayerPendingRemovalFromSquad");
//(offsetof(HDSquadState_IsPlayerPendingRemovalFromSquad, PC) == 0x000000, "Member 'HDSquadState_IsPlayerPendingRemovalFromSquad::PC' has a wrong offset!");
//(offsetof(HDSquadState_IsPlayerPendingRemovalFromSquad, ReturnValue) == 0x000008, "Member 'HDSquadState_IsPlayerPendingRemovalFromSquad::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.IsPlayerRegisteredSquadMember
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_IsPlayerRegisteredSquadMember final 
{
public:
	class AHDPlayerController*                    PC;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePendingRemoval;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1220[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_IsPlayerRegisteredSquadMember) == 0x000008, "Wrong alignment on HDSquadState_IsPlayerRegisteredSquadMember");
//(sizeof(HDSquadState_IsPlayerRegisteredSquadMember) == 0x000010, "Wrong size on HDSquadState_IsPlayerRegisteredSquadMember");
//(offsetof(HDSquadState_IsPlayerRegisteredSquadMember, PC) == 0x000000, "Member 'HDSquadState_IsPlayerRegisteredSquadMember::PC' has a wrong offset!");
//(offsetof(HDSquadState_IsPlayerRegisteredSquadMember, bIgnorePendingRemoval) == 0x000008, "Member 'HDSquadState_IsPlayerRegisteredSquadMember::bIgnorePendingRemoval' has a wrong offset!");
//(offsetof(HDSquadState_IsPlayerRegisteredSquadMember, ReturnValue) == 0x000009, "Member 'HDSquadState_IsPlayerRegisteredSquadMember::ReturnValue' has a wrong offset!");

// Function HDMain.HDSquadState.IsRegisteredSquadMember
// 0x0010 (0x0010 - 0x0000)
struct HDSquadState_IsRegisteredSquadMember final 
{
public:
	class AHDPlayerState*                         PS;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePendingRemoval;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1221[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDSquadState_IsRegisteredSquadMember) == 0x000008, "Wrong alignment on HDSquadState_IsRegisteredSquadMember");
//(sizeof(HDSquadState_IsRegisteredSquadMember) == 0x000010, "Wrong size on HDSquadState_IsRegisteredSquadMember");
//(offsetof(HDSquadState_IsRegisteredSquadMember, PS) == 0x000000, "Member 'HDSquadState_IsRegisteredSquadMember::PS' has a wrong offset!");
//(offsetof(HDSquadState_IsRegisteredSquadMember, bIgnorePendingRemoval) == 0x000008, "Member 'HDSquadState_IsRegisteredSquadMember::bIgnorePendingRemoval' has a wrong offset!");
//(offsetof(HDSquadState_IsRegisteredSquadMember, ReturnValue) == 0x000009, "Member 'HDSquadState_IsRegisteredSquadMember::ReturnValue' has a wrong offset!");

// Function HDMain.HDTeamState.AddPlatoon
// 0x0010 (0x0010 - 0x0000)
struct HDTeamState_AddPlatoon final 
{
public:
	class UHDPlatoonInfo*                         PlatoonInfo;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDPlatoonState*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTeamState_AddPlatoon) == 0x000008, "Wrong alignment on HDTeamState_AddPlatoon");
//(sizeof(HDTeamState_AddPlatoon) == 0x000010, "Wrong size on HDTeamState_AddPlatoon");
//(offsetof(HDTeamState_AddPlatoon, PlatoonInfo) == 0x000000, "Member 'HDTeamState_AddPlatoon::PlatoonInfo' has a wrong offset!");
//(offsetof(HDTeamState_AddPlatoon, ReturnValue) == 0x000008, "Member 'HDTeamState_AddPlatoon::ReturnValue' has a wrong offset!");

// Function HDMain.HDTeamState.FindPlatoonByDefinition
// 0x0018 (0x0018 - 0x0000)
struct HDTeamState_FindPlatoonByDefinition final 
{
public:
	class UHDPlatoonInfo*                         PlatoonDef;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDPlatoonState*                        OutFoundPlatoon;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1224[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDTeamState_FindPlatoonByDefinition) == 0x000008, "Wrong alignment on HDTeamState_FindPlatoonByDefinition");
//(sizeof(HDTeamState_FindPlatoonByDefinition) == 0x000018, "Wrong size on HDTeamState_FindPlatoonByDefinition");
//(offsetof(HDTeamState_FindPlatoonByDefinition, PlatoonDef) == 0x000000, "Member 'HDTeamState_FindPlatoonByDefinition::PlatoonDef' has a wrong offset!");
//(offsetof(HDTeamState_FindPlatoonByDefinition, OutFoundPlatoon) == 0x000008, "Member 'HDTeamState_FindPlatoonByDefinition::OutFoundPlatoon' has a wrong offset!");
//(offsetof(HDTeamState_FindPlatoonByDefinition, ReturnValue) == 0x000010, "Member 'HDTeamState_FindPlatoonByDefinition::ReturnValue' has a wrong offset!");

// Function HDMain.HDTeamState.FindPlatoonByName
// 0x0028 (0x0028 - 0x0000)
struct HDTeamState_FindPlatoonByName final 
{
public:
	class FText                                   PlatoonDisplayName;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AHDPlatoonState*                        OutFoundPlatoon;                                   // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1225[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDTeamState_FindPlatoonByName) == 0x000008, "Wrong alignment on HDTeamState_FindPlatoonByName");
//(sizeof(HDTeamState_FindPlatoonByName) == 0x000028, "Wrong size on HDTeamState_FindPlatoonByName");
//(offsetof(HDTeamState_FindPlatoonByName, PlatoonDisplayName) == 0x000000, "Member 'HDTeamState_FindPlatoonByName::PlatoonDisplayName' has a wrong offset!");
//(offsetof(HDTeamState_FindPlatoonByName, OutFoundPlatoon) == 0x000018, "Member 'HDTeamState_FindPlatoonByName::OutFoundPlatoon' has a wrong offset!");
//(offsetof(HDTeamState_FindPlatoonByName, ReturnValue) == 0x000020, "Member 'HDTeamState_FindPlatoonByName::ReturnValue' has a wrong offset!");

// Function HDMain.HDTeamState.ReceivePlatoonAdded
// 0x0008 (0x0008 - 0x0000)
struct HDTeamState_ReceivePlatoonAdded final 
{
public:
	class AHDPlatoonState*                        Platoon;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTeamState_ReceivePlatoonAdded) == 0x000008, "Wrong alignment on HDTeamState_ReceivePlatoonAdded");
//(sizeof(HDTeamState_ReceivePlatoonAdded) == 0x000008, "Wrong size on HDTeamState_ReceivePlatoonAdded");
//(offsetof(HDTeamState_ReceivePlatoonAdded, Platoon) == 0x000000, "Member 'HDTeamState_ReceivePlatoonAdded::Platoon' has a wrong offset!");

// Function HDMain.HDTeamState.ReceivePlatoonPreRemove
// 0x0008 (0x0008 - 0x0000)
struct HDTeamState_ReceivePlatoonPreRemove final 
{
public:
	class AHDPlatoonState*                        Platoon;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTeamState_ReceivePlatoonPreRemove) == 0x000008, "Wrong alignment on HDTeamState_ReceivePlatoonPreRemove");
//(sizeof(HDTeamState_ReceivePlatoonPreRemove) == 0x000008, "Wrong size on HDTeamState_ReceivePlatoonPreRemove");
//(offsetof(HDTeamState_ReceivePlatoonPreRemove, Platoon) == 0x000000, "Member 'HDTeamState_ReceivePlatoonPreRemove::Platoon' has a wrong offset!");

// Function HDMain.HDTeamState.RemovePlatoon
// 0x0008 (0x0008 - 0x0000)
struct HDTeamState_RemovePlatoon final 
{
public:
	class AHDPlatoonState*                        PlatoonToRemove;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTeamState_RemovePlatoon) == 0x000008, "Wrong alignment on HDTeamState_RemovePlatoon");
//(sizeof(HDTeamState_RemovePlatoon) == 0x000008, "Wrong size on HDTeamState_RemovePlatoon");
//(offsetof(HDTeamState_RemovePlatoon, PlatoonToRemove) == 0x000000, "Member 'HDTeamState_RemovePlatoon::PlatoonToRemove' has a wrong offset!");

// Function HDMain.HDTeamState.RemovePlatoonAt
// 0x0004 (0x0004 - 0x0000)
struct HDTeamState_RemovePlatoonAt final 
{
public:
	int32                                         RemoveIdx;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTeamState_RemovePlatoonAt) == 0x000004, "Wrong alignment on HDTeamState_RemovePlatoonAt");
//(sizeof(HDTeamState_RemovePlatoonAt) == 0x000004, "Wrong size on HDTeamState_RemovePlatoonAt");
//(offsetof(HDTeamState_RemovePlatoonAt, RemoveIdx) == 0x000000, "Member 'HDTeamState_RemovePlatoonAt::RemoveIdx' has a wrong offset!");

// Function HDMain.HDTeamState.GetNumPlatoons
// 0x0008 (0x0008 - 0x0000)
struct HDTeamState_GetNumPlatoons final 
{
public:
	bool                                          bValidPlatoonsOnly;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1226[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTeamState_GetNumPlatoons) == 0x000004, "Wrong alignment on HDTeamState_GetNumPlatoons");
//(sizeof(HDTeamState_GetNumPlatoons) == 0x000008, "Wrong size on HDTeamState_GetNumPlatoons");
//(offsetof(HDTeamState_GetNumPlatoons, bValidPlatoonsOnly) == 0x000000, "Member 'HDTeamState_GetNumPlatoons::bValidPlatoonsOnly' has a wrong offset!");
//(offsetof(HDTeamState_GetNumPlatoons, ReturnValue) == 0x000004, "Member 'HDTeamState_GetNumPlatoons::ReturnValue' has a wrong offset!");

// Function HDMain.HDTeamState.GetPlatoonAt
// 0x0010 (0x0010 - 0x0000)
struct HDTeamState_GetPlatoonAt final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePendingRemoval;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1227[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHDPlatoonState*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTeamState_GetPlatoonAt) == 0x000008, "Wrong alignment on HDTeamState_GetPlatoonAt");
//(sizeof(HDTeamState_GetPlatoonAt) == 0x000010, "Wrong size on HDTeamState_GetPlatoonAt");
//(offsetof(HDTeamState_GetPlatoonAt, Param_Index) == 0x000000, "Member 'HDTeamState_GetPlatoonAt::Param_Index' has a wrong offset!");
//(offsetof(HDTeamState_GetPlatoonAt, bIgnorePendingRemoval) == 0x000004, "Member 'HDTeamState_GetPlatoonAt::bIgnorePendingRemoval' has a wrong offset!");
//(offsetof(HDTeamState_GetPlatoonAt, ReturnValue) == 0x000008, "Member 'HDTeamState_GetPlatoonAt::ReturnValue' has a wrong offset!");

// Function HDMain.HDTeamState.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct HDTeamState_GetTeam final 
{
public:
	EHDTeam                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTeamState_GetTeam) == 0x000001, "Wrong alignment on HDTeamState_GetTeam");
//(sizeof(HDTeamState_GetTeam) == 0x000001, "Wrong size on HDTeamState_GetTeam");
//(offsetof(HDTeamState_GetTeam, ReturnValue) == 0x000000, "Member 'HDTeamState_GetTeam::ReturnValue' has a wrong offset!");

// Function HDMain.HDTeamState.HasReachedMaxPlatoonLimit
// 0x0001 (0x0001 - 0x0000)
struct HDTeamState_HasReachedMaxPlatoonLimit final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTeamState_HasReachedMaxPlatoonLimit) == 0x000001, "Wrong alignment on HDTeamState_HasReachedMaxPlatoonLimit");
//(sizeof(HDTeamState_HasReachedMaxPlatoonLimit) == 0x000001, "Wrong size on HDTeamState_HasReachedMaxPlatoonLimit");
//(offsetof(HDTeamState_HasReachedMaxPlatoonLimit, ReturnValue) == 0x000000, "Member 'HDTeamState_HasReachedMaxPlatoonLimit::ReturnValue' has a wrong offset!");

// Function HDMain.HDTeamState.IsPlatoonPendingRemovalFromTeam
// 0x0010 (0x0010 - 0x0000)
struct HDTeamState_IsPlatoonPendingRemovalFromTeam final 
{
public:
	class AHDPlatoonState*                        Platoon;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1228[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDTeamState_IsPlatoonPendingRemovalFromTeam) == 0x000008, "Wrong alignment on HDTeamState_IsPlatoonPendingRemovalFromTeam");
//(sizeof(HDTeamState_IsPlatoonPendingRemovalFromTeam) == 0x000010, "Wrong size on HDTeamState_IsPlatoonPendingRemovalFromTeam");
//(offsetof(HDTeamState_IsPlatoonPendingRemovalFromTeam, Platoon) == 0x000000, "Member 'HDTeamState_IsPlatoonPendingRemovalFromTeam::Platoon' has a wrong offset!");
//(offsetof(HDTeamState_IsPlatoonPendingRemovalFromTeam, ReturnValue) == 0x000008, "Member 'HDTeamState_IsPlatoonPendingRemovalFromTeam::ReturnValue' has a wrong offset!");

// Function HDMain.HDTeamState.PlatoonExists
// 0x0010 (0x0010 - 0x0000)
struct HDTeamState_PlatoonExists final 
{
public:
	class AHDPlatoonState*                        Platoon;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePendingRemoval;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1229[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDTeamState_PlatoonExists) == 0x000008, "Wrong alignment on HDTeamState_PlatoonExists");
//(sizeof(HDTeamState_PlatoonExists) == 0x000010, "Wrong size on HDTeamState_PlatoonExists");
//(offsetof(HDTeamState_PlatoonExists, Platoon) == 0x000000, "Member 'HDTeamState_PlatoonExists::Platoon' has a wrong offset!");
//(offsetof(HDTeamState_PlatoonExists, bIgnorePendingRemoval) == 0x000008, "Member 'HDTeamState_PlatoonExists::bIgnorePendingRemoval' has a wrong offset!");
//(offsetof(HDTeamState_PlatoonExists, ReturnValue) == 0x000009, "Member 'HDTeamState_PlatoonExists::ReturnValue' has a wrong offset!");

// Function HDMain.HDTextChatInputWidgetBase.OnChatMessageSubmitted
// 0x0008 (0x0008 - 0x0000)
struct HDTextChatInputWidgetBase_OnChatMessageSubmitted final 
{
public:
	class UHDTextChatMsgInfo*                     SubmittedChatMsg;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTextChatInputWidgetBase_OnChatMessageSubmitted) == 0x000008, "Wrong alignment on HDTextChatInputWidgetBase_OnChatMessageSubmitted");
//(sizeof(HDTextChatInputWidgetBase_OnChatMessageSubmitted) == 0x000008, "Wrong size on HDTextChatInputWidgetBase_OnChatMessageSubmitted");
//(offsetof(HDTextChatInputWidgetBase_OnChatMessageSubmitted, SubmittedChatMsg) == 0x000000, "Member 'HDTextChatInputWidgetBase_OnChatMessageSubmitted::SubmittedChatMsg' has a wrong offset!");

// Function HDMain.HDTextChatInputWidgetBase.StartTalking
// 0x0008 (0x0008 - 0x0000)
struct HDTextChatInputWidgetBase_StartTalking final 
{
public:
	class UDFCommChannel*                         NewTalkChannel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTextChatInputWidgetBase_StartTalking) == 0x000008, "Wrong alignment on HDTextChatInputWidgetBase_StartTalking");
//(sizeof(HDTextChatInputWidgetBase_StartTalking) == 0x000008, "Wrong size on HDTextChatInputWidgetBase_StartTalking");
//(offsetof(HDTextChatInputWidgetBase_StartTalking, NewTalkChannel) == 0x000000, "Member 'HDTextChatInputWidgetBase_StartTalking::NewTalkChannel' has a wrong offset!");

// Function HDMain.HDTextChatInputWidgetBase.StartTalkingOnChannel
// 0x0008 (0x0008 - 0x0000)
struct HDTextChatInputWidgetBase_StartTalkingOnChannel final 
{
public:
	class UDFCommChannel*                         TalkChannel;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTextChatInputWidgetBase_StartTalkingOnChannel) == 0x000008, "Wrong alignment on HDTextChatInputWidgetBase_StartTalkingOnChannel");
//(sizeof(HDTextChatInputWidgetBase_StartTalkingOnChannel) == 0x000008, "Wrong size on HDTextChatInputWidgetBase_StartTalkingOnChannel");
//(offsetof(HDTextChatInputWidgetBase_StartTalkingOnChannel, TalkChannel) == 0x000000, "Member 'HDTextChatInputWidgetBase_StartTalkingOnChannel::TalkChannel' has a wrong offset!");

// Function HDMain.HDTextChatInputWidgetBase.StopTalking
// 0x0008 (0x0008 - 0x0000)
struct HDTextChatInputWidgetBase_StopTalking final 
{
public:
	class UDFCommChannel*                         CurrentChannel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTextChatInputWidgetBase_StopTalking) == 0x000008, "Wrong alignment on HDTextChatInputWidgetBase_StopTalking");
//(sizeof(HDTextChatInputWidgetBase_StopTalking) == 0x000008, "Wrong size on HDTextChatInputWidgetBase_StopTalking");
//(offsetof(HDTextChatInputWidgetBase_StopTalking, CurrentChannel) == 0x000000, "Member 'HDTextChatInputWidgetBase_StopTalking::CurrentChannel' has a wrong offset!");

// Function HDMain.HDTextChatInputWidgetBase.SubmitChatMessage
// 0x0018 (0x0018 - 0x0000)
struct HDTextChatInputWidgetBase_SubmitChatMessage final 
{
public:
	class FText                                   ChatMsgText;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
//(alignof(HDTextChatInputWidgetBase_SubmitChatMessage) == 0x000008, "Wrong alignment on HDTextChatInputWidgetBase_SubmitChatMessage");
//(sizeof(HDTextChatInputWidgetBase_SubmitChatMessage) == 0x000018, "Wrong size on HDTextChatInputWidgetBase_SubmitChatMessage");
//(offsetof(HDTextChatInputWidgetBase_SubmitChatMessage, ChatMsgText) == 0x000000, "Member 'HDTextChatInputWidgetBase_SubmitChatMessage::ChatMsgText' has a wrong offset!");

// Function HDMain.HDTextChatWidgetBase.DisplayChatMessage
// 0x0008 (0x0008 - 0x0000)
struct HDTextChatWidgetBase_DisplayChatMessage final 
{
public:
	class UHDTextChatMsgInfo*                     NewChatMsg;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTextChatWidgetBase_DisplayChatMessage) == 0x000008, "Wrong alignment on HDTextChatWidgetBase_DisplayChatMessage");
//(sizeof(HDTextChatWidgetBase_DisplayChatMessage) == 0x000008, "Wrong size on HDTextChatWidgetBase_DisplayChatMessage");
//(offsetof(HDTextChatWidgetBase_DisplayChatMessage, NewChatMsg) == 0x000000, "Member 'HDTextChatWidgetBase_DisplayChatMessage::NewChatMsg' has a wrong offset!");

// Function HDMain.HDTextChatWidgetBase.GetCachedChatMsgAt
// 0x0018 (0x0018 - 0x0000)
struct HDTextChatWidgetBase_GetCachedChatMsgAt final 
{
public:
	int32                                         MsgIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHDTextChatMsgInfo*                     OutFoundMsg;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDTextChatWidgetBase_GetCachedChatMsgAt) == 0x000008, "Wrong alignment on HDTextChatWidgetBase_GetCachedChatMsgAt");
//(sizeof(HDTextChatWidgetBase_GetCachedChatMsgAt) == 0x000018, "Wrong size on HDTextChatWidgetBase_GetCachedChatMsgAt");
//(offsetof(HDTextChatWidgetBase_GetCachedChatMsgAt, MsgIndex) == 0x000000, "Member 'HDTextChatWidgetBase_GetCachedChatMsgAt::MsgIndex' has a wrong offset!");
//(offsetof(HDTextChatWidgetBase_GetCachedChatMsgAt, OutFoundMsg) == 0x000008, "Member 'HDTextChatWidgetBase_GetCachedChatMsgAt::OutFoundMsg' has a wrong offset!");
//(offsetof(HDTextChatWidgetBase_GetCachedChatMsgAt, ReturnValue) == 0x000010, "Member 'HDTextChatWidgetBase_GetCachedChatMsgAt::ReturnValue' has a wrong offset!");

// Function HDMain.HDTextChatWidgetBase.SetMaxChatMsgsToCache
// 0x0004 (0x0004 - 0x0000)
struct HDTextChatWidgetBase_SetMaxChatMsgsToCache final 
{
public:
	int32                                         NumChatMsgsToCache;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTextChatWidgetBase_SetMaxChatMsgsToCache) == 0x000004, "Wrong alignment on HDTextChatWidgetBase_SetMaxChatMsgsToCache");
//(sizeof(HDTextChatWidgetBase_SetMaxChatMsgsToCache) == 0x000004, "Wrong size on HDTextChatWidgetBase_SetMaxChatMsgsToCache");
//(offsetof(HDTextChatWidgetBase_SetMaxChatMsgsToCache, NumChatMsgsToCache) == 0x000000, "Member 'HDTextChatWidgetBase_SetMaxChatMsgsToCache::NumChatMsgsToCache' has a wrong offset!");

// Function HDMain.HDTextChatWidgetBase.StartTalking
// 0x0008 (0x0008 - 0x0000)
struct HDTextChatWidgetBase_StartTalking final 
{
public:
	class UDFCommChannel*                         TalkChannel;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTextChatWidgetBase_StartTalking) == 0x000008, "Wrong alignment on HDTextChatWidgetBase_StartTalking");
//(sizeof(HDTextChatWidgetBase_StartTalking) == 0x000008, "Wrong size on HDTextChatWidgetBase_StartTalking");
//(offsetof(HDTextChatWidgetBase_StartTalking, TalkChannel) == 0x000000, "Member 'HDTextChatWidgetBase_StartTalking::TalkChannel' has a wrong offset!");

// Function HDMain.HDTextChatWidgetBase.GetNumCachedChatMsgs
// 0x0004 (0x0004 - 0x0000)
struct HDTextChatWidgetBase_GetNumCachedChatMsgs final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDTextChatWidgetBase_GetNumCachedChatMsgs) == 0x000004, "Wrong alignment on HDTextChatWidgetBase_GetNumCachedChatMsgs");
//(sizeof(HDTextChatWidgetBase_GetNumCachedChatMsgs) == 0x000004, "Wrong size on HDTextChatWidgetBase_GetNumCachedChatMsgs");
//(offsetof(HDTextChatWidgetBase_GetNumCachedChatMsgs, ReturnValue) == 0x000000, "Member 'HDTextChatWidgetBase_GetNumCachedChatMsgs::ReturnValue' has a wrong offset!");

// Function HDMain.HDUGCLoadProgressScreen.SetupProgressScreen
// 0x0004 (0x0004 - 0x0000)
struct HDUGCLoadProgressScreen_SetupProgressScreen final 
{
public:
	int32                                         TotalUGCToLoad;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUGCLoadProgressScreen_SetupProgressScreen) == 0x000004, "Wrong alignment on HDUGCLoadProgressScreen_SetupProgressScreen");
//(sizeof(HDUGCLoadProgressScreen_SetupProgressScreen) == 0x000004, "Wrong size on HDUGCLoadProgressScreen_SetupProgressScreen");
//(offsetof(HDUGCLoadProgressScreen_SetupProgressScreen, TotalUGCToLoad) == 0x000000, "Member 'HDUGCLoadProgressScreen_SetupProgressScreen::TotalUGCToLoad' has a wrong offset!");

// Function HDMain.HDUGCLoadProgressScreen.UpdateLoadProgress
// 0x0004 (0x0004 - 0x0000)
struct HDUGCLoadProgressScreen_UpdateLoadProgress final 
{
public:
	int32                                         NumUGCRemainingToLoad;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUGCLoadProgressScreen_UpdateLoadProgress) == 0x000004, "Wrong alignment on HDUGCLoadProgressScreen_UpdateLoadProgress");
//(sizeof(HDUGCLoadProgressScreen_UpdateLoadProgress) == 0x000004, "Wrong size on HDUGCLoadProgressScreen_UpdateLoadProgress");
//(offsetof(HDUGCLoadProgressScreen_UpdateLoadProgress, NumUGCRemainingToLoad) == 0x000000, "Member 'HDUGCLoadProgressScreen_UpdateLoadProgress::NumUGCRemainingToLoad' has a wrong offset!");

// Function HDMain.HDUIStatics.GetServerIp
// 0x00B0 (0x00B0 - 0x0000)
struct HDUIStatics_GetServerIp final 
{
public:
	struct FHDServerInfo                          InServerInfo;                                      // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIStatics_GetServerIp) == 0x000008, "Wrong alignment on HDUIStatics_GetServerIp");
//(sizeof(HDUIStatics_GetServerIp) == 0x0000B0, "Wrong size on HDUIStatics_GetServerIp");
//(offsetof(HDUIStatics_GetServerIp, InServerInfo) == 0x000000, "Member 'HDUIStatics_GetServerIp::InServerInfo' has a wrong offset!");
//(offsetof(HDUIStatics_GetServerIp, ReturnValue) == 0x0000A0, "Member 'HDUIStatics_GetServerIp::ReturnValue' has a wrong offset!");

// Function HDMain.HDUIStatics.GetServerIpPort
// 0x00B0 (0x00B0 - 0x0000)
struct HDUIStatics_GetServerIpPort final 
{
public:
	struct FHDServerInfo                          InServerInfo;                                      // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00A0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIStatics_GetServerIpPort) == 0x000008, "Wrong alignment on HDUIStatics_GetServerIpPort");
//(sizeof(HDUIStatics_GetServerIpPort) == 0x0000B0, "Wrong size on HDUIStatics_GetServerIpPort");
//(offsetof(HDUIStatics_GetServerIpPort, InServerInfo) == 0x000000, "Member 'HDUIStatics_GetServerIpPort::InServerInfo' has a wrong offset!");
//(offsetof(HDUIStatics_GetServerIpPort, ReturnValue) == 0x0000A0, "Member 'HDUIStatics_GetServerIpPort::ReturnValue' has a wrong offset!");

// Function HDMain.HDUIStatics.GetServerPort
// 0x00A8 (0x00A8 - 0x0000)
struct HDUIStatics_GetServerPort final 
{
public:
	struct FHDServerInfo                          InServerInfo;                                      // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00A0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122E[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDUIStatics_GetServerPort) == 0x000008, "Wrong alignment on HDUIStatics_GetServerPort");
//(sizeof(HDUIStatics_GetServerPort) == 0x0000A8, "Wrong size on HDUIStatics_GetServerPort");
//(offsetof(HDUIStatics_GetServerPort, InServerInfo) == 0x000000, "Member 'HDUIStatics_GetServerPort::InServerInfo' has a wrong offset!");
//(offsetof(HDUIStatics_GetServerPort, ReturnValue) == 0x0000A0, "Member 'HDUIStatics_GetServerPort::ReturnValue' has a wrong offset!");

// Function HDMain.HDUIUserWidget.BPDeinitializeFromOwnerPlayerCharacter
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_BPDeinitializeFromOwnerPlayerCharacter final 
{
public:
	class AHDPlayerCharacter*                     OwnerPlyChar;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_BPDeinitializeFromOwnerPlayerCharacter) == 0x000008, "Wrong alignment on HDUIUserWidget_BPDeinitializeFromOwnerPlayerCharacter");
//(sizeof(HDUIUserWidget_BPDeinitializeFromOwnerPlayerCharacter) == 0x000008, "Wrong size on HDUIUserWidget_BPDeinitializeFromOwnerPlayerCharacter");
//(offsetof(HDUIUserWidget_BPDeinitializeFromOwnerPlayerCharacter, OwnerPlyChar) == 0x000000, "Member 'HDUIUserWidget_BPDeinitializeFromOwnerPlayerCharacter::OwnerPlyChar' has a wrong offset!");

// Function HDMain.HDUIUserWidget.BPDeinitializeFromOwnerWeapon
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_BPDeinitializeFromOwnerWeapon final 
{
public:
	class AHDBaseWeapon*                          OwnerWeap;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_BPDeinitializeFromOwnerWeapon) == 0x000008, "Wrong alignment on HDUIUserWidget_BPDeinitializeFromOwnerWeapon");
//(sizeof(HDUIUserWidget_BPDeinitializeFromOwnerWeapon) == 0x000008, "Wrong size on HDUIUserWidget_BPDeinitializeFromOwnerWeapon");
//(offsetof(HDUIUserWidget_BPDeinitializeFromOwnerWeapon, OwnerWeap) == 0x000000, "Member 'HDUIUserWidget_BPDeinitializeFromOwnerWeapon::OwnerWeap' has a wrong offset!");

// Function HDMain.HDUIUserWidget.BPInitializeForOwnerPlayerCharacter
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_BPInitializeForOwnerPlayerCharacter final 
{
public:
	class AHDPlayerCharacter*                     OwnerPlyChar;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_BPInitializeForOwnerPlayerCharacter) == 0x000008, "Wrong alignment on HDUIUserWidget_BPInitializeForOwnerPlayerCharacter");
//(sizeof(HDUIUserWidget_BPInitializeForOwnerPlayerCharacter) == 0x000008, "Wrong size on HDUIUserWidget_BPInitializeForOwnerPlayerCharacter");
//(offsetof(HDUIUserWidget_BPInitializeForOwnerPlayerCharacter, OwnerPlyChar) == 0x000000, "Member 'HDUIUserWidget_BPInitializeForOwnerPlayerCharacter::OwnerPlyChar' has a wrong offset!");

// Function HDMain.HDUIUserWidget.BPInitializeForOwnerWeapon
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_BPInitializeForOwnerWeapon final 
{
public:
	class AHDBaseWeapon*                          OwnerWeap;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_BPInitializeForOwnerWeapon) == 0x000008, "Wrong alignment on HDUIUserWidget_BPInitializeForOwnerWeapon");
//(sizeof(HDUIUserWidget_BPInitializeForOwnerWeapon) == 0x000008, "Wrong size on HDUIUserWidget_BPInitializeForOwnerWeapon");
//(offsetof(HDUIUserWidget_BPInitializeForOwnerWeapon, OwnerWeap) == 0x000000, "Member 'HDUIUserWidget_BPInitializeForOwnerWeapon::OwnerWeap' has a wrong offset!");

// Function HDMain.HDUIUserWidget.BPOwnerDeath
// 0x0038 (0x0038 - 0x0000)
struct HDUIUserWidget_BPOwnerDeath final 
{
public:
	class APawn*                                  VictimPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            VictimController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillingDamage;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1230[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class APawn*                                  InstigatingPawn;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_BPOwnerDeath) == 0x000008, "Wrong alignment on HDUIUserWidget_BPOwnerDeath");
//(sizeof(HDUIUserWidget_BPOwnerDeath) == 0x000038, "Wrong size on HDUIUserWidget_BPOwnerDeath");
//(offsetof(HDUIUserWidget_BPOwnerDeath, VictimPawn) == 0x000000, "Member 'HDUIUserWidget_BPOwnerDeath::VictimPawn' has a wrong offset!");
//(offsetof(HDUIUserWidget_BPOwnerDeath, VictimController) == 0x000008, "Member 'HDUIUserWidget_BPOwnerDeath::VictimController' has a wrong offset!");
//(offsetof(HDUIUserWidget_BPOwnerDeath, KillingDamage) == 0x000010, "Member 'HDUIUserWidget_BPOwnerDeath::KillingDamage' has a wrong offset!");
//(offsetof(HDUIUserWidget_BPOwnerDeath, DamageEvent) == 0x000018, "Member 'HDUIUserWidget_BPOwnerDeath::DamageEvent' has a wrong offset!");
//(offsetof(HDUIUserWidget_BPOwnerDeath, InstigatingPawn) == 0x000028, "Member 'HDUIUserWidget_BPOwnerDeath::InstigatingPawn' has a wrong offset!");
//(offsetof(HDUIUserWidget_BPOwnerDeath, DamageCauser) == 0x000030, "Member 'HDUIUserWidget_BPOwnerDeath::DamageCauser' has a wrong offset!");

// Function HDMain.HDUIUserWidget.BPOwnerPossessPawn
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_BPOwnerPossessPawn final 
{
public:
	class APawn*                                  NewPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_BPOwnerPossessPawn) == 0x000008, "Wrong alignment on HDUIUserWidget_BPOwnerPossessPawn");
//(sizeof(HDUIUserWidget_BPOwnerPossessPawn) == 0x000008, "Wrong size on HDUIUserWidget_BPOwnerPossessPawn");
//(offsetof(HDUIUserWidget_BPOwnerPossessPawn, NewPawn) == 0x000000, "Member 'HDUIUserWidget_BPOwnerPossessPawn::NewPawn' has a wrong offset!");

// Function HDMain.HDUIUserWidget.BPOwnerUnpossessPawn
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_BPOwnerUnpossessPawn final 
{
public:
	class APawn*                                  UnpossessedPawn;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_BPOwnerUnpossessPawn) == 0x000008, "Wrong alignment on HDUIUserWidget_BPOwnerUnpossessPawn");
//(sizeof(HDUIUserWidget_BPOwnerUnpossessPawn) == 0x000008, "Wrong size on HDUIUserWidget_BPOwnerUnpossessPawn");
//(offsetof(HDUIUserWidget_BPOwnerUnpossessPawn, UnpossessedPawn) == 0x000000, "Member 'HDUIUserWidget_BPOwnerUnpossessPawn::UnpossessedPawn' has a wrong offset!");

// Function HDMain.HDUIUserWidget.BPOwnerWeaponChanged
// 0x0010 (0x0010 - 0x0000)
struct HDUIUserWidget_BPOwnerWeaponChanged final 
{
public:
	class AHDBaseWeapon*                          NewWeap;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDBaseWeapon*                          PrevWeap;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_BPOwnerWeaponChanged) == 0x000008, "Wrong alignment on HDUIUserWidget_BPOwnerWeaponChanged");
//(sizeof(HDUIUserWidget_BPOwnerWeaponChanged) == 0x000010, "Wrong size on HDUIUserWidget_BPOwnerWeaponChanged");
//(offsetof(HDUIUserWidget_BPOwnerWeaponChanged, NewWeap) == 0x000000, "Member 'HDUIUserWidget_BPOwnerWeaponChanged::NewWeap' has a wrong offset!");
//(offsetof(HDUIUserWidget_BPOwnerWeaponChanged, PrevWeap) == 0x000008, "Member 'HDUIUserWidget_BPOwnerWeaponChanged::PrevWeap' has a wrong offset!");

// Function HDMain.HDUIUserWidget.OwnerDeath
// 0x0038 (0x0038 - 0x0000)
struct HDUIUserWidget_OwnerDeath final 
{
public:
	class APawn*                                  VictimPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            VictimController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillingDamage;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1231[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class APawn*                                  InstigatingPawn;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_OwnerDeath) == 0x000008, "Wrong alignment on HDUIUserWidget_OwnerDeath");
//(sizeof(HDUIUserWidget_OwnerDeath) == 0x000038, "Wrong size on HDUIUserWidget_OwnerDeath");
//(offsetof(HDUIUserWidget_OwnerDeath, VictimPawn) == 0x000000, "Member 'HDUIUserWidget_OwnerDeath::VictimPawn' has a wrong offset!");
//(offsetof(HDUIUserWidget_OwnerDeath, VictimController) == 0x000008, "Member 'HDUIUserWidget_OwnerDeath::VictimController' has a wrong offset!");
//(offsetof(HDUIUserWidget_OwnerDeath, KillingDamage) == 0x000010, "Member 'HDUIUserWidget_OwnerDeath::KillingDamage' has a wrong offset!");
//(offsetof(HDUIUserWidget_OwnerDeath, DamageEvent) == 0x000018, "Member 'HDUIUserWidget_OwnerDeath::DamageEvent' has a wrong offset!");
//(offsetof(HDUIUserWidget_OwnerDeath, InstigatingPawn) == 0x000028, "Member 'HDUIUserWidget_OwnerDeath::InstigatingPawn' has a wrong offset!");
//(offsetof(HDUIUserWidget_OwnerDeath, DamageCauser) == 0x000030, "Member 'HDUIUserWidget_OwnerDeath::DamageCauser' has a wrong offset!");

// Function HDMain.HDUIUserWidget.OwnerEquippedItemChanged
// 0x0018 (0x0018 - 0x0000)
struct HDUIUserWidget_OwnerEquippedItemChanged final 
{
public:
	class ADFBaseCharacter*                       Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBaseItem*                            NewEquippedItem;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBaseItem*                            PrevEquippedItem;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_OwnerEquippedItemChanged) == 0x000008, "Wrong alignment on HDUIUserWidget_OwnerEquippedItemChanged");
//(sizeof(HDUIUserWidget_OwnerEquippedItemChanged) == 0x000018, "Wrong size on HDUIUserWidget_OwnerEquippedItemChanged");
//(offsetof(HDUIUserWidget_OwnerEquippedItemChanged, Character) == 0x000000, "Member 'HDUIUserWidget_OwnerEquippedItemChanged::Character' has a wrong offset!");
//(offsetof(HDUIUserWidget_OwnerEquippedItemChanged, NewEquippedItem) == 0x000008, "Member 'HDUIUserWidget_OwnerEquippedItemChanged::NewEquippedItem' has a wrong offset!");
//(offsetof(HDUIUserWidget_OwnerEquippedItemChanged, PrevEquippedItem) == 0x000010, "Member 'HDUIUserWidget_OwnerEquippedItemChanged::PrevEquippedItem' has a wrong offset!");

// Function HDMain.HDUIUserWidget.OwnerPossessPawn
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_OwnerPossessPawn final 
{
public:
	class APawn*                                  NewPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_OwnerPossessPawn) == 0x000008, "Wrong alignment on HDUIUserWidget_OwnerPossessPawn");
//(sizeof(HDUIUserWidget_OwnerPossessPawn) == 0x000008, "Wrong size on HDUIUserWidget_OwnerPossessPawn");
//(offsetof(HDUIUserWidget_OwnerPossessPawn, NewPawn) == 0x000000, "Member 'HDUIUserWidget_OwnerPossessPawn::NewPawn' has a wrong offset!");

// Function HDMain.HDUIUserWidget.OwnerUnpossessPawn
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_OwnerUnpossessPawn final 
{
public:
	class APawn*                                  UnpossessedPawn;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_OwnerUnpossessPawn) == 0x000008, "Wrong alignment on HDUIUserWidget_OwnerUnpossessPawn");
//(sizeof(HDUIUserWidget_OwnerUnpossessPawn) == 0x000008, "Wrong size on HDUIUserWidget_OwnerUnpossessPawn");
//(offsetof(HDUIUserWidget_OwnerUnpossessPawn, UnpossessedPawn) == 0x000000, "Member 'HDUIUserWidget_OwnerUnpossessPawn::UnpossessedPawn' has a wrong offset!");

// Function HDMain.HDUIUserWidget.GetOwnerEquippedWeapon
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_GetOwnerEquippedWeapon final 
{
public:
	class AHDBaseWeapon*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_GetOwnerEquippedWeapon) == 0x000008, "Wrong alignment on HDUIUserWidget_GetOwnerEquippedWeapon");
//(sizeof(HDUIUserWidget_GetOwnerEquippedWeapon) == 0x000008, "Wrong size on HDUIUserWidget_GetOwnerEquippedWeapon");
//(offsetof(HDUIUserWidget_GetOwnerEquippedWeapon, ReturnValue) == 0x000000, "Member 'HDUIUserWidget_GetOwnerEquippedWeapon::ReturnValue' has a wrong offset!");

// Function HDMain.HDUIUserWidget.GetOwningHDPlayer
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_GetOwningHDPlayer final 
{
public:
	class AHDPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_GetOwningHDPlayer) == 0x000008, "Wrong alignment on HDUIUserWidget_GetOwningHDPlayer");
//(sizeof(HDUIUserWidget_GetOwningHDPlayer) == 0x000008, "Wrong size on HDUIUserWidget_GetOwningHDPlayer");
//(offsetof(HDUIUserWidget_GetOwningHDPlayer, ReturnValue) == 0x000000, "Member 'HDUIUserWidget_GetOwningHDPlayer::ReturnValue' has a wrong offset!");

// Function HDMain.HDUIUserWidget.GetOwningHDPlayerCharacter
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_GetOwningHDPlayerCharacter final 
{
public:
	class AHDPlayerCharacter*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_GetOwningHDPlayerCharacter) == 0x000008, "Wrong alignment on HDUIUserWidget_GetOwningHDPlayerCharacter");
//(sizeof(HDUIUserWidget_GetOwningHDPlayerCharacter) == 0x000008, "Wrong size on HDUIUserWidget_GetOwningHDPlayerCharacter");
//(offsetof(HDUIUserWidget_GetOwningHDPlayerCharacter, ReturnValue) == 0x000000, "Member 'HDUIUserWidget_GetOwningHDPlayerCharacter::ReturnValue' has a wrong offset!");

// Function HDMain.HDUIUserWidget.GetOwningHDPlayerCharacterMovement
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_GetOwningHDPlayerCharacterMovement final 
{
public:
	class UDFCharacterMovementComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_GetOwningHDPlayerCharacterMovement) == 0x000008, "Wrong alignment on HDUIUserWidget_GetOwningHDPlayerCharacterMovement");
//(sizeof(HDUIUserWidget_GetOwningHDPlayerCharacterMovement) == 0x000008, "Wrong size on HDUIUserWidget_GetOwningHDPlayerCharacterMovement");
//(offsetof(HDUIUserWidget_GetOwningHDPlayerCharacterMovement, ReturnValue) == 0x000000, "Member 'HDUIUserWidget_GetOwningHDPlayerCharacterMovement::ReturnValue' has a wrong offset!");

// Function HDMain.HDUIUserWidget.GetOwningHDPlayerHUD
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_GetOwningHDPlayerHUD final 
{
public:
	class AHDHUD*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_GetOwningHDPlayerHUD) == 0x000008, "Wrong alignment on HDUIUserWidget_GetOwningHDPlayerHUD");
//(sizeof(HDUIUserWidget_GetOwningHDPlayerHUD) == 0x000008, "Wrong size on HDUIUserWidget_GetOwningHDPlayerHUD");
//(offsetof(HDUIUserWidget_GetOwningHDPlayerHUD, ReturnValue) == 0x000000, "Member 'HDUIUserWidget_GetOwningHDPlayerHUD::ReturnValue' has a wrong offset!");

// Function HDMain.HDUIUserWidget.GetOwningPlayerHUD
// 0x0008 (0x0008 - 0x0000)
struct HDUIUserWidget_GetOwningPlayerHUD final 
{
public:
	class AHUD*                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUserWidget_GetOwningPlayerHUD) == 0x000008, "Wrong alignment on HDUIUserWidget_GetOwningPlayerHUD");
//(sizeof(HDUIUserWidget_GetOwningPlayerHUD) == 0x000008, "Wrong size on HDUIUserWidget_GetOwningPlayerHUD");
//(offsetof(HDUIUserWidget_GetOwningPlayerHUD, ReturnValue) == 0x000000, "Member 'HDUIUserWidget_GetOwningPlayerHUD::ReturnValue' has a wrong offset!");

// Function HDMain.HDUIUWCaptureStatus.ControlPointSetCaptureProgress
// 0x0010 (0x0010 - 0x0000)
struct HDUIUWCaptureStatus_ControlPointSetCaptureProgress final 
{
public:
	bool                                          bContested;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1233[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NewValueNorm;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValueNorm;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1234[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDUIUWCaptureStatus_ControlPointSetCaptureProgress) == 0x000004, "Wrong alignment on HDUIUWCaptureStatus_ControlPointSetCaptureProgress");
//(sizeof(HDUIUWCaptureStatus_ControlPointSetCaptureProgress) == 0x000010, "Wrong size on HDUIUWCaptureStatus_ControlPointSetCaptureProgress");
//(offsetof(HDUIUWCaptureStatus_ControlPointSetCaptureProgress, bContested) == 0x000000, "Member 'HDUIUWCaptureStatus_ControlPointSetCaptureProgress::bContested' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_ControlPointSetCaptureProgress, NewValueNorm) == 0x000004, "Member 'HDUIUWCaptureStatus_ControlPointSetCaptureProgress::NewValueNorm' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_ControlPointSetCaptureProgress, OldValueNorm) == 0x000008, "Member 'HDUIUWCaptureStatus_ControlPointSetCaptureProgress::OldValueNorm' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_ControlPointSetCaptureProgress, bInitial) == 0x00000C, "Member 'HDUIUWCaptureStatus_ControlPointSetCaptureProgress::bInitial' has a wrong offset!");

// Function HDMain.HDUIUWCaptureStatus.ControlPointSetGarrisonedPlayerCount
// 0x0010 (0x0010 - 0x0000)
struct HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount final 
{
public:
	int32                                         NumFriendlies;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEnemies;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinNumRequiredForCapture;                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1235[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount) == 0x000004, "Wrong alignment on HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount");
//(sizeof(HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount) == 0x000010, "Wrong size on HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount");
//(offsetof(HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount, NumFriendlies) == 0x000000, "Member 'HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount::NumFriendlies' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount, NumEnemies) == 0x000004, "Member 'HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount::NumEnemies' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount, MinNumRequiredForCapture) == 0x000008, "Member 'HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount::MinNumRequiredForCapture' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount, bInitial) == 0x00000C, "Member 'HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount::bInitial' has a wrong offset!");

// Function HDMain.HDUIUWCaptureStatus.ControlPointSetOwnershipState
// 0x0004 (0x0004 - 0x0000)
struct HDUIUWCaptureStatus_ControlPointSetOwnershipState final 
{
public:
	bool                                          bCaptured;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDTeam                                       NewOwningTeam;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDTeam                                       OldOwningTeam;                                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUWCaptureStatus_ControlPointSetOwnershipState) == 0x000001, "Wrong alignment on HDUIUWCaptureStatus_ControlPointSetOwnershipState");
//(sizeof(HDUIUWCaptureStatus_ControlPointSetOwnershipState) == 0x000004, "Wrong size on HDUIUWCaptureStatus_ControlPointSetOwnershipState");
//(offsetof(HDUIUWCaptureStatus_ControlPointSetOwnershipState, bCaptured) == 0x000000, "Member 'HDUIUWCaptureStatus_ControlPointSetOwnershipState::bCaptured' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_ControlPointSetOwnershipState, NewOwningTeam) == 0x000001, "Member 'HDUIUWCaptureStatus_ControlPointSetOwnershipState::NewOwningTeam' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_ControlPointSetOwnershipState, OldOwningTeam) == 0x000002, "Member 'HDUIUWCaptureStatus_ControlPointSetOwnershipState::OldOwningTeam' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_ControlPointSetOwnershipState, bInitial) == 0x000003, "Member 'HDUIUWCaptureStatus_ControlPointSetOwnershipState::bInitial' has a wrong offset!");

// Function HDMain.HDUIUWCaptureStatus.CPBeginEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct HDUIUWCaptureStatus_CPBeginEndOverlap final 
{
public:
	class AActor*                                 OverlappedControlPointActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUWCaptureStatus_CPBeginEndOverlap) == 0x000008, "Wrong alignment on HDUIUWCaptureStatus_CPBeginEndOverlap");
//(sizeof(HDUIUWCaptureStatus_CPBeginEndOverlap) == 0x000010, "Wrong size on HDUIUWCaptureStatus_CPBeginEndOverlap");
//(offsetof(HDUIUWCaptureStatus_CPBeginEndOverlap, OverlappedControlPointActor) == 0x000000, "Member 'HDUIUWCaptureStatus_CPBeginEndOverlap::OverlappedControlPointActor' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_CPBeginEndOverlap, OtherActor) == 0x000008, "Member 'HDUIUWCaptureStatus_CPBeginEndOverlap::OtherActor' has a wrong offset!");

// Function HDMain.HDUIUWCaptureStatus.CPCaptureProgressUpdate
// 0x0010 (0x0010 - 0x0000)
struct HDUIUWCaptureStatus_CPCaptureProgressUpdate final 
{
public:
	class AHDBaseCapturePoint*                    ControlPoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCaptureContested;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1236[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InCaptureProgress;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUWCaptureStatus_CPCaptureProgressUpdate) == 0x000008, "Wrong alignment on HDUIUWCaptureStatus_CPCaptureProgressUpdate");
//(sizeof(HDUIUWCaptureStatus_CPCaptureProgressUpdate) == 0x000010, "Wrong size on HDUIUWCaptureStatus_CPCaptureProgressUpdate");
//(offsetof(HDUIUWCaptureStatus_CPCaptureProgressUpdate, ControlPoint) == 0x000000, "Member 'HDUIUWCaptureStatus_CPCaptureProgressUpdate::ControlPoint' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_CPCaptureProgressUpdate, bInCaptureContested) == 0x000008, "Member 'HDUIUWCaptureStatus_CPCaptureProgressUpdate::bInCaptureContested' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_CPCaptureProgressUpdate, InCaptureProgress) == 0x00000C, "Member 'HDUIUWCaptureStatus_CPCaptureProgressUpdate::InCaptureProgress' has a wrong offset!");

// Function HDMain.HDUIUWCaptureStatus.CPOwnershipUpdate
// 0x0010 (0x0010 - 0x0000)
struct HDUIUWCaptureStatus_CPOwnershipUpdate final 
{
public:
	class AHDBaseCapturePoint*                    ControlPoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDTeam                                       PrevOwningTeam;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDTeam                                       NewOwningTeam;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptured;                                         // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1237[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDUIUWCaptureStatus_CPOwnershipUpdate) == 0x000008, "Wrong alignment on HDUIUWCaptureStatus_CPOwnershipUpdate");
//(sizeof(HDUIUWCaptureStatus_CPOwnershipUpdate) == 0x000010, "Wrong size on HDUIUWCaptureStatus_CPOwnershipUpdate");
//(offsetof(HDUIUWCaptureStatus_CPOwnershipUpdate, ControlPoint) == 0x000000, "Member 'HDUIUWCaptureStatus_CPOwnershipUpdate::ControlPoint' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_CPOwnershipUpdate, PrevOwningTeam) == 0x000008, "Member 'HDUIUWCaptureStatus_CPOwnershipUpdate::PrevOwningTeam' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_CPOwnershipUpdate, NewOwningTeam) == 0x000009, "Member 'HDUIUWCaptureStatus_CPOwnershipUpdate::NewOwningTeam' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_CPOwnershipUpdate, bCaptured) == 0x00000A, "Member 'HDUIUWCaptureStatus_CPOwnershipUpdate::bCaptured' has a wrong offset!");

// Function HDMain.HDUIUWCaptureStatus.OwnerBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct HDUIUWCaptureStatus_OwnerBeginOverlap final 
{
public:
	class AActor*                                 OverlappedOwnerChar;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUWCaptureStatus_OwnerBeginOverlap) == 0x000008, "Wrong alignment on HDUIUWCaptureStatus_OwnerBeginOverlap");
//(sizeof(HDUIUWCaptureStatus_OwnerBeginOverlap) == 0x000010, "Wrong size on HDUIUWCaptureStatus_OwnerBeginOverlap");
//(offsetof(HDUIUWCaptureStatus_OwnerBeginOverlap, OverlappedOwnerChar) == 0x000000, "Member 'HDUIUWCaptureStatus_OwnerBeginOverlap::OverlappedOwnerChar' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_OwnerBeginOverlap, OtherActor) == 0x000008, "Member 'HDUIUWCaptureStatus_OwnerBeginOverlap::OtherActor' has a wrong offset!");

// Function HDMain.HDUIUWCaptureStatus.OwnerEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct HDUIUWCaptureStatus_OwnerEndOverlap final 
{
public:
	class AActor*                                 OverlappedOwnerChar;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUWCaptureStatus_OwnerEndOverlap) == 0x000008, "Wrong alignment on HDUIUWCaptureStatus_OwnerEndOverlap");
//(sizeof(HDUIUWCaptureStatus_OwnerEndOverlap) == 0x000010, "Wrong size on HDUIUWCaptureStatus_OwnerEndOverlap");
//(offsetof(HDUIUWCaptureStatus_OwnerEndOverlap, OverlappedOwnerChar) == 0x000000, "Member 'HDUIUWCaptureStatus_OwnerEndOverlap::OverlappedOwnerChar' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_OwnerEndOverlap, OtherActor) == 0x000008, "Member 'HDUIUWCaptureStatus_OwnerEndOverlap::OtherActor' has a wrong offset!");

// Function HDMain.HDUIUWCaptureStatus.OwnerTouchingControlPoint
// 0x0010 (0x0010 - 0x0000)
struct HDUIUWCaptureStatus_OwnerTouchingControlPoint final 
{
public:
	class AHDBaseCapturePoint*                    OverlappingCP;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1238[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDUIUWCaptureStatus_OwnerTouchingControlPoint) == 0x000008, "Wrong alignment on HDUIUWCaptureStatus_OwnerTouchingControlPoint");
//(sizeof(HDUIUWCaptureStatus_OwnerTouchingControlPoint) == 0x000010, "Wrong size on HDUIUWCaptureStatus_OwnerTouchingControlPoint");
//(offsetof(HDUIUWCaptureStatus_OwnerTouchingControlPoint, OverlappingCP) == 0x000000, "Member 'HDUIUWCaptureStatus_OwnerTouchingControlPoint::OverlappingCP' has a wrong offset!");
//(offsetof(HDUIUWCaptureStatus_OwnerTouchingControlPoint, bInitial) == 0x000008, "Member 'HDUIUWCaptureStatus_OwnerTouchingControlPoint::bInitial' has a wrong offset!");

// Function HDMain.HDUIUWPlayerStatus.OwnerAimTransitionUpdate
// 0x0001 (0x0001 - 0x0000)
struct HDUIUWPlayerStatus_OwnerAimTransitionUpdate final 
{
public:
	bool                                          bIsAiming;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUWPlayerStatus_OwnerAimTransitionUpdate) == 0x000001, "Wrong alignment on HDUIUWPlayerStatus_OwnerAimTransitionUpdate");
//(sizeof(HDUIUWPlayerStatus_OwnerAimTransitionUpdate) == 0x000001, "Wrong size on HDUIUWPlayerStatus_OwnerAimTransitionUpdate");
//(offsetof(HDUIUWPlayerStatus_OwnerAimTransitionUpdate, bIsAiming) == 0x000000, "Member 'HDUIUWPlayerStatus_OwnerAimTransitionUpdate::bIsAiming' has a wrong offset!");

// Function HDMain.HDUIUWPlayerStatus.OwnerHealthUpdate
// 0x0010 (0x0010 - 0x0000)
struct HDUIUWPlayerStatus_OwnerHealthUpdate final 
{
public:
	class ADFBaseCharacter*                       Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewHealthTotal;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrevHealthTotal;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUWPlayerStatus_OwnerHealthUpdate) == 0x000008, "Wrong alignment on HDUIUWPlayerStatus_OwnerHealthUpdate");
//(sizeof(HDUIUWPlayerStatus_OwnerHealthUpdate) == 0x000010, "Wrong size on HDUIUWPlayerStatus_OwnerHealthUpdate");
//(offsetof(HDUIUWPlayerStatus_OwnerHealthUpdate, Character) == 0x000000, "Member 'HDUIUWPlayerStatus_OwnerHealthUpdate::Character' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerHealthUpdate, NewHealthTotal) == 0x000008, "Member 'HDUIUWPlayerStatus_OwnerHealthUpdate::NewHealthTotal' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerHealthUpdate, PrevHealthTotal) == 0x00000C, "Member 'HDUIUWPlayerStatus_OwnerHealthUpdate::PrevHealthTotal' has a wrong offset!");

// Function HDMain.HDUIUWPlayerStatus.OwnerSetHealth
// 0x000C (0x000C - 0x0000)
struct HDUIUWPlayerStatus_OwnerSetHealth final 
{
public:
	float                                         NewValueNorm;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValueNorm;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123A[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDUIUWPlayerStatus_OwnerSetHealth) == 0x000004, "Wrong alignment on HDUIUWPlayerStatus_OwnerSetHealth");
//(sizeof(HDUIUWPlayerStatus_OwnerSetHealth) == 0x00000C, "Wrong size on HDUIUWPlayerStatus_OwnerSetHealth");
//(offsetof(HDUIUWPlayerStatus_OwnerSetHealth, NewValueNorm) == 0x000000, "Member 'HDUIUWPlayerStatus_OwnerSetHealth::NewValueNorm' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerSetHealth, OldValueNorm) == 0x000004, "Member 'HDUIUWPlayerStatus_OwnerSetHealth::OldValueNorm' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerSetHealth, bInitial) == 0x000008, "Member 'HDUIUWPlayerStatus_OwnerSetHealth::bInitial' has a wrong offset!");

// Function HDMain.HDUIUWPlayerStatus.OwnerSetJumpStamina
// 0x000C (0x000C - 0x0000)
struct HDUIUWPlayerStatus_OwnerSetJumpStamina final 
{
public:
	float                                         NewValueNorm;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValueNorm;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123B[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDUIUWPlayerStatus_OwnerSetJumpStamina) == 0x000004, "Wrong alignment on HDUIUWPlayerStatus_OwnerSetJumpStamina");
//(sizeof(HDUIUWPlayerStatus_OwnerSetJumpStamina) == 0x00000C, "Wrong size on HDUIUWPlayerStatus_OwnerSetJumpStamina");
//(offsetof(HDUIUWPlayerStatus_OwnerSetJumpStamina, NewValueNorm) == 0x000000, "Member 'HDUIUWPlayerStatus_OwnerSetJumpStamina::NewValueNorm' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerSetJumpStamina, OldValueNorm) == 0x000004, "Member 'HDUIUWPlayerStatus_OwnerSetJumpStamina::OldValueNorm' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerSetJumpStamina, bInitial) == 0x000008, "Member 'HDUIUWPlayerStatus_OwnerSetJumpStamina::bInitial' has a wrong offset!");

// Function HDMain.HDUIUWPlayerStatus.OwnerSetSprintStamina
// 0x000C (0x000C - 0x0000)
struct HDUIUWPlayerStatus_OwnerSetSprintStamina final 
{
public:
	float                                         NewValueNorm;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValueNorm;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123C[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDUIUWPlayerStatus_OwnerSetSprintStamina) == 0x000004, "Wrong alignment on HDUIUWPlayerStatus_OwnerSetSprintStamina");
//(sizeof(HDUIUWPlayerStatus_OwnerSetSprintStamina) == 0x00000C, "Wrong size on HDUIUWPlayerStatus_OwnerSetSprintStamina");
//(offsetof(HDUIUWPlayerStatus_OwnerSetSprintStamina, NewValueNorm) == 0x000000, "Member 'HDUIUWPlayerStatus_OwnerSetSprintStamina::NewValueNorm' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerSetSprintStamina, OldValueNorm) == 0x000004, "Member 'HDUIUWPlayerStatus_OwnerSetSprintStamina::OldValueNorm' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerSetSprintStamina, bInitial) == 0x000008, "Member 'HDUIUWPlayerStatus_OwnerSetSprintStamina::bInitial' has a wrong offset!");

// Function HDMain.HDUIUWPlayerStatus.OwnerSetStance
// 0x0003 (0x0003 - 0x0000)
struct HDUIUWPlayerStatus_OwnerSetStance final 
{
public:
	ECharacterStance                              NewStance;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterStance                              OldStance;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUWPlayerStatus_OwnerSetStance) == 0x000001, "Wrong alignment on HDUIUWPlayerStatus_OwnerSetStance");
//(sizeof(HDUIUWPlayerStatus_OwnerSetStance) == 0x000003, "Wrong size on HDUIUWPlayerStatus_OwnerSetStance");
//(offsetof(HDUIUWPlayerStatus_OwnerSetStance, NewStance) == 0x000000, "Member 'HDUIUWPlayerStatus_OwnerSetStance::NewStance' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerSetStance, OldStance) == 0x000001, "Member 'HDUIUWPlayerStatus_OwnerSetStance::OldStance' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerSetStance, bInitial) == 0x000002, "Member 'HDUIUWPlayerStatus_OwnerSetStance::bInitial' has a wrong offset!");

// Function HDMain.HDUIUWPlayerStatus.OwnerSetStanceState
// 0x0003 (0x0003 - 0x0000)
struct HDUIUWPlayerStatus_OwnerSetStanceState final 
{
public:
	EHDUICharacterStanceState                     NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDUICharacterStanceState                     OldState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUWPlayerStatus_OwnerSetStanceState) == 0x000001, "Wrong alignment on HDUIUWPlayerStatus_OwnerSetStanceState");
//(sizeof(HDUIUWPlayerStatus_OwnerSetStanceState) == 0x000003, "Wrong size on HDUIUWPlayerStatus_OwnerSetStanceState");
//(offsetof(HDUIUWPlayerStatus_OwnerSetStanceState, NewState) == 0x000000, "Member 'HDUIUWPlayerStatus_OwnerSetStanceState::NewState' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerSetStanceState, OldState) == 0x000001, "Member 'HDUIUWPlayerStatus_OwnerSetStanceState::OldState' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerSetStanceState, bInitial) == 0x000002, "Member 'HDUIUWPlayerStatus_OwnerSetStanceState::bInitial' has a wrong offset!");

// Function HDMain.HDUIUWPlayerStatus.OwnerSprintTransitionUpdate
// 0x0001 (0x0001 - 0x0000)
struct HDUIUWPlayerStatus_OwnerSprintTransitionUpdate final 
{
public:
	bool                                          bIsSprinting;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUWPlayerStatus_OwnerSprintTransitionUpdate) == 0x000001, "Wrong alignment on HDUIUWPlayerStatus_OwnerSprintTransitionUpdate");
//(sizeof(HDUIUWPlayerStatus_OwnerSprintTransitionUpdate) == 0x000001, "Wrong size on HDUIUWPlayerStatus_OwnerSprintTransitionUpdate");
//(offsetof(HDUIUWPlayerStatus_OwnerSprintTransitionUpdate, bIsSprinting) == 0x000000, "Member 'HDUIUWPlayerStatus_OwnerSprintTransitionUpdate::bIsSprinting' has a wrong offset!");

// Function HDMain.HDUIUWPlayerStatus.OwnerUpdateStamina
// 0x000C (0x000C - 0x0000)
struct HDUIUWPlayerStatus_OwnerUpdateStamina final 
{
public:
	float                                         SprintValueNorm;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpValueNorm;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123D[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDUIUWPlayerStatus_OwnerUpdateStamina) == 0x000004, "Wrong alignment on HDUIUWPlayerStatus_OwnerUpdateStamina");
//(sizeof(HDUIUWPlayerStatus_OwnerUpdateStamina) == 0x00000C, "Wrong size on HDUIUWPlayerStatus_OwnerUpdateStamina");
//(offsetof(HDUIUWPlayerStatus_OwnerUpdateStamina, SprintValueNorm) == 0x000000, "Member 'HDUIUWPlayerStatus_OwnerUpdateStamina::SprintValueNorm' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerUpdateStamina, JumpValueNorm) == 0x000004, "Member 'HDUIUWPlayerStatus_OwnerUpdateStamina::JumpValueNorm' has a wrong offset!");
//(offsetof(HDUIUWPlayerStatus_OwnerUpdateStamina, bInitial) == 0x000008, "Member 'HDUIUWPlayerStatus_OwnerUpdateStamina::bInitial' has a wrong offset!");

// Function HDMain.HDUIUWWeaponStatus.BPOwnerWeaponAmmoUpdated
// 0x0020 (0x0020 - 0x0000)
struct HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated final 
{
public:
	struct FHDUIWeaponAmmoState                   AmmoState;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFromReload;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTotalFreeAmmoUpdated;                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNumFreeAmmoClipsUpdated;                          // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123F[0x5];                                     // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated) == 0x000008, "Wrong alignment on HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated");
//(sizeof(HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated) == 0x000020, "Wrong size on HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated");
//(offsetof(HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated, AmmoState) == 0x000000, "Member 'HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated::AmmoState' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated, bFromReload) == 0x000018, "Member 'HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated::bFromReload' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated, bTotalFreeAmmoUpdated) == 0x000019, "Member 'HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated::bTotalFreeAmmoUpdated' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated, bNumFreeAmmoClipsUpdated) == 0x00001A, "Member 'HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated::bNumFreeAmmoClipsUpdated' has a wrong offset!");

// Function HDMain.HDUIUWWeaponStatus.BPOwnerWeaponSetFireMode
// 0x0003 (0x0003 - 0x0000)
struct HDUIUWWeaponStatus_BPOwnerWeaponSetFireMode final 
{
public:
	EFireMode                                     NewFireMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFireMode                                     PreviousFireMode;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromPlayerInput;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUWWeaponStatus_BPOwnerWeaponSetFireMode) == 0x000001, "Wrong alignment on HDUIUWWeaponStatus_BPOwnerWeaponSetFireMode");
//(sizeof(HDUIUWWeaponStatus_BPOwnerWeaponSetFireMode) == 0x000003, "Wrong size on HDUIUWWeaponStatus_BPOwnerWeaponSetFireMode");
//(offsetof(HDUIUWWeaponStatus_BPOwnerWeaponSetFireMode, NewFireMode) == 0x000000, "Member 'HDUIUWWeaponStatus_BPOwnerWeaponSetFireMode::NewFireMode' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_BPOwnerWeaponSetFireMode, PreviousFireMode) == 0x000001, "Member 'HDUIUWWeaponStatus_BPOwnerWeaponSetFireMode::PreviousFireMode' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_BPOwnerWeaponSetFireMode, bFromPlayerInput) == 0x000002, "Member 'HDUIUWWeaponStatus_BPOwnerWeaponSetFireMode::bFromPlayerInput' has a wrong offset!");

// Function HDMain.HDUIUWWeaponStatus.OwnerAimStyleChanged
// 0x0010 (0x0010 - 0x0000)
struct HDUIUWWeaponStatus_OwnerAimStyleChanged final 
{
public:
	class AHDPlayerCharacter*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDWeaponAimStyle                             NewAimStyle;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDWeaponAimStyle                             PrevAimStyle;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromPlayerInput;                                  // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1240[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDUIUWWeaponStatus_OwnerAimStyleChanged) == 0x000008, "Wrong alignment on HDUIUWWeaponStatus_OwnerAimStyleChanged");
//(sizeof(HDUIUWWeaponStatus_OwnerAimStyleChanged) == 0x000010, "Wrong size on HDUIUWWeaponStatus_OwnerAimStyleChanged");
//(offsetof(HDUIUWWeaponStatus_OwnerAimStyleChanged, Character) == 0x000000, "Member 'HDUIUWWeaponStatus_OwnerAimStyleChanged::Character' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_OwnerAimStyleChanged, NewAimStyle) == 0x000008, "Member 'HDUIUWWeaponStatus_OwnerAimStyleChanged::NewAimStyle' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_OwnerAimStyleChanged, PrevAimStyle) == 0x000009, "Member 'HDUIUWWeaponStatus_OwnerAimStyleChanged::PrevAimStyle' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_OwnerAimStyleChanged, bFromPlayerInput) == 0x00000A, "Member 'HDUIUWWeaponStatus_OwnerAimStyleChanged::bFromPlayerInput' has a wrong offset!");

// Function HDMain.HDUIUWWeaponStatus.OwnerSetAimStyle
// 0x0003 (0x0003 - 0x0000)
struct HDUIUWWeaponStatus_OwnerSetAimStyle final 
{
public:
	EHDWeaponAimStyle                             NewAimStyle;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDWeaponAimStyle                             PrevAimStyle;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromPlayerInput;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDUIUWWeaponStatus_OwnerSetAimStyle) == 0x000001, "Wrong alignment on HDUIUWWeaponStatus_OwnerSetAimStyle");
//(sizeof(HDUIUWWeaponStatus_OwnerSetAimStyle) == 0x000003, "Wrong size on HDUIUWWeaponStatus_OwnerSetAimStyle");
//(offsetof(HDUIUWWeaponStatus_OwnerSetAimStyle, NewAimStyle) == 0x000000, "Member 'HDUIUWWeaponStatus_OwnerSetAimStyle::NewAimStyle' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_OwnerSetAimStyle, PrevAimStyle) == 0x000001, "Member 'HDUIUWWeaponStatus_OwnerSetAimStyle::PrevAimStyle' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_OwnerSetAimStyle, bFromPlayerInput) == 0x000002, "Member 'HDUIUWWeaponStatus_OwnerSetAimStyle::bFromPlayerInput' has a wrong offset!");

// Function HDMain.HDUIUWWeaponStatus.OwnerWeaponFireModeChanged
// 0x0010 (0x0010 - 0x0000)
struct HDUIUWWeaponStatus_OwnerWeaponFireModeChanged final 
{
public:
	class ADFBaseGun*                             Gun;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFireMode                                     NewFireMode;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFireMode                                     PrevFireMode;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromPlayerInput;                                  // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1241[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(HDUIUWWeaponStatus_OwnerWeaponFireModeChanged) == 0x000008, "Wrong alignment on HDUIUWWeaponStatus_OwnerWeaponFireModeChanged");
//(sizeof(HDUIUWWeaponStatus_OwnerWeaponFireModeChanged) == 0x000010, "Wrong size on HDUIUWWeaponStatus_OwnerWeaponFireModeChanged");
//(offsetof(HDUIUWWeaponStatus_OwnerWeaponFireModeChanged, Gun) == 0x000000, "Member 'HDUIUWWeaponStatus_OwnerWeaponFireModeChanged::Gun' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_OwnerWeaponFireModeChanged, NewFireMode) == 0x000008, "Member 'HDUIUWWeaponStatus_OwnerWeaponFireModeChanged::NewFireMode' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_OwnerWeaponFireModeChanged, PrevFireMode) == 0x000009, "Member 'HDUIUWWeaponStatus_OwnerWeaponFireModeChanged::PrevFireMode' has a wrong offset!");
//(offsetof(HDUIUWWeaponStatus_OwnerWeaponFireModeChanged, bFromPlayerInput) == 0x00000A, "Member 'HDUIUWWeaponStatus_OwnerWeaponFireModeChanged::bFromPlayerInput' has a wrong offset!");

// Function HDMain.HDVoipIndicatorListingWidgetBase.OnVoiceMsgInfoSet
// 0x0001 (0x0001 - 0x0000)
struct HDVoipIndicatorListingWidgetBase_OnVoiceMsgInfoSet final 
{
public:
	bool                                          bIsDesignTime;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDVoipIndicatorListingWidgetBase_OnVoiceMsgInfoSet) == 0x000001, "Wrong alignment on HDVoipIndicatorListingWidgetBase_OnVoiceMsgInfoSet");
//(sizeof(HDVoipIndicatorListingWidgetBase_OnVoiceMsgInfoSet) == 0x000001, "Wrong size on HDVoipIndicatorListingWidgetBase_OnVoiceMsgInfoSet");
//(offsetof(HDVoipIndicatorListingWidgetBase_OnVoiceMsgInfoSet, bIsDesignTime) == 0x000000, "Member 'HDVoipIndicatorListingWidgetBase_OnVoiceMsgInfoSet::bIsDesignTime' has a wrong offset!");

// Function HDMain.HDVoipIndicatorListingWidgetBase.SetupVoiceListing
// 0x0008 (0x0008 - 0x0000)
struct HDVoipIndicatorListingWidgetBase_SetupVoiceListing final 
{
public:
	class UHDVoiceChatMsgInfo*                    InVoiceMsgInfo;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDVoipIndicatorListingWidgetBase_SetupVoiceListing) == 0x000008, "Wrong alignment on HDVoipIndicatorListingWidgetBase_SetupVoiceListing");
//(sizeof(HDVoipIndicatorListingWidgetBase_SetupVoiceListing) == 0x000008, "Wrong size on HDVoipIndicatorListingWidgetBase_SetupVoiceListing");
//(offsetof(HDVoipIndicatorListingWidgetBase_SetupVoiceListing, InVoiceMsgInfo) == 0x000000, "Member 'HDVoipIndicatorListingWidgetBase_SetupVoiceListing::InVoiceMsgInfo' has a wrong offset!");

// Function HDMain.HDVoipIndicatorWidgetBase.OnOwningPlayerStartTalking
// 0x0008 (0x0008 - 0x0000)
struct HDVoipIndicatorWidgetBase_OnOwningPlayerStartTalking final 
{
public:
	class UHDVoiceChatMsgInfo*                    LocalTalkerMsgInfo;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDVoipIndicatorWidgetBase_OnOwningPlayerStartTalking) == 0x000008, "Wrong alignment on HDVoipIndicatorWidgetBase_OnOwningPlayerStartTalking");
//(sizeof(HDVoipIndicatorWidgetBase_OnOwningPlayerStartTalking) == 0x000008, "Wrong size on HDVoipIndicatorWidgetBase_OnOwningPlayerStartTalking");
//(offsetof(HDVoipIndicatorWidgetBase_OnOwningPlayerStartTalking, LocalTalkerMsgInfo) == 0x000000, "Member 'HDVoipIndicatorWidgetBase_OnOwningPlayerStartTalking::LocalTalkerMsgInfo' has a wrong offset!");

// Function HDMain.HDVoipIndicatorWidgetBase.OnOwningPlayerStopTalking
// 0x0008 (0x0008 - 0x0000)
struct HDVoipIndicatorWidgetBase_OnOwningPlayerStopTalking final 
{
public:
	class UHDVoiceChatMsgInfo*                    LocalTalkerMsgInfo;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDVoipIndicatorWidgetBase_OnOwningPlayerStopTalking) == 0x000008, "Wrong alignment on HDVoipIndicatorWidgetBase_OnOwningPlayerStopTalking");
//(sizeof(HDVoipIndicatorWidgetBase_OnOwningPlayerStopTalking) == 0x000008, "Wrong size on HDVoipIndicatorWidgetBase_OnOwningPlayerStopTalking");
//(offsetof(HDVoipIndicatorWidgetBase_OnOwningPlayerStopTalking, LocalTalkerMsgInfo) == 0x000000, "Member 'HDVoipIndicatorWidgetBase_OnOwningPlayerStopTalking::LocalTalkerMsgInfo' has a wrong offset!");

// Function HDMain.HDVoipIndicatorWidgetBase.OnPlayerStartTalking
// 0x0008 (0x0008 - 0x0000)
struct HDVoipIndicatorWidgetBase_OnPlayerStartTalking final 
{
public:
	class UHDVoiceChatMsgInfo*                    TalkerMsgInfo;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDVoipIndicatorWidgetBase_OnPlayerStartTalking) == 0x000008, "Wrong alignment on HDVoipIndicatorWidgetBase_OnPlayerStartTalking");
//(sizeof(HDVoipIndicatorWidgetBase_OnPlayerStartTalking) == 0x000008, "Wrong size on HDVoipIndicatorWidgetBase_OnPlayerStartTalking");
//(offsetof(HDVoipIndicatorWidgetBase_OnPlayerStartTalking, TalkerMsgInfo) == 0x000000, "Member 'HDVoipIndicatorWidgetBase_OnPlayerStartTalking::TalkerMsgInfo' has a wrong offset!");

// Function HDMain.HDVoipIndicatorWidgetBase.OnPlayerStopTalking
// 0x0008 (0x0008 - 0x0000)
struct HDVoipIndicatorWidgetBase_OnPlayerStopTalking final 
{
public:
	class UHDVoiceChatMsgInfo*                    TalkerMsgInfo;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(HDVoipIndicatorWidgetBase_OnPlayerStopTalking) == 0x000008, "Wrong alignment on HDVoipIndicatorWidgetBase_OnPlayerStopTalking");
//(sizeof(HDVoipIndicatorWidgetBase_OnPlayerStopTalking) == 0x000008, "Wrong size on HDVoipIndicatorWidgetBase_OnPlayerStopTalking");
//(offsetof(HDVoipIndicatorWidgetBase_OnPlayerStopTalking, TalkerMsgInfo) == 0x000000, "Member 'HDVoipIndicatorWidgetBase_OnPlayerStopTalking::TalkerMsgInfo' has a wrong offset!");

// Function HDMain.SquadListEntry.GetParentPlatoonState
// 0x0008 (0x0008 - 0x0000)
struct SquadListEntry_GetParentPlatoonState final 
{
public:
	class AHDPlatoonState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(SquadListEntry_GetParentPlatoonState) == 0x000008, "Wrong alignment on SquadListEntry_GetParentPlatoonState");
//(sizeof(SquadListEntry_GetParentPlatoonState) == 0x000008, "Wrong size on SquadListEntry_GetParentPlatoonState");
//(offsetof(SquadListEntry_GetParentPlatoonState, ReturnValue) == 0x000000, "Member 'SquadListEntry_GetParentPlatoonState::ReturnValue' has a wrong offset!");

// Function HDMain.SquadMemberInfo.GetParentPlatoonState
// 0x0008 (0x0008 - 0x0000)
struct SquadMemberInfo_GetParentPlatoonState final 
{
public:
	class AHDPlatoonState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(SquadMemberInfo_GetParentPlatoonState) == 0x000008, "Wrong alignment on SquadMemberInfo_GetParentPlatoonState");
//(sizeof(SquadMemberInfo_GetParentPlatoonState) == 0x000008, "Wrong size on SquadMemberInfo_GetParentPlatoonState");
//(offsetof(SquadMemberInfo_GetParentPlatoonState, ReturnValue) == 0x000000, "Member 'SquadMemberInfo_GetParentPlatoonState::ReturnValue' has a wrong offset!");

// Function HDMain.SquadMemberInfo.GetParentSquadState
// 0x0008 (0x0008 - 0x0000)
struct SquadMemberInfo_GetParentSquadState final 
{
public:
	class AHDSquadState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(SquadMemberInfo_GetParentSquadState) == 0x000008, "Wrong alignment on SquadMemberInfo_GetParentSquadState");
//(sizeof(SquadMemberInfo_GetParentSquadState) == 0x000008, "Wrong size on SquadMemberInfo_GetParentSquadState");
//(offsetof(SquadMemberInfo_GetParentSquadState, ReturnValue) == 0x000000, "Member 'SquadMemberInfo_GetParentSquadState::ReturnValue' has a wrong offset!");

// Function HDMain.VictoryMenu.Init
// 0x0014 (0x0014 - 0x0000)
struct VictoryMenu_Init final 
{
public:
	struct FHDGameRoundEndEventDetails            InRoundDetails;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInWinner;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1249[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(VictoryMenu_Init) == 0x000004, "Wrong alignment on VictoryMenu_Init");
//(sizeof(VictoryMenu_Init) == 0x000014, "Wrong size on VictoryMenu_Init");
//(offsetof(VictoryMenu_Init, InRoundDetails) == 0x000000, "Member 'VictoryMenu_Init::InRoundDetails' has a wrong offset!");
//(offsetof(VictoryMenu_Init, bInWinner) == 0x000010, "Member 'VictoryMenu_Init::bInWinner' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Tinkerbox

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"
#include "DonkehFramework_classes.hpp"
#include "Tinkerbox_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class Tinkerbox.TBGameUserDeveloperSettings
// 0x0060 (0x0098 - 0x0038)
class UTBGameUserDeveloperSettings final  : public UDeveloperSettings
{
public:
	struct FSoftObjectPath                        SFXSoundMix;                                       // 0x0038(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        MusicSoundMix;                                     // 0x0050(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        VOSoundMix;                                        // 0x0068(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        VoiPSoundMix;                                      // 0x0080(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TBGameUserDeveloperSettings">();
	}
	static class UTBGameUserDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTBGameUserDeveloperSettings>();
	}
};
//(alignof(UTBGameUserDeveloperSettings) == 0x000008, "Wrong alignment on UTBGameUserDeveloperSettings");
//(sizeof(UTBGameUserDeveloperSettings) == 0x000098, "Wrong size on UTBGameUserDeveloperSettings");
//(offsetof(UTBGameUserDeveloperSettings, SFXSoundMix) == 0x000038, "Member 'UTBGameUserDeveloperSettings::SFXSoundMix' has a wrong offset!");
//(offsetof(UTBGameUserDeveloperSettings, MusicSoundMix) == 0x000050, "Member 'UTBGameUserDeveloperSettings::MusicSoundMix' has a wrong offset!");
//(offsetof(UTBGameUserDeveloperSettings, VOSoundMix) == 0x000068, "Member 'UTBGameUserDeveloperSettings::VOSoundMix' has a wrong offset!");
//(offsetof(UTBGameUserDeveloperSettings, VoiPSoundMix) == 0x000080, "Member 'UTBGameUserDeveloperSettings::VoiPSoundMix' has a wrong offset!");

// Class Tinkerbox.TBGameInstance
// 0x0050 (0x02D8 - 0x0288)
class UTBGameInstance : public UDFBaseGameInstance
{
public:
	class UDFBaseMenu*                            MainMenu;                                          // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UDFBaseMenu>                MainMenuClass;                                     // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         MenuGameMode;                                      // 0x0298(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bHidePlayerHUDInMainMenu : 1;                      // 0x02B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bUseMenuBackgroundMaps : 1;                        // 0x02B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_124C[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                MenuBackgroundMaps;                                // 0x02B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_124D[0x8];                                     // 0x02C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URCONServerSystem*                      RCONServerSystem;                                  // 0x02D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void GetGameBuildInfo();
	void GoToMainMenu();
	void HandleGoToMainMenu();
	void LoadMainMenu(bool bExclusive);
	void UnloadMainMenu();

	bool GetCurrentSessionHostAddressStr(class FString* OutHostAddrStr, bool bPreferSteamP2PAddr, bool bAppendPort) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TBGameInstance">();
	}
	static class UTBGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTBGameInstance>();
	}
};
//(alignof(UTBGameInstance) == 0x000008, "Wrong alignment on UTBGameInstance");
//(sizeof(UTBGameInstance) == 0x0002D8, "Wrong size on UTBGameInstance");
//(offsetof(UTBGameInstance, MainMenu) == 0x000288, "Member 'UTBGameInstance::MainMenu' has a wrong offset!");
//(offsetof(UTBGameInstance, MainMenuClass) == 0x000290, "Member 'UTBGameInstance::MainMenuClass' has a wrong offset!");
//(offsetof(UTBGameInstance, MenuGameMode) == 0x000298, "Member 'UTBGameInstance::MenuGameMode' has a wrong offset!");
//(offsetof(UTBGameInstance, MenuBackgroundMaps) == 0x0002B8, "Member 'UTBGameInstance::MenuBackgroundMaps' has a wrong offset!");
//(offsetof(UTBGameInstance, RCONServerSystem) == 0x0002D0, "Member 'UTBGameInstance::RCONServerSystem' has a wrong offset!");

// Class Tinkerbox.TBWorldSettings
// 0x0050 (0x0518 - 0x04C8)
class ATBWorldSettings : public ADFWorldSettings
{
public:
	struct FMinimapGenerationSettings             MinimapSettings;                                   // 0x04C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              MinimapImg;                                        // 0x04F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TBWorldSettings">();
	}
	static class ATBWorldSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATBWorldSettings>();
	}
};
//(alignof(ATBWorldSettings) == 0x000008, "Wrong alignment on ATBWorldSettings");
//(sizeof(ATBWorldSettings) == 0x000518, "Wrong size on ATBWorldSettings");
//(offsetof(ATBWorldSettings, MinimapSettings) == 0x0004C8, "Member 'ATBWorldSettings::MinimapSettings' has a wrong offset!");
//(offsetof(ATBWorldSettings, MinimapImg) == 0x0004F0, "Member 'ATBWorldSettings::MinimapImg' has a wrong offset!");

// Class Tinkerbox.TBGameUserSettings
// 0x09B0 (0x0AD0 - 0x0120)
class UTBGameUserSettings final  : public UGameUserSettings
{
public:
	uint32                                        CustomVersion;                                     // 0x0120(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSmoothFrameRate;                               // 0x0124(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_124F[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DesiredDisplayGamma;                               // 0x0128(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DesiredFOV;                                        // 0x012C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseMotionBlur;                                    // 0x0130(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1250[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DesiredMouseSensitivityX;                          // 0x0134(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DesiredMouseSensitivityY;                          // 0x0138(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInvertMousePitch;                                 // 0x013C(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseMouseSmoothing;                                // 0x013D(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DesiredSwitchFireModeOnReselect;                   // 0x013E(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          LastConfirmedSwitchFireModeOnReselect;             // 0x013F(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseHeadphoneMode;                                 // 0x0140(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowSoundInBackground;                           // 0x0141(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1251[0x2];                                     // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DesiredMasterVolumeLevel;                          // 0x0144(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastConfirmedMasterVolumeLevel;                    // 0x0148(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DesiredSFXVolumeLevel;                             // 0x014C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastConfirmedSFXVolumeLevel;                       // 0x0150(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DesiredMusicVolumeLevel;                           // 0x0154(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastConfirmedMusicVolumeLevel;                     // 0x0158(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DesiredVOVolumeLevel;                              // 0x015C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastConfirmedVOVolumeLevel;                        // 0x0160(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DesiredVoiPVolumeLevel;                            // 0x0164(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastConfirmedVoiPVolumeLevel;                      // 0x0168(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlayerIsChangingKeyBindings;                      // 0x016C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1252[0x3];                                     // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   DesiredMoveForwardKey;                             // 0x0170(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedMoveForwardKey;                       // 0x0188(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredMoveBackwardKey;                            // 0x01A0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedMoveBackwardKey;                      // 0x01B8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredMoveLeftKey;                                // 0x01D0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedMoveLeftKey;                          // 0x01E8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredMoveRightKey;                               // 0x0200(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedMoveRightKey;                         // 0x0218(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredLeanLeftKey;                                // 0x0230(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedLeanLeftKey;                          // 0x0248(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredLeanLeftToggleKey;                          // 0x0260(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedLeanLeftToggleKey;                    // 0x0278(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredLeanRightKey;                               // 0x0290(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedLeanRightKey;                         // 0x02A8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredLeanRightToggleKey;                         // 0x02C0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedLeanRightToggleKey;                   // 0x02D8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredSprintKey;                                  // 0x02F0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedSprintKey;                            // 0x0308(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredSprintToggleKey;                            // 0x0320(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedSprintToggleKey;                      // 0x0338(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredCrouchKey;                                  // 0x0350(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedCrouchKey;                            // 0x0368(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredCrouchToggleKey;                            // 0x0380(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedCrouchToggleKey;                      // 0x0398(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredProneKey;                                   // 0x03B0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedProneKey;                             // 0x03C8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredJumpVaultKey;                               // 0x03E0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedJumpVaultKey;                         // 0x03F8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredJumpKey;                                    // 0x0410(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedJumpKey;                              // 0x0428(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredVaultKey;                                   // 0x0440(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedVaultKey;                             // 0x0458(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredFireKey;                                    // 0x0470(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedFireKey;                              // 0x0488(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredSwitchFireModeKey;                          // 0x04A0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedSwitchFireModeKey;                    // 0x04B8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredReloadKey;                                  // 0x04D0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedReloadKey;                            // 0x04E8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredAimKey;                                     // 0x0500(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedAimKey;                               // 0x0518(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredAimToggleKey;                               // 0x0530(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedAimToggleKey;                         // 0x0548(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredPointAimToggleKey;                          // 0x0560(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedPointAimToggleKey;                    // 0x0578(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredCycleWeaponSightsKey;                       // 0x0590(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedCycleWeaponSightsKey;                 // 0x05A8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredNextItemKey;                                // 0x05C0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedNextItemKey;                          // 0x05D8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredPreviousItemKey;                            // 0x05F0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedPreviousItemKey;                      // 0x0608(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredItemSlot0Key;                               // 0x0620(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedItemSlot0Key;                         // 0x0638(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredItemSlot1Key;                               // 0x0650(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedItemSlot1Key;                         // 0x0668(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredItemSlot2Key;                               // 0x0680(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedItemSlot2Key;                         // 0x0698(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredItemSlot3Key;                               // 0x06B0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedItemSlot3Key;                         // 0x06C8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredItemSlot4Key;                               // 0x06E0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedItemSlot4Key;                         // 0x06F8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredItemSlot5Key;                               // 0x0710(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedItemSlot5Key;                         // 0x0728(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredItemSlot6Key;                               // 0x0740(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedItemSlot6Key;                         // 0x0758(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredItemSlot7Key;                               // 0x0770(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedItemSlot7Key;                         // 0x0788(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredItemSlot8Key;                               // 0x07A0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedItemSlot8Key;                         // 0x07B8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredItemSlot9Key;                               // 0x07D0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedItemSlot9Key;                         // 0x07E8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredPushToTalkLocalKey;                         // 0x0800(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedPushToTalkLocalKey;                   // 0x0818(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredPushToTalkSquadKey;                         // 0x0830(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedPushToTalkSquadKey;                   // 0x0848(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredPushToTalkCommandKey;                       // 0x0860(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedPushToTalkCommandKey;                 // 0x0878(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredSayAllKey;                                  // 0x0890(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedSayAllKey;                            // 0x08A8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredSayTeamKey;                                 // 0x08C0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedSayTeamKey;                           // 0x08D8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredSaySquadKey;                                // 0x08F0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedSaySquadKey;                          // 0x0908(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredUseKey;                                     // 0x0920(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedUseKey;                               // 0x0938(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredShowScoreboardKey;                          // 0x0950(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedShowScoreboardKey;                    // 0x0968(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredDeployMenuKey;                              // 0x0980(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedDeployMenuKey;                        // 0x0998(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredRadialMenuKey;                              // 0x09B0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedRadialMenuKey;                        // 0x09C8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredCameraToggleKey;                            // 0x09E0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedCameraToggleKey;                      // 0x09F8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredChatHistoryKey;                             // 0x0A10(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedChatHistoryKey;                       // 0x0A28(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredVoteYesKey;                                 // 0x0A40(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedVoteYesKey;                           // 0x0A58(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredVoteNoKey;                                  // 0x0A70(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedVoteNoKey;                            // 0x0A88(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DesiredConsoleKey;                                 // 0x0AA0(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   LastConfirmedConsoleKey;                           // 0x0AB8(0x0018)(Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void EnableHeadphoneMode(bool bEnabled);
	bool FirstRunHardwareBenchmark(int32 WorkScale, float CPUMultiplier, float GPUMultiplier);
	bool IsPlayerChangingKeyBindings();
	void SetAimDownSightsKeyBinding(const struct FInputChord& NewKey);
	void SetAimDownSightsToggleKeyBinding(const struct FInputChord& NewKey);
	void SetAllowSoundInBackground(bool bAllow);
	void SetCameraToggleKeyBinding(const struct FInputChord& NewKey);
	void SetChatHistoryKeyBinding(const struct FInputChord& NewKey);
	void SetConsoleKeyBinding(const struct FInputChord& NewKey);
	void SetCrouchKeyBinding(const struct FInputChord& NewKey);
	void SetCrouchToggleKeyBinding(const struct FInputChord& NewKey);
	void SetCycleWeaponSightsKeyBinding(const struct FInputChord& NewKey);
	void SetDeployMenuKeyBinding(const struct FInputChord& NewKey);
	void SetDialogueVolumeLevel(float DialogueVolume);
	void SetDialogueVolumeLevelNormalized(float NormDialogueVolume);
	void SetDisplayGamma(float NewGamma);
	void SetFieldOfView(float NewFOV);
	void SetFireKeyBinding(const struct FInputChord& NewKey);
	void SetInvertMousePitch(bool bInvertPitch);
	void SetJumpKeyBinding(const struct FInputChord& NewKey);
	void SetJumpVaultKeyBinding(const struct FInputChord& NewKey);
	void SetLeanLeftKeyBinding(const struct FInputChord& NewKey);
	void SetLeanLeftToggleKeyBinding(const struct FInputChord& NewKey);
	void SetLeanRightKeyBinding(const struct FInputChord& NewKey);
	void SetLeanRightToggleKeyBinding(const struct FInputChord& NewKey);
	void SetMasterVolumeLevel(float MasterVolume);
	void SetMasterVolumeLevelNormalized(float NormMasterVolume);
	void SetMotionBlurEnabled(bool bEnabled);
	void SetMouseSensitivity(float SensitivityX, float SensitivityY);
	void SetMouseSensitivityNormalized(float NormSensitivityX, float NormSensitivityY);
	void SetMoveBackwardKeyBinding(const struct FInputChord& NewKey);
	void SetMoveForwardKeyBinding(const struct FInputChord& NewKey);
	void SetMoveLeftKeyBinding(const struct FInputChord& NewKey);
	void SetMoveRightKeyBinding(const struct FInputChord& NewKey);
	void SetMusicVolumeLevel(float MusicVolume);
	void SetMusicVolumeLevelNormalized(float NormMusicVolume);
	void SetNextItemKeyBinding(const struct FInputChord& NewKey);
	void SetPlayerIsChangingKeyBindings(bool NewValue);
	void SetPointAimToggleKeyBinding(const struct FInputChord& NewKey);
	void SetPreviousItemKeyBinding(const struct FInputChord& NewKey);
	void SetProneKeyBinding(const struct FInputChord& NewKey);
	void SetPushToTalkCommandKeyBinding(const struct FInputChord& NewKey);
	void SetPushToTalkLocalKeyBinding(const struct FInputChord& NewKey);
	void SetPushToTalkSquadKeyBinding(const struct FInputChord& NewKey);
	void SetRadialMenuKeyBinding(const struct FInputChord& NewKey);
	void SetReloadKeyBinding(const struct FInputChord& NewKey);
	void SetSayAllKeyBinding(const struct FInputChord& NewKey);
	void SetSaySquadKeyBinding(const struct FInputChord& NewKey);
	void SetSayTeamKeyBinding(const struct FInputChord& NewKey);
	void SetShowScoreboardKeyBinding(const struct FInputChord& NewKey);
	void SetSmoothFrameRateEnabled(bool bEnabled);
	void SetSmoothMouseEnabled(bool bEnable);
	void SetSoundEffectsVolumeLevel(float SFXVolume);
	void SetSoundEffectsVolumeLevelNormalized(float NormSFXVolume);
	void SetSprintKeyBinding(const struct FInputChord& NewKey);
	void SetSprintToggleKeyBinding(const struct FInputChord& NewKey);
	void SetSwitchFireModeKeyBinding(const struct FInputChord& NewKey);
	void SetSwitchFireModeOnReselect(bool bEnable);
	void SetUseKeyBinding(const struct FInputChord& NewKey);
	void SetVaultKeyBinding(const struct FInputChord& NewKey);
	void SetVoiceVolumeLevel(float VoiceVolume);
	void SetVoiceVolumeLevelNormalized(float NormVoiceVolume);
	void SetVoteNoKeyBinding(const struct FInputChord& NewKey);
	void SetVoteYesKeyBinding(const struct FInputChord& NewKey);
	void SetWeaponSlot0KeyBinding(const struct FInputChord& NewKey);
	void SetWeaponSlot1KeyBinding(const struct FInputChord& NewKey);
	void SetWeaponSlot2KeyBinding(const struct FInputChord& NewKey);
	void SetWeaponSlot3KeyBinding(const struct FInputChord& NewKey);
	void SetWeaponSlot4KeyBinding(const struct FInputChord& NewKey);
	void SetWeaponSlot5KeyBinding(const struct FInputChord& NewKey);
	void SetWeaponSlot6KeyBinding(const struct FInputChord& NewKey);
	void SetWeaponSlot7KeyBinding(const struct FInputChord& NewKey);
	void SetWeaponSlot8KeyBinding(const struct FInputChord& NewKey);
	void SetWeaponSlot9KeyBinding(const struct FInputChord& NewKey);

	struct FKey GetAimDownSightsKeyBinding() const;
	struct FKey GetAimDownSightsToggleKeyBinding() const;
	struct FKey GetCameraToggleKeyBinding() const;
	struct FKey GetChatHistoryKeyBinding() const;
	struct FKey GetConsoleKeyBinding() const;
	struct FKey GetCrouchKeyBinding() const;
	struct FKey GetCrouchToggleKeyBinding() const;
	struct FKey GetCycleWeaponSightsKeyBinding() const;
	struct FKey GetDeployMenuKeyBinding() const;
	float GetDialogueVolumeLevel() const;
	float GetDialogueVolumeLevelNormalized() const;
	float GetDisplayGamma() const;
	float GetFieldOfView() const;
	struct FKey GetFireKeyBinding() const;
	float GetFrameRateLimitCurrent() const;
	bool GetInvertMousePitch() const;
	struct FKey GetJumpKeyBinding() const;
	struct FKey GetJumpVaultKeyBinding() const;
	float GetLastConfirmedMasterVolumeLevel() const;
	float GetLastConfirmedMasterVolumeLevelNormalized() const;
	struct FKey GetLeanLeftKeyBinding() const;
	struct FKey GetLeanLeftToggleKeyBinding() const;
	struct FKey GetLeanRightKeyBinding() const;
	struct FKey GetLeanRightKeyToggleBinding() const;
	class APlayerController* GetLocalPlayerControllerBP() const;
	float GetMasterVolumeLevel() const;
	float GetMasterVolumeLevelNormalized() const;
	float GetMouseSensitivityX() const;
	float GetMouseSensitivityXNormalized() const;
	float GetMouseSensitivityY() const;
	float GetMouseSensitivityYNormalized() const;
	struct FKey GetMoveBackwardKeyBinding() const;
	struct FKey GetMoveForwardKeyBinding() const;
	struct FKey GetMoveLeftKeyBinding() const;
	struct FKey GetMoveRightKeyBinding() const;
	float GetMusicVolumeLevel() const;
	float GetMusicVolumeLevelNormalized() const;
	struct FKey GetNextItemKeyBinding() const;
	struct FKey GetPointAimToggleKeyBinding() const;
	struct FKey GetPreviousItemKeyBinding() const;
	struct FKey GetProneKeyBinding() const;
	struct FKey GetPushToTalkCommandKeyBinding() const;
	struct FKey GetPushToTalkLocalKeyBinding() const;
	struct FKey GetPushToTalkSquadKeyBinding() const;
	struct FKey GetRadialMenuKeyBinding() const;
	struct FKey GetReloadKeyBinding() const;
	struct FKey GetSayAllKeyBinding() const;
	struct FKey GetSaySquadKeyBinding() const;
	struct FKey GetSayTeamKeyBinding() const;
	struct FKey GetShowScoreboardKeyBinding() const;
	float GetSoundEffectsVolumeLevel() const;
	float GetSoundEffectsVolumeLevelNormalized() const;
	struct FKey GetSprintKeyBinding() const;
	struct FKey GetSprintToggleKeyBinding() const;
	struct FKey GetSwitchFireModeKeyBinding() const;
	bool GetSwitchFireModeOnReselect(bool bLastConfirmed) const;
	struct FKey GetUseKeyBinding() const;
	struct FKey GetVaultKeyBinding() const;
	float GetVoiceVolumeLevel() const;
	float GetVoiceVolumeLevelNormalized() const;
	struct FKey GetVoteNoKeyBinding() const;
	struct FKey GetVoteYesKeyBinding() const;
	struct FKey GetWeaponSlot0KeyBinding() const;
	struct FKey GetWeaponSlot1KeyBinding() const;
	struct FKey GetWeaponSlot2KeyBinding() const;
	struct FKey GetWeaponSlot3KeyBinding() const;
	struct FKey GetWeaponSlot4KeyBinding() const;
	struct FKey GetWeaponSlot5KeyBinding() const;
	struct FKey GetWeaponSlot6KeyBinding() const;
	struct FKey GetWeaponSlot7KeyBinding() const;
	struct FKey GetWeaponSlot8KeyBinding() const;
	struct FKey GetWeaponSlot9KeyBinding() const;
	bool IsAllowSoundInBackgroundDirty() const;
	bool IsAnyInputKeyBindingDirty() const;
	bool IsAudioQualityDirty() const;
	bool IsDialogueVolumeLevelDirty() const;
	bool IsDisplayGammaDirty() const;
	bool IsFieldOfViewDirty() const;
	bool IsFrameRateLimitDirty() const;
	bool IsHeadphoneModeDirty() const;
	bool IsHeadphoneModeEnabled() const;
	bool IsInvertMouseDirty() const;
	bool IsMasterVolumeLevelDirty() const;
	bool IsMotionBlurDirty() const;
	bool IsMotionBlurEnabled() const;
	bool IsMouseSensitivityDirty() const;
	bool IsMusicVolumeLevelDirty() const;
	bool IsSmoothFrameRateDirty() const;
	bool IsSmoothFrameRateEnabled() const;
	bool IsSmoothMouseDirty() const;
	bool IsSmoothMouseEnabled() const;
	bool IsSoundEffectsVolumeLevelDirty() const;
	bool IsSoundInBackgroundAllowed() const;
	bool IsSwitchFireModeOnReselectDirty() const;
	bool IsVoiceVolumeLevelDirty() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TBGameUserSettings">();
	}
	static class UTBGameUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTBGameUserSettings>();
	}
};
//(alignof(UTBGameUserSettings) == 0x000008, "Wrong alignment on UTBGameUserSettings");
//(sizeof(UTBGameUserSettings) == 0x000AD0, "Wrong size on UTBGameUserSettings");
//(offsetof(UTBGameUserSettings, CustomVersion) == 0x000120, "Member 'UTBGameUserSettings::CustomVersion' has a wrong offset!");
//(offsetof(UTBGameUserSettings, bUseSmoothFrameRate) == 0x000124, "Member 'UTBGameUserSettings::bUseSmoothFrameRate' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredDisplayGamma) == 0x000128, "Member 'UTBGameUserSettings::DesiredDisplayGamma' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredFOV) == 0x00012C, "Member 'UTBGameUserSettings::DesiredFOV' has a wrong offset!");
//(offsetof(UTBGameUserSettings, bUseMotionBlur) == 0x000130, "Member 'UTBGameUserSettings::bUseMotionBlur' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredMouseSensitivityX) == 0x000134, "Member 'UTBGameUserSettings::DesiredMouseSensitivityX' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredMouseSensitivityY) == 0x000138, "Member 'UTBGameUserSettings::DesiredMouseSensitivityY' has a wrong offset!");
//(offsetof(UTBGameUserSettings, bInvertMousePitch) == 0x00013C, "Member 'UTBGameUserSettings::bInvertMousePitch' has a wrong offset!");
//(offsetof(UTBGameUserSettings, bUseMouseSmoothing) == 0x00013D, "Member 'UTBGameUserSettings::bUseMouseSmoothing' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredSwitchFireModeOnReselect) == 0x00013E, "Member 'UTBGameUserSettings::DesiredSwitchFireModeOnReselect' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedSwitchFireModeOnReselect) == 0x00013F, "Member 'UTBGameUserSettings::LastConfirmedSwitchFireModeOnReselect' has a wrong offset!");
//(offsetof(UTBGameUserSettings, bUseHeadphoneMode) == 0x000140, "Member 'UTBGameUserSettings::bUseHeadphoneMode' has a wrong offset!");
//(offsetof(UTBGameUserSettings, bAllowSoundInBackground) == 0x000141, "Member 'UTBGameUserSettings::bAllowSoundInBackground' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredMasterVolumeLevel) == 0x000144, "Member 'UTBGameUserSettings::DesiredMasterVolumeLevel' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedMasterVolumeLevel) == 0x000148, "Member 'UTBGameUserSettings::LastConfirmedMasterVolumeLevel' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredSFXVolumeLevel) == 0x00014C, "Member 'UTBGameUserSettings::DesiredSFXVolumeLevel' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedSFXVolumeLevel) == 0x000150, "Member 'UTBGameUserSettings::LastConfirmedSFXVolumeLevel' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredMusicVolumeLevel) == 0x000154, "Member 'UTBGameUserSettings::DesiredMusicVolumeLevel' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedMusicVolumeLevel) == 0x000158, "Member 'UTBGameUserSettings::LastConfirmedMusicVolumeLevel' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredVOVolumeLevel) == 0x00015C, "Member 'UTBGameUserSettings::DesiredVOVolumeLevel' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedVOVolumeLevel) == 0x000160, "Member 'UTBGameUserSettings::LastConfirmedVOVolumeLevel' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredVoiPVolumeLevel) == 0x000164, "Member 'UTBGameUserSettings::DesiredVoiPVolumeLevel' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedVoiPVolumeLevel) == 0x000168, "Member 'UTBGameUserSettings::LastConfirmedVoiPVolumeLevel' has a wrong offset!");
//(offsetof(UTBGameUserSettings, bPlayerIsChangingKeyBindings) == 0x00016C, "Member 'UTBGameUserSettings::bPlayerIsChangingKeyBindings' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredMoveForwardKey) == 0x000170, "Member 'UTBGameUserSettings::DesiredMoveForwardKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedMoveForwardKey) == 0x000188, "Member 'UTBGameUserSettings::LastConfirmedMoveForwardKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredMoveBackwardKey) == 0x0001A0, "Member 'UTBGameUserSettings::DesiredMoveBackwardKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedMoveBackwardKey) == 0x0001B8, "Member 'UTBGameUserSettings::LastConfirmedMoveBackwardKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredMoveLeftKey) == 0x0001D0, "Member 'UTBGameUserSettings::DesiredMoveLeftKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedMoveLeftKey) == 0x0001E8, "Member 'UTBGameUserSettings::LastConfirmedMoveLeftKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredMoveRightKey) == 0x000200, "Member 'UTBGameUserSettings::DesiredMoveRightKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedMoveRightKey) == 0x000218, "Member 'UTBGameUserSettings::LastConfirmedMoveRightKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredLeanLeftKey) == 0x000230, "Member 'UTBGameUserSettings::DesiredLeanLeftKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedLeanLeftKey) == 0x000248, "Member 'UTBGameUserSettings::LastConfirmedLeanLeftKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredLeanLeftToggleKey) == 0x000260, "Member 'UTBGameUserSettings::DesiredLeanLeftToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedLeanLeftToggleKey) == 0x000278, "Member 'UTBGameUserSettings::LastConfirmedLeanLeftToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredLeanRightKey) == 0x000290, "Member 'UTBGameUserSettings::DesiredLeanRightKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedLeanRightKey) == 0x0002A8, "Member 'UTBGameUserSettings::LastConfirmedLeanRightKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredLeanRightToggleKey) == 0x0002C0, "Member 'UTBGameUserSettings::DesiredLeanRightToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedLeanRightToggleKey) == 0x0002D8, "Member 'UTBGameUserSettings::LastConfirmedLeanRightToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredSprintKey) == 0x0002F0, "Member 'UTBGameUserSettings::DesiredSprintKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedSprintKey) == 0x000308, "Member 'UTBGameUserSettings::LastConfirmedSprintKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredSprintToggleKey) == 0x000320, "Member 'UTBGameUserSettings::DesiredSprintToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedSprintToggleKey) == 0x000338, "Member 'UTBGameUserSettings::LastConfirmedSprintToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredCrouchKey) == 0x000350, "Member 'UTBGameUserSettings::DesiredCrouchKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedCrouchKey) == 0x000368, "Member 'UTBGameUserSettings::LastConfirmedCrouchKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredCrouchToggleKey) == 0x000380, "Member 'UTBGameUserSettings::DesiredCrouchToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedCrouchToggleKey) == 0x000398, "Member 'UTBGameUserSettings::LastConfirmedCrouchToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredProneKey) == 0x0003B0, "Member 'UTBGameUserSettings::DesiredProneKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedProneKey) == 0x0003C8, "Member 'UTBGameUserSettings::LastConfirmedProneKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredJumpVaultKey) == 0x0003E0, "Member 'UTBGameUserSettings::DesiredJumpVaultKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedJumpVaultKey) == 0x0003F8, "Member 'UTBGameUserSettings::LastConfirmedJumpVaultKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredJumpKey) == 0x000410, "Member 'UTBGameUserSettings::DesiredJumpKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedJumpKey) == 0x000428, "Member 'UTBGameUserSettings::LastConfirmedJumpKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredVaultKey) == 0x000440, "Member 'UTBGameUserSettings::DesiredVaultKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedVaultKey) == 0x000458, "Member 'UTBGameUserSettings::LastConfirmedVaultKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredFireKey) == 0x000470, "Member 'UTBGameUserSettings::DesiredFireKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedFireKey) == 0x000488, "Member 'UTBGameUserSettings::LastConfirmedFireKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredSwitchFireModeKey) == 0x0004A0, "Member 'UTBGameUserSettings::DesiredSwitchFireModeKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedSwitchFireModeKey) == 0x0004B8, "Member 'UTBGameUserSettings::LastConfirmedSwitchFireModeKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredReloadKey) == 0x0004D0, "Member 'UTBGameUserSettings::DesiredReloadKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedReloadKey) == 0x0004E8, "Member 'UTBGameUserSettings::LastConfirmedReloadKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredAimKey) == 0x000500, "Member 'UTBGameUserSettings::DesiredAimKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedAimKey) == 0x000518, "Member 'UTBGameUserSettings::LastConfirmedAimKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredAimToggleKey) == 0x000530, "Member 'UTBGameUserSettings::DesiredAimToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedAimToggleKey) == 0x000548, "Member 'UTBGameUserSettings::LastConfirmedAimToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredPointAimToggleKey) == 0x000560, "Member 'UTBGameUserSettings::DesiredPointAimToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedPointAimToggleKey) == 0x000578, "Member 'UTBGameUserSettings::LastConfirmedPointAimToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredCycleWeaponSightsKey) == 0x000590, "Member 'UTBGameUserSettings::DesiredCycleWeaponSightsKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedCycleWeaponSightsKey) == 0x0005A8, "Member 'UTBGameUserSettings::LastConfirmedCycleWeaponSightsKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredNextItemKey) == 0x0005C0, "Member 'UTBGameUserSettings::DesiredNextItemKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedNextItemKey) == 0x0005D8, "Member 'UTBGameUserSettings::LastConfirmedNextItemKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredPreviousItemKey) == 0x0005F0, "Member 'UTBGameUserSettings::DesiredPreviousItemKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedPreviousItemKey) == 0x000608, "Member 'UTBGameUserSettings::LastConfirmedPreviousItemKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredItemSlot0Key) == 0x000620, "Member 'UTBGameUserSettings::DesiredItemSlot0Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedItemSlot0Key) == 0x000638, "Member 'UTBGameUserSettings::LastConfirmedItemSlot0Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredItemSlot1Key) == 0x000650, "Member 'UTBGameUserSettings::DesiredItemSlot1Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedItemSlot1Key) == 0x000668, "Member 'UTBGameUserSettings::LastConfirmedItemSlot1Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredItemSlot2Key) == 0x000680, "Member 'UTBGameUserSettings::DesiredItemSlot2Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedItemSlot2Key) == 0x000698, "Member 'UTBGameUserSettings::LastConfirmedItemSlot2Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredItemSlot3Key) == 0x0006B0, "Member 'UTBGameUserSettings::DesiredItemSlot3Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedItemSlot3Key) == 0x0006C8, "Member 'UTBGameUserSettings::LastConfirmedItemSlot3Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredItemSlot4Key) == 0x0006E0, "Member 'UTBGameUserSettings::DesiredItemSlot4Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedItemSlot4Key) == 0x0006F8, "Member 'UTBGameUserSettings::LastConfirmedItemSlot4Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredItemSlot5Key) == 0x000710, "Member 'UTBGameUserSettings::DesiredItemSlot5Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedItemSlot5Key) == 0x000728, "Member 'UTBGameUserSettings::LastConfirmedItemSlot5Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredItemSlot6Key) == 0x000740, "Member 'UTBGameUserSettings::DesiredItemSlot6Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedItemSlot6Key) == 0x000758, "Member 'UTBGameUserSettings::LastConfirmedItemSlot6Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredItemSlot7Key) == 0x000770, "Member 'UTBGameUserSettings::DesiredItemSlot7Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedItemSlot7Key) == 0x000788, "Member 'UTBGameUserSettings::LastConfirmedItemSlot7Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredItemSlot8Key) == 0x0007A0, "Member 'UTBGameUserSettings::DesiredItemSlot8Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedItemSlot8Key) == 0x0007B8, "Member 'UTBGameUserSettings::LastConfirmedItemSlot8Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredItemSlot9Key) == 0x0007D0, "Member 'UTBGameUserSettings::DesiredItemSlot9Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedItemSlot9Key) == 0x0007E8, "Member 'UTBGameUserSettings::LastConfirmedItemSlot9Key' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredPushToTalkLocalKey) == 0x000800, "Member 'UTBGameUserSettings::DesiredPushToTalkLocalKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedPushToTalkLocalKey) == 0x000818, "Member 'UTBGameUserSettings::LastConfirmedPushToTalkLocalKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredPushToTalkSquadKey) == 0x000830, "Member 'UTBGameUserSettings::DesiredPushToTalkSquadKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedPushToTalkSquadKey) == 0x000848, "Member 'UTBGameUserSettings::LastConfirmedPushToTalkSquadKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredPushToTalkCommandKey) == 0x000860, "Member 'UTBGameUserSettings::DesiredPushToTalkCommandKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedPushToTalkCommandKey) == 0x000878, "Member 'UTBGameUserSettings::LastConfirmedPushToTalkCommandKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredSayAllKey) == 0x000890, "Member 'UTBGameUserSettings::DesiredSayAllKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedSayAllKey) == 0x0008A8, "Member 'UTBGameUserSettings::LastConfirmedSayAllKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredSayTeamKey) == 0x0008C0, "Member 'UTBGameUserSettings::DesiredSayTeamKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedSayTeamKey) == 0x0008D8, "Member 'UTBGameUserSettings::LastConfirmedSayTeamKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredSaySquadKey) == 0x0008F0, "Member 'UTBGameUserSettings::DesiredSaySquadKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedSaySquadKey) == 0x000908, "Member 'UTBGameUserSettings::LastConfirmedSaySquadKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredUseKey) == 0x000920, "Member 'UTBGameUserSettings::DesiredUseKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedUseKey) == 0x000938, "Member 'UTBGameUserSettings::LastConfirmedUseKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredShowScoreboardKey) == 0x000950, "Member 'UTBGameUserSettings::DesiredShowScoreboardKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedShowScoreboardKey) == 0x000968, "Member 'UTBGameUserSettings::LastConfirmedShowScoreboardKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredDeployMenuKey) == 0x000980, "Member 'UTBGameUserSettings::DesiredDeployMenuKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedDeployMenuKey) == 0x000998, "Member 'UTBGameUserSettings::LastConfirmedDeployMenuKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredRadialMenuKey) == 0x0009B0, "Member 'UTBGameUserSettings::DesiredRadialMenuKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedRadialMenuKey) == 0x0009C8, "Member 'UTBGameUserSettings::LastConfirmedRadialMenuKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredCameraToggleKey) == 0x0009E0, "Member 'UTBGameUserSettings::DesiredCameraToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedCameraToggleKey) == 0x0009F8, "Member 'UTBGameUserSettings::LastConfirmedCameraToggleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredChatHistoryKey) == 0x000A10, "Member 'UTBGameUserSettings::DesiredChatHistoryKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedChatHistoryKey) == 0x000A28, "Member 'UTBGameUserSettings::LastConfirmedChatHistoryKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredVoteYesKey) == 0x000A40, "Member 'UTBGameUserSettings::DesiredVoteYesKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedVoteYesKey) == 0x000A58, "Member 'UTBGameUserSettings::LastConfirmedVoteYesKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredVoteNoKey) == 0x000A70, "Member 'UTBGameUserSettings::DesiredVoteNoKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedVoteNoKey) == 0x000A88, "Member 'UTBGameUserSettings::LastConfirmedVoteNoKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, DesiredConsoleKey) == 0x000AA0, "Member 'UTBGameUserSettings::DesiredConsoleKey' has a wrong offset!");
//(offsetof(UTBGameUserSettings, LastConfirmedConsoleKey) == 0x000AB8, "Member 'UTBGameUserSettings::LastConfirmedConsoleKey' has a wrong offset!");

// Class Tinkerbox.TBLevelScriptActor
// 0x0000 (0x0228 - 0x0228)
class ATBLevelScriptActor final  : public ADFLevelScriptActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TBLevelScriptActor">();
	}
	static class ATBLevelScriptActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATBLevelScriptActor>();
	}
};
//(alignof(ATBLevelScriptActor) == 0x000008, "Wrong alignment on ATBLevelScriptActor");
//(sizeof(ATBLevelScriptActor) == 0x000228, "Wrong size on ATBLevelScriptActor");

// Class Tinkerbox.TBVoiceIndicator
// 0x0018 (0x0248 - 0x0230)
class UTBVoiceIndicator final  : public UUserWidget
{
public:
	TSubclassOf<class UTBVoiceIndicatorListing>   VoiceListingClass;                                 // 0x0230(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           ActiveVoiceList;                                   // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxActiveVoices;                                   // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ActiveVoices;                                      // 0x0244(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ActiveVoiceAdded(class APlayerState* PlayerState, class UPanelSlot* NewVoiceWidget);
	void ActiveVoiceRemoved(class APlayerState* PlayerState, class UPanelSlot* NewVoiceWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TBVoiceIndicator">();
	}
	static class UTBVoiceIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTBVoiceIndicator>();
	}
};
//(alignof(UTBVoiceIndicator) == 0x000008, "Wrong alignment on UTBVoiceIndicator");
//(sizeof(UTBVoiceIndicator) == 0x000248, "Wrong size on UTBVoiceIndicator");
//(offsetof(UTBVoiceIndicator, VoiceListingClass) == 0x000230, "Member 'UTBVoiceIndicator::VoiceListingClass' has a wrong offset!");
//(offsetof(UTBVoiceIndicator, ActiveVoiceList) == 0x000238, "Member 'UTBVoiceIndicator::ActiveVoiceList' has a wrong offset!");
//(offsetof(UTBVoiceIndicator, MaxActiveVoices) == 0x000240, "Member 'UTBVoiceIndicator::MaxActiveVoices' has a wrong offset!");
//(offsetof(UTBVoiceIndicator, ActiveVoices) == 0x000244, "Member 'UTBVoiceIndicator::ActiveVoices' has a wrong offset!");

// Class Tinkerbox.TBVoiceIndicatorListing
// 0x0028 (0x0258 - 0x0230)
class UTBVoiceIndicatorListing final  : public UUserWidget
{
public:
	class UTextBlock*                             PlayerName;                                        // 0x0230(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTBVoiceIndicator*                      ParentMenu;                                        // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1254[0x18];                                    // 0x0240(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Init(class UTBVoiceIndicator* InParentMenu, struct FUniqueNetIdRepl& InUniqueNetId, class FString* InPlayerName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TBVoiceIndicatorListing">();
	}
	static class UTBVoiceIndicatorListing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTBVoiceIndicatorListing>();
	}
};
//(alignof(UTBVoiceIndicatorListing) == 0x000008, "Wrong alignment on UTBVoiceIndicatorListing");
//(sizeof(UTBVoiceIndicatorListing) == 0x000258, "Wrong size on UTBVoiceIndicatorListing");
//(offsetof(UTBVoiceIndicatorListing, PlayerName) == 0x000230, "Member 'UTBVoiceIndicatorListing::PlayerName' has a wrong offset!");
//(offsetof(UTBVoiceIndicatorListing, ParentMenu) == 0x000238, "Member 'UTBVoiceIndicatorListing::ParentMenu' has a wrong offset!");

}


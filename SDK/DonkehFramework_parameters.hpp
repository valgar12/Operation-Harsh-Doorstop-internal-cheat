#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DonkehFramework

#include "Basic.hpp"

#include "DonkehFramework_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AssetRegistry_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function DonkehFramework.DFGunRecoilHandler.GetConeOfFireOffset
// 0x000C (0x000C - 0x0000)
struct DFGunRecoilHandler_GetConeOfFireOffset final 
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGunRecoilHandler_GetConeOfFireOffset) == 0x000004, "Wrong alignment on DFGunRecoilHandler_GetConeOfFireOffset");
//(sizeof(DFGunRecoilHandler_GetConeOfFireOffset) == 0x00000C, "Wrong size on DFGunRecoilHandler_GetConeOfFireOffset");
//(offsetof(DFGunRecoilHandler_GetConeOfFireOffset, ReturnValue) == 0x000000, "Member 'DFGunRecoilHandler_GetConeOfFireOffset::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFGunRecoilHandler.OnTick
// 0x0004 (0x0004 - 0x0000)
struct DFGunRecoilHandler_OnTick final 
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGunRecoilHandler_OnTick) == 0x000004, "Wrong alignment on DFGunRecoilHandler_OnTick");
//(sizeof(DFGunRecoilHandler_OnTick) == 0x000004, "Wrong size on DFGunRecoilHandler_OnTick");
//(offsetof(DFGunRecoilHandler_OnTick, DeltaTime) == 0x000000, "Member 'DFGunRecoilHandler_OnTick::DeltaTime' has a wrong offset!");

// Function DonkehFramework.DFGunRecoilHandler.GetOwningGun
// 0x0008 (0x0008 - 0x0000)
struct DFGunRecoilHandler_GetOwningGun final 
{
public:
	class ADFBaseGun*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGunRecoilHandler_GetOwningGun) == 0x000008, "Wrong alignment on DFGunRecoilHandler_GetOwningGun");
//(sizeof(DFGunRecoilHandler_GetOwningGun) == 0x000008, "Wrong size on DFGunRecoilHandler_GetOwningGun");
//(offsetof(DFGunRecoilHandler_GetOwningGun, ReturnValue) == 0x000000, "Member 'DFGunRecoilHandler_GetOwningGun::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFGunRecoilHandler.GetOwningPawn
// 0x0008 (0x0008 - 0x0000)
struct DFGunRecoilHandler_GetOwningPawn final 
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGunRecoilHandler_GetOwningPawn) == 0x000008, "Wrong alignment on DFGunRecoilHandler_GetOwningPawn");
//(sizeof(DFGunRecoilHandler_GetOwningPawn) == 0x000008, "Wrong size on DFGunRecoilHandler_GetOwningPawn");
//(offsetof(DFGunRecoilHandler_GetOwningPawn, ReturnValue) == 0x000000, "Member 'DFGunRecoilHandler_GetOwningPawn::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFGunRecoilHandler.IsFiring
// 0x0001 (0x0001 - 0x0000)
struct DFGunRecoilHandler_IsFiring final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGunRecoilHandler_IsFiring) == 0x000001, "Wrong alignment on DFGunRecoilHandler_IsFiring");
//(sizeof(DFGunRecoilHandler_IsFiring) == 0x000001, "Wrong size on DFGunRecoilHandler_IsFiring");
//(offsetof(DFGunRecoilHandler_IsFiring, ReturnValue) == 0x000000, "Member 'DFGunRecoilHandler_IsFiring::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFHandlerInterface.EventOnNewPawn
// 0x0010 (0x0010 - 0x0000)
struct DFHandlerInterface_EventOnNewPawn final 
{
public:
	class APawn*                                  NewPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  PreviousPawn;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFHandlerInterface_EventOnNewPawn) == 0x000008, "Wrong alignment on DFHandlerInterface_EventOnNewPawn");
//(sizeof(DFHandlerInterface_EventOnNewPawn) == 0x000010, "Wrong size on DFHandlerInterface_EventOnNewPawn");
//(offsetof(DFHandlerInterface_EventOnNewPawn, NewPawn) == 0x000000, "Member 'DFHandlerInterface_EventOnNewPawn::NewPawn' has a wrong offset!");
//(offsetof(DFHandlerInterface_EventOnNewPawn, PreviousPawn) == 0x000008, "Member 'DFHandlerInterface_EventOnNewPawn::PreviousPawn' has a wrong offset!");

// Function DonkehFramework.DFHandlerInterface.EventShouldUpdateThisFrame
// 0x0008 (0x0008 - 0x0000)
struct DFHandlerInterface_EventShouldUpdateThisFrame final 
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveAndSpawnedInWorld;                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE9[0x2];                                      // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFHandlerInterface_EventShouldUpdateThisFrame) == 0x000004, "Wrong alignment on DFHandlerInterface_EventShouldUpdateThisFrame");
//(sizeof(DFHandlerInterface_EventShouldUpdateThisFrame) == 0x000008, "Wrong size on DFHandlerInterface_EventShouldUpdateThisFrame");
//(offsetof(DFHandlerInterface_EventShouldUpdateThisFrame, DeltaTime) == 0x000000, "Member 'DFHandlerInterface_EventShouldUpdateThisFrame::DeltaTime' has a wrong offset!");
//(offsetof(DFHandlerInterface_EventShouldUpdateThisFrame, bActiveAndSpawnedInWorld) == 0x000004, "Member 'DFHandlerInterface_EventShouldUpdateThisFrame::bActiveAndSpawnedInWorld' has a wrong offset!");
//(offsetof(DFHandlerInterface_EventShouldUpdateThisFrame, ReturnValue) == 0x000005, "Member 'DFHandlerInterface_EventShouldUpdateThisFrame::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFHandlerInterface.EventUpdate
// 0x0008 (0x0008 - 0x0000)
struct DFHandlerInterface_EventUpdate final 
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMakeDecision;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CEA[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFHandlerInterface_EventUpdate) == 0x000004, "Wrong alignment on DFHandlerInterface_EventUpdate");
//(sizeof(DFHandlerInterface_EventUpdate) == 0x000008, "Wrong size on DFHandlerInterface_EventUpdate");
//(offsetof(DFHandlerInterface_EventUpdate, DeltaTime) == 0x000000, "Member 'DFHandlerInterface_EventUpdate::DeltaTime' has a wrong offset!");
//(offsetof(DFHandlerInterface_EventUpdate, bMakeDecision) == 0x000004, "Member 'DFHandlerInterface_EventUpdate::bMakeDecision' has a wrong offset!");

// Function DonkehFramework.DFBaseAIController.CanRestartPlayer
// 0x0001 (0x0001 - 0x0000)
struct DFBaseAIController_CanRestartPlayer final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseAIController_CanRestartPlayer) == 0x000001, "Wrong alignment on DFBaseAIController_CanRestartPlayer");
//(sizeof(DFBaseAIController_CanRestartPlayer) == 0x000001, "Wrong size on DFBaseAIController_CanRestartPlayer");
//(offsetof(DFBaseAIController_CanRestartPlayer, ReturnValue) == 0x000000, "Member 'DFBaseAIController_CanRestartPlayer::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.OnEnterInventory
// 0x0010 (0x0010 - 0x0000)
struct DFBaseItem_OnEnterInventory final 
{
public:
	class ADFBaseCharacter*                       NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBaseCharacter*                       LastOwner;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_OnEnterInventory) == 0x000008, "Wrong alignment on DFBaseItem_OnEnterInventory");
//(sizeof(DFBaseItem_OnEnterInventory) == 0x000010, "Wrong size on DFBaseItem_OnEnterInventory");
//(offsetof(DFBaseItem_OnEnterInventory, NewOwner) == 0x000000, "Member 'DFBaseItem_OnEnterInventory::NewOwner' has a wrong offset!");
//(offsetof(DFBaseItem_OnEnterInventory, LastOwner) == 0x000008, "Member 'DFBaseItem_OnEnterInventory::LastOwner' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.OnEquip
// 0x0008 (0x0008 - 0x0000)
struct DFBaseItem_OnEquip final 
{
public:
	class ADFBaseItem*                            LastItem;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_OnEquip) == 0x000008, "Wrong alignment on DFBaseItem_OnEquip");
//(sizeof(DFBaseItem_OnEquip) == 0x000008, "Wrong size on DFBaseItem_OnEquip");
//(offsetof(DFBaseItem_OnEquip, LastItem) == 0x000000, "Member 'DFBaseItem_OnEquip::LastItem' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.OnLeaveInventory
// 0x0008 (0x0008 - 0x0000)
struct DFBaseItem_OnLeaveInventory final 
{
public:
	class ADFBaseCharacter*                       LastOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_OnLeaveInventory) == 0x000008, "Wrong alignment on DFBaseItem_OnLeaveInventory");
//(sizeof(DFBaseItem_OnLeaveInventory) == 0x000008, "Wrong size on DFBaseItem_OnLeaveInventory");
//(offsetof(DFBaseItem_OnLeaveInventory, LastOwner) == 0x000000, "Member 'DFBaseItem_OnLeaveInventory::LastOwner' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.OnRep_PawnOwner
// 0x0008 (0x0008 - 0x0000)
struct DFBaseItem_OnRep_PawnOwner final 
{
public:
	class ADFBaseCharacter*                       LastOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_OnRep_PawnOwner) == 0x000008, "Wrong alignment on DFBaseItem_OnRep_PawnOwner");
//(sizeof(DFBaseItem_OnRep_PawnOwner) == 0x000008, "Wrong size on DFBaseItem_OnRep_PawnOwner");
//(offsetof(DFBaseItem_OnRep_PawnOwner, LastOwner) == 0x000000, "Member 'DFBaseItem_OnRep_PawnOwner::LastOwner' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.OnUnEquip
// 0x0002 (0x0002 - 0x0000)
struct DFBaseItem_OnUnEquip final 
{
public:
	bool                                          bPlayAnimAndWait;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeavingPawnInventory;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_OnUnEquip) == 0x000001, "Wrong alignment on DFBaseItem_OnUnEquip");
//(sizeof(DFBaseItem_OnUnEquip) == 0x000002, "Wrong size on DFBaseItem_OnUnEquip");
//(offsetof(DFBaseItem_OnUnEquip, bPlayAnimAndWait) == 0x000000, "Member 'DFBaseItem_OnUnEquip::bPlayAnimAndWait' has a wrong offset!");
//(offsetof(DFBaseItem_OnUnEquip, bLeavingPawnInventory) == 0x000001, "Member 'DFBaseItem_OnUnEquip::bLeavingPawnInventory' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.ReceiveOnEnterInventory
// 0x0010 (0x0010 - 0x0000)
struct DFBaseItem_ReceiveOnEnterInventory final 
{
public:
	class ADFBaseCharacter*                       NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBaseCharacter*                       LastOwner;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_ReceiveOnEnterInventory) == 0x000008, "Wrong alignment on DFBaseItem_ReceiveOnEnterInventory");
//(sizeof(DFBaseItem_ReceiveOnEnterInventory) == 0x000010, "Wrong size on DFBaseItem_ReceiveOnEnterInventory");
//(offsetof(DFBaseItem_ReceiveOnEnterInventory, NewOwner) == 0x000000, "Member 'DFBaseItem_ReceiveOnEnterInventory::NewOwner' has a wrong offset!");
//(offsetof(DFBaseItem_ReceiveOnEnterInventory, LastOwner) == 0x000008, "Member 'DFBaseItem_ReceiveOnEnterInventory::LastOwner' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.ReceiveOnEquip
// 0x0008 (0x0008 - 0x0000)
struct DFBaseItem_ReceiveOnEquip final 
{
public:
	class ADFBaseItem*                            LastItem;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_ReceiveOnEquip) == 0x000008, "Wrong alignment on DFBaseItem_ReceiveOnEquip");
//(sizeof(DFBaseItem_ReceiveOnEquip) == 0x000008, "Wrong size on DFBaseItem_ReceiveOnEquip");
//(offsetof(DFBaseItem_ReceiveOnEquip, LastItem) == 0x000000, "Member 'DFBaseItem_ReceiveOnEquip::LastItem' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.ReceiveOnLeaveInventory
// 0x0008 (0x0008 - 0x0000)
struct DFBaseItem_ReceiveOnLeaveInventory final 
{
public:
	class ADFBaseCharacter*                       LastOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_ReceiveOnLeaveInventory) == 0x000008, "Wrong alignment on DFBaseItem_ReceiveOnLeaveInventory");
//(sizeof(DFBaseItem_ReceiveOnLeaveInventory) == 0x000008, "Wrong size on DFBaseItem_ReceiveOnLeaveInventory");
//(offsetof(DFBaseItem_ReceiveOnLeaveInventory, LastOwner) == 0x000000, "Member 'DFBaseItem_ReceiveOnLeaveInventory::LastOwner' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.ReceiveOnUnEquip
// 0x0002 (0x0002 - 0x0000)
struct DFBaseItem_ReceiveOnUnEquip final 
{
public:
	bool                                          bPlayAnimAndWait;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeavingPawnInventory;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_ReceiveOnUnEquip) == 0x000001, "Wrong alignment on DFBaseItem_ReceiveOnUnEquip");
//(sizeof(DFBaseItem_ReceiveOnUnEquip) == 0x000002, "Wrong size on DFBaseItem_ReceiveOnUnEquip");
//(offsetof(DFBaseItem_ReceiveOnUnEquip, bPlayAnimAndWait) == 0x000000, "Member 'DFBaseItem_ReceiveOnUnEquip::bPlayAnimAndWait' has a wrong offset!");
//(offsetof(DFBaseItem_ReceiveOnUnEquip, bLeavingPawnInventory) == 0x000001, "Member 'DFBaseItem_ReceiveOnUnEquip::bLeavingPawnInventory' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.ReceiveOnUnEquipFinished
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_ReceiveOnUnEquipFinished final 
{
public:
	bool                                          bLeavingPawnInventory;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_ReceiveOnUnEquipFinished) == 0x000001, "Wrong alignment on DFBaseItem_ReceiveOnUnEquipFinished");
//(sizeof(DFBaseItem_ReceiveOnUnEquipFinished) == 0x000001, "Wrong size on DFBaseItem_ReceiveOnUnEquipFinished");
//(offsetof(DFBaseItem_ReceiveOnUnEquipFinished, bLeavingPawnInventory) == 0x000000, "Member 'DFBaseItem_ReceiveOnUnEquipFinished::bLeavingPawnInventory' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.ReceiveVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_ReceiveVisibilityChanged final 
{
public:
	bool                                          bFirstPerson;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_ReceiveVisibilityChanged) == 0x000001, "Wrong alignment on DFBaseItem_ReceiveVisibilityChanged");
//(sizeof(DFBaseItem_ReceiveVisibilityChanged) == 0x000001, "Wrong size on DFBaseItem_ReceiveVisibilityChanged");
//(offsetof(DFBaseItem_ReceiveVisibilityChanged, bFirstPerson) == 0x000000, "Member 'DFBaseItem_ReceiveVisibilityChanged::bFirstPerson' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.RemoveLegacyLocomotionAnims
// 0x0002 (0x0002 - 0x0000)
struct DFBaseItem_RemoveLegacyLocomotionAnims final 
{
public:
	bool                                          bFPP;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_RemoveLegacyLocomotionAnims) == 0x000001, "Wrong alignment on DFBaseItem_RemoveLegacyLocomotionAnims");
//(sizeof(DFBaseItem_RemoveLegacyLocomotionAnims) == 0x000002, "Wrong size on DFBaseItem_RemoveLegacyLocomotionAnims");
//(offsetof(DFBaseItem_RemoveLegacyLocomotionAnims, bFPP) == 0x000000, "Member 'DFBaseItem_RemoveLegacyLocomotionAnims::bFPP' has a wrong offset!");
//(offsetof(DFBaseItem_RemoveLegacyLocomotionAnims, ReturnValue) == 0x000001, "Member 'DFBaseItem_RemoveLegacyLocomotionAnims::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.ServerStartFire
// 0x0024 (0x0024 - 0x0000)
struct DFBaseItem_ServerStartFire final 
{
public:
	struct FVector_NetQuantize                    Origin;                                            // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ShootDir;                                          // 0x000C(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotID;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_ServerStartFire) == 0x000004, "Wrong alignment on DFBaseItem_ServerStartFire");
//(sizeof(DFBaseItem_ServerStartFire) == 0x000024, "Wrong size on DFBaseItem_ServerStartFire");
//(offsetof(DFBaseItem_ServerStartFire, Origin) == 0x000000, "Member 'DFBaseItem_ServerStartFire::Origin' has a wrong offset!");
//(offsetof(DFBaseItem_ServerStartFire, ShootDir) == 0x00000C, "Member 'DFBaseItem_ServerStartFire::ShootDir' has a wrong offset!");
//(offsetof(DFBaseItem_ServerStartFire, RandomSeed) == 0x000018, "Member 'DFBaseItem_ServerStartFire::RandomSeed' has a wrong offset!");
//(offsetof(DFBaseItem_ServerStartFire, Timestamp) == 0x00001C, "Member 'DFBaseItem_ServerStartFire::Timestamp' has a wrong offset!");
//(offsetof(DFBaseItem_ServerStartFire, ShotID) == 0x000020, "Member 'DFBaseItem_ServerStartFire::ShotID' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.SetMeshVisibility
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_SetMeshVisibility final 
{
public:
	bool                                          bFirstPerson;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_SetMeshVisibility) == 0x000001, "Wrong alignment on DFBaseItem_SetMeshVisibility");
//(sizeof(DFBaseItem_SetMeshVisibility) == 0x000001, "Wrong size on DFBaseItem_SetMeshVisibility");
//(offsetof(DFBaseItem_SetMeshVisibility, bFirstPerson) == 0x000000, "Member 'DFBaseItem_SetMeshVisibility::bFirstPerson' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.SetOwningPawn
// 0x0008 (0x0008 - 0x0000)
struct DFBaseItem_SetOwningPawn final 
{
public:
	class ADFBaseCharacter*                       NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_SetOwningPawn) == 0x000008, "Wrong alignment on DFBaseItem_SetOwningPawn");
//(sizeof(DFBaseItem_SetOwningPawn) == 0x000008, "Wrong size on DFBaseItem_SetOwningPawn");
//(offsetof(DFBaseItem_SetOwningPawn, NewOwner) == 0x000000, "Member 'DFBaseItem_SetOwningPawn::NewOwner' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.CanAimWhileEquipped
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_CanAimWhileEquipped final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_CanAimWhileEquipped) == 0x000001, "Wrong alignment on DFBaseItem_CanAimWhileEquipped");
//(sizeof(DFBaseItem_CanAimWhileEquipped) == 0x000001, "Wrong size on DFBaseItem_CanAimWhileEquipped");
//(offsetof(DFBaseItem_CanAimWhileEquipped, ReturnValue) == 0x000000, "Member 'DFBaseItem_CanAimWhileEquipped::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.CanEquip
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_CanEquip final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_CanEquip) == 0x000001, "Wrong alignment on DFBaseItem_CanEquip");
//(sizeof(DFBaseItem_CanEquip) == 0x000001, "Wrong size on DFBaseItem_CanEquip");
//(offsetof(DFBaseItem_CanEquip, ReturnValue) == 0x000000, "Member 'DFBaseItem_CanEquip::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.CanFire
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_CanFire final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_CanFire) == 0x000001, "Wrong alignment on DFBaseItem_CanFire");
//(sizeof(DFBaseItem_CanFire) == 0x000001, "Wrong size on DFBaseItem_CanFire");
//(offsetof(DFBaseItem_CanFire, ReturnValue) == 0x000000, "Member 'DFBaseItem_CanFire::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.CanSprintWhileEquipped
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_CanSprintWhileEquipped final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_CanSprintWhileEquipped) == 0x000001, "Wrong alignment on DFBaseItem_CanSprintWhileEquipped");
//(sizeof(DFBaseItem_CanSprintWhileEquipped) == 0x000001, "Wrong size on DFBaseItem_CanSprintWhileEquipped");
//(offsetof(DFBaseItem_CanSprintWhileEquipped, ReturnValue) == 0x000000, "Member 'DFBaseItem_CanSprintWhileEquipped::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.CanStartFire
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_CanStartFire final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_CanStartFire) == 0x000001, "Wrong alignment on DFBaseItem_CanStartFire");
//(sizeof(DFBaseItem_CanStartFire) == 0x000001, "Wrong size on DFBaseItem_CanStartFire");
//(offsetof(DFBaseItem_CanStartFire, ReturnValue) == 0x000000, "Member 'DFBaseItem_CanStartFire::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.CanTriggerFire
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_CanTriggerFire final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_CanTriggerFire) == 0x000001, "Wrong alignment on DFBaseItem_CanTriggerFire");
//(sizeof(DFBaseItem_CanTriggerFire) == 0x000001, "Wrong size on DFBaseItem_CanTriggerFire");
//(offsetof(DFBaseItem_CanTriggerFire, ReturnValue) == 0x000000, "Member 'DFBaseItem_CanTriggerFire::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.GetAdjustedAimDirection
// 0x000C (0x000C - 0x0000)
struct DFBaseItem_GetAdjustedAimDirection final 
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_GetAdjustedAimDirection) == 0x000004, "Wrong alignment on DFBaseItem_GetAdjustedAimDirection");
//(sizeof(DFBaseItem_GetAdjustedAimDirection) == 0x00000C, "Wrong size on DFBaseItem_GetAdjustedAimDirection");
//(offsetof(DFBaseItem_GetAdjustedAimDirection, ReturnValue) == 0x000000, "Member 'DFBaseItem_GetAdjustedAimDirection::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.GetItemMesh
// 0x0008 (0x0008 - 0x0000)
struct DFBaseItem_GetItemMesh final 
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_GetItemMesh) == 0x000008, "Wrong alignment on DFBaseItem_GetItemMesh");
//(sizeof(DFBaseItem_GetItemMesh) == 0x000008, "Wrong size on DFBaseItem_GetItemMesh");
//(offsetof(DFBaseItem_GetItemMesh, ReturnValue) == 0x000000, "Member 'DFBaseItem_GetItemMesh::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.GetItemMesh1P
// 0x0008 (0x0008 - 0x0000)
struct DFBaseItem_GetItemMesh1P final 
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_GetItemMesh1P) == 0x000008, "Wrong alignment on DFBaseItem_GetItemMesh1P");
//(sizeof(DFBaseItem_GetItemMesh1P) == 0x000008, "Wrong size on DFBaseItem_GetItemMesh1P");
//(offsetof(DFBaseItem_GetItemMesh1P, ReturnValue) == 0x000000, "Member 'DFBaseItem_GetItemMesh1P::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.GetItemMeshToUse
// 0x0010 (0x0010 - 0x0000)
struct DFBaseItem_GetItemMeshToUse final 
{
public:
	bool                                          bIgnoreLocalControlOnServer;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF1[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_GetItemMeshToUse) == 0x000008, "Wrong alignment on DFBaseItem_GetItemMeshToUse");
//(sizeof(DFBaseItem_GetItemMeshToUse) == 0x000010, "Wrong size on DFBaseItem_GetItemMeshToUse");
//(offsetof(DFBaseItem_GetItemMeshToUse, bIgnoreLocalControlOnServer) == 0x000000, "Member 'DFBaseItem_GetItemMeshToUse::bIgnoreLocalControlOnServer' has a wrong offset!");
//(offsetof(DFBaseItem_GetItemMeshToUse, ReturnValue) == 0x000008, "Member 'DFBaseItem_GetItemMeshToUse::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.GetItemType
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_GetItemType final 
{
public:
	EItemType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_GetItemType) == 0x000001, "Wrong alignment on DFBaseItem_GetItemType");
//(sizeof(DFBaseItem_GetItemType) == 0x000001, "Wrong size on DFBaseItem_GetItemType");
//(offsetof(DFBaseItem_GetItemType, ReturnValue) == 0x000000, "Member 'DFBaseItem_GetItemType::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.GetLegacyLocomotionAnims
// 0x0058 (0x0058 - 0x0000)
struct DFBaseItem_GetLegacyLocomotionAnims final 
{
public:
	bool                                          bFPP;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF2[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UAnimSequenceBase*>   ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_GetLegacyLocomotionAnims) == 0x000008, "Wrong alignment on DFBaseItem_GetLegacyLocomotionAnims");
//(sizeof(DFBaseItem_GetLegacyLocomotionAnims) == 0x000058, "Wrong size on DFBaseItem_GetLegacyLocomotionAnims");
//(offsetof(DFBaseItem_GetLegacyLocomotionAnims, bFPP) == 0x000000, "Member 'DFBaseItem_GetLegacyLocomotionAnims::bFPP' has a wrong offset!");
//(offsetof(DFBaseItem_GetLegacyLocomotionAnims, ReturnValue) == 0x000008, "Member 'DFBaseItem_GetLegacyLocomotionAnims::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.GetOwnerViewLocation
// 0x000C (0x000C - 0x0000)
struct DFBaseItem_GetOwnerViewLocation final 
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_GetOwnerViewLocation) == 0x000004, "Wrong alignment on DFBaseItem_GetOwnerViewLocation");
//(sizeof(DFBaseItem_GetOwnerViewLocation) == 0x00000C, "Wrong size on DFBaseItem_GetOwnerViewLocation");
//(offsetof(DFBaseItem_GetOwnerViewLocation, ReturnValue) == 0x000000, "Member 'DFBaseItem_GetOwnerViewLocation::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.GetOwnerViewPoint
// 0x001C (0x001C - 0x0000)
struct DFBaseItem_GetOwnerViewPoint final 
{
public:
	struct FVector                                OutViewLoc;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutViewRot;                                        // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF3[0x3];                                      // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseItem_GetOwnerViewPoint) == 0x000004, "Wrong alignment on DFBaseItem_GetOwnerViewPoint");
//(sizeof(DFBaseItem_GetOwnerViewPoint) == 0x00001C, "Wrong size on DFBaseItem_GetOwnerViewPoint");
//(offsetof(DFBaseItem_GetOwnerViewPoint, OutViewLoc) == 0x000000, "Member 'DFBaseItem_GetOwnerViewPoint::OutViewLoc' has a wrong offset!");
//(offsetof(DFBaseItem_GetOwnerViewPoint, OutViewRot) == 0x00000C, "Member 'DFBaseItem_GetOwnerViewPoint::OutViewRot' has a wrong offset!");
//(offsetof(DFBaseItem_GetOwnerViewPoint, ReturnValue) == 0x000018, "Member 'DFBaseItem_GetOwnerViewPoint::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.GetOwnerViewRotation
// 0x000C (0x000C - 0x0000)
struct DFBaseItem_GetOwnerViewRotation final 
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_GetOwnerViewRotation) == 0x000004, "Wrong alignment on DFBaseItem_GetOwnerViewRotation");
//(sizeof(DFBaseItem_GetOwnerViewRotation) == 0x00000C, "Wrong size on DFBaseItem_GetOwnerViewRotation");
//(offsetof(DFBaseItem_GetOwnerViewRotation, ReturnValue) == 0x000000, "Member 'DFBaseItem_GetOwnerViewRotation::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.GetPawnInventory
// 0x0008 (0x0008 - 0x0000)
struct DFBaseItem_GetPawnInventory final 
{
public:
	class UDFInventoryComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_GetPawnInventory) == 0x000008, "Wrong alignment on DFBaseItem_GetPawnInventory");
//(sizeof(DFBaseItem_GetPawnInventory) == 0x000008, "Wrong size on DFBaseItem_GetPawnInventory");
//(offsetof(DFBaseItem_GetPawnInventory, ReturnValue) == 0x000000, "Member 'DFBaseItem_GetPawnInventory::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.GetPawnOwner
// 0x0008 (0x0008 - 0x0000)
struct DFBaseItem_GetPawnOwner final 
{
public:
	class ADFBaseCharacter*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_GetPawnOwner) == 0x000008, "Wrong alignment on DFBaseItem_GetPawnOwner");
//(sizeof(DFBaseItem_GetPawnOwner) == 0x000008, "Wrong size on DFBaseItem_GetPawnOwner");
//(offsetof(DFBaseItem_GetPawnOwner, ReturnValue) == 0x000000, "Member 'DFBaseItem_GetPawnOwner::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.GetSpecificItemType
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_GetSpecificItemType final 
{
public:
	ESpecificItemType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_GetSpecificItemType) == 0x000001, "Wrong alignment on DFBaseItem_GetSpecificItemType");
//(sizeof(DFBaseItem_GetSpecificItemType) == 0x000001, "Wrong size on DFBaseItem_GetSpecificItemType");
//(offsetof(DFBaseItem_GetSpecificItemType, ReturnValue) == 0x000000, "Member 'DFBaseItem_GetSpecificItemType::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.IsClientSimulated
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_IsClientSimulated final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_IsClientSimulated) == 0x000001, "Wrong alignment on DFBaseItem_IsClientSimulated");
//(sizeof(DFBaseItem_IsClientSimulated) == 0x000001, "Wrong size on DFBaseItem_IsClientSimulated");
//(offsetof(DFBaseItem_IsClientSimulated, ReturnValue) == 0x000000, "Member 'DFBaseItem_IsClientSimulated::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_IsEquipped final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_IsEquipped) == 0x000001, "Wrong alignment on DFBaseItem_IsEquipped");
//(sizeof(DFBaseItem_IsEquipped) == 0x000001, "Wrong size on DFBaseItem_IsEquipped");
//(offsetof(DFBaseItem_IsEquipped, ReturnValue) == 0x000000, "Member 'DFBaseItem_IsEquipped::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.IsEquipping
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_IsEquipping final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_IsEquipping) == 0x000001, "Wrong alignment on DFBaseItem_IsEquipping");
//(sizeof(DFBaseItem_IsEquipping) == 0x000001, "Wrong size on DFBaseItem_IsEquipping");
//(offsetof(DFBaseItem_IsEquipping, ReturnValue) == 0x000000, "Member 'DFBaseItem_IsEquipping::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.IsLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_IsLocallyControlled final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_IsLocallyControlled) == 0x000001, "Wrong alignment on DFBaseItem_IsLocallyControlled");
//(sizeof(DFBaseItem_IsLocallyControlled) == 0x000001, "Wrong size on DFBaseItem_IsLocallyControlled");
//(offsetof(DFBaseItem_IsLocallyControlled, ReturnValue) == 0x000000, "Member 'DFBaseItem_IsLocallyControlled::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.IsUnEquipping
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_IsUnEquipping final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_IsUnEquipping) == 0x000001, "Wrong alignment on DFBaseItem_IsUnEquipping");
//(sizeof(DFBaseItem_IsUnEquipping) == 0x000001, "Wrong size on DFBaseItem_IsUnEquipping");
//(offsetof(DFBaseItem_IsUnEquipping, ReturnValue) == 0x000000, "Member 'DFBaseItem_IsUnEquipping::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.OwnerIsAiming
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_OwnerIsAiming final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_OwnerIsAiming) == 0x000001, "Wrong alignment on DFBaseItem_OwnerIsAiming");
//(sizeof(DFBaseItem_OwnerIsAiming) == 0x000001, "Wrong size on DFBaseItem_OwnerIsAiming");
//(offsetof(DFBaseItem_OwnerIsAiming, ReturnValue) == 0x000000, "Member 'DFBaseItem_OwnerIsAiming::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseItem.OwnerIsSprinting
// 0x0001 (0x0001 - 0x0000)
struct DFBaseItem_OwnerIsSprinting final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseItem_OwnerIsSprinting) == 0x000001, "Wrong alignment on DFBaseItem_OwnerIsSprinting");
//(sizeof(DFBaseItem_OwnerIsSprinting) == 0x000001, "Wrong size on DFBaseItem_OwnerIsSprinting");
//(offsetof(DFBaseItem_OwnerIsSprinting, ReturnValue) == 0x000000, "Member 'DFBaseItem_OwnerIsSprinting::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFIntrinsicCharAnimInstInterface.PlayDeathMontage
// 0x0010 (0x0010 - 0x0000)
struct DFIntrinsicCharAnimInstInterface_PlayDeathMontage final 
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF4[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFIntrinsicCharAnimInstInterface_PlayDeathMontage) == 0x000008, "Wrong alignment on DFIntrinsicCharAnimInstInterface_PlayDeathMontage");
//(sizeof(DFIntrinsicCharAnimInstInterface_PlayDeathMontage) == 0x000010, "Wrong size on DFIntrinsicCharAnimInstInterface_PlayDeathMontage");
//(offsetof(DFIntrinsicCharAnimInstInterface_PlayDeathMontage, MontageToPlay) == 0x000000, "Member 'DFIntrinsicCharAnimInstInterface_PlayDeathMontage::MontageToPlay' has a wrong offset!");
//(offsetof(DFIntrinsicCharAnimInstInterface_PlayDeathMontage, ReturnValue) == 0x000008, "Member 'DFIntrinsicCharAnimInstInterface_PlayDeathMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFIntrinsicWeapAnimInstInterface.PlayEquipMontage
// 0x0010 (0x0010 - 0x0000)
struct DFIntrinsicWeapAnimInstInterface_PlayEquipMontage final 
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF6[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFIntrinsicWeapAnimInstInterface_PlayEquipMontage) == 0x000008, "Wrong alignment on DFIntrinsicWeapAnimInstInterface_PlayEquipMontage");
//(sizeof(DFIntrinsicWeapAnimInstInterface_PlayEquipMontage) == 0x000010, "Wrong size on DFIntrinsicWeapAnimInstInterface_PlayEquipMontage");
//(offsetof(DFIntrinsicWeapAnimInstInterface_PlayEquipMontage, MontageToPlay) == 0x000000, "Member 'DFIntrinsicWeapAnimInstInterface_PlayEquipMontage::MontageToPlay' has a wrong offset!");
//(offsetof(DFIntrinsicWeapAnimInstInterface_PlayEquipMontage, ReturnValue) == 0x000008, "Member 'DFIntrinsicWeapAnimInstInterface_PlayEquipMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFIntrinsicWeapAnimInstInterface.PlayFireMontage
// 0x0010 (0x0010 - 0x0000)
struct DFIntrinsicWeapAnimInstInterface_PlayFireMontage final 
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireLast;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAiming;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF7[0x2];                                      // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFIntrinsicWeapAnimInstInterface_PlayFireMontage) == 0x000008, "Wrong alignment on DFIntrinsicWeapAnimInstInterface_PlayFireMontage");
//(sizeof(DFIntrinsicWeapAnimInstInterface_PlayFireMontage) == 0x000010, "Wrong size on DFIntrinsicWeapAnimInstInterface_PlayFireMontage");
//(offsetof(DFIntrinsicWeapAnimInstInterface_PlayFireMontage, MontageToPlay) == 0x000000, "Member 'DFIntrinsicWeapAnimInstInterface_PlayFireMontage::MontageToPlay' has a wrong offset!");
//(offsetof(DFIntrinsicWeapAnimInstInterface_PlayFireMontage, bFireLast) == 0x000008, "Member 'DFIntrinsicWeapAnimInstInterface_PlayFireMontage::bFireLast' has a wrong offset!");
//(offsetof(DFIntrinsicWeapAnimInstInterface_PlayFireMontage, bAiming) == 0x000009, "Member 'DFIntrinsicWeapAnimInstInterface_PlayFireMontage::bAiming' has a wrong offset!");
//(offsetof(DFIntrinsicWeapAnimInstInterface_PlayFireMontage, ReturnValue) == 0x00000C, "Member 'DFIntrinsicWeapAnimInstInterface_PlayFireMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFIntrinsicWeapAnimInstInterface.PlayReloadMontage
// 0x0010 (0x0010 - 0x0000)
struct DFIntrinsicWeapAnimInstInterface_PlayReloadMontage final 
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullReload;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF8[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFIntrinsicWeapAnimInstInterface_PlayReloadMontage) == 0x000008, "Wrong alignment on DFIntrinsicWeapAnimInstInterface_PlayReloadMontage");
//(sizeof(DFIntrinsicWeapAnimInstInterface_PlayReloadMontage) == 0x000010, "Wrong size on DFIntrinsicWeapAnimInstInterface_PlayReloadMontage");
//(offsetof(DFIntrinsicWeapAnimInstInterface_PlayReloadMontage, MontageToPlay) == 0x000000, "Member 'DFIntrinsicWeapAnimInstInterface_PlayReloadMontage::MontageToPlay' has a wrong offset!");
//(offsetof(DFIntrinsicWeapAnimInstInterface_PlayReloadMontage, bFullReload) == 0x000008, "Member 'DFIntrinsicWeapAnimInstInterface_PlayReloadMontage::bFullReload' has a wrong offset!");
//(offsetof(DFIntrinsicWeapAnimInstInterface_PlayReloadMontage, ReturnValue) == 0x00000C, "Member 'DFIntrinsicWeapAnimInstInterface_PlayReloadMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFIntrinsicWeapAnimInstInterface.PlayUnEquipMontage
// 0x0010 (0x0010 - 0x0000)
struct DFIntrinsicWeapAnimInstInterface_PlayUnEquipMontage final 
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF9[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFIntrinsicWeapAnimInstInterface_PlayUnEquipMontage) == 0x000008, "Wrong alignment on DFIntrinsicWeapAnimInstInterface_PlayUnEquipMontage");
//(sizeof(DFIntrinsicWeapAnimInstInterface_PlayUnEquipMontage) == 0x000010, "Wrong size on DFIntrinsicWeapAnimInstInterface_PlayUnEquipMontage");
//(offsetof(DFIntrinsicWeapAnimInstInterface_PlayUnEquipMontage, MontageToPlay) == 0x000000, "Member 'DFIntrinsicWeapAnimInstInterface_PlayUnEquipMontage::MontageToPlay' has a wrong offset!");
//(offsetof(DFIntrinsicWeapAnimInstInterface_PlayUnEquipMontage, ReturnValue) == 0x000008, "Member 'DFIntrinsicWeapAnimInstInterface_PlayUnEquipMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseAmmoClip.StoreAmmoInInventory
// 0x0020 (0x0020 - 0x0000)
struct DFBaseAmmoClip_StoreAmmoInInventory final 
{
public:
	class UDFInventoryComponent*                  AmmoStore;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoAmt;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CFE[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ADFBaseAmmoClip>            AmmoType;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CFF[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseAmmoClip_StoreAmmoInInventory) == 0x000008, "Wrong alignment on DFBaseAmmoClip_StoreAmmoInInventory");
//(sizeof(DFBaseAmmoClip_StoreAmmoInInventory) == 0x000020, "Wrong size on DFBaseAmmoClip_StoreAmmoInInventory");
//(offsetof(DFBaseAmmoClip_StoreAmmoInInventory, AmmoStore) == 0x000000, "Member 'DFBaseAmmoClip_StoreAmmoInInventory::AmmoStore' has a wrong offset!");
//(offsetof(DFBaseAmmoClip_StoreAmmoInInventory, AmmoAmt) == 0x000008, "Member 'DFBaseAmmoClip_StoreAmmoInInventory::AmmoAmt' has a wrong offset!");
//(offsetof(DFBaseAmmoClip_StoreAmmoInInventory, AmmoType) == 0x000010, "Member 'DFBaseAmmoClip_StoreAmmoInInventory::AmmoType' has a wrong offset!");
//(offsetof(DFBaseAmmoClip_StoreAmmoInInventory, ReturnValue) == 0x000018, "Member 'DFBaseAmmoClip_StoreAmmoInInventory::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseAmmoClip.ConsumeAmmo
// 0x0004 (0x0004 - 0x0000)
struct DFBaseAmmoClip_ConsumeAmmo final 
{
public:
	int32                                         AmmoToConsume;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseAmmoClip_ConsumeAmmo) == 0x000004, "Wrong alignment on DFBaseAmmoClip_ConsumeAmmo");
//(sizeof(DFBaseAmmoClip_ConsumeAmmo) == 0x000004, "Wrong size on DFBaseAmmoClip_ConsumeAmmo");
//(offsetof(DFBaseAmmoClip_ConsumeAmmo, AmmoToConsume) == 0x000000, "Member 'DFBaseAmmoClip_ConsumeAmmo::AmmoToConsume' has a wrong offset!");

// Function DonkehFramework.DFBaseAmmoClip.SetCurrentClipAmmo
// 0x0004 (0x0004 - 0x0000)
struct DFBaseAmmoClip_SetCurrentClipAmmo final 
{
public:
	int32                                         NewClipAmmo;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseAmmoClip_SetCurrentClipAmmo) == 0x000004, "Wrong alignment on DFBaseAmmoClip_SetCurrentClipAmmo");
//(sizeof(DFBaseAmmoClip_SetCurrentClipAmmo) == 0x000004, "Wrong size on DFBaseAmmoClip_SetCurrentClipAmmo");
//(offsetof(DFBaseAmmoClip_SetCurrentClipAmmo, NewClipAmmo) == 0x000000, "Member 'DFBaseAmmoClip_SetCurrentClipAmmo::NewClipAmmo' has a wrong offset!");

// Function DonkehFramework.DFBaseAmmoClip.SetOwningGun
// 0x0008 (0x0008 - 0x0000)
struct DFBaseAmmoClip_SetOwningGun final 
{
public:
	class ADFBaseGun*                             NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseAmmoClip_SetOwningGun) == 0x000008, "Wrong alignment on DFBaseAmmoClip_SetOwningGun");
//(sizeof(DFBaseAmmoClip_SetOwningGun) == 0x000008, "Wrong size on DFBaseAmmoClip_SetOwningGun");
//(offsetof(DFBaseAmmoClip_SetOwningGun, NewOwner) == 0x000000, "Member 'DFBaseAmmoClip_SetOwningGun::NewOwner' has a wrong offset!");

// Function DonkehFramework.DFBaseAmmoClip.StoreAmmo
// 0x0004 (0x0004 - 0x0000)
struct DFBaseAmmoClip_StoreAmmo final 
{
public:
	int32                                         AmmoToStore;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseAmmoClip_StoreAmmo) == 0x000004, "Wrong alignment on DFBaseAmmoClip_StoreAmmo");
//(sizeof(DFBaseAmmoClip_StoreAmmo) == 0x000004, "Wrong size on DFBaseAmmoClip_StoreAmmo");
//(offsetof(DFBaseAmmoClip_StoreAmmo, AmmoToStore) == 0x000000, "Member 'DFBaseAmmoClip_StoreAmmo::AmmoToStore' has a wrong offset!");

// Function DonkehFramework.DFBaseAmmoClip.GetCurrentClipAmmo
// 0x0004 (0x0004 - 0x0000)
struct DFBaseAmmoClip_GetCurrentClipAmmo final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseAmmoClip_GetCurrentClipAmmo) == 0x000004, "Wrong alignment on DFBaseAmmoClip_GetCurrentClipAmmo");
//(sizeof(DFBaseAmmoClip_GetCurrentClipAmmo) == 0x000004, "Wrong size on DFBaseAmmoClip_GetCurrentClipAmmo");
//(offsetof(DFBaseAmmoClip_GetCurrentClipAmmo, ReturnValue) == 0x000000, "Member 'DFBaseAmmoClip_GetCurrentClipAmmo::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseAmmoClip.GetGunOwner
// 0x0008 (0x0008 - 0x0000)
struct DFBaseAmmoClip_GetGunOwner final 
{
public:
	class ADFBaseGun*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseAmmoClip_GetGunOwner) == 0x000008, "Wrong alignment on DFBaseAmmoClip_GetGunOwner");
//(sizeof(DFBaseAmmoClip_GetGunOwner) == 0x000008, "Wrong size on DFBaseAmmoClip_GetGunOwner");
//(offsetof(DFBaseAmmoClip_GetGunOwner, ReturnValue) == 0x000000, "Member 'DFBaseAmmoClip_GetGunOwner::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseAmmoClip.GetMaxClipAmmo
// 0x0004 (0x0004 - 0x0000)
struct DFBaseAmmoClip_GetMaxClipAmmo final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseAmmoClip_GetMaxClipAmmo) == 0x000004, "Wrong alignment on DFBaseAmmoClip_GetMaxClipAmmo");
//(sizeof(DFBaseAmmoClip_GetMaxClipAmmo) == 0x000004, "Wrong size on DFBaseAmmoClip_GetMaxClipAmmo");
//(offsetof(DFBaseAmmoClip_GetMaxClipAmmo, ReturnValue) == 0x000000, "Member 'DFBaseAmmoClip_GetMaxClipAmmo::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseAmmoClip.GetStartingClipAmmo
// 0x0004 (0x0004 - 0x0000)
struct DFBaseAmmoClip_GetStartingClipAmmo final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseAmmoClip_GetStartingClipAmmo) == 0x000004, "Wrong alignment on DFBaseAmmoClip_GetStartingClipAmmo");
//(sizeof(DFBaseAmmoClip_GetStartingClipAmmo) == 0x000004, "Wrong size on DFBaseAmmoClip_GetStartingClipAmmo");
//(offsetof(DFBaseAmmoClip_GetStartingClipAmmo, ReturnValue) == 0x000000, "Member 'DFBaseAmmoClip_GetStartingClipAmmo::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseAmmoClip.IsLoaded
// 0x0001 (0x0001 - 0x0000)
struct DFBaseAmmoClip_IsLoaded final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseAmmoClip_IsLoaded) == 0x000001, "Wrong alignment on DFBaseAmmoClip_IsLoaded");
//(sizeof(DFBaseAmmoClip_IsLoaded) == 0x000001, "Wrong size on DFBaseAmmoClip_IsLoaded");
//(offsetof(DFBaseAmmoClip_IsLoaded, ReturnValue) == 0x000000, "Member 'DFBaseAmmoClip_IsLoaded::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.Aim
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_Aim final 
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_Aim) == 0x000001, "Wrong alignment on DFBaseCharacter_Aim");
//(sizeof(DFBaseCharacter_Aim) == 0x000001, "Wrong size on DFBaseCharacter_Aim");
//(offsetof(DFBaseCharacter_Aim, bClientSimulation) == 0x000000, "Member 'DFBaseCharacter_Aim::bClientSimulation' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ClearCharacterAnimInstances
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_ClearCharacterAnimInstances final 
{
public:
	bool                                          bPerspectiveMeshOnly;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ClearCharacterAnimInstances) == 0x000001, "Wrong alignment on DFBaseCharacter_ClearCharacterAnimInstances");
//(sizeof(DFBaseCharacter_ClearCharacterAnimInstances) == 0x000001, "Wrong size on DFBaseCharacter_ClearCharacterAnimInstances");
//(offsetof(DFBaseCharacter_ClearCharacterAnimInstances, bPerspectiveMeshOnly) == 0x000000, "Member 'DFBaseCharacter_ClearCharacterAnimInstances::bPerspectiveMeshOnly' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ClientAdjustPosition_CustomStamina
// 0x0038 (0x0038 - 0x0000)
struct DFBaseCharacter_ClientAdjustPosition_CustomStamina final 
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLoc;                                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewVel;                                            // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D11[0x4];                                      // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    NewBase;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewBaseBoneName;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBase;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBaseRelativePosition;                             // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ServerMovementMode;                                // 0x0032(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D12[0x1];                                      // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerSprintStamina;                               // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ClientAdjustPosition_CustomStamina) == 0x000008, "Wrong alignment on DFBaseCharacter_ClientAdjustPosition_CustomStamina");
//(sizeof(DFBaseCharacter_ClientAdjustPosition_CustomStamina) == 0x000038, "Wrong size on DFBaseCharacter_ClientAdjustPosition_CustomStamina");
//(offsetof(DFBaseCharacter_ClientAdjustPosition_CustomStamina, Timestamp) == 0x000000, "Member 'DFBaseCharacter_ClientAdjustPosition_CustomStamina::Timestamp' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustPosition_CustomStamina, NewLoc) == 0x000004, "Member 'DFBaseCharacter_ClientAdjustPosition_CustomStamina::NewLoc' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustPosition_CustomStamina, NewVel) == 0x000010, "Member 'DFBaseCharacter_ClientAdjustPosition_CustomStamina::NewVel' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustPosition_CustomStamina, NewBase) == 0x000020, "Member 'DFBaseCharacter_ClientAdjustPosition_CustomStamina::NewBase' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustPosition_CustomStamina, NewBaseBoneName) == 0x000028, "Member 'DFBaseCharacter_ClientAdjustPosition_CustomStamina::NewBaseBoneName' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustPosition_CustomStamina, bHasBase) == 0x000030, "Member 'DFBaseCharacter_ClientAdjustPosition_CustomStamina::bHasBase' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustPosition_CustomStamina, bBaseRelativePosition) == 0x000031, "Member 'DFBaseCharacter_ClientAdjustPosition_CustomStamina::bBaseRelativePosition' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustPosition_CustomStamina, ServerMovementMode) == 0x000032, "Member 'DFBaseCharacter_ClientAdjustPosition_CustomStamina::ServerMovementMode' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustPosition_CustomStamina, ServerSprintStamina) == 0x000034, "Member 'DFBaseCharacter_ClientAdjustPosition_CustomStamina::ServerSprintStamina' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ClientAdjustRootMotionPosition_CustomStamina
// 0x0040 (0x0040 - 0x0000)
struct DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina final 
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerMontageTrackPosition;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ServerLoc;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ServerRotation;                                    // 0x0014(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerVelZ;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D13[0x4];                                      // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    ServerBase;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ServerBoneName;                                    // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBase;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBaseRelativePosition;                             // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ServerMovementMode;                                // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D14[0x1];                                      // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerSprintStamina;                               // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina) == 0x000008, "Wrong alignment on DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina");
//(sizeof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina) == 0x000040, "Wrong size on DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina, Timestamp) == 0x000000, "Member 'DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina::Timestamp' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina, ServerMontageTrackPosition) == 0x000004, "Member 'DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina::ServerMontageTrackPosition' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina, ServerLoc) == 0x000008, "Member 'DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina::ServerLoc' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina, ServerRotation) == 0x000014, "Member 'DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina::ServerRotation' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina, ServerVelZ) == 0x000020, "Member 'DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina::ServerVelZ' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina, ServerBase) == 0x000028, "Member 'DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina::ServerBase' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina, ServerBoneName) == 0x000030, "Member 'DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina::ServerBoneName' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina, bHasBase) == 0x000038, "Member 'DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina::bHasBase' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina, bBaseRelativePosition) == 0x000039, "Member 'DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina::bBaseRelativePosition' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina, ServerMovementMode) == 0x00003A, "Member 'DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina::ServerMovementMode' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina, ServerSprintStamina) == 0x00003C, "Member 'DFBaseCharacter_ClientAdjustRootMotionPosition_CustomStamina::ServerSprintStamina' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ClientAdjustRootMotionSourcePosition_CustomStamina
// 0x0080 (0x0080 - 0x0000)
struct DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina final 
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D15[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRootMotionSourceGroup                 ServerRootMotion;                                  // 0x0008(0x0038)(Parm, NativeAccessSpecifierPublic)
	bool                                          bHasAnimRootMotion;                                // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D16[0x3];                                      // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerMontageTrackPosition;                        // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ServerLoc;                                         // 0x0048(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ServerRotation;                                    // 0x0054(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerVelZ;                                        // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D17[0x4];                                      // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    ServerBase;                                        // 0x0068(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ServerBoneName;                                    // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBase;                                          // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBaseRelativePosition;                             // 0x0079(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ServerMovementMode;                                // 0x007A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D18[0x1];                                      // 0x007B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerSprintStamina;                               // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina) == 0x000008, "Wrong alignment on DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina");
//(sizeof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina) == 0x000080, "Wrong size on DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, Timestamp) == 0x000000, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::Timestamp' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, ServerRootMotion) == 0x000008, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::ServerRootMotion' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, bHasAnimRootMotion) == 0x000040, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::bHasAnimRootMotion' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, ServerMontageTrackPosition) == 0x000044, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::ServerMontageTrackPosition' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, ServerLoc) == 0x000048, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::ServerLoc' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, ServerRotation) == 0x000054, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::ServerRotation' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, ServerVelZ) == 0x000060, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::ServerVelZ' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, ServerBase) == 0x000068, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::ServerBase' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, ServerBoneName) == 0x000070, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::ServerBoneName' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, bHasBase) == 0x000078, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::bHasBase' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, bBaseRelativePosition) == 0x000079, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::bBaseRelativePosition' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, ServerMovementMode) == 0x00007A, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::ServerMovementMode' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina, ServerSprintStamina) == 0x00007C, "Member 'DFBaseCharacter_ClientAdjustRootMotionSourcePosition_CustomStamina::ServerSprintStamina' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ClientVeryShortAdjustPosition_CustomStamina
// 0x0028 (0x0028 - 0x0000)
struct DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina final 
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLoc;                                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    NewBase;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewBaseBoneName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBase;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBaseRelativePosition;                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ServerMovementMode;                                // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D19[0x1];                                      // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerSprintStamina;                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina) == 0x000008, "Wrong alignment on DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina");
//(sizeof(DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina) == 0x000028, "Wrong size on DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina");
//(offsetof(DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina, Timestamp) == 0x000000, "Member 'DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina::Timestamp' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina, NewLoc) == 0x000004, "Member 'DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina::NewLoc' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina, NewBase) == 0x000010, "Member 'DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina::NewBase' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina, NewBaseBoneName) == 0x000018, "Member 'DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina::NewBaseBoneName' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina, bHasBase) == 0x000020, "Member 'DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina::bHasBase' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina, bBaseRelativePosition) == 0x000021, "Member 'DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina::bBaseRelativePosition' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina, ServerMovementMode) == 0x000022, "Member 'DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina::ServerMovementMode' has a wrong offset!");
//(offsetof(DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina, ServerSprintStamina) == 0x000024, "Member 'DFBaseCharacter_ClientVeryShortAdjustPosition_CustomStamina::ServerSprintStamina' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.Die
// 0x0030 (0x0030 - 0x0000)
struct DFBaseCharacter_Die final 
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1A[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            Killer;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1B[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_Die) == 0x000008, "Wrong alignment on DFBaseCharacter_Die");
//(sizeof(DFBaseCharacter_Die) == 0x000030, "Wrong size on DFBaseCharacter_Die");
//(offsetof(DFBaseCharacter_Die, KillingDamage) == 0x000000, "Member 'DFBaseCharacter_Die::KillingDamage' has a wrong offset!");
//(offsetof(DFBaseCharacter_Die, DamageEvent) == 0x000008, "Member 'DFBaseCharacter_Die::DamageEvent' has a wrong offset!");
//(offsetof(DFBaseCharacter_Die, Killer) == 0x000018, "Member 'DFBaseCharacter_Die::Killer' has a wrong offset!");
//(offsetof(DFBaseCharacter_Die, DamageCauser) == 0x000020, "Member 'DFBaseCharacter_Die::DamageCauser' has a wrong offset!");
//(offsetof(DFBaseCharacter_Die, ReturnValue) == 0x000028, "Member 'DFBaseCharacter_Die::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.EquipItem
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_EquipItem final 
{
public:
	class ADFBaseItem*                            ItemToEquip;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_EquipItem) == 0x000008, "Wrong alignment on DFBaseCharacter_EquipItem");
//(sizeof(DFBaseCharacter_EquipItem) == 0x000008, "Wrong size on DFBaseCharacter_EquipItem");
//(offsetof(DFBaseCharacter_EquipItem, ItemToEquip) == 0x000000, "Member 'DFBaseCharacter_EquipItem::ItemToEquip' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.EquipNextItemByType
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_EquipNextItemByType final 
{
public:
	EItemType                                     ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_EquipNextItemByType) == 0x000001, "Wrong alignment on DFBaseCharacter_EquipNextItemByType");
//(sizeof(DFBaseCharacter_EquipNextItemByType) == 0x000001, "Wrong size on DFBaseCharacter_EquipNextItemByType");
//(offsetof(DFBaseCharacter_EquipNextItemByType, ItemType) == 0x000000, "Member 'DFBaseCharacter_EquipNextItemByType::ItemType' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetNextInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_GetNextInventoryItem final 
{
public:
	bool                                          bEquippable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1C[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADFBaseItem*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GetNextInventoryItem) == 0x000008, "Wrong alignment on DFBaseCharacter_GetNextInventoryItem");
//(sizeof(DFBaseCharacter_GetNextInventoryItem) == 0x000010, "Wrong size on DFBaseCharacter_GetNextInventoryItem");
//(offsetof(DFBaseCharacter_GetNextInventoryItem, bEquippable) == 0x000000, "Member 'DFBaseCharacter_GetNextInventoryItem::bEquippable' has a wrong offset!");
//(offsetof(DFBaseCharacter_GetNextInventoryItem, ReturnValue) == 0x000008, "Member 'DFBaseCharacter_GetNextInventoryItem::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetPreviousInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_GetPreviousInventoryItem final 
{
public:
	bool                                          bEquippable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1D[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADFBaseItem*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GetPreviousInventoryItem) == 0x000008, "Wrong alignment on DFBaseCharacter_GetPreviousInventoryItem");
//(sizeof(DFBaseCharacter_GetPreviousInventoryItem) == 0x000010, "Wrong size on DFBaseCharacter_GetPreviousInventoryItem");
//(offsetof(DFBaseCharacter_GetPreviousInventoryItem, bEquippable) == 0x000000, "Member 'DFBaseCharacter_GetPreviousInventoryItem::bEquippable' has a wrong offset!");
//(offsetof(DFBaseCharacter_GetPreviousInventoryItem, ReturnValue) == 0x000008, "Member 'DFBaseCharacter_GetPreviousInventoryItem::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GiveLoadout
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_GiveLoadout final 
{
public:
	class UDFLoadout*                             Loadout;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEquipFirstItem;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1E[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_GiveLoadout) == 0x000008, "Wrong alignment on DFBaseCharacter_GiveLoadout");
//(sizeof(DFBaseCharacter_GiveLoadout) == 0x000010, "Wrong size on DFBaseCharacter_GiveLoadout");
//(offsetof(DFBaseCharacter_GiveLoadout, Loadout) == 0x000000, "Member 'DFBaseCharacter_GiveLoadout::Loadout' has a wrong offset!");
//(offsetof(DFBaseCharacter_GiveLoadout, bEquipFirstItem) == 0x000008, "Member 'DFBaseCharacter_GiveLoadout::bEquipFirstItem' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GoProne
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_GoProne final 
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GoProne) == 0x000001, "Wrong alignment on DFBaseCharacter_GoProne");
//(sizeof(DFBaseCharacter_GoProne) == 0x000001, "Wrong size on DFBaseCharacter_GoProne");
//(offsetof(DFBaseCharacter_GoProne, bClientSimulation) == 0x000000, "Member 'DFBaseCharacter_GoProne::bClientSimulation' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ItemEnabledModeChanged
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_ItemEnabledModeChanged final 
{
public:
	EDFItemEnabledMode                            PreviousItemEnabledMode;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ItemEnabledModeChanged) == 0x000001, "Wrong alignment on DFBaseCharacter_ItemEnabledModeChanged");
//(sizeof(DFBaseCharacter_ItemEnabledModeChanged) == 0x000001, "Wrong size on DFBaseCharacter_ItemEnabledModeChanged");
//(offsetof(DFBaseCharacter_ItemEnabledModeChanged, PreviousItemEnabledMode) == 0x000000, "Member 'DFBaseCharacter_ItemEnabledModeChanged::PreviousItemEnabledMode' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.Lean
// 0x0002 (0x0002 - 0x0000)
struct DFBaseCharacter_Lean final 
{
public:
	ELeanDirection                                DesiredLeanDir;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientSimulation;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_Lean) == 0x000001, "Wrong alignment on DFBaseCharacter_Lean");
//(sizeof(DFBaseCharacter_Lean) == 0x000002, "Wrong size on DFBaseCharacter_Lean");
//(offsetof(DFBaseCharacter_Lean, DesiredLeanDir) == 0x000000, "Member 'DFBaseCharacter_Lean::DesiredLeanDir' has a wrong offset!");
//(offsetof(DFBaseCharacter_Lean, bClientSimulation) == 0x000001, "Member 'DFBaseCharacter_Lean::bClientSimulation' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.LeanToggle
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_LeanToggle final 
{
public:
	ELeanDirection                                LeanDir;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_LeanToggle) == 0x000001, "Wrong alignment on DFBaseCharacter_LeanToggle");
//(sizeof(DFBaseCharacter_LeanToggle) == 0x000001, "Wrong size on DFBaseCharacter_LeanToggle");
//(offsetof(DFBaseCharacter_LeanToggle, LeanDir) == 0x000000, "Member 'DFBaseCharacter_LeanToggle::LeanDir' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.LeaveProne
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_LeaveProne final 
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_LeaveProne) == 0x000001, "Wrong alignment on DFBaseCharacter_LeaveProne");
//(sizeof(DFBaseCharacter_LeaveProne) == 0x000001, "Wrong size on DFBaseCharacter_LeaveProne");
//(offsetof(DFBaseCharacter_LeaveProne, bClientSimulation) == 0x000000, "Member 'DFBaseCharacter_LeaveProne::bClientSimulation' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.NextShotID
// 0x0004 (0x0004 - 0x0000)
struct DFBaseCharacter_NextShotID final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_NextShotID) == 0x000004, "Wrong alignment on DFBaseCharacter_NextShotID");
//(sizeof(DFBaseCharacter_NextShotID) == 0x000004, "Wrong size on DFBaseCharacter_NextShotID");
//(offsetof(DFBaseCharacter_NextShotID, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_NextShotID::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.OnDeath
// 0x0028 (0x0028 - 0x0000)
struct DFBaseCharacter_OnDeath final 
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1F[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class APawn*                                  InstigatingPawn;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_OnDeath) == 0x000008, "Wrong alignment on DFBaseCharacter_OnDeath");
//(sizeof(DFBaseCharacter_OnDeath) == 0x000028, "Wrong size on DFBaseCharacter_OnDeath");
//(offsetof(DFBaseCharacter_OnDeath, KillingDamage) == 0x000000, "Member 'DFBaseCharacter_OnDeath::KillingDamage' has a wrong offset!");
//(offsetof(DFBaseCharacter_OnDeath, DamageEvent) == 0x000008, "Member 'DFBaseCharacter_OnDeath::DamageEvent' has a wrong offset!");
//(offsetof(DFBaseCharacter_OnDeath, InstigatingPawn) == 0x000018, "Member 'DFBaseCharacter_OnDeath::InstigatingPawn' has a wrong offset!");
//(offsetof(DFBaseCharacter_OnDeath, DamageCauser) == 0x000020, "Member 'DFBaseCharacter_OnDeath::DamageCauser' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.OnRep_EquippedItem
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_OnRep_EquippedItem final 
{
public:
	class ADFBaseItem*                            LastItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_OnRep_EquippedItem) == 0x000008, "Wrong alignment on DFBaseCharacter_OnRep_EquippedItem");
//(sizeof(DFBaseCharacter_OnRep_EquippedItem) == 0x000008, "Wrong size on DFBaseCharacter_OnRep_EquippedItem");
//(offsetof(DFBaseCharacter_OnRep_EquippedItem, LastItem) == 0x000000, "Member 'DFBaseCharacter_OnRep_EquippedItem::LastItem' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.OnRep_Health
// 0x0004 (0x0004 - 0x0000)
struct DFBaseCharacter_OnRep_Health final 
{
public:
	float                                         PreviousValue;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_OnRep_Health) == 0x000004, "Wrong alignment on DFBaseCharacter_OnRep_Health");
//(sizeof(DFBaseCharacter_OnRep_Health) == 0x000004, "Wrong size on DFBaseCharacter_OnRep_Health");
//(offsetof(DFBaseCharacter_OnRep_Health, PreviousValue) == 0x000000, "Member 'DFBaseCharacter_OnRep_Health::PreviousValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.OnRep_ItemEnabledMode
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_OnRep_ItemEnabledMode final 
{
public:
	EDFItemEnabledMode                            PreviousItemEnabledMode;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_OnRep_ItemEnabledMode) == 0x000001, "Wrong alignment on DFBaseCharacter_OnRep_ItemEnabledMode");
//(sizeof(DFBaseCharacter_OnRep_ItemEnabledMode) == 0x000001, "Wrong size on DFBaseCharacter_OnRep_ItemEnabledMode");
//(offsetof(DFBaseCharacter_OnRep_ItemEnabledMode, PreviousItemEnabledMode) == 0x000000, "Member 'DFBaseCharacter_OnRep_ItemEnabledMode::PreviousItemEnabledMode' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.OnRep_ReplicatedLeanAmount
// 0x0004 (0x0004 - 0x0000)
struct DFBaseCharacter_OnRep_ReplicatedLeanAmount final 
{
public:
	float                                         LastReplicatedLeanAmount;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_OnRep_ReplicatedLeanAmount) == 0x000004, "Wrong alignment on DFBaseCharacter_OnRep_ReplicatedLeanAmount");
//(sizeof(DFBaseCharacter_OnRep_ReplicatedLeanAmount) == 0x000004, "Wrong size on DFBaseCharacter_OnRep_ReplicatedLeanAmount");
//(offsetof(DFBaseCharacter_OnRep_ReplicatedLeanAmount, LastReplicatedLeanAmount) == 0x000000, "Member 'DFBaseCharacter_OnRep_ReplicatedLeanAmount::LastReplicatedLeanAmount' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.OnRep_TeamNum
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_OnRep_TeamNum final 
{
public:
	uint8                                         LastTeamNum;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_OnRep_TeamNum) == 0x000001, "Wrong alignment on DFBaseCharacter_OnRep_TeamNum");
//(sizeof(DFBaseCharacter_OnRep_TeamNum) == 0x000001, "Wrong size on DFBaseCharacter_OnRep_TeamNum");
//(offsetof(DFBaseCharacter_OnRep_TeamNum, LastTeamNum) == 0x000000, "Member 'DFBaseCharacter_OnRep_TeamNum::LastTeamNum' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.OnRep_TeamState
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_OnRep_TeamState final 
{
public:
	class ADFTeamState*                           TeamStateBeforeUpdate;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_OnRep_TeamState) == 0x000008, "Wrong alignment on DFBaseCharacter_OnRep_TeamState");
//(sizeof(DFBaseCharacter_OnRep_TeamState) == 0x000008, "Wrong size on DFBaseCharacter_OnRep_TeamState");
//(offsetof(DFBaseCharacter_OnRep_TeamState, TeamStateBeforeUpdate) == 0x000000, "Member 'DFBaseCharacter_OnRep_TeamState::TeamStateBeforeUpdate' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterActionMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_PlayCharacterActionMontage final 
{
public:
	class UAnimMontage*                           ActionMontageToPlay;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D20[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_PlayCharacterActionMontage) == 0x000008, "Wrong alignment on DFBaseCharacter_PlayCharacterActionMontage");
//(sizeof(DFBaseCharacter_PlayCharacterActionMontage) == 0x000010, "Wrong size on DFBaseCharacter_PlayCharacterActionMontage");
//(offsetof(DFBaseCharacter_PlayCharacterActionMontage, ActionMontageToPlay) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterActionMontage::ActionMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterActionMontage, ReturnValue) == 0x000008, "Member 'DFBaseCharacter_PlayCharacterActionMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterCockMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_PlayCharacterCockMontage final 
{
public:
	class UAnimMontage*                           CockMontageToPlay;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D21[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_PlayCharacterCockMontage) == 0x000008, "Wrong alignment on DFBaseCharacter_PlayCharacterCockMontage");
//(sizeof(DFBaseCharacter_PlayCharacterCockMontage) == 0x000010, "Wrong size on DFBaseCharacter_PlayCharacterCockMontage");
//(offsetof(DFBaseCharacter_PlayCharacterCockMontage, CockMontageToPlay) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterCockMontage::CockMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterCockMontage, ReturnValue) == 0x000008, "Member 'DFBaseCharacter_PlayCharacterCockMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterDeathMontage
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_PlayCharacterDeathMontage final 
{
public:
	bool                                          bDontPlayAndReturnDominantPlayLengthOnly;          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D22[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_PlayCharacterDeathMontage) == 0x000004, "Wrong alignment on DFBaseCharacter_PlayCharacterDeathMontage");
//(sizeof(DFBaseCharacter_PlayCharacterDeathMontage) == 0x000008, "Wrong size on DFBaseCharacter_PlayCharacterDeathMontage");
//(offsetof(DFBaseCharacter_PlayCharacterDeathMontage, bDontPlayAndReturnDominantPlayLengthOnly) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterDeathMontage::bDontPlayAndReturnDominantPlayLengthOnly' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterDeathMontage, ReturnValue) == 0x000004, "Member 'DFBaseCharacter_PlayCharacterDeathMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterEndReloadMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_PlayCharacterEndReloadMontage final 
{
public:
	class UAnimMontage*                           EndReloadMontageToPlay;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDryReload;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D23[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_PlayCharacterEndReloadMontage) == 0x000008, "Wrong alignment on DFBaseCharacter_PlayCharacterEndReloadMontage");
//(sizeof(DFBaseCharacter_PlayCharacterEndReloadMontage) == 0x000010, "Wrong size on DFBaseCharacter_PlayCharacterEndReloadMontage");
//(offsetof(DFBaseCharacter_PlayCharacterEndReloadMontage, EndReloadMontageToPlay) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterEndReloadMontage::EndReloadMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterEndReloadMontage, bDryReload) == 0x000008, "Member 'DFBaseCharacter_PlayCharacterEndReloadMontage::bDryReload' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterEndReloadMontage, ReturnValue) == 0x00000C, "Member 'DFBaseCharacter_PlayCharacterEndReloadMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterEquipMontage
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_PlayCharacterEquipMontage final 
{
public:
	bool                                          bDontPlayAndReturnDominantPlayLengthOnly;          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D24[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_PlayCharacterEquipMontage) == 0x000004, "Wrong alignment on DFBaseCharacter_PlayCharacterEquipMontage");
//(sizeof(DFBaseCharacter_PlayCharacterEquipMontage) == 0x000008, "Wrong size on DFBaseCharacter_PlayCharacterEquipMontage");
//(offsetof(DFBaseCharacter_PlayCharacterEquipMontage, bDontPlayAndReturnDominantPlayLengthOnly) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterEquipMontage::bDontPlayAndReturnDominantPlayLengthOnly' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterEquipMontage, ReturnValue) == 0x000004, "Member 'DFBaseCharacter_PlayCharacterEquipMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterFireMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_PlayCharacterFireMontage final 
{
public:
	class UAnimMontage*                           FireMontageToPlay;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireLast;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireADS;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D25[0x2];                                      // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_PlayCharacterFireMontage) == 0x000008, "Wrong alignment on DFBaseCharacter_PlayCharacterFireMontage");
//(sizeof(DFBaseCharacter_PlayCharacterFireMontage) == 0x000010, "Wrong size on DFBaseCharacter_PlayCharacterFireMontage");
//(offsetof(DFBaseCharacter_PlayCharacterFireMontage, FireMontageToPlay) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterFireMontage::FireMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterFireMontage, bFireLast) == 0x000008, "Member 'DFBaseCharacter_PlayCharacterFireMontage::bFireLast' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterFireMontage, bFireADS) == 0x000009, "Member 'DFBaseCharacter_PlayCharacterFireMontage::bFireADS' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterFireMontage, ReturnValue) == 0x00000C, "Member 'DFBaseCharacter_PlayCharacterFireMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_PlayCharacterMontage final 
{
public:
	class UAnimMontage*                           CharMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDisableAutoBlendOut;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D26[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_PlayCharacterMontage) == 0x000008, "Wrong alignment on DFBaseCharacter_PlayCharacterMontage");
//(sizeof(DFBaseCharacter_PlayCharacterMontage) == 0x000010, "Wrong size on DFBaseCharacter_PlayCharacterMontage");
//(offsetof(DFBaseCharacter_PlayCharacterMontage, CharMontage) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterMontage::CharMontage' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterMontage, bForceDisableAutoBlendOut) == 0x000008, "Member 'DFBaseCharacter_PlayCharacterMontage::bForceDisableAutoBlendOut' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterMontage, ReturnValue) == 0x00000C, "Member 'DFBaseCharacter_PlayCharacterMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterPerspectiveAnimation
// 0x0018 (0x0018 - 0x0000)
struct DFBaseCharacter_PlayCharacterPerspectiveAnimation final 
{
public:
	struct FPerspectiveAnim                       CharAnim;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDisableAutoBlendOut;                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D27[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_PlayCharacterPerspectiveAnimation) == 0x000008, "Wrong alignment on DFBaseCharacter_PlayCharacterPerspectiveAnimation");
//(sizeof(DFBaseCharacter_PlayCharacterPerspectiveAnimation) == 0x000018, "Wrong size on DFBaseCharacter_PlayCharacterPerspectiveAnimation");
//(offsetof(DFBaseCharacter_PlayCharacterPerspectiveAnimation, CharAnim) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterPerspectiveAnimation::CharAnim' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterPerspectiveAnimation, bForceDisableAutoBlendOut) == 0x000010, "Member 'DFBaseCharacter_PlayCharacterPerspectiveAnimation::bForceDisableAutoBlendOut' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterPerspectiveAnimation, ReturnValue) == 0x000014, "Member 'DFBaseCharacter_PlayCharacterPerspectiveAnimation::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterReloadMontage
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_PlayCharacterReloadMontage final 
{
public:
	bool                                          bDryReload;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D28[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_PlayCharacterReloadMontage) == 0x000004, "Wrong alignment on DFBaseCharacter_PlayCharacterReloadMontage");
//(sizeof(DFBaseCharacter_PlayCharacterReloadMontage) == 0x000008, "Wrong size on DFBaseCharacter_PlayCharacterReloadMontage");
//(offsetof(DFBaseCharacter_PlayCharacterReloadMontage, bDryReload) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterReloadMontage::bDryReload' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterReloadMontage, ReturnValue) == 0x000004, "Member 'DFBaseCharacter_PlayCharacterReloadMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterSound
// 0x0018 (0x0018 - 0x0000)
struct DFBaseCharacter_PlayCharacterSound final 
{
public:
	struct FPerspectiveSound                      Sound;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_PlayCharacterSound) == 0x000008, "Wrong alignment on DFBaseCharacter_PlayCharacterSound");
//(sizeof(DFBaseCharacter_PlayCharacterSound) == 0x000018, "Wrong size on DFBaseCharacter_PlayCharacterSound");
//(offsetof(DFBaseCharacter_PlayCharacterSound, Sound) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterSound::Sound' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterSound, ReturnValue) == 0x000010, "Member 'DFBaseCharacter_PlayCharacterSound::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterStartReloadMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_PlayCharacterStartReloadMontage final 
{
public:
	class UAnimMontage*                           StartReloadMontageToPlay;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDryReload;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D29[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_PlayCharacterStartReloadMontage) == 0x000008, "Wrong alignment on DFBaseCharacter_PlayCharacterStartReloadMontage");
//(sizeof(DFBaseCharacter_PlayCharacterStartReloadMontage) == 0x000010, "Wrong size on DFBaseCharacter_PlayCharacterStartReloadMontage");
//(offsetof(DFBaseCharacter_PlayCharacterStartReloadMontage, StartReloadMontageToPlay) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterStartReloadMontage::StartReloadMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterStartReloadMontage, bDryReload) == 0x000008, "Member 'DFBaseCharacter_PlayCharacterStartReloadMontage::bDryReload' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterStartReloadMontage, ReturnValue) == 0x00000C, "Member 'DFBaseCharacter_PlayCharacterStartReloadMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterThrowOverhandMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_PlayCharacterThrowOverhandMontage final 
{
public:
	class UAnimMontage*                           ThrowOverhandMontageToPlay;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2A[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_PlayCharacterThrowOverhandMontage) == 0x000008, "Wrong alignment on DFBaseCharacter_PlayCharacterThrowOverhandMontage");
//(sizeof(DFBaseCharacter_PlayCharacterThrowOverhandMontage) == 0x000010, "Wrong size on DFBaseCharacter_PlayCharacterThrowOverhandMontage");
//(offsetof(DFBaseCharacter_PlayCharacterThrowOverhandMontage, ThrowOverhandMontageToPlay) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterThrowOverhandMontage::ThrowOverhandMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterThrowOverhandMontage, ReturnValue) == 0x000008, "Member 'DFBaseCharacter_PlayCharacterThrowOverhandMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterThrowUnderhandMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_PlayCharacterThrowUnderhandMontage final 
{
public:
	class UAnimMontage*                           ThrowUnderhandMontageToPlay;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2B[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_PlayCharacterThrowUnderhandMontage) == 0x000008, "Wrong alignment on DFBaseCharacter_PlayCharacterThrowUnderhandMontage");
//(sizeof(DFBaseCharacter_PlayCharacterThrowUnderhandMontage) == 0x000010, "Wrong size on DFBaseCharacter_PlayCharacterThrowUnderhandMontage");
//(offsetof(DFBaseCharacter_PlayCharacterThrowUnderhandMontage, ThrowUnderhandMontageToPlay) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterThrowUnderhandMontage::ThrowUnderhandMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterThrowUnderhandMontage, ReturnValue) == 0x000008, "Member 'DFBaseCharacter_PlayCharacterThrowUnderhandMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.PlayCharacterUnEquipMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_PlayCharacterUnEquipMontage final 
{
public:
	class UAnimMontage*                           UnEquipMontageToPlay;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2C[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_PlayCharacterUnEquipMontage) == 0x000008, "Wrong alignment on DFBaseCharacter_PlayCharacterUnEquipMontage");
//(sizeof(DFBaseCharacter_PlayCharacterUnEquipMontage) == 0x000010, "Wrong size on DFBaseCharacter_PlayCharacterUnEquipMontage");
//(offsetof(DFBaseCharacter_PlayCharacterUnEquipMontage, UnEquipMontageToPlay) == 0x000000, "Member 'DFBaseCharacter_PlayCharacterUnEquipMontage::UnEquipMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseCharacter_PlayCharacterUnEquipMontage, ReturnValue) == 0x000008, "Member 'DFBaseCharacter_PlayCharacterUnEquipMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ReceiveEquippedItemChanged
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_ReceiveEquippedItemChanged final 
{
public:
	class ADFBaseItem*                            NewEquippedItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBaseItem*                            PrevEquippedItem;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ReceiveEquippedItemChanged) == 0x000008, "Wrong alignment on DFBaseCharacter_ReceiveEquippedItemChanged");
//(sizeof(DFBaseCharacter_ReceiveEquippedItemChanged) == 0x000010, "Wrong size on DFBaseCharacter_ReceiveEquippedItemChanged");
//(offsetof(DFBaseCharacter_ReceiveEquippedItemChanged, NewEquippedItem) == 0x000000, "Member 'DFBaseCharacter_ReceiveEquippedItemChanged::NewEquippedItem' has a wrong offset!");
//(offsetof(DFBaseCharacter_ReceiveEquippedItemChanged, PrevEquippedItem) == 0x000008, "Member 'DFBaseCharacter_ReceiveEquippedItemChanged::PrevEquippedItem' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ReceiveHealthChanged
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_ReceiveHealthChanged final 
{
public:
	float                                         NewHealthTotal;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrevHealthTotal;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ReceiveHealthChanged) == 0x000004, "Wrong alignment on DFBaseCharacter_ReceiveHealthChanged");
//(sizeof(DFBaseCharacter_ReceiveHealthChanged) == 0x000008, "Wrong size on DFBaseCharacter_ReceiveHealthChanged");
//(offsetof(DFBaseCharacter_ReceiveHealthChanged, NewHealthTotal) == 0x000000, "Member 'DFBaseCharacter_ReceiveHealthChanged::NewHealthTotal' has a wrong offset!");
//(offsetof(DFBaseCharacter_ReceiveHealthChanged, PrevHealthTotal) == 0x000004, "Member 'DFBaseCharacter_ReceiveHealthChanged::PrevHealthTotal' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ReceiveOnEndProne
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_ReceiveOnEndProne final 
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ReceiveOnEndProne) == 0x000004, "Wrong alignment on DFBaseCharacter_ReceiveOnEndProne");
//(sizeof(DFBaseCharacter_ReceiveOnEndProne) == 0x000008, "Wrong size on DFBaseCharacter_ReceiveOnEndProne");
//(offsetof(DFBaseCharacter_ReceiveOnEndProne, HalfHeightAdjust) == 0x000000, "Member 'DFBaseCharacter_ReceiveOnEndProne::HalfHeightAdjust' has a wrong offset!");
//(offsetof(DFBaseCharacter_ReceiveOnEndProne, ScaledHalfHeightAdjust) == 0x000004, "Member 'DFBaseCharacter_ReceiveOnEndProne::ScaledHalfHeightAdjust' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ReceiveOnStartProne
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_ReceiveOnStartProne final 
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ReceiveOnStartProne) == 0x000004, "Wrong alignment on DFBaseCharacter_ReceiveOnStartProne");
//(sizeof(DFBaseCharacter_ReceiveOnStartProne) == 0x000008, "Wrong size on DFBaseCharacter_ReceiveOnStartProne");
//(offsetof(DFBaseCharacter_ReceiveOnStartProne, HalfHeightAdjust) == 0x000000, "Member 'DFBaseCharacter_ReceiveOnStartProne::HalfHeightAdjust' has a wrong offset!");
//(offsetof(DFBaseCharacter_ReceiveOnStartProne, ScaledHalfHeightAdjust) == 0x000004, "Member 'DFBaseCharacter_ReceiveOnStartProne::ScaledHalfHeightAdjust' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ReceivePawnTeamNumUpdated
// 0x0002 (0x0002 - 0x0000)
struct DFBaseCharacter_ReceivePawnTeamNumUpdated final 
{
public:
	uint8                                         LastTeamNum;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewTeamNum;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ReceivePawnTeamNumUpdated) == 0x000001, "Wrong alignment on DFBaseCharacter_ReceivePawnTeamNumUpdated");
//(sizeof(DFBaseCharacter_ReceivePawnTeamNumUpdated) == 0x000002, "Wrong size on DFBaseCharacter_ReceivePawnTeamNumUpdated");
//(offsetof(DFBaseCharacter_ReceivePawnTeamNumUpdated, LastTeamNum) == 0x000000, "Member 'DFBaseCharacter_ReceivePawnTeamNumUpdated::LastTeamNum' has a wrong offset!");
//(offsetof(DFBaseCharacter_ReceivePawnTeamNumUpdated, NewTeamNum) == 0x000001, "Member 'DFBaseCharacter_ReceivePawnTeamNumUpdated::NewTeamNum' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ReceivePawnTeamStateUpdated
// 0x0018 (0x0018 - 0x0000)
struct DFBaseCharacter_ReceivePawnTeamStateUpdated final 
{
public:
	class ADFTeamState*                           TeamStateBeforeUpdate;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFTeamState*                           NewTeamState;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewTeamStateInit;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2D[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_ReceivePawnTeamStateUpdated) == 0x000008, "Wrong alignment on DFBaseCharacter_ReceivePawnTeamStateUpdated");
//(sizeof(DFBaseCharacter_ReceivePawnTeamStateUpdated) == 0x000018, "Wrong size on DFBaseCharacter_ReceivePawnTeamStateUpdated");
//(offsetof(DFBaseCharacter_ReceivePawnTeamStateUpdated, TeamStateBeforeUpdate) == 0x000000, "Member 'DFBaseCharacter_ReceivePawnTeamStateUpdated::TeamStateBeforeUpdate' has a wrong offset!");
//(offsetof(DFBaseCharacter_ReceivePawnTeamStateUpdated, NewTeamState) == 0x000008, "Member 'DFBaseCharacter_ReceivePawnTeamStateUpdated::NewTeamState' has a wrong offset!");
//(offsetof(DFBaseCharacter_ReceivePawnTeamStateUpdated, bNewTeamStateInit) == 0x000010, "Member 'DFBaseCharacter_ReceivePawnTeamStateUpdated::bNewTeamStateInit' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ReceivePlayHit
// 0x0030 (0x0030 - 0x0000)
struct DFBaseCharacter_ReceivePlayHit final 
{
public:
	float                                         DamageTaken;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2E[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class APawn*                                  PawnInstigator;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKilled;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2F[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_ReceivePlayHit) == 0x000008, "Wrong alignment on DFBaseCharacter_ReceivePlayHit");
//(sizeof(DFBaseCharacter_ReceivePlayHit) == 0x000030, "Wrong size on DFBaseCharacter_ReceivePlayHit");
//(offsetof(DFBaseCharacter_ReceivePlayHit, DamageTaken) == 0x000000, "Member 'DFBaseCharacter_ReceivePlayHit::DamageTaken' has a wrong offset!");
//(offsetof(DFBaseCharacter_ReceivePlayHit, DamageEvent) == 0x000008, "Member 'DFBaseCharacter_ReceivePlayHit::DamageEvent' has a wrong offset!");
//(offsetof(DFBaseCharacter_ReceivePlayHit, PawnInstigator) == 0x000018, "Member 'DFBaseCharacter_ReceivePlayHit::PawnInstigator' has a wrong offset!");
//(offsetof(DFBaseCharacter_ReceivePlayHit, DamageCauser) == 0x000020, "Member 'DFBaseCharacter_ReceivePlayHit::DamageCauser' has a wrong offset!");
//(offsetof(DFBaseCharacter_ReceivePlayHit, bKilled) == 0x000028, "Member 'DFBaseCharacter_ReceivePlayHit::bKilled' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ServerDoVault
// 0x0018 (0x0018 - 0x0000)
struct DFBaseCharacter_ServerDoVault final 
{
public:
	struct FDFVaultTraceData                      VaultStartParams;                                  // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ServerDoVault) == 0x000004, "Wrong alignment on DFBaseCharacter_ServerDoVault");
//(sizeof(DFBaseCharacter_ServerDoVault) == 0x000018, "Wrong size on DFBaseCharacter_ServerDoVault");
//(offsetof(DFBaseCharacter_ServerDoVault, VaultStartParams) == 0x000000, "Member 'DFBaseCharacter_ServerDoVault::VaultStartParams' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.ServerEquipItem
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_ServerEquipItem final 
{
public:
	class ADFBaseItem*                            ItemToEquip;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_ServerEquipItem) == 0x000008, "Wrong alignment on DFBaseCharacter_ServerEquipItem");
//(sizeof(DFBaseCharacter_ServerEquipItem) == 0x000008, "Wrong size on DFBaseCharacter_ServerEquipItem");
//(offsetof(DFBaseCharacter_ServerEquipItem, ItemToEquip) == 0x000000, "Member 'DFBaseCharacter_ServerEquipItem::ItemToEquip' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.SetHealth
// 0x0004 (0x0004 - 0x0000)
struct DFBaseCharacter_SetHealth final 
{
public:
	float                                         InHealth;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_SetHealth) == 0x000004, "Wrong alignment on DFBaseCharacter_SetHealth");
//(sizeof(DFBaseCharacter_SetHealth) == 0x000004, "Wrong size on DFBaseCharacter_SetHealth");
//(offsetof(DFBaseCharacter_SetHealth, InHealth) == 0x000000, "Member 'DFBaseCharacter_SetHealth::InHealth' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.SetItemEnabledMode
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_SetItemEnabledMode final 
{
public:
	EDFItemEnabledMode                            ItemMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_SetItemEnabledMode) == 0x000001, "Wrong alignment on DFBaseCharacter_SetItemEnabledMode");
//(sizeof(DFBaseCharacter_SetItemEnabledMode) == 0x000001, "Wrong size on DFBaseCharacter_SetItemEnabledMode");
//(offsetof(DFBaseCharacter_SetItemEnabledMode, ItemMode) == 0x000000, "Member 'DFBaseCharacter_SetItemEnabledMode::ItemMode' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.SpawnHitImpactFX
// 0x0028 (0x0028 - 0x0000)
struct DFBaseCharacter_SpawnHitImpactFX final 
{
public:
	float                                         DamageTaken;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D30[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class APawn*                                  PawnInstigator;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_SpawnHitImpactFX) == 0x000008, "Wrong alignment on DFBaseCharacter_SpawnHitImpactFX");
//(sizeof(DFBaseCharacter_SpawnHitImpactFX) == 0x000028, "Wrong size on DFBaseCharacter_SpawnHitImpactFX");
//(offsetof(DFBaseCharacter_SpawnHitImpactFX, DamageTaken) == 0x000000, "Member 'DFBaseCharacter_SpawnHitImpactFX::DamageTaken' has a wrong offset!");
//(offsetof(DFBaseCharacter_SpawnHitImpactFX, DamageEvent) == 0x000008, "Member 'DFBaseCharacter_SpawnHitImpactFX::DamageEvent' has a wrong offset!");
//(offsetof(DFBaseCharacter_SpawnHitImpactFX, PawnInstigator) == 0x000018, "Member 'DFBaseCharacter_SpawnHitImpactFX::PawnInstigator' has a wrong offset!");
//(offsetof(DFBaseCharacter_SpawnHitImpactFX, DamageCauser) == 0x000020, "Member 'DFBaseCharacter_SpawnHitImpactFX::DamageCauser' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.Sprint
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_Sprint final 
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_Sprint) == 0x000001, "Wrong alignment on DFBaseCharacter_Sprint");
//(sizeof(DFBaseCharacter_Sprint) == 0x000001, "Wrong size on DFBaseCharacter_Sprint");
//(offsetof(DFBaseCharacter_Sprint, bClientSimulation) == 0x000000, "Member 'DFBaseCharacter_Sprint::bClientSimulation' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.StopAllAnimMontages
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_StopAllAnimMontages final 
{
public:
	bool                                          bPerspectiveMeshOnly;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_StopAllAnimMontages) == 0x000001, "Wrong alignment on DFBaseCharacter_StopAllAnimMontages");
//(sizeof(DFBaseCharacter_StopAllAnimMontages) == 0x000001, "Wrong size on DFBaseCharacter_StopAllAnimMontages");
//(offsetof(DFBaseCharacter_StopAllAnimMontages, bPerspectiveMeshOnly) == 0x000000, "Member 'DFBaseCharacter_StopAllAnimMontages::bPerspectiveMeshOnly' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.StopCharacterMontage
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_StopCharacterMontage final 
{
public:
	class UAnimMontage*                           CharMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_StopCharacterMontage) == 0x000008, "Wrong alignment on DFBaseCharacter_StopCharacterMontage");
//(sizeof(DFBaseCharacter_StopCharacterMontage) == 0x000008, "Wrong size on DFBaseCharacter_StopCharacterMontage");
//(offsetof(DFBaseCharacter_StopCharacterMontage, CharMontage) == 0x000000, "Member 'DFBaseCharacter_StopCharacterMontage::CharMontage' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.StopCharacterPerspectiveAnimation
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_StopCharacterPerspectiveAnimation final 
{
public:
	struct FPerspectiveAnim                       CharAnim;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_StopCharacterPerspectiveAnimation) == 0x000008, "Wrong alignment on DFBaseCharacter_StopCharacterPerspectiveAnimation");
//(sizeof(DFBaseCharacter_StopCharacterPerspectiveAnimation) == 0x000010, "Wrong size on DFBaseCharacter_StopCharacterPerspectiveAnimation");
//(offsetof(DFBaseCharacter_StopCharacterPerspectiveAnimation, CharAnim) == 0x000000, "Member 'DFBaseCharacter_StopCharacterPerspectiveAnimation::CharAnim' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.UnAim
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_UnAim final 
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_UnAim) == 0x000001, "Wrong alignment on DFBaseCharacter_UnAim");
//(sizeof(DFBaseCharacter_UnAim) == 0x000001, "Wrong size on DFBaseCharacter_UnAim");
//(offsetof(DFBaseCharacter_UnAim, bClientSimulation) == 0x000000, "Member 'DFBaseCharacter_UnAim::bClientSimulation' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.UnLean
// 0x0002 (0x0002 - 0x0000)
struct DFBaseCharacter_UnLean final 
{
public:
	ELeanDirection                                UnDesiredLeanDir;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientSimulation;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_UnLean) == 0x000001, "Wrong alignment on DFBaseCharacter_UnLean");
//(sizeof(DFBaseCharacter_UnLean) == 0x000002, "Wrong size on DFBaseCharacter_UnLean");
//(offsetof(DFBaseCharacter_UnLean, UnDesiredLeanDir) == 0x000000, "Member 'DFBaseCharacter_UnLean::UnDesiredLeanDir' has a wrong offset!");
//(offsetof(DFBaseCharacter_UnLean, bClientSimulation) == 0x000001, "Member 'DFBaseCharacter_UnLean::bClientSimulation' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.UnSprint
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_UnSprint final 
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_UnSprint) == 0x000001, "Wrong alignment on DFBaseCharacter_UnSprint");
//(sizeof(DFBaseCharacter_UnSprint) == 0x000001, "Wrong size on DFBaseCharacter_UnSprint");
//(offsetof(DFBaseCharacter_UnSprint, bClientSimulation) == 0x000000, "Member 'DFBaseCharacter_UnSprint::bClientSimulation' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.AllowsWeaponFire
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_AllowsWeaponFire final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_AllowsWeaponFire) == 0x000001, "Wrong alignment on DFBaseCharacter_AllowsWeaponFire");
//(sizeof(DFBaseCharacter_AllowsWeaponFire) == 0x000001, "Wrong size on DFBaseCharacter_AllowsWeaponFire");
//(offsetof(DFBaseCharacter_AllowsWeaponFire, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_AllowsWeaponFire::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.CanAim
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_CanAim final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_CanAim) == 0x000001, "Wrong alignment on DFBaseCharacter_CanAim");
//(sizeof(DFBaseCharacter_CanAim) == 0x000001, "Wrong size on DFBaseCharacter_CanAim");
//(offsetof(DFBaseCharacter_CanAim, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_CanAim::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.CanDie
// 0x0030 (0x0030 - 0x0000)
struct DFBaseCharacter_CanDie final 
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D31[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            Killer;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D32[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_CanDie) == 0x000008, "Wrong alignment on DFBaseCharacter_CanDie");
//(sizeof(DFBaseCharacter_CanDie) == 0x000030, "Wrong size on DFBaseCharacter_CanDie");
//(offsetof(DFBaseCharacter_CanDie, KillingDamage) == 0x000000, "Member 'DFBaseCharacter_CanDie::KillingDamage' has a wrong offset!");
//(offsetof(DFBaseCharacter_CanDie, DamageEvent) == 0x000008, "Member 'DFBaseCharacter_CanDie::DamageEvent' has a wrong offset!");
//(offsetof(DFBaseCharacter_CanDie, Killer) == 0x000018, "Member 'DFBaseCharacter_CanDie::Killer' has a wrong offset!");
//(offsetof(DFBaseCharacter_CanDie, DamageCauser) == 0x000020, "Member 'DFBaseCharacter_CanDie::DamageCauser' has a wrong offset!");
//(offsetof(DFBaseCharacter_CanDie, ReturnValue) == 0x000028, "Member 'DFBaseCharacter_CanDie::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.CanGoProne
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_CanGoProne final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_CanGoProne) == 0x000001, "Wrong alignment on DFBaseCharacter_CanGoProne");
//(sizeof(DFBaseCharacter_CanGoProne) == 0x000001, "Wrong size on DFBaseCharacter_CanGoProne");
//(offsetof(DFBaseCharacter_CanGoProne, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_CanGoProne::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.CanLean
// 0x0002 (0x0002 - 0x0000)
struct DFBaseCharacter_CanLean final 
{
public:
	ELeanDirection                                DesiredLeanDir;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_CanLean) == 0x000001, "Wrong alignment on DFBaseCharacter_CanLean");
//(sizeof(DFBaseCharacter_CanLean) == 0x000002, "Wrong size on DFBaseCharacter_CanLean");
//(offsetof(DFBaseCharacter_CanLean, DesiredLeanDir) == 0x000000, "Member 'DFBaseCharacter_CanLean::DesiredLeanDir' has a wrong offset!");
//(offsetof(DFBaseCharacter_CanLean, ReturnValue) == 0x000001, "Member 'DFBaseCharacter_CanLean::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.CanSprint
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_CanSprint final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_CanSprint) == 0x000001, "Wrong alignment on DFBaseCharacter_CanSprint");
//(sizeof(DFBaseCharacter_CanSprint) == 0x000001, "Wrong size on DFBaseCharacter_CanSprint");
//(offsetof(DFBaseCharacter_CanSprint, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_CanSprint::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.CanVault
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_CanVault final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_CanVault) == 0x000001, "Wrong alignment on DFBaseCharacter_CanVault");
//(sizeof(DFBaseCharacter_CanVault) == 0x000001, "Wrong size on DFBaseCharacter_CanVault");
//(offsetof(DFBaseCharacter_CanVault, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_CanVault::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetAimOffsets
// 0x000C (0x000C - 0x0000)
struct DFBaseCharacter_GetAimOffsets final 
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GetAimOffsets) == 0x000004, "Wrong alignment on DFBaseCharacter_GetAimOffsets");
//(sizeof(DFBaseCharacter_GetAimOffsets) == 0x00000C, "Wrong size on DFBaseCharacter_GetAimOffsets");
//(offsetof(DFBaseCharacter_GetAimOffsets, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_GetAimOffsets::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetAnimToUseFromPerspectiveAnimPair
// 0x0018 (0x0018 - 0x0000)
struct DFBaseCharacter_GetAnimToUseFromPerspectiveAnimPair final 
{
public:
	struct FPerspectiveAnim                       AnimationPair;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GetAnimToUseFromPerspectiveAnimPair) == 0x000008, "Wrong alignment on DFBaseCharacter_GetAnimToUseFromPerspectiveAnimPair");
//(sizeof(DFBaseCharacter_GetAnimToUseFromPerspectiveAnimPair) == 0x000018, "Wrong size on DFBaseCharacter_GetAnimToUseFromPerspectiveAnimPair");
//(offsetof(DFBaseCharacter_GetAnimToUseFromPerspectiveAnimPair, AnimationPair) == 0x000000, "Member 'DFBaseCharacter_GetAnimToUseFromPerspectiveAnimPair::AnimationPair' has a wrong offset!");
//(offsetof(DFBaseCharacter_GetAnimToUseFromPerspectiveAnimPair, ReturnValue) == 0x000010, "Member 'DFBaseCharacter_GetAnimToUseFromPerspectiveAnimPair::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetCharacterAnimTickOptionToUse
// 0x0002 (0x0002 - 0x0000)
struct DFBaseCharacter_GetCharacterAnimTickOptionToUse final 
{
public:
	bool                                          bVisibleMesh;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisibilityBasedAnimTickOption                ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GetCharacterAnimTickOptionToUse) == 0x000001, "Wrong alignment on DFBaseCharacter_GetCharacterAnimTickOptionToUse");
//(sizeof(DFBaseCharacter_GetCharacterAnimTickOptionToUse) == 0x000002, "Wrong size on DFBaseCharacter_GetCharacterAnimTickOptionToUse");
//(offsetof(DFBaseCharacter_GetCharacterAnimTickOptionToUse, bVisibleMesh) == 0x000000, "Member 'DFBaseCharacter_GetCharacterAnimTickOptionToUse::bVisibleMesh' has a wrong offset!");
//(offsetof(DFBaseCharacter_GetCharacterAnimTickOptionToUse, ReturnValue) == 0x000001, "Member 'DFBaseCharacter_GetCharacterAnimTickOptionToUse::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetCharacterDeathMontageToUse
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_GetCharacterDeathMontageToUse final 
{
public:
	class UAnimMontage*                           OutCharDeathMontage;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D33[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_GetCharacterDeathMontageToUse) == 0x000008, "Wrong alignment on DFBaseCharacter_GetCharacterDeathMontageToUse");
//(sizeof(DFBaseCharacter_GetCharacterDeathMontageToUse) == 0x000010, "Wrong size on DFBaseCharacter_GetCharacterDeathMontageToUse");
//(offsetof(DFBaseCharacter_GetCharacterDeathMontageToUse, OutCharDeathMontage) == 0x000000, "Member 'DFBaseCharacter_GetCharacterDeathMontageToUse::OutCharDeathMontage' has a wrong offset!");
//(offsetof(DFBaseCharacter_GetCharacterDeathMontageToUse, ReturnValue) == 0x000008, "Member 'DFBaseCharacter_GetCharacterDeathMontageToUse::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetCharacterMeshToUse
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_GetCharacterMeshToUse final 
{
public:
	bool                                          bIgnoreLocalControlOnServer;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D34[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GetCharacterMeshToUse) == 0x000008, "Wrong alignment on DFBaseCharacter_GetCharacterMeshToUse");
//(sizeof(DFBaseCharacter_GetCharacterMeshToUse) == 0x000010, "Wrong size on DFBaseCharacter_GetCharacterMeshToUse");
//(offsetof(DFBaseCharacter_GetCharacterMeshToUse, bIgnoreLocalControlOnServer) == 0x000000, "Member 'DFBaseCharacter_GetCharacterMeshToUse::bIgnoreLocalControlOnServer' has a wrong offset!");
//(offsetof(DFBaseCharacter_GetCharacterMeshToUse, ReturnValue) == 0x000008, "Member 'DFBaseCharacter_GetCharacterMeshToUse::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetDamageMultiplierByBoneName
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_GetDamageMultiplierByBoneName final 
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageMultiplier;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D35[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_GetDamageMultiplierByBoneName) == 0x000004, "Wrong alignment on DFBaseCharacter_GetDamageMultiplierByBoneName");
//(sizeof(DFBaseCharacter_GetDamageMultiplierByBoneName) == 0x000010, "Wrong size on DFBaseCharacter_GetDamageMultiplierByBoneName");
//(offsetof(DFBaseCharacter_GetDamageMultiplierByBoneName, BoneName) == 0x000000, "Member 'DFBaseCharacter_GetDamageMultiplierByBoneName::BoneName' has a wrong offset!");
//(offsetof(DFBaseCharacter_GetDamageMultiplierByBoneName, DamageMultiplier) == 0x000008, "Member 'DFBaseCharacter_GetDamageMultiplierByBoneName::DamageMultiplier' has a wrong offset!");
//(offsetof(DFBaseCharacter_GetDamageMultiplierByBoneName, ReturnValue) == 0x00000C, "Member 'DFBaseCharacter_GetDamageMultiplierByBoneName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetEquippedItem
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_GetEquippedItem final 
{
public:
	class ADFBaseItem*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GetEquippedItem) == 0x000008, "Wrong alignment on DFBaseCharacter_GetEquippedItem");
//(sizeof(DFBaseCharacter_GetEquippedItem) == 0x000008, "Wrong size on DFBaseCharacter_GetEquippedItem");
//(offsetof(DFBaseCharacter_GetEquippedItem, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_GetEquippedItem::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetInventory
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_GetInventory final 
{
public:
	class UDFInventoryComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GetInventory) == 0x000008, "Wrong alignment on DFBaseCharacter_GetInventory");
//(sizeof(DFBaseCharacter_GetInventory) == 0x000008, "Wrong size on DFBaseCharacter_GetInventory");
//(offsetof(DFBaseCharacter_GetInventory, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_GetInventory::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetItemAttachPoint
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_GetItemAttachPoint final 
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GetItemAttachPoint) == 0x000004, "Wrong alignment on DFBaseCharacter_GetItemAttachPoint");
//(sizeof(DFBaseCharacter_GetItemAttachPoint) == 0x000008, "Wrong size on DFBaseCharacter_GetItemAttachPoint");
//(offsetof(DFBaseCharacter_GetItemAttachPoint, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_GetItemAttachPoint::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetItemEnabledMode
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_GetItemEnabledMode final 
{
public:
	EDFItemEnabledMode                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GetItemEnabledMode) == 0x000001, "Wrong alignment on DFBaseCharacter_GetItemEnabledMode");
//(sizeof(DFBaseCharacter_GetItemEnabledMode) == 0x000001, "Wrong size on DFBaseCharacter_GetItemEnabledMode");
//(offsetof(DFBaseCharacter_GetItemEnabledMode, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_GetItemEnabledMode::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetMontageToUseFromPerspectiveAnimPair
// 0x0018 (0x0018 - 0x0000)
struct DFBaseCharacter_GetMontageToUseFromPerspectiveAnimPair final 
{
public:
	struct FPerspectiveAnim                       AnimationPair;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GetMontageToUseFromPerspectiveAnimPair) == 0x000008, "Wrong alignment on DFBaseCharacter_GetMontageToUseFromPerspectiveAnimPair");
//(sizeof(DFBaseCharacter_GetMontageToUseFromPerspectiveAnimPair) == 0x000018, "Wrong size on DFBaseCharacter_GetMontageToUseFromPerspectiveAnimPair");
//(offsetof(DFBaseCharacter_GetMontageToUseFromPerspectiveAnimPair, AnimationPair) == 0x000000, "Member 'DFBaseCharacter_GetMontageToUseFromPerspectiveAnimPair::AnimationPair' has a wrong offset!");
//(offsetof(DFBaseCharacter_GetMontageToUseFromPerspectiveAnimPair, ReturnValue) == 0x000010, "Member 'DFBaseCharacter_GetMontageToUseFromPerspectiveAnimPair::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.GetRelevantEquippedItem
// 0x0008 (0x0008 - 0x0000)
struct DFBaseCharacter_GetRelevantEquippedItem final 
{
public:
	class ADFBaseItem*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_GetRelevantEquippedItem) == 0x000008, "Wrong alignment on DFBaseCharacter_GetRelevantEquippedItem");
//(sizeof(DFBaseCharacter_GetRelevantEquippedItem) == 0x000008, "Wrong size on DFBaseCharacter_GetRelevantEquippedItem");
//(offsetof(DFBaseCharacter_GetRelevantEquippedItem, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_GetRelevantEquippedItem::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_IsAlive final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_IsAlive) == 0x000001, "Wrong alignment on DFBaseCharacter_IsAlive");
//(sizeof(DFBaseCharacter_IsAlive) == 0x000001, "Wrong size on DFBaseCharacter_IsAlive");
//(offsetof(DFBaseCharacter_IsAlive, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_IsAlive::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_IsEquipped final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_IsEquipped) == 0x000001, "Wrong alignment on DFBaseCharacter_IsEquipped");
//(sizeof(DFBaseCharacter_IsEquipped) == 0x000001, "Wrong size on DFBaseCharacter_IsEquipped");
//(offsetof(DFBaseCharacter_IsEquipped, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_IsEquipped::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.IsFiring
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_IsFiring final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_IsFiring) == 0x000001, "Wrong alignment on DFBaseCharacter_IsFiring");
//(sizeof(DFBaseCharacter_IsFiring) == 0x000001, "Wrong size on DFBaseCharacter_IsFiring");
//(offsetof(DFBaseCharacter_IsFiring, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_IsFiring::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.IsLeaning
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_IsLeaning final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_IsLeaning) == 0x000001, "Wrong alignment on DFBaseCharacter_IsLeaning");
//(sizeof(DFBaseCharacter_IsLeaning) == 0x000001, "Wrong size on DFBaseCharacter_IsLeaning");
//(offsetof(DFBaseCharacter_IsLeaning, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_IsLeaning::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.IsPerspectiveMesh
// 0x0010 (0x0010 - 0x0000)
struct DFBaseCharacter_IsPerspectiveMesh final 
{
public:
	class USkeletalMeshComponent*                 MeshCompToCheck;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D36[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseCharacter_IsPerspectiveMesh) == 0x000008, "Wrong alignment on DFBaseCharacter_IsPerspectiveMesh");
//(sizeof(DFBaseCharacter_IsPerspectiveMesh) == 0x000010, "Wrong size on DFBaseCharacter_IsPerspectiveMesh");
//(offsetof(DFBaseCharacter_IsPerspectiveMesh, MeshCompToCheck) == 0x000000, "Member 'DFBaseCharacter_IsPerspectiveMesh::MeshCompToCheck' has a wrong offset!");
//(offsetof(DFBaseCharacter_IsPerspectiveMesh, ReturnValue) == 0x000008, "Member 'DFBaseCharacter_IsPerspectiveMesh::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.IsPlayer
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_IsPlayer final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_IsPlayer) == 0x000001, "Wrong alignment on DFBaseCharacter_IsPlayer");
//(sizeof(DFBaseCharacter_IsPlayer) == 0x000001, "Wrong size on DFBaseCharacter_IsPlayer");
//(offsetof(DFBaseCharacter_IsPlayer, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_IsPlayer::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseCharacter.IsPrefiring
// 0x0001 (0x0001 - 0x0000)
struct DFBaseCharacter_IsPrefiring final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseCharacter_IsPrefiring) == 0x000001, "Wrong alignment on DFBaseCharacter_IsPrefiring");
//(sizeof(DFBaseCharacter_IsPrefiring) == 0x000001, "Wrong size on DFBaseCharacter_IsPrefiring");
//(offsetof(DFBaseCharacter_IsPrefiring, ReturnValue) == 0x000000, "Member 'DFBaseCharacter_IsPrefiring::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.AddBot
// 0x0020 (0x0020 - 0x0000)
struct DFBaseGameMode_AddBot final 
{
public:
	uint8                                         PlayerTeamID;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3B[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_AddBot) == 0x000008, "Wrong alignment on DFBaseGameMode_AddBot");
//(sizeof(DFBaseGameMode_AddBot) == 0x000020, "Wrong size on DFBaseGameMode_AddBot");
//(offsetof(DFBaseGameMode_AddBot, PlayerTeamID) == 0x000000, "Member 'DFBaseGameMode_AddBot::PlayerTeamID' has a wrong offset!");
//(offsetof(DFBaseGameMode_AddBot, PlayerName) == 0x000008, "Member 'DFBaseGameMode_AddBot::PlayerName' has a wrong offset!");
//(offsetof(DFBaseGameMode_AddBot, ReturnValue) == 0x000018, "Member 'DFBaseGameMode_AddBot::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.AddBots
// 0x0004 (0x0004 - 0x0000)
struct DFBaseGameMode_AddBots final 
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_AddBots) == 0x000004, "Wrong alignment on DFBaseGameMode_AddBots");
//(sizeof(DFBaseGameMode_AddBots) == 0x000004, "Wrong size on DFBaseGameMode_AddBots");
//(offsetof(DFBaseGameMode_AddBots, Num) == 0x000000, "Member 'DFBaseGameMode_AddBots::Num' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.AddNamedBot
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGameMode_AddNamedBot final 
{
public:
	class FString                                 BotName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_AddNamedBot) == 0x000008, "Wrong alignment on DFBaseGameMode_AddNamedBot");
//(sizeof(DFBaseGameMode_AddNamedBot) == 0x000010, "Wrong size on DFBaseGameMode_AddNamedBot");
//(offsetof(DFBaseGameMode_AddNamedBot, BotName) == 0x000000, "Member 'DFBaseGameMode_AddNamedBot::BotName' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.AddTeamBots
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGameMode_AddTeamBots final 
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3C[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_AddTeamBots) == 0x000004, "Wrong alignment on DFBaseGameMode_AddTeamBots");
//(sizeof(DFBaseGameMode_AddTeamBots) == 0x000008, "Wrong size on DFBaseGameMode_AddTeamBots");
//(offsetof(DFBaseGameMode_AddTeamBots, TeamId) == 0x000000, "Member 'DFBaseGameMode_AddTeamBots::TeamId' has a wrong offset!");
//(offsetof(DFBaseGameMode_AddTeamBots, Num) == 0x000004, "Member 'DFBaseGameMode_AddTeamBots::Num' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.AssignTeam
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGameMode_AssignTeam final 
{
public:
	class AController*                            ForController;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AssignedTeam;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3D[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_AssignTeam) == 0x000008, "Wrong alignment on DFBaseGameMode_AssignTeam");
//(sizeof(DFBaseGameMode_AssignTeam) == 0x000010, "Wrong size on DFBaseGameMode_AssignTeam");
//(offsetof(DFBaseGameMode_AssignTeam, ForController) == 0x000000, "Member 'DFBaseGameMode_AssignTeam::ForController' has a wrong offset!");
//(offsetof(DFBaseGameMode_AssignTeam, AssignedTeam) == 0x000008, "Member 'DFBaseGameMode_AssignTeam::AssignedTeam' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.BanPlayerById
// 0x0028 (0x0028 - 0x0000)
struct DFBaseGameMode_BanPlayerById final 
{
public:
	int32                                         BannedPlayerId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3E[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BanReason;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         BanDuration;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3F[0x3];                                      // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_BanPlayerById) == 0x000008, "Wrong alignment on DFBaseGameMode_BanPlayerById");
//(sizeof(DFBaseGameMode_BanPlayerById) == 0x000028, "Wrong size on DFBaseGameMode_BanPlayerById");
//(offsetof(DFBaseGameMode_BanPlayerById, BannedPlayerId) == 0x000000, "Member 'DFBaseGameMode_BanPlayerById::BannedPlayerId' has a wrong offset!");
//(offsetof(DFBaseGameMode_BanPlayerById, BanReason) == 0x000008, "Member 'DFBaseGameMode_BanPlayerById::BanReason' has a wrong offset!");
//(offsetof(DFBaseGameMode_BanPlayerById, BanDuration) == 0x000020, "Member 'DFBaseGameMode_BanPlayerById::BanDuration' has a wrong offset!");
//(offsetof(DFBaseGameMode_BanPlayerById, ReturnValue) == 0x000024, "Member 'DFBaseGameMode_BanPlayerById::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.BanPlayerByName
// 0x0030 (0x0030 - 0x0000)
struct DFBaseGameMode_BanPlayerByName final 
{
public:
	class FString                                 BannedPlayerName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BanReason;                                         // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         BanDuration;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D40[0x3];                                      // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_BanPlayerByName) == 0x000008, "Wrong alignment on DFBaseGameMode_BanPlayerByName");
//(sizeof(DFBaseGameMode_BanPlayerByName) == 0x000030, "Wrong size on DFBaseGameMode_BanPlayerByName");
//(offsetof(DFBaseGameMode_BanPlayerByName, BannedPlayerName) == 0x000000, "Member 'DFBaseGameMode_BanPlayerByName::BannedPlayerName' has a wrong offset!");
//(offsetof(DFBaseGameMode_BanPlayerByName, BanReason) == 0x000010, "Member 'DFBaseGameMode_BanPlayerByName::BanReason' has a wrong offset!");
//(offsetof(DFBaseGameMode_BanPlayerByName, BanDuration) == 0x000028, "Member 'DFBaseGameMode_BanPlayerByName::BanDuration' has a wrong offset!");
//(offsetof(DFBaseGameMode_BanPlayerByName, ReturnValue) == 0x00002C, "Member 'DFBaseGameMode_BanPlayerByName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.CheckRulesetWinConditions
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGameMode_CheckRulesetWinConditions final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_CheckRulesetWinConditions) == 0x000001, "Wrong alignment on DFBaseGameMode_CheckRulesetWinConditions");
//(sizeof(DFBaseGameMode_CheckRulesetWinConditions) == 0x000001, "Wrong size on DFBaseGameMode_CheckRulesetWinConditions");
//(offsetof(DFBaseGameMode_CheckRulesetWinConditions, ReturnValue) == 0x000000, "Member 'DFBaseGameMode_CheckRulesetWinConditions::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.CheckWinConditions
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGameMode_CheckWinConditions final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_CheckWinConditions) == 0x000001, "Wrong alignment on DFBaseGameMode_CheckWinConditions");
//(sizeof(DFBaseGameMode_CheckWinConditions) == 0x000001, "Wrong size on DFBaseGameMode_CheckWinConditions");
//(offsetof(DFBaseGameMode_CheckWinConditions, ReturnValue) == 0x000000, "Member 'DFBaseGameMode_CheckWinConditions::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.ChooseSpawnPointFromPlayerStart
// 0x0070 (0x0070 - 0x0000)
struct DFBaseGameMode_ChooseSpawnPointFromPlayerStart final 
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 StartSpot;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpawnPointDef                         OutChosenSpawnPoint;                               // 0x0010(0x0050)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            OutCollisionHandlingMethod;                        // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D41[0xE];                                      // 0x0062(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_ChooseSpawnPointFromPlayerStart) == 0x000010, "Wrong alignment on DFBaseGameMode_ChooseSpawnPointFromPlayerStart");
//(sizeof(DFBaseGameMode_ChooseSpawnPointFromPlayerStart) == 0x000070, "Wrong size on DFBaseGameMode_ChooseSpawnPointFromPlayerStart");
//(offsetof(DFBaseGameMode_ChooseSpawnPointFromPlayerStart, Player) == 0x000000, "Member 'DFBaseGameMode_ChooseSpawnPointFromPlayerStart::Player' has a wrong offset!");
//(offsetof(DFBaseGameMode_ChooseSpawnPointFromPlayerStart, StartSpot) == 0x000008, "Member 'DFBaseGameMode_ChooseSpawnPointFromPlayerStart::StartSpot' has a wrong offset!");
//(offsetof(DFBaseGameMode_ChooseSpawnPointFromPlayerStart, OutChosenSpawnPoint) == 0x000010, "Member 'DFBaseGameMode_ChooseSpawnPointFromPlayerStart::OutChosenSpawnPoint' has a wrong offset!");
//(offsetof(DFBaseGameMode_ChooseSpawnPointFromPlayerStart, OutCollisionHandlingMethod) == 0x000060, "Member 'DFBaseGameMode_ChooseSpawnPointFromPlayerStart::OutCollisionHandlingMethod' has a wrong offset!");
//(offsetof(DFBaseGameMode_ChooseSpawnPointFromPlayerStart, ReturnValue) == 0x000061, "Member 'DFBaseGameMode_ChooseSpawnPointFromPlayerStart::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.CreateTeam
// 0x0018 (0x0018 - 0x0000)
struct DFBaseGameMode_CreateTeam final 
{
public:
	class UDFTeamDefinition*                      NewTeamDef;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewTeamIdToUse;                                    // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D42[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADFTeamState*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_CreateTeam) == 0x000008, "Wrong alignment on DFBaseGameMode_CreateTeam");
//(sizeof(DFBaseGameMode_CreateTeam) == 0x000018, "Wrong size on DFBaseGameMode_CreateTeam");
//(offsetof(DFBaseGameMode_CreateTeam, NewTeamDef) == 0x000000, "Member 'DFBaseGameMode_CreateTeam::NewTeamDef' has a wrong offset!");
//(offsetof(DFBaseGameMode_CreateTeam, NewTeamIdToUse) == 0x000008, "Member 'DFBaseGameMode_CreateTeam::NewTeamIdToUse' has a wrong offset!");
//(offsetof(DFBaseGameMode_CreateTeam, ReturnValue) == 0x000010, "Member 'DFBaseGameMode_CreateTeam::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.FindPlayerStartTransform
// 0x0060 (0x0060 - 0x0000)
struct DFBaseGameMode_FindPlayerStartTransform final 
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D43[0x8];                                      // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutFoundSpawnTransform;                            // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 IncomingName;                                      // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D44[0xF];                                      // 0x0051(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_FindPlayerStartTransform) == 0x000010, "Wrong alignment on DFBaseGameMode_FindPlayerStartTransform");
//(sizeof(DFBaseGameMode_FindPlayerStartTransform) == 0x000060, "Wrong size on DFBaseGameMode_FindPlayerStartTransform");
//(offsetof(DFBaseGameMode_FindPlayerStartTransform, Player) == 0x000000, "Member 'DFBaseGameMode_FindPlayerStartTransform::Player' has a wrong offset!");
//(offsetof(DFBaseGameMode_FindPlayerStartTransform, OutFoundSpawnTransform) == 0x000010, "Member 'DFBaseGameMode_FindPlayerStartTransform::OutFoundSpawnTransform' has a wrong offset!");
//(offsetof(DFBaseGameMode_FindPlayerStartTransform, IncomingName) == 0x000040, "Member 'DFBaseGameMode_FindPlayerStartTransform::IncomingName' has a wrong offset!");
//(offsetof(DFBaseGameMode_FindPlayerStartTransform, ReturnValue) == 0x000050, "Member 'DFBaseGameMode_FindPlayerStartTransform::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.ForceTeam
// 0x0018 (0x0018 - 0x0000)
struct DFBaseGameMode_ForceTeam final 
{
public:
	class FString                                 SwitchedPlayerName;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamIdToAssign;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D45[0x6];                                      // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_ForceTeam) == 0x000008, "Wrong alignment on DFBaseGameMode_ForceTeam");
//(sizeof(DFBaseGameMode_ForceTeam) == 0x000018, "Wrong size on DFBaseGameMode_ForceTeam");
//(offsetof(DFBaseGameMode_ForceTeam, SwitchedPlayerName) == 0x000000, "Member 'DFBaseGameMode_ForceTeam::SwitchedPlayerName' has a wrong offset!");
//(offsetof(DFBaseGameMode_ForceTeam, TeamIdToAssign) == 0x000010, "Member 'DFBaseGameMode_ForceTeam::TeamIdToAssign' has a wrong offset!");
//(offsetof(DFBaseGameMode_ForceTeam, ReturnValue) == 0x000011, "Member 'DFBaseGameMode_ForceTeam::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.ForceTeamId
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGameMode_ForceTeamId final 
{
public:
	int32                                         SwitchedPlayerId;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamIdToAssign;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D46[0x2];                                      // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_ForceTeamId) == 0x000004, "Wrong alignment on DFBaseGameMode_ForceTeamId");
//(sizeof(DFBaseGameMode_ForceTeamId) == 0x000008, "Wrong size on DFBaseGameMode_ForceTeamId");
//(offsetof(DFBaseGameMode_ForceTeamId, SwitchedPlayerId) == 0x000000, "Member 'DFBaseGameMode_ForceTeamId::SwitchedPlayerId' has a wrong offset!");
//(offsetof(DFBaseGameMode_ForceTeamId, TeamIdToAssign) == 0x000004, "Member 'DFBaseGameMode_ForceTeamId::TeamIdToAssign' has a wrong offset!");
//(offsetof(DFBaseGameMode_ForceTeamId, ReturnValue) == 0x000005, "Member 'DFBaseGameMode_ForceTeamId::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.GetTotalNumPlayers
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGameMode_GetTotalNumPlayers final 
{
public:
	bool                                          bIncludeTravellingPlayers;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D47[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_GetTotalNumPlayers) == 0x000004, "Wrong alignment on DFBaseGameMode_GetTotalNumPlayers");
//(sizeof(DFBaseGameMode_GetTotalNumPlayers) == 0x000008, "Wrong size on DFBaseGameMode_GetTotalNumPlayers");
//(offsetof(DFBaseGameMode_GetTotalNumPlayers, bIncludeTravellingPlayers) == 0x000000, "Member 'DFBaseGameMode_GetTotalNumPlayers::bIncludeTravellingPlayers' has a wrong offset!");
//(offsetof(DFBaseGameMode_GetTotalNumPlayers, ReturnValue) == 0x000004, "Member 'DFBaseGameMode_GetTotalNumPlayers::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.KickPlayerById
// 0x0028 (0x0028 - 0x0000)
struct DFBaseGameMode_KickPlayerById final 
{
public:
	int32                                         KickedPlayerId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D48[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   KickReason;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D49[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_KickPlayerById) == 0x000008, "Wrong alignment on DFBaseGameMode_KickPlayerById");
//(sizeof(DFBaseGameMode_KickPlayerById) == 0x000028, "Wrong size on DFBaseGameMode_KickPlayerById");
//(offsetof(DFBaseGameMode_KickPlayerById, KickedPlayerId) == 0x000000, "Member 'DFBaseGameMode_KickPlayerById::KickedPlayerId' has a wrong offset!");
//(offsetof(DFBaseGameMode_KickPlayerById, KickReason) == 0x000008, "Member 'DFBaseGameMode_KickPlayerById::KickReason' has a wrong offset!");
//(offsetof(DFBaseGameMode_KickPlayerById, ReturnValue) == 0x000020, "Member 'DFBaseGameMode_KickPlayerById::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.KickPlayerByName
// 0x0030 (0x0030 - 0x0000)
struct DFBaseGameMode_KickPlayerByName final 
{
public:
	class FString                                 KickedPlayerName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KickReason;                                        // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4A[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_KickPlayerByName) == 0x000008, "Wrong alignment on DFBaseGameMode_KickPlayerByName");
//(sizeof(DFBaseGameMode_KickPlayerByName) == 0x000030, "Wrong size on DFBaseGameMode_KickPlayerByName");
//(offsetof(DFBaseGameMode_KickPlayerByName, KickedPlayerName) == 0x000000, "Member 'DFBaseGameMode_KickPlayerByName::KickedPlayerName' has a wrong offset!");
//(offsetof(DFBaseGameMode_KickPlayerByName, KickReason) == 0x000010, "Member 'DFBaseGameMode_KickPlayerByName::KickReason' has a wrong offset!");
//(offsetof(DFBaseGameMode_KickPlayerByName, ReturnValue) == 0x000028, "Member 'DFBaseGameMode_KickPlayerByName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.PlayerBotCanRestart
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGameMode_PlayerBotCanRestart final 
{
public:
	class AAIController*                          Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4B[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_PlayerBotCanRestart) == 0x000008, "Wrong alignment on DFBaseGameMode_PlayerBotCanRestart");
//(sizeof(DFBaseGameMode_PlayerBotCanRestart) == 0x000010, "Wrong size on DFBaseGameMode_PlayerBotCanRestart");
//(offsetof(DFBaseGameMode_PlayerBotCanRestart, Player) == 0x000000, "Member 'DFBaseGameMode_PlayerBotCanRestart::Player' has a wrong offset!");
//(offsetof(DFBaseGameMode_PlayerBotCanRestart, ReturnValue) == 0x000008, "Member 'DFBaseGameMode_PlayerBotCanRestart::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.PlayerCanRestartGeneric
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGameMode_PlayerCanRestartGeneric final 
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4C[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_PlayerCanRestartGeneric) == 0x000008, "Wrong alignment on DFBaseGameMode_PlayerCanRestartGeneric");
//(sizeof(DFBaseGameMode_PlayerCanRestartGeneric) == 0x000010, "Wrong size on DFBaseGameMode_PlayerCanRestartGeneric");
//(offsetof(DFBaseGameMode_PlayerCanRestartGeneric, Player) == 0x000000, "Member 'DFBaseGameMode_PlayerCanRestartGeneric::Player' has a wrong offset!");
//(offsetof(DFBaseGameMode_PlayerCanRestartGeneric, ReturnValue) == 0x000008, "Member 'DFBaseGameMode_PlayerCanRestartGeneric::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.ReceiveOnSwapAIControllers
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGameMode_ReceiveOnSwapAIControllers final 
{
public:
	class AAIController*                          OldAIC;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIController*                          NewAIC;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_ReceiveOnSwapAIControllers) == 0x000008, "Wrong alignment on DFBaseGameMode_ReceiveOnSwapAIControllers");
//(sizeof(DFBaseGameMode_ReceiveOnSwapAIControllers) == 0x000010, "Wrong size on DFBaseGameMode_ReceiveOnSwapAIControllers");
//(offsetof(DFBaseGameMode_ReceiveOnSwapAIControllers, OldAIC) == 0x000000, "Member 'DFBaseGameMode_ReceiveOnSwapAIControllers::OldAIC' has a wrong offset!");
//(offsetof(DFBaseGameMode_ReceiveOnSwapAIControllers, NewAIC) == 0x000008, "Member 'DFBaseGameMode_ReceiveOnSwapAIControllers::NewAIC' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.RegisterSignificantActor
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGameMode_RegisterSignificantActor final 
{
public:
	class AActor*                                 ActorToRegister;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_RegisterSignificantActor) == 0x000008, "Wrong alignment on DFBaseGameMode_RegisterSignificantActor");
//(sizeof(DFBaseGameMode_RegisterSignificantActor) == 0x000008, "Wrong size on DFBaseGameMode_RegisterSignificantActor");
//(offsetof(DFBaseGameMode_RegisterSignificantActor, ActorToRegister) == 0x000000, "Member 'DFBaseGameMode_RegisterSignificantActor::ActorToRegister' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.RemoveBot
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGameMode_RemoveBot final 
{
public:
	class APlayerState*                           BotPS;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4D[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_RemoveBot) == 0x000008, "Wrong alignment on DFBaseGameMode_RemoveBot");
//(sizeof(DFBaseGameMode_RemoveBot) == 0x000010, "Wrong size on DFBaseGameMode_RemoveBot");
//(offsetof(DFBaseGameMode_RemoveBot, BotPS) == 0x000000, "Member 'DFBaseGameMode_RemoveBot::BotPS' has a wrong offset!");
//(offsetof(DFBaseGameMode_RemoveBot, ReturnValue) == 0x000008, "Member 'DFBaseGameMode_RemoveBot::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.RemoveBotByName
// 0x0018 (0x0018 - 0x0000)
struct DFBaseGameMode_RemoveBotByName final 
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4E[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_RemoveBotByName) == 0x000008, "Wrong alignment on DFBaseGameMode_RemoveBotByName");
//(sizeof(DFBaseGameMode_RemoveBotByName) == 0x000018, "Wrong size on DFBaseGameMode_RemoveBotByName");
//(offsetof(DFBaseGameMode_RemoveBotByName, PlayerName) == 0x000000, "Member 'DFBaseGameMode_RemoveBotByName::PlayerName' has a wrong offset!");
//(offsetof(DFBaseGameMode_RemoveBotByName, ReturnValue) == 0x000010, "Member 'DFBaseGameMode_RemoveBotByName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.RemovePlayerByAge
// 0x0003 (0x0003 - 0x0000)
struct DFBaseGameMode_RemovePlayerByAge final 
{
public:
	bool                                          bNewest;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeBots;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeHumans;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_RemovePlayerByAge) == 0x000001, "Wrong alignment on DFBaseGameMode_RemovePlayerByAge");
//(sizeof(DFBaseGameMode_RemovePlayerByAge) == 0x000003, "Wrong size on DFBaseGameMode_RemovePlayerByAge");
//(offsetof(DFBaseGameMode_RemovePlayerByAge, bNewest) == 0x000000, "Member 'DFBaseGameMode_RemovePlayerByAge::bNewest' has a wrong offset!");
//(offsetof(DFBaseGameMode_RemovePlayerByAge, bExcludeBots) == 0x000001, "Member 'DFBaseGameMode_RemovePlayerByAge::bExcludeBots' has a wrong offset!");
//(offsetof(DFBaseGameMode_RemovePlayerByAge, bExcludeHumans) == 0x000002, "Member 'DFBaseGameMode_RemovePlayerByAge::bExcludeHumans' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.RemoveTeamBots
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGameMode_RemoveTeamBots final 
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4F[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Num;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_RemoveTeamBots) == 0x000004, "Wrong alignment on DFBaseGameMode_RemoveTeamBots");
//(sizeof(DFBaseGameMode_RemoveTeamBots) == 0x000008, "Wrong size on DFBaseGameMode_RemoveTeamBots");
//(offsetof(DFBaseGameMode_RemoveTeamBots, TeamId) == 0x000000, "Member 'DFBaseGameMode_RemoveTeamBots::TeamId' has a wrong offset!");
//(offsetof(DFBaseGameMode_RemoveTeamBots, Num) == 0x000004, "Member 'DFBaseGameMode_RemoveTeamBots::Num' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.SignificantActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGameMode_SignificantActorEndPlay final 
{
public:
	class AActor*                                 RemovedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D50[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_SignificantActorEndPlay) == 0x000008, "Wrong alignment on DFBaseGameMode_SignificantActorEndPlay");
//(sizeof(DFBaseGameMode_SignificantActorEndPlay) == 0x000010, "Wrong size on DFBaseGameMode_SignificantActorEndPlay");
//(offsetof(DFBaseGameMode_SignificantActorEndPlay, RemovedActor) == 0x000000, "Member 'DFBaseGameMode_SignificantActorEndPlay::RemovedActor' has a wrong offset!");
//(offsetof(DFBaseGameMode_SignificantActorEndPlay, EndPlayReason) == 0x000008, "Member 'DFBaseGameMode_SignificantActorEndPlay::EndPlayReason' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.UnregisterSignificantActor
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGameMode_UnregisterSignificantActor final 
{
public:
	class AActor*                                 ActorToRemove;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_UnregisterSignificantActor) == 0x000008, "Wrong alignment on DFBaseGameMode_UnregisterSignificantActor");
//(sizeof(DFBaseGameMode_UnregisterSignificantActor) == 0x000008, "Wrong size on DFBaseGameMode_UnregisterSignificantActor");
//(offsetof(DFBaseGameMode_UnregisterSignificantActor, ActorToRemove) == 0x000000, "Member 'DFBaseGameMode_UnregisterSignificantActor::ActorToRemove' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.UpdatePlayerGameplayMuteStates
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGameMode_UpdatePlayerGameplayMuteStates final 
{
public:
	class ADFBasePlayerController*                ForPlayerController;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_UpdatePlayerGameplayMuteStates) == 0x000008, "Wrong alignment on DFBaseGameMode_UpdatePlayerGameplayMuteStates");
//(sizeof(DFBaseGameMode_UpdatePlayerGameplayMuteStates) == 0x000008, "Wrong size on DFBaseGameMode_UpdatePlayerGameplayMuteStates");
//(offsetof(DFBaseGameMode_UpdatePlayerGameplayMuteStates, ForPlayerController) == 0x000000, "Member 'DFBaseGameMode_UpdatePlayerGameplayMuteStates::ForPlayerController' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.CanAddRuleset
// 0x0020 (0x0020 - 0x0000)
struct DFBaseGameMode_CanAddRuleset final 
{
public:
	TSubclassOf<class UDFGameRulesetBase>         RulesetClassToAdd;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RulesetDenialReason;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D51[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_CanAddRuleset) == 0x000008, "Wrong alignment on DFBaseGameMode_CanAddRuleset");
//(sizeof(DFBaseGameMode_CanAddRuleset) == 0x000020, "Wrong size on DFBaseGameMode_CanAddRuleset");
//(offsetof(DFBaseGameMode_CanAddRuleset, RulesetClassToAdd) == 0x000000, "Member 'DFBaseGameMode_CanAddRuleset::RulesetClassToAdd' has a wrong offset!");
//(offsetof(DFBaseGameMode_CanAddRuleset, RulesetDenialReason) == 0x000008, "Member 'DFBaseGameMode_CanAddRuleset::RulesetDenialReason' has a wrong offset!");
//(offsetof(DFBaseGameMode_CanAddRuleset, ReturnValue) == 0x000018, "Member 'DFBaseGameMode_CanAddRuleset::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.CanDealDamage
// 0x0018 (0x0018 - 0x0000)
struct DFBaseGameMode_CanDealDamage final 
{
public:
	class ADFBasePlayerState*                     DamageInstigator;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBasePlayerState*                     DamagedPlayer;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D52[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_CanDealDamage) == 0x000008, "Wrong alignment on DFBaseGameMode_CanDealDamage");
//(sizeof(DFBaseGameMode_CanDealDamage) == 0x000018, "Wrong size on DFBaseGameMode_CanDealDamage");
//(offsetof(DFBaseGameMode_CanDealDamage, DamageInstigator) == 0x000000, "Member 'DFBaseGameMode_CanDealDamage::DamageInstigator' has a wrong offset!");
//(offsetof(DFBaseGameMode_CanDealDamage, DamagedPlayer) == 0x000008, "Member 'DFBaseGameMode_CanDealDamage::DamagedPlayer' has a wrong offset!");
//(offsetof(DFBaseGameMode_CanDealDamage, ReturnValue) == 0x000010, "Member 'DFBaseGameMode_CanDealDamage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.CanRegisterSignificantActor
// 0x0020 (0x0020 - 0x0000)
struct DFBaseGameMode_CanRegisterSignificantActor final 
{
public:
	class AActor*                                 ActorToRegister;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorDenialReason;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D53[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_CanRegisterSignificantActor) == 0x000008, "Wrong alignment on DFBaseGameMode_CanRegisterSignificantActor");
//(sizeof(DFBaseGameMode_CanRegisterSignificantActor) == 0x000020, "Wrong size on DFBaseGameMode_CanRegisterSignificantActor");
//(offsetof(DFBaseGameMode_CanRegisterSignificantActor, ActorToRegister) == 0x000000, "Member 'DFBaseGameMode_CanRegisterSignificantActor::ActorToRegister' has a wrong offset!");
//(offsetof(DFBaseGameMode_CanRegisterSignificantActor, ActorDenialReason) == 0x000008, "Member 'DFBaseGameMode_CanRegisterSignificantActor::ActorDenialReason' has a wrong offset!");
//(offsetof(DFBaseGameMode_CanRegisterSignificantActor, ReturnValue) == 0x000018, "Member 'DFBaseGameMode_CanRegisterSignificantActor::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.ChooseTeam
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGameMode_ChooseTeam final 
{
public:
	class ADFBasePlayerState*                     ForPlayerState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D54[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_ChooseTeam) == 0x000008, "Wrong alignment on DFBaseGameMode_ChooseTeam");
//(sizeof(DFBaseGameMode_ChooseTeam) == 0x000010, "Wrong size on DFBaseGameMode_ChooseTeam");
//(offsetof(DFBaseGameMode_ChooseTeam, ForPlayerState) == 0x000000, "Member 'DFBaseGameMode_ChooseTeam::ForPlayerState' has a wrong offset!");
//(offsetof(DFBaseGameMode_ChooseTeam, ReturnValue) == 0x000008, "Member 'DFBaseGameMode_ChooseTeam::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.GetAutoAssignHumanTeam
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGameMode_GetAutoAssignHumanTeam final 
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_GetAutoAssignHumanTeam) == 0x000001, "Wrong alignment on DFBaseGameMode_GetAutoAssignHumanTeam");
//(sizeof(DFBaseGameMode_GetAutoAssignHumanTeam) == 0x000001, "Wrong size on DFBaseGameMode_GetAutoAssignHumanTeam");
//(offsetof(DFBaseGameMode_GetAutoAssignHumanTeam, ReturnValue) == 0x000000, "Member 'DFBaseGameMode_GetAutoAssignHumanTeam::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.GetNextGameName
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGameMode_GetNextGameName final 
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_GetNextGameName) == 0x000008, "Wrong alignment on DFBaseGameMode_GetNextGameName");
//(sizeof(DFBaseGameMode_GetNextGameName) == 0x000010, "Wrong size on DFBaseGameMode_GetNextGameName");
//(offsetof(DFBaseGameMode_GetNextGameName, ReturnValue) == 0x000000, "Member 'DFBaseGameMode_GetNextGameName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.GetNextMapName
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGameMode_GetNextMapName final 
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_GetNextMapName) == 0x000008, "Wrong alignment on DFBaseGameMode_GetNextMapName");
//(sizeof(DFBaseGameMode_GetNextMapName) == 0x000010, "Wrong size on DFBaseGameMode_GetNextMapName");
//(offsetof(DFBaseGameMode_GetNextMapName, ReturnValue) == 0x000000, "Member 'DFBaseGameMode_GetNextMapName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.GetNumPlayersOnTeam
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGameMode_GetNumPlayersOnTeam final 
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerKind                                   PlayerType;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D55[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_GetNumPlayersOnTeam) == 0x000004, "Wrong alignment on DFBaseGameMode_GetNumPlayersOnTeam");
//(sizeof(DFBaseGameMode_GetNumPlayersOnTeam) == 0x000008, "Wrong size on DFBaseGameMode_GetNumPlayersOnTeam");
//(offsetof(DFBaseGameMode_GetNumPlayersOnTeam, TeamId) == 0x000000, "Member 'DFBaseGameMode_GetNumPlayersOnTeam::TeamId' has a wrong offset!");
//(offsetof(DFBaseGameMode_GetNumPlayersOnTeam, PlayerType) == 0x000001, "Member 'DFBaseGameMode_GetNumPlayersOnTeam::PlayerType' has a wrong offset!");
//(offsetof(DFBaseGameMode_GetNumPlayersOnTeam, ReturnValue) == 0x000004, "Member 'DFBaseGameMode_GetNumPlayersOnTeam::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.IsFriendlyFireEnabled
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGameMode_IsFriendlyFireEnabled final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_IsFriendlyFireEnabled) == 0x000001, "Wrong alignment on DFBaseGameMode_IsFriendlyFireEnabled");
//(sizeof(DFBaseGameMode_IsFriendlyFireEnabled) == 0x000001, "Wrong size on DFBaseGameMode_IsFriendlyFireEnabled");
//(offsetof(DFBaseGameMode_IsFriendlyFireEnabled, ReturnValue) == 0x000000, "Member 'DFBaseGameMode_IsFriendlyFireEnabled::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.IsHibernating
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGameMode_IsHibernating final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_IsHibernating) == 0x000001, "Wrong alignment on DFBaseGameMode_IsHibernating");
//(sizeof(DFBaseGameMode_IsHibernating) == 0x000001, "Wrong size on DFBaseGameMode_IsHibernating");
//(offsetof(DFBaseGameMode_IsHibernating, ReturnValue) == 0x000000, "Member 'DFBaseGameMode_IsHibernating::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.IsMatchWinner
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGameMode_IsMatchWinner final 
{
public:
	class ADFBasePlayerState*                     PlayerStateToCheck;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D56[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_IsMatchWinner) == 0x000008, "Wrong alignment on DFBaseGameMode_IsMatchWinner");
//(sizeof(DFBaseGameMode_IsMatchWinner) == 0x000010, "Wrong size on DFBaseGameMode_IsMatchWinner");
//(offsetof(DFBaseGameMode_IsMatchWinner, PlayerStateToCheck) == 0x000000, "Member 'DFBaseGameMode_IsMatchWinner::PlayerStateToCheck' has a wrong offset!");
//(offsetof(DFBaseGameMode_IsMatchWinner, ReturnValue) == 0x000008, "Member 'DFBaseGameMode_IsMatchWinner::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.IsValidTeamId
// 0x0002 (0x0002 - 0x0000)
struct DFBaseGameMode_IsValidTeamId final 
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_IsValidTeamId) == 0x000001, "Wrong alignment on DFBaseGameMode_IsValidTeamId");
//(sizeof(DFBaseGameMode_IsValidTeamId) == 0x000002, "Wrong size on DFBaseGameMode_IsValidTeamId");
//(offsetof(DFBaseGameMode_IsValidTeamId, TeamId) == 0x000000, "Member 'DFBaseGameMode_IsValidTeamId::TeamId' has a wrong offset!");
//(offsetof(DFBaseGameMode_IsValidTeamId, ReturnValue) == 0x000001, "Member 'DFBaseGameMode_IsValidTeamId::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.ModifyDamage
// 0x0038 (0x0038 - 0x0000)
struct DFBaseGameMode_ModifyDamage final 
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D57[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamagedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageEvent                           DamageEvent;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D58[0x4];                                      // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_ModifyDamage) == 0x000008, "Wrong alignment on DFBaseGameMode_ModifyDamage");
//(sizeof(DFBaseGameMode_ModifyDamage) == 0x000038, "Wrong size on DFBaseGameMode_ModifyDamage");
//(offsetof(DFBaseGameMode_ModifyDamage, Damage) == 0x000000, "Member 'DFBaseGameMode_ModifyDamage::Damage' has a wrong offset!");
//(offsetof(DFBaseGameMode_ModifyDamage, DamagedActor) == 0x000008, "Member 'DFBaseGameMode_ModifyDamage::DamagedActor' has a wrong offset!");
//(offsetof(DFBaseGameMode_ModifyDamage, DamageEvent) == 0x000010, "Member 'DFBaseGameMode_ModifyDamage::DamageEvent' has a wrong offset!");
//(offsetof(DFBaseGameMode_ModifyDamage, EventInstigator) == 0x000020, "Member 'DFBaseGameMode_ModifyDamage::EventInstigator' has a wrong offset!");
//(offsetof(DFBaseGameMode_ModifyDamage, DamageCauser) == 0x000028, "Member 'DFBaseGameMode_ModifyDamage::DamageCauser' has a wrong offset!");
//(offsetof(DFBaseGameMode_ModifyDamage, ReturnValue) == 0x000030, "Member 'DFBaseGameMode_ModifyDamage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.ShouldBotAutofill
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGameMode_ShouldBotAutofill final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_ShouldBotAutofill) == 0x000001, "Wrong alignment on DFBaseGameMode_ShouldBotAutofill");
//(sizeof(DFBaseGameMode_ShouldBotAutofill) == 0x000001, "Wrong size on DFBaseGameMode_ShouldBotAutofill");
//(offsetof(DFBaseGameMode_ShouldBotAutofill, ReturnValue) == 0x000000, "Member 'DFBaseGameMode_ShouldBotAutofill::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.ShouldGameplayMuteRemotePlayer
// 0x0018 (0x0018 - 0x0000)
struct DFBaseGameMode_ShouldGameplayMuteRemotePlayer final 
{
public:
	class ADFBasePlayerController*                ForPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBasePlayerController*                PlayerToCheck;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D59[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameMode_ShouldGameplayMuteRemotePlayer) == 0x000008, "Wrong alignment on DFBaseGameMode_ShouldGameplayMuteRemotePlayer");
//(sizeof(DFBaseGameMode_ShouldGameplayMuteRemotePlayer) == 0x000018, "Wrong size on DFBaseGameMode_ShouldGameplayMuteRemotePlayer");
//(offsetof(DFBaseGameMode_ShouldGameplayMuteRemotePlayer, ForPlayer) == 0x000000, "Member 'DFBaseGameMode_ShouldGameplayMuteRemotePlayer::ForPlayer' has a wrong offset!");
//(offsetof(DFBaseGameMode_ShouldGameplayMuteRemotePlayer, PlayerToCheck) == 0x000008, "Member 'DFBaseGameMode_ShouldGameplayMuteRemotePlayer::PlayerToCheck' has a wrong offset!");
//(offsetof(DFBaseGameMode_ShouldGameplayMuteRemotePlayer, ReturnValue) == 0x000010, "Member 'DFBaseGameMode_ShouldGameplayMuteRemotePlayer::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameMode.ShouldHibernate
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGameMode_ShouldHibernate final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameMode_ShouldHibernate) == 0x000001, "Wrong alignment on DFBaseGameMode_ShouldHibernate");
//(sizeof(DFBaseGameMode_ShouldHibernate) == 0x000001, "Wrong size on DFBaseGameMode_ShouldHibernate");
//(offsetof(DFBaseGameMode_ShouldHibernate, ReturnValue) == 0x000000, "Member 'DFBaseGameMode_ShouldHibernate::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFNetworkEventSubsystem.Get
// 0x0010 (0x0010 - 0x0000)
struct DFNetworkEventSubsystem_Get final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFNetworkEventSubsystem*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFNetworkEventSubsystem_Get) == 0x000008, "Wrong alignment on DFNetworkEventSubsystem_Get");
//(sizeof(DFNetworkEventSubsystem_Get) == 0x000010, "Wrong size on DFNetworkEventSubsystem_Get");
//(offsetof(DFNetworkEventSubsystem_Get, WorldContextObject) == 0x000000, "Member 'DFNetworkEventSubsystem_Get::WorldContextObject' has a wrong offset!");
//(offsetof(DFNetworkEventSubsystem_Get, ReturnValue) == 0x000008, "Member 'DFNetworkEventSubsystem_Get::ReturnValue' has a wrong offset!");

// DelegateFunction DonkehFramework.DFNetworkEventSubsystem.OnGameStateEventDynamic__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct DFNetworkEventSubsystem_OnGameStateEventDynamic__DelegateSignature final 
{
public:
	class AGameStateBase*                         GameState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFNetworkEventSubsystem_OnGameStateEventDynamic__DelegateSignature) == 0x000008, "Wrong alignment on DFNetworkEventSubsystem_OnGameStateEventDynamic__DelegateSignature");
//(sizeof(DFNetworkEventSubsystem_OnGameStateEventDynamic__DelegateSignature) == 0x000008, "Wrong size on DFNetworkEventSubsystem_OnGameStateEventDynamic__DelegateSignature");
//(offsetof(DFNetworkEventSubsystem_OnGameStateEventDynamic__DelegateSignature, GameState) == 0x000000, "Member 'DFNetworkEventSubsystem_OnGameStateEventDynamic__DelegateSignature::GameState' has a wrong offset!");

// Function DonkehFramework.DFBaseGameInstance.FindGames
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGameInstance_FindGames final 
{
public:
	ESessionSearchPresenceType                    SearchPresenceType;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameInstance_FindGames) == 0x000001, "Wrong alignment on DFBaseGameInstance_FindGames");
//(sizeof(DFBaseGameInstance_FindGames) == 0x000001, "Wrong size on DFBaseGameInstance_FindGames");
//(offsetof(DFBaseGameInstance_FindGames, SearchPresenceType) == 0x000000, "Member 'DFBaseGameInstance_FindGames::SearchPresenceType' has a wrong offset!");

// Function DonkehFramework.DFBaseGameInstance.HostGame
// 0x0038 (0x0038 - 0x0000)
struct DFBaseGameInstance_HostGame final 
{
public:
	class FString                                 TravelURL;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLANGame;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5D[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlayers;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HostName;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameInstance_HostGame) == 0x000008, "Wrong alignment on DFBaseGameInstance_HostGame");
//(sizeof(DFBaseGameInstance_HostGame) == 0x000038, "Wrong size on DFBaseGameInstance_HostGame");
//(offsetof(DFBaseGameInstance_HostGame, TravelURL) == 0x000000, "Member 'DFBaseGameInstance_HostGame::TravelURL' has a wrong offset!");
//(offsetof(DFBaseGameInstance_HostGame, bLANGame) == 0x000010, "Member 'DFBaseGameInstance_HostGame::bLANGame' has a wrong offset!");
//(offsetof(DFBaseGameInstance_HostGame, MaxPlayers) == 0x000014, "Member 'DFBaseGameInstance_HostGame::MaxPlayers' has a wrong offset!");
//(offsetof(DFBaseGameInstance_HostGame, HostName) == 0x000018, "Member 'DFBaseGameInstance_HostGame::HostName' has a wrong offset!");
//(offsetof(DFBaseGameInstance_HostGame, Password) == 0x000028, "Member 'DFBaseGameInstance_HostGame::Password' has a wrong offset!");

// Function DonkehFramework.DFBaseGameInstance.JoinGame
// 0x0018 (0x0018 - 0x0000)
struct DFBaseGameInstance_JoinGame final 
{
public:
	int32                                         SearchResultIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5E[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 JoinPassword;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameInstance_JoinGame) == 0x000008, "Wrong alignment on DFBaseGameInstance_JoinGame");
//(sizeof(DFBaseGameInstance_JoinGame) == 0x000018, "Wrong size on DFBaseGameInstance_JoinGame");
//(offsetof(DFBaseGameInstance_JoinGame, SearchResultIndex) == 0x000000, "Member 'DFBaseGameInstance_JoinGame::SearchResultIndex' has a wrong offset!");
//(offsetof(DFBaseGameInstance_JoinGame, JoinPassword) == 0x000008, "Member 'DFBaseGameInstance_JoinGame::JoinPassword' has a wrong offset!");

// Function DonkehFramework.DFBaseGameInstance.JoinGameByIP
// 0x0020 (0x0020 - 0x0000)
struct DFBaseGameInstance_JoinGameByIP final 
{
public:
	class FString                                 IPAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoinPassword;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameInstance_JoinGameByIP) == 0x000008, "Wrong alignment on DFBaseGameInstance_JoinGameByIP");
//(sizeof(DFBaseGameInstance_JoinGameByIP) == 0x000020, "Wrong size on DFBaseGameInstance_JoinGameByIP");
//(offsetof(DFBaseGameInstance_JoinGameByIP, IPAddress) == 0x000000, "Member 'DFBaseGameInstance_JoinGameByIP::IPAddress' has a wrong offset!");
//(offsetof(DFBaseGameInstance_JoinGameByIP, JoinPassword) == 0x000010, "Member 'DFBaseGameInstance_JoinGameByIP::JoinPassword' has a wrong offset!");

// Function DonkehFramework.DFBaseGameInstance.OnNetworkFailure
// 0x0028 (0x0028 - 0x0000)
struct DFBaseGameInstance_OnNetworkFailure final 
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetDriver*                             NetDriver;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetworkFailure                               FailureType;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5F[0x7];                                      // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameInstance_OnNetworkFailure) == 0x000008, "Wrong alignment on DFBaseGameInstance_OnNetworkFailure");
//(sizeof(DFBaseGameInstance_OnNetworkFailure) == 0x000028, "Wrong size on DFBaseGameInstance_OnNetworkFailure");
//(offsetof(DFBaseGameInstance_OnNetworkFailure, World) == 0x000000, "Member 'DFBaseGameInstance_OnNetworkFailure::World' has a wrong offset!");
//(offsetof(DFBaseGameInstance_OnNetworkFailure, NetDriver) == 0x000008, "Member 'DFBaseGameInstance_OnNetworkFailure::NetDriver' has a wrong offset!");
//(offsetof(DFBaseGameInstance_OnNetworkFailure, FailureType) == 0x000010, "Member 'DFBaseGameInstance_OnNetworkFailure::FailureType' has a wrong offset!");
//(offsetof(DFBaseGameInstance_OnNetworkFailure, ErrorString) == 0x000018, "Member 'DFBaseGameInstance_OnNetworkFailure::ErrorString' has a wrong offset!");

// Function DonkehFramework.DFBaseGameInstance.OnNetworkLagStateChanged
// 0x0018 (0x0018 - 0x0000)
struct DFBaseGameInstance_OnNetworkLagStateChanged final 
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetDriver*                             NetDriver;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetworkLagState                              LagType;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D60[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGameInstance_OnNetworkLagStateChanged) == 0x000008, "Wrong alignment on DFBaseGameInstance_OnNetworkLagStateChanged");
//(sizeof(DFBaseGameInstance_OnNetworkLagStateChanged) == 0x000018, "Wrong size on DFBaseGameInstance_OnNetworkLagStateChanged");
//(offsetof(DFBaseGameInstance_OnNetworkLagStateChanged, World) == 0x000000, "Member 'DFBaseGameInstance_OnNetworkLagStateChanged::World' has a wrong offset!");
//(offsetof(DFBaseGameInstance_OnNetworkLagStateChanged, NetDriver) == 0x000008, "Member 'DFBaseGameInstance_OnNetworkLagStateChanged::NetDriver' has a wrong offset!");
//(offsetof(DFBaseGameInstance_OnNetworkLagStateChanged, LagType) == 0x000010, "Member 'DFBaseGameInstance_OnNetworkLagStateChanged::LagType' has a wrong offset!");

// Function DonkehFramework.DFBaseGameInstance.OnTravelFailure
// 0x0020 (0x0020 - 0x0000)
struct DFBaseGameInstance_OnTravelFailure final 
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETravelFailure                                FailureType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D61[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameInstance_OnTravelFailure) == 0x000008, "Wrong alignment on DFBaseGameInstance_OnTravelFailure");
//(sizeof(DFBaseGameInstance_OnTravelFailure) == 0x000020, "Wrong size on DFBaseGameInstance_OnTravelFailure");
//(offsetof(DFBaseGameInstance_OnTravelFailure, World) == 0x000000, "Member 'DFBaseGameInstance_OnTravelFailure::World' has a wrong offset!");
//(offsetof(DFBaseGameInstance_OnTravelFailure, FailureType) == 0x000008, "Member 'DFBaseGameInstance_OnTravelFailure::FailureType' has a wrong offset!");
//(offsetof(DFBaseGameInstance_OnTravelFailure, ErrorString) == 0x000010, "Member 'DFBaseGameInstance_OnTravelFailure::ErrorString' has a wrong offset!");

// Function DonkehFramework.DFBaseGameInstance.IsHibernating
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGameInstance_IsHibernating final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameInstance_IsHibernating) == 0x000001, "Wrong alignment on DFBaseGameInstance_IsHibernating");
//(sizeof(DFBaseGameInstance_IsHibernating) == 0x000001, "Wrong size on DFBaseGameInstance_IsHibernating");
//(offsetof(DFBaseGameInstance_IsHibernating, ReturnValue) == 0x000000, "Member 'DFBaseGameInstance_IsHibernating::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameState.SetRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct DFBaseGameState_SetRemainingTime final 
{
public:
	int32                                         NewRemainingTime;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameState_SetRemainingTime) == 0x000004, "Wrong alignment on DFBaseGameState_SetRemainingTime");
//(sizeof(DFBaseGameState_SetRemainingTime) == 0x000004, "Wrong size on DFBaseGameState_SetRemainingTime");
//(offsetof(DFBaseGameState_SetRemainingTime, NewRemainingTime) == 0x000000, "Member 'DFBaseGameState_SetRemainingTime::NewRemainingTime' has a wrong offset!");

// Function DonkehFramework.DFBaseGameState.SetTimerPauseState
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGameState_SetTimerPauseState final 
{
public:
	bool                                          bNewPauseState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameState_SetTimerPauseState) == 0x000001, "Wrong alignment on DFBaseGameState_SetTimerPauseState");
//(sizeof(DFBaseGameState_SetTimerPauseState) == 0x000001, "Wrong size on DFBaseGameState_SetTimerPauseState");
//(offsetof(DFBaseGameState_SetTimerPauseState, bNewPauseState) == 0x000000, "Member 'DFBaseGameState_SetTimerPauseState::bNewPauseState' has a wrong offset!");

// Function DonkehFramework.DFBaseGameState.GetGameStateVotingComponent
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGameState_GetGameStateVotingComponent final 
{
public:
	class UDFVotingComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameState_GetGameStateVotingComponent) == 0x000008, "Wrong alignment on DFBaseGameState_GetGameStateVotingComponent");
//(sizeof(DFBaseGameState_GetGameStateVotingComponent) == 0x000008, "Wrong size on DFBaseGameState_GetGameStateVotingComponent");
//(offsetof(DFBaseGameState_GetGameStateVotingComponent, ReturnValue) == 0x000000, "Member 'DFBaseGameState_GetGameStateVotingComponent::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameState.GetTeamStateById
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGameState_GetTeamStateById final 
{
public:
	uint8                                         TeamIdNum;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D65[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADFTeamState*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameState_GetTeamStateById) == 0x000008, "Wrong alignment on DFBaseGameState_GetTeamStateById");
//(sizeof(DFBaseGameState_GetTeamStateById) == 0x000010, "Wrong size on DFBaseGameState_GetTeamStateById");
//(offsetof(DFBaseGameState_GetTeamStateById, TeamIdNum) == 0x000000, "Member 'DFBaseGameState_GetTeamStateById::TeamIdNum' has a wrong offset!");
//(offsetof(DFBaseGameState_GetTeamStateById, ReturnValue) == 0x000008, "Member 'DFBaseGameState_GetTeamStateById::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGameState.IsValidTeamId
// 0x0002 (0x0002 - 0x0000)
struct DFBaseGameState_IsValidTeamId final 
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGameState_IsValidTeamId) == 0x000001, "Wrong alignment on DFBaseGameState_IsValidTeamId");
//(sizeof(DFBaseGameState_IsValidTeamId) == 0x000002, "Wrong size on DFBaseGameState_IsValidTeamId");
//(offsetof(DFBaseGameState_IsValidTeamId, TeamId) == 0x000000, "Member 'DFBaseGameState_IsValidTeamId::TeamId' has a wrong offset!");
//(offsetof(DFBaseGameState_IsValidTeamId, ReturnValue) == 0x000001, "Member 'DFBaseGameState_IsValidTeamId::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.OnRep_FireCounter
// 0x0004 (0x0004 - 0x0000)
struct DFBaseWeapon_OnRep_FireCounter final 
{
public:
	struct FRepShotInfo                           PreviousValue;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_OnRep_FireCounter) == 0x000002, "Wrong alignment on DFBaseWeapon_OnRep_FireCounter");
//(sizeof(DFBaseWeapon_OnRep_FireCounter) == 0x000004, "Wrong size on DFBaseWeapon_OnRep_FireCounter");
//(offsetof(DFBaseWeapon_OnRep_FireCounter, PreviousValue) == 0x000000, "Member 'DFBaseWeapon_OnRep_FireCounter::PreviousValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayActionAnimations
// 0x0001 (0x0001 - 0x0000)
struct DFBaseWeapon_PlayActionAnimations final 
{
public:
	bool                                          bDontPlayAndReturnDominantPlayLengthOnly;          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_PlayActionAnimations) == 0x000001, "Wrong alignment on DFBaseWeapon_PlayActionAnimations");
//(sizeof(DFBaseWeapon_PlayActionAnimations) == 0x000001, "Wrong size on DFBaseWeapon_PlayActionAnimations");
//(offsetof(DFBaseWeapon_PlayActionAnimations, bDontPlayAndReturnDominantPlayLengthOnly) == 0x000000, "Member 'DFBaseWeapon_PlayActionAnimations::bDontPlayAndReturnDominantPlayLengthOnly' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayCockAnimations
// 0x0008 (0x0008 - 0x0000)
struct DFBaseWeapon_PlayCockAnimations final 
{
public:
	bool                                          bDontPlayAndReturnDominantPlayLengthOnly;          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6F[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_PlayCockAnimations) == 0x000004, "Wrong alignment on DFBaseWeapon_PlayCockAnimations");
//(sizeof(DFBaseWeapon_PlayCockAnimations) == 0x000008, "Wrong size on DFBaseWeapon_PlayCockAnimations");
//(offsetof(DFBaseWeapon_PlayCockAnimations, bDontPlayAndReturnDominantPlayLengthOnly) == 0x000000, "Member 'DFBaseWeapon_PlayCockAnimations::bDontPlayAndReturnDominantPlayLengthOnly' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayCockAnimations, ReturnValue) == 0x000004, "Member 'DFBaseWeapon_PlayCockAnimations::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayThrowAnimations
// 0x0008 (0x0008 - 0x0000)
struct DFBaseWeapon_PlayThrowAnimations final 
{
public:
	bool                                          bOverhandThrow;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontPlayAndReturnDominantPlayLengthOnly;          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D70[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_PlayThrowAnimations) == 0x000004, "Wrong alignment on DFBaseWeapon_PlayThrowAnimations");
//(sizeof(DFBaseWeapon_PlayThrowAnimations) == 0x000008, "Wrong size on DFBaseWeapon_PlayThrowAnimations");
//(offsetof(DFBaseWeapon_PlayThrowAnimations, bOverhandThrow) == 0x000000, "Member 'DFBaseWeapon_PlayThrowAnimations::bOverhandThrow' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayThrowAnimations, bDontPlayAndReturnDominantPlayLengthOnly) == 0x000001, "Member 'DFBaseWeapon_PlayThrowAnimations::bDontPlayAndReturnDominantPlayLengthOnly' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayThrowAnimations, ReturnValue) == 0x000004, "Member 'DFBaseWeapon_PlayThrowAnimations::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayWeaponActionMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseWeapon_PlayWeaponActionMontage final 
{
public:
	class UAnimMontage*                           ActionMontageToPlay;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D71[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseWeapon_PlayWeaponActionMontage) == 0x000008, "Wrong alignment on DFBaseWeapon_PlayWeaponActionMontage");
//(sizeof(DFBaseWeapon_PlayWeaponActionMontage) == 0x000010, "Wrong size on DFBaseWeapon_PlayWeaponActionMontage");
//(offsetof(DFBaseWeapon_PlayWeaponActionMontage, ActionMontageToPlay) == 0x000000, "Member 'DFBaseWeapon_PlayWeaponActionMontage::ActionMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponActionMontage, ReturnValue) == 0x000008, "Member 'DFBaseWeapon_PlayWeaponActionMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayWeaponCockMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseWeapon_PlayWeaponCockMontage final 
{
public:
	class UAnimMontage*                           CockMontageToPlay;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D72[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseWeapon_PlayWeaponCockMontage) == 0x000008, "Wrong alignment on DFBaseWeapon_PlayWeaponCockMontage");
//(sizeof(DFBaseWeapon_PlayWeaponCockMontage) == 0x000010, "Wrong size on DFBaseWeapon_PlayWeaponCockMontage");
//(offsetof(DFBaseWeapon_PlayWeaponCockMontage, CockMontageToPlay) == 0x000000, "Member 'DFBaseWeapon_PlayWeaponCockMontage::CockMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponCockMontage, ReturnValue) == 0x000008, "Member 'DFBaseWeapon_PlayWeaponCockMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayWeaponEquipMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseWeapon_PlayWeaponEquipMontage final 
{
public:
	class UAnimMontage*                           EquipMontageToPlay;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D73[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseWeapon_PlayWeaponEquipMontage) == 0x000008, "Wrong alignment on DFBaseWeapon_PlayWeaponEquipMontage");
//(sizeof(DFBaseWeapon_PlayWeaponEquipMontage) == 0x000010, "Wrong size on DFBaseWeapon_PlayWeaponEquipMontage");
//(offsetof(DFBaseWeapon_PlayWeaponEquipMontage, EquipMontageToPlay) == 0x000000, "Member 'DFBaseWeapon_PlayWeaponEquipMontage::EquipMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponEquipMontage, ReturnValue) == 0x000008, "Member 'DFBaseWeapon_PlayWeaponEquipMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayWeaponFireMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseWeapon_PlayWeaponFireMontage final 
{
public:
	class UAnimMontage*                           FireMontageToPlay;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireLast;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireADS;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D74[0x2];                                      // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_PlayWeaponFireMontage) == 0x000008, "Wrong alignment on DFBaseWeapon_PlayWeaponFireMontage");
//(sizeof(DFBaseWeapon_PlayWeaponFireMontage) == 0x000010, "Wrong size on DFBaseWeapon_PlayWeaponFireMontage");
//(offsetof(DFBaseWeapon_PlayWeaponFireMontage, FireMontageToPlay) == 0x000000, "Member 'DFBaseWeapon_PlayWeaponFireMontage::FireMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponFireMontage, bFireLast) == 0x000008, "Member 'DFBaseWeapon_PlayWeaponFireMontage::bFireLast' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponFireMontage, bFireADS) == 0x000009, "Member 'DFBaseWeapon_PlayWeaponFireMontage::bFireADS' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponFireMontage, ReturnValue) == 0x00000C, "Member 'DFBaseWeapon_PlayWeaponFireMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayWeaponMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseWeapon_PlayWeaponMontage final 
{
public:
	class UAnimMontage*                           WeapMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDisableAutoBlendOut;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D75[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_PlayWeaponMontage) == 0x000008, "Wrong alignment on DFBaseWeapon_PlayWeaponMontage");
//(sizeof(DFBaseWeapon_PlayWeaponMontage) == 0x000010, "Wrong size on DFBaseWeapon_PlayWeaponMontage");
//(offsetof(DFBaseWeapon_PlayWeaponMontage, WeapMontage) == 0x000000, "Member 'DFBaseWeapon_PlayWeaponMontage::WeapMontage' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponMontage, bForceDisableAutoBlendOut) == 0x000008, "Member 'DFBaseWeapon_PlayWeaponMontage::bForceDisableAutoBlendOut' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponMontage, ReturnValue) == 0x00000C, "Member 'DFBaseWeapon_PlayWeaponMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayWeaponPerspectiveAnimation
// 0x0018 (0x0018 - 0x0000)
struct DFBaseWeapon_PlayWeaponPerspectiveAnimation final 
{
public:
	struct FPerspectiveAnim                       WeapAnim;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D76[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseWeapon_PlayWeaponPerspectiveAnimation) == 0x000008, "Wrong alignment on DFBaseWeapon_PlayWeaponPerspectiveAnimation");
//(sizeof(DFBaseWeapon_PlayWeaponPerspectiveAnimation) == 0x000018, "Wrong size on DFBaseWeapon_PlayWeaponPerspectiveAnimation");
//(offsetof(DFBaseWeapon_PlayWeaponPerspectiveAnimation, WeapAnim) == 0x000000, "Member 'DFBaseWeapon_PlayWeaponPerspectiveAnimation::WeapAnim' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponPerspectiveAnimation, ReturnValue) == 0x000010, "Member 'DFBaseWeapon_PlayWeaponPerspectiveAnimation::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayWeaponSound
// 0x0018 (0x0018 - 0x0000)
struct DFBaseWeapon_PlayWeaponSound final 
{
public:
	struct FPerspectiveSound                      Sound;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_PlayWeaponSound) == 0x000008, "Wrong alignment on DFBaseWeapon_PlayWeaponSound");
//(sizeof(DFBaseWeapon_PlayWeaponSound) == 0x000018, "Wrong size on DFBaseWeapon_PlayWeaponSound");
//(offsetof(DFBaseWeapon_PlayWeaponSound, Sound) == 0x000000, "Member 'DFBaseWeapon_PlayWeaponSound::Sound' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponSound, ReturnValue) == 0x000010, "Member 'DFBaseWeapon_PlayWeaponSound::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayWeaponThrowOverhandMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseWeapon_PlayWeaponThrowOverhandMontage final 
{
public:
	class UAnimMontage*                           ThrowOverhandMontageToPlay;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D77[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseWeapon_PlayWeaponThrowOverhandMontage) == 0x000008, "Wrong alignment on DFBaseWeapon_PlayWeaponThrowOverhandMontage");
//(sizeof(DFBaseWeapon_PlayWeaponThrowOverhandMontage) == 0x000010, "Wrong size on DFBaseWeapon_PlayWeaponThrowOverhandMontage");
//(offsetof(DFBaseWeapon_PlayWeaponThrowOverhandMontage, ThrowOverhandMontageToPlay) == 0x000000, "Member 'DFBaseWeapon_PlayWeaponThrowOverhandMontage::ThrowOverhandMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponThrowOverhandMontage, ReturnValue) == 0x000008, "Member 'DFBaseWeapon_PlayWeaponThrowOverhandMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayWeaponThrowUnderhandMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseWeapon_PlayWeaponThrowUnderhandMontage final 
{
public:
	class UAnimMontage*                           ThrowUnderhandMontageToPlay;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D78[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseWeapon_PlayWeaponThrowUnderhandMontage) == 0x000008, "Wrong alignment on DFBaseWeapon_PlayWeaponThrowUnderhandMontage");
//(sizeof(DFBaseWeapon_PlayWeaponThrowUnderhandMontage) == 0x000010, "Wrong size on DFBaseWeapon_PlayWeaponThrowUnderhandMontage");
//(offsetof(DFBaseWeapon_PlayWeaponThrowUnderhandMontage, ThrowUnderhandMontageToPlay) == 0x000000, "Member 'DFBaseWeapon_PlayWeaponThrowUnderhandMontage::ThrowUnderhandMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponThrowUnderhandMontage, ReturnValue) == 0x000008, "Member 'DFBaseWeapon_PlayWeaponThrowUnderhandMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PlayWeaponUnEquipMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseWeapon_PlayWeaponUnEquipMontage final 
{
public:
	class UAnimMontage*                           UnEquipMontageToPlay;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D79[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseWeapon_PlayWeaponUnEquipMontage) == 0x000008, "Wrong alignment on DFBaseWeapon_PlayWeaponUnEquipMontage");
//(sizeof(DFBaseWeapon_PlayWeaponUnEquipMontage) == 0x000010, "Wrong size on DFBaseWeapon_PlayWeaponUnEquipMontage");
//(offsetof(DFBaseWeapon_PlayWeaponUnEquipMontage, UnEquipMontageToPlay) == 0x000000, "Member 'DFBaseWeapon_PlayWeaponUnEquipMontage::UnEquipMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseWeapon_PlayWeaponUnEquipMontage, ReturnValue) == 0x000008, "Member 'DFBaseWeapon_PlayWeaponUnEquipMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.PrefireDelayElapsed
// 0x0001 (0x0001 - 0x0000)
struct DFBaseWeapon_PrefireDelayElapsed final 
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_PrefireDelayElapsed) == 0x000001, "Wrong alignment on DFBaseWeapon_PrefireDelayElapsed");
//(sizeof(DFBaseWeapon_PrefireDelayElapsed) == 0x000001, "Wrong size on DFBaseWeapon_PrefireDelayElapsed");
//(offsetof(DFBaseWeapon_PrefireDelayElapsed, bClientSimulation) == 0x000000, "Member 'DFBaseWeapon_PrefireDelayElapsed::bClientSimulation' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.ServerFireShot
// 0x0024 (0x0024 - 0x0000)
struct DFBaseWeapon_ServerFireShot final 
{
public:
	struct FVector_NetQuantize                    Origin;                                            // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ShootDir;                                          // 0x000C(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotID;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_ServerFireShot) == 0x000004, "Wrong alignment on DFBaseWeapon_ServerFireShot");
//(sizeof(DFBaseWeapon_ServerFireShot) == 0x000024, "Wrong size on DFBaseWeapon_ServerFireShot");
//(offsetof(DFBaseWeapon_ServerFireShot, Origin) == 0x000000, "Member 'DFBaseWeapon_ServerFireShot::Origin' has a wrong offset!");
//(offsetof(DFBaseWeapon_ServerFireShot, ShootDir) == 0x00000C, "Member 'DFBaseWeapon_ServerFireShot::ShootDir' has a wrong offset!");
//(offsetof(DFBaseWeapon_ServerFireShot, RandomSeed) == 0x000018, "Member 'DFBaseWeapon_ServerFireShot::RandomSeed' has a wrong offset!");
//(offsetof(DFBaseWeapon_ServerFireShot, Timestamp) == 0x00001C, "Member 'DFBaseWeapon_ServerFireShot::Timestamp' has a wrong offset!");
//(offsetof(DFBaseWeapon_ServerFireShot, ShotID) == 0x000020, "Member 'DFBaseWeapon_ServerFireShot::ShotID' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.StopSimulatingWeaponFire
// 0x0001 (0x0001 - 0x0000)
struct DFBaseWeapon_StopSimulatingWeaponFire final 
{
public:
	bool                                          bForceStopAll;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_StopSimulatingWeaponFire) == 0x000001, "Wrong alignment on DFBaseWeapon_StopSimulatingWeaponFire");
//(sizeof(DFBaseWeapon_StopSimulatingWeaponFire) == 0x000001, "Wrong size on DFBaseWeapon_StopSimulatingWeaponFire");
//(offsetof(DFBaseWeapon_StopSimulatingWeaponFire, bForceStopAll) == 0x000000, "Member 'DFBaseWeapon_StopSimulatingWeaponFire::bForceStopAll' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.StopWeaponMontage
// 0x0008 (0x0008 - 0x0000)
struct DFBaseWeapon_StopWeaponMontage final 
{
public:
	class UAnimMontage*                           WeapMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_StopWeaponMontage) == 0x000008, "Wrong alignment on DFBaseWeapon_StopWeaponMontage");
//(sizeof(DFBaseWeapon_StopWeaponMontage) == 0x000008, "Wrong size on DFBaseWeapon_StopWeaponMontage");
//(offsetof(DFBaseWeapon_StopWeaponMontage, WeapMontage) == 0x000000, "Member 'DFBaseWeapon_StopWeaponMontage::WeapMontage' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.StopWeaponPerspectiveAnimation
// 0x0010 (0x0010 - 0x0000)
struct DFBaseWeapon_StopWeaponPerspectiveAnimation final 
{
public:
	struct FPerspectiveAnim                       WeapAnim;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_StopWeaponPerspectiveAnimation) == 0x000008, "Wrong alignment on DFBaseWeapon_StopWeaponPerspectiveAnimation");
//(sizeof(DFBaseWeapon_StopWeaponPerspectiveAnimation) == 0x000010, "Wrong size on DFBaseWeapon_StopWeaponPerspectiveAnimation");
//(offsetof(DFBaseWeapon_StopWeaponPerspectiveAnimation, WeapAnim) == 0x000000, "Member 'DFBaseWeapon_StopWeaponPerspectiveAnimation::WeapAnim' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.GetAnimPlayLengthToUseFromPerspectiveAnimPair
// 0x0018 (0x0018 - 0x0000)
struct DFBaseWeapon_GetAnimPlayLengthToUseFromPerspectiveAnimPair final 
{
public:
	struct FPerspectiveAnim                       AnimationPair;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7A[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseWeapon_GetAnimPlayLengthToUseFromPerspectiveAnimPair) == 0x000008, "Wrong alignment on DFBaseWeapon_GetAnimPlayLengthToUseFromPerspectiveAnimPair");
//(sizeof(DFBaseWeapon_GetAnimPlayLengthToUseFromPerspectiveAnimPair) == 0x000018, "Wrong size on DFBaseWeapon_GetAnimPlayLengthToUseFromPerspectiveAnimPair");
//(offsetof(DFBaseWeapon_GetAnimPlayLengthToUseFromPerspectiveAnimPair, AnimationPair) == 0x000000, "Member 'DFBaseWeapon_GetAnimPlayLengthToUseFromPerspectiveAnimPair::AnimationPair' has a wrong offset!");
//(offsetof(DFBaseWeapon_GetAnimPlayLengthToUseFromPerspectiveAnimPair, ReturnValue) == 0x000010, "Member 'DFBaseWeapon_GetAnimPlayLengthToUseFromPerspectiveAnimPair::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.GetAnimToUseFromPerspectiveAnimPair
// 0x0018 (0x0018 - 0x0000)
struct DFBaseWeapon_GetAnimToUseFromPerspectiveAnimPair final 
{
public:
	struct FPerspectiveAnim                       AnimationPair;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_GetAnimToUseFromPerspectiveAnimPair) == 0x000008, "Wrong alignment on DFBaseWeapon_GetAnimToUseFromPerspectiveAnimPair");
//(sizeof(DFBaseWeapon_GetAnimToUseFromPerspectiveAnimPair) == 0x000018, "Wrong size on DFBaseWeapon_GetAnimToUseFromPerspectiveAnimPair");
//(offsetof(DFBaseWeapon_GetAnimToUseFromPerspectiveAnimPair, AnimationPair) == 0x000000, "Member 'DFBaseWeapon_GetAnimToUseFromPerspectiveAnimPair::AnimationPair' has a wrong offset!");
//(offsetof(DFBaseWeapon_GetAnimToUseFromPerspectiveAnimPair, ReturnValue) == 0x000010, "Member 'DFBaseWeapon_GetAnimToUseFromPerspectiveAnimPair::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.GetMontagePlayLengthToUseFromPerspectiveAnimPair
// 0x0018 (0x0018 - 0x0000)
struct DFBaseWeapon_GetMontagePlayLengthToUseFromPerspectiveAnimPair final 
{
public:
	struct FPerspectiveAnim                       AnimationPair;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7B[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseWeapon_GetMontagePlayLengthToUseFromPerspectiveAnimPair) == 0x000008, "Wrong alignment on DFBaseWeapon_GetMontagePlayLengthToUseFromPerspectiveAnimPair");
//(sizeof(DFBaseWeapon_GetMontagePlayLengthToUseFromPerspectiveAnimPair) == 0x000018, "Wrong size on DFBaseWeapon_GetMontagePlayLengthToUseFromPerspectiveAnimPair");
//(offsetof(DFBaseWeapon_GetMontagePlayLengthToUseFromPerspectiveAnimPair, AnimationPair) == 0x000000, "Member 'DFBaseWeapon_GetMontagePlayLengthToUseFromPerspectiveAnimPair::AnimationPair' has a wrong offset!");
//(offsetof(DFBaseWeapon_GetMontagePlayLengthToUseFromPerspectiveAnimPair, ReturnValue) == 0x000010, "Member 'DFBaseWeapon_GetMontagePlayLengthToUseFromPerspectiveAnimPair::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.GetMontageToUseFromPerspectiveAnimPair
// 0x0018 (0x0018 - 0x0000)
struct DFBaseWeapon_GetMontageToUseFromPerspectiveAnimPair final 
{
public:
	struct FPerspectiveAnim                       AnimationPair;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_GetMontageToUseFromPerspectiveAnimPair) == 0x000008, "Wrong alignment on DFBaseWeapon_GetMontageToUseFromPerspectiveAnimPair");
//(sizeof(DFBaseWeapon_GetMontageToUseFromPerspectiveAnimPair) == 0x000018, "Wrong size on DFBaseWeapon_GetMontageToUseFromPerspectiveAnimPair");
//(offsetof(DFBaseWeapon_GetMontageToUseFromPerspectiveAnimPair, AnimationPair) == 0x000000, "Member 'DFBaseWeapon_GetMontageToUseFromPerspectiveAnimPair::AnimationPair' has a wrong offset!");
//(offsetof(DFBaseWeapon_GetMontageToUseFromPerspectiveAnimPair, ReturnValue) == 0x000010, "Member 'DFBaseWeapon_GetMontageToUseFromPerspectiveAnimPair::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.GetWeaponMesh
// 0x0008 (0x0008 - 0x0000)
struct DFBaseWeapon_GetWeaponMesh final 
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_GetWeaponMesh) == 0x000008, "Wrong alignment on DFBaseWeapon_GetWeaponMesh");
//(sizeof(DFBaseWeapon_GetWeaponMesh) == 0x000008, "Wrong size on DFBaseWeapon_GetWeaponMesh");
//(offsetof(DFBaseWeapon_GetWeaponMesh, ReturnValue) == 0x000000, "Member 'DFBaseWeapon_GetWeaponMesh::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.GetWeaponMesh1P
// 0x0008 (0x0008 - 0x0000)
struct DFBaseWeapon_GetWeaponMesh1P final 
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_GetWeaponMesh1P) == 0x000008, "Wrong alignment on DFBaseWeapon_GetWeaponMesh1P");
//(sizeof(DFBaseWeapon_GetWeaponMesh1P) == 0x000008, "Wrong size on DFBaseWeapon_GetWeaponMesh1P");
//(offsetof(DFBaseWeapon_GetWeaponMesh1P, ReturnValue) == 0x000000, "Member 'DFBaseWeapon_GetWeaponMesh1P::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.GetWeaponMeshToUse
// 0x0010 (0x0010 - 0x0000)
struct DFBaseWeapon_GetWeaponMeshToUse final 
{
public:
	bool                                          bIgnoreLocalControlOnServer;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7C[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_GetWeaponMeshToUse) == 0x000008, "Wrong alignment on DFBaseWeapon_GetWeaponMeshToUse");
//(sizeof(DFBaseWeapon_GetWeaponMeshToUse) == 0x000010, "Wrong size on DFBaseWeapon_GetWeaponMeshToUse");
//(offsetof(DFBaseWeapon_GetWeaponMeshToUse, bIgnoreLocalControlOnServer) == 0x000000, "Member 'DFBaseWeapon_GetWeaponMeshToUse::bIgnoreLocalControlOnServer' has a wrong offset!");
//(offsetof(DFBaseWeapon_GetWeaponMeshToUse, ReturnValue) == 0x000008, "Member 'DFBaseWeapon_GetWeaponMeshToUse::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.IsFiring
// 0x0001 (0x0001 - 0x0000)
struct DFBaseWeapon_IsFiring final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_IsFiring) == 0x000001, "Wrong alignment on DFBaseWeapon_IsFiring");
//(sizeof(DFBaseWeapon_IsFiring) == 0x000001, "Wrong size on DFBaseWeapon_IsFiring");
//(offsetof(DFBaseWeapon_IsFiring, ReturnValue) == 0x000000, "Member 'DFBaseWeapon_IsFiring::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseWeapon.ShouldSimulateWeaponFire
// 0x0001 (0x0001 - 0x0000)
struct DFBaseWeapon_ShouldSimulateWeaponFire final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseWeapon_ShouldSimulateWeaponFire) == 0x000001, "Wrong alignment on DFBaseWeapon_ShouldSimulateWeaponFire");
//(sizeof(DFBaseWeapon_ShouldSimulateWeaponFire) == 0x000001, "Wrong size on DFBaseWeapon_ShouldSimulateWeaponFire");
//(offsetof(DFBaseWeapon_ShouldSimulateWeaponFire, ReturnValue) == 0x000000, "Member 'DFBaseWeapon_ShouldSimulateWeaponFire::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.ClientRejectFiredShot
// 0x0018 (0x0018 - 0x0000)
struct DFBaseGun_ClientRejectFiredShot final 
{
public:
	int32                                         ShotID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D88[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADFBaseAmmoClip*                        ShotAmmoClip;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerClipAmmo;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D89[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGun_ClientRejectFiredShot) == 0x000008, "Wrong alignment on DFBaseGun_ClientRejectFiredShot");
//(sizeof(DFBaseGun_ClientRejectFiredShot) == 0x000018, "Wrong size on DFBaseGun_ClientRejectFiredShot");
//(offsetof(DFBaseGun_ClientRejectFiredShot, ShotID) == 0x000000, "Member 'DFBaseGun_ClientRejectFiredShot::ShotID' has a wrong offset!");
//(offsetof(DFBaseGun_ClientRejectFiredShot, ShotAmmoClip) == 0x000008, "Member 'DFBaseGun_ClientRejectFiredShot::ShotAmmoClip' has a wrong offset!");
//(offsetof(DFBaseGun_ClientRejectFiredShot, ServerClipAmmo) == 0x000010, "Member 'DFBaseGun_ClientRejectFiredShot::ServerClipAmmo' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.LoadAmmoClip
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGun_LoadAmmoClip final 
{
public:
	class ADFBaseAmmoClip*                        ClipToLoad;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_LoadAmmoClip) == 0x000008, "Wrong alignment on DFBaseGun_LoadAmmoClip");
//(sizeof(DFBaseGun_LoadAmmoClip) == 0x000008, "Wrong size on DFBaseGun_LoadAmmoClip");
//(offsetof(DFBaseGun_LoadAmmoClip, ClipToLoad) == 0x000000, "Member 'DFBaseGun_LoadAmmoClip::ClipToLoad' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.OnReload
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_OnReload final 
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_OnReload) == 0x000001, "Wrong alignment on DFBaseGun_OnReload");
//(sizeof(DFBaseGun_OnReload) == 0x000001, "Wrong size on DFBaseGun_OnReload");
//(offsetof(DFBaseGun_OnReload, bClientSimulation) == 0x000000, "Member 'DFBaseGun_OnReload::bClientSimulation' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.OnRep_CurrentAmmoClip
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGun_OnRep_CurrentAmmoClip final 
{
public:
	class ADFBaseAmmoClip*                        PrevAmmoClip;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_OnRep_CurrentAmmoClip) == 0x000008, "Wrong alignment on DFBaseGun_OnRep_CurrentAmmoClip");
//(sizeof(DFBaseGun_OnRep_CurrentAmmoClip) == 0x000008, "Wrong size on DFBaseGun_OnRep_CurrentAmmoClip");
//(offsetof(DFBaseGun_OnRep_CurrentAmmoClip, PrevAmmoClip) == 0x000000, "Member 'DFBaseGun_OnRep_CurrentAmmoClip::PrevAmmoClip' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.OnRep_PendingReloadState
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_OnRep_PendingReloadState final 
{
public:
	EGunReloadState                               PrevReloadState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_OnRep_PendingReloadState) == 0x000001, "Wrong alignment on DFBaseGun_OnRep_PendingReloadState");
//(sizeof(DFBaseGun_OnRep_PendingReloadState) == 0x000001, "Wrong size on DFBaseGun_OnRep_PendingReloadState");
//(offsetof(DFBaseGun_OnRep_PendingReloadState, PrevReloadState) == 0x000000, "Member 'DFBaseGun_OnRep_PendingReloadState::PrevReloadState' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.OnRep_SelectedFireMode
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_OnRep_SelectedFireMode final 
{
public:
	EFireMode                                     PrevSelectedFireMode;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_OnRep_SelectedFireMode) == 0x000001, "Wrong alignment on DFBaseGun_OnRep_SelectedFireMode");
//(sizeof(DFBaseGun_OnRep_SelectedFireMode) == 0x000001, "Wrong size on DFBaseGun_OnRep_SelectedFireMode");
//(offsetof(DFBaseGun_OnRep_SelectedFireMode, PrevSelectedFireMode) == 0x000000, "Member 'DFBaseGun_OnRep_SelectedFireMode::PrevSelectedFireMode' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.PlayReloadAnimations
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGun_PlayReloadAnimations final 
{
public:
	bool                                          bDryReload;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontPlayAndReturnDominantPlayLengthOnly;          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8A[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_PlayReloadAnimations) == 0x000004, "Wrong alignment on DFBaseGun_PlayReloadAnimations");
//(sizeof(DFBaseGun_PlayReloadAnimations) == 0x000008, "Wrong size on DFBaseGun_PlayReloadAnimations");
//(offsetof(DFBaseGun_PlayReloadAnimations, bDryReload) == 0x000000, "Member 'DFBaseGun_PlayReloadAnimations::bDryReload' has a wrong offset!");
//(offsetof(DFBaseGun_PlayReloadAnimations, bDontPlayAndReturnDominantPlayLengthOnly) == 0x000001, "Member 'DFBaseGun_PlayReloadAnimations::bDontPlayAndReturnDominantPlayLengthOnly' has a wrong offset!");
//(offsetof(DFBaseGun_PlayReloadAnimations, ReturnValue) == 0x000004, "Member 'DFBaseGun_PlayReloadAnimations::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.PlayReloadTransitionAnimations
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGun_PlayReloadTransitionAnimations final 
{
public:
	bool                                          bStartReload;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontPlayAndReturnDominantPlayLengthOnly;          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8B[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_PlayReloadTransitionAnimations) == 0x000004, "Wrong alignment on DFBaseGun_PlayReloadTransitionAnimations");
//(sizeof(DFBaseGun_PlayReloadTransitionAnimations) == 0x000008, "Wrong size on DFBaseGun_PlayReloadTransitionAnimations");
//(offsetof(DFBaseGun_PlayReloadTransitionAnimations, bStartReload) == 0x000000, "Member 'DFBaseGun_PlayReloadTransitionAnimations::bStartReload' has a wrong offset!");
//(offsetof(DFBaseGun_PlayReloadTransitionAnimations, bDontPlayAndReturnDominantPlayLengthOnly) == 0x000001, "Member 'DFBaseGun_PlayReloadTransitionAnimations::bDontPlayAndReturnDominantPlayLengthOnly' has a wrong offset!");
//(offsetof(DFBaseGun_PlayReloadTransitionAnimations, ReturnValue) == 0x000004, "Member 'DFBaseGun_PlayReloadTransitionAnimations::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.PlayWeaponEndReloadMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGun_PlayWeaponEndReloadMontage final 
{
public:
	class UAnimMontage*                           EndReloadMontageToPlay;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDryReload;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8C[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_PlayWeaponEndReloadMontage) == 0x000008, "Wrong alignment on DFBaseGun_PlayWeaponEndReloadMontage");
//(sizeof(DFBaseGun_PlayWeaponEndReloadMontage) == 0x000010, "Wrong size on DFBaseGun_PlayWeaponEndReloadMontage");
//(offsetof(DFBaseGun_PlayWeaponEndReloadMontage, EndReloadMontageToPlay) == 0x000000, "Member 'DFBaseGun_PlayWeaponEndReloadMontage::EndReloadMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseGun_PlayWeaponEndReloadMontage, bDryReload) == 0x000008, "Member 'DFBaseGun_PlayWeaponEndReloadMontage::bDryReload' has a wrong offset!");
//(offsetof(DFBaseGun_PlayWeaponEndReloadMontage, ReturnValue) == 0x00000C, "Member 'DFBaseGun_PlayWeaponEndReloadMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.PlayWeaponReloadMontage
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGun_PlayWeaponReloadMontage final 
{
public:
	bool                                          bDryReload;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8D[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_PlayWeaponReloadMontage) == 0x000004, "Wrong alignment on DFBaseGun_PlayWeaponReloadMontage");
//(sizeof(DFBaseGun_PlayWeaponReloadMontage) == 0x000008, "Wrong size on DFBaseGun_PlayWeaponReloadMontage");
//(offsetof(DFBaseGun_PlayWeaponReloadMontage, bDryReload) == 0x000000, "Member 'DFBaseGun_PlayWeaponReloadMontage::bDryReload' has a wrong offset!");
//(offsetof(DFBaseGun_PlayWeaponReloadMontage, ReturnValue) == 0x000004, "Member 'DFBaseGun_PlayWeaponReloadMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.PlayWeaponStartReloadMontage
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGun_PlayWeaponStartReloadMontage final 
{
public:
	class UAnimMontage*                           StartReloadMontageToPlay;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDryReload;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8E[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_PlayWeaponStartReloadMontage) == 0x000008, "Wrong alignment on DFBaseGun_PlayWeaponStartReloadMontage");
//(sizeof(DFBaseGun_PlayWeaponStartReloadMontage) == 0x000010, "Wrong size on DFBaseGun_PlayWeaponStartReloadMontage");
//(offsetof(DFBaseGun_PlayWeaponStartReloadMontage, StartReloadMontageToPlay) == 0x000000, "Member 'DFBaseGun_PlayWeaponStartReloadMontage::StartReloadMontageToPlay' has a wrong offset!");
//(offsetof(DFBaseGun_PlayWeaponStartReloadMontage, bDryReload) == 0x000008, "Member 'DFBaseGun_PlayWeaponStartReloadMontage::bDryReload' has a wrong offset!");
//(offsetof(DFBaseGun_PlayWeaponStartReloadMontage, ReturnValue) == 0x00000C, "Member 'DFBaseGun_PlayWeaponStartReloadMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.ReceiveFireModeChanged
// 0x0003 (0x0003 - 0x0000)
struct DFBaseGun_ReceiveFireModeChanged final 
{
public:
	EFireMode                                     NewFireMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFireMode                                     PrevFireMode;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromPlayerInput;                                  // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_ReceiveFireModeChanged) == 0x000001, "Wrong alignment on DFBaseGun_ReceiveFireModeChanged");
//(sizeof(DFBaseGun_ReceiveFireModeChanged) == 0x000003, "Wrong size on DFBaseGun_ReceiveFireModeChanged");
//(offsetof(DFBaseGun_ReceiveFireModeChanged, NewFireMode) == 0x000000, "Member 'DFBaseGun_ReceiveFireModeChanged::NewFireMode' has a wrong offset!");
//(offsetof(DFBaseGun_ReceiveFireModeChanged, PrevFireMode) == 0x000001, "Member 'DFBaseGun_ReceiveFireModeChanged::PrevFireMode' has a wrong offset!");
//(offsetof(DFBaseGun_ReceiveFireModeChanged, bFromPlayerInput) == 0x000002, "Member 'DFBaseGun_ReceiveFireModeChanged::bFromPlayerInput' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.ServerSetFireMode
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_ServerSetFireMode final 
{
public:
	EFireMode                                     NewFireMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_ServerSetFireMode) == 0x000001, "Wrong alignment on DFBaseGun_ServerSetFireMode");
//(sizeof(DFBaseGun_ServerSetFireMode) == 0x000001, "Wrong size on DFBaseGun_ServerSetFireMode");
//(offsetof(DFBaseGun_ServerSetFireMode, NewFireMode) == 0x000000, "Member 'DFBaseGun_ServerSetFireMode::NewFireMode' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.SetFireMode
// 0x0004 (0x0004 - 0x0000)
struct DFBaseGun_SetFireMode final 
{
public:
	EFireMode                                     NewFireMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromPlayerInput;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_SetFireMode) == 0x000001, "Wrong alignment on DFBaseGun_SetFireMode");
//(sizeof(DFBaseGun_SetFireMode) == 0x000004, "Wrong size on DFBaseGun_SetFireMode");
//(offsetof(DFBaseGun_SetFireMode, NewFireMode) == 0x000000, "Member 'DFBaseGun_SetFireMode::NewFireMode' has a wrong offset!");
//(offsetof(DFBaseGun_SetFireMode, bFromPlayerInput) == 0x000001, "Member 'DFBaseGun_SetFireMode::bFromPlayerInput' has a wrong offset!");
//(offsetof(DFBaseGun_SetFireMode, bForce) == 0x000002, "Member 'DFBaseGun_SetFireMode::bForce' has a wrong offset!");
//(offsetof(DFBaseGun_SetFireMode, ReturnValue) == 0x000003, "Member 'DFBaseGun_SetFireMode::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.SetFireModeBP
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_SetFireModeBP final 
{
public:
	EFireMode                                     NewFireMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_SetFireModeBP) == 0x000001, "Wrong alignment on DFBaseGun_SetFireModeBP");
//(sizeof(DFBaseGun_SetFireModeBP) == 0x000001, "Wrong size on DFBaseGun_SetFireModeBP");
//(offsetof(DFBaseGun_SetFireModeBP, NewFireMode) == 0x000000, "Member 'DFBaseGun_SetFireModeBP::NewFireMode' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.SetReloadState
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_SetReloadState final 
{
public:
	EGunReloadState                               NewReloadState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_SetReloadState) == 0x000001, "Wrong alignment on DFBaseGun_SetReloadState");
//(sizeof(DFBaseGun_SetReloadState) == 0x000001, "Wrong size on DFBaseGun_SetReloadState");
//(offsetof(DFBaseGun_SetReloadState, NewReloadState) == 0x000000, "Member 'DFBaseGun_SetReloadState::NewReloadState' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.StartReload
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_StartReload final 
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_StartReload) == 0x000001, "Wrong alignment on DFBaseGun_StartReload");
//(sizeof(DFBaseGun_StartReload) == 0x000001, "Wrong size on DFBaseGun_StartReload");
//(offsetof(DFBaseGun_StartReload, bClientSimulation) == 0x000000, "Member 'DFBaseGun_StartReload::bClientSimulation' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.CanReload
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_CanReload final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_CanReload) == 0x000001, "Wrong alignment on DFBaseGun_CanReload");
//(sizeof(DFBaseGun_CanReload) == 0x000001, "Wrong size on DFBaseGun_CanReload");
//(offsetof(DFBaseGun_CanReload, ReturnValue) == 0x000000, "Member 'DFBaseGun_CanReload::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetClipAmmo
// 0x0004 (0x0004 - 0x0000)
struct DFBaseGun_GetClipAmmo final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetClipAmmo) == 0x000004, "Wrong alignment on DFBaseGun_GetClipAmmo");
//(sizeof(DFBaseGun_GetClipAmmo) == 0x000004, "Wrong size on DFBaseGun_GetClipAmmo");
//(offsetof(DFBaseGun_GetClipAmmo, ReturnValue) == 0x000000, "Member 'DFBaseGun_GetClipAmmo::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetMuzzleAttachComponent
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGun_GetMuzzleAttachComponent final 
{
public:
	bool                                          bIgnoreLocalControlOnServer;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8F[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetMuzzleAttachComponent) == 0x000008, "Wrong alignment on DFBaseGun_GetMuzzleAttachComponent");
//(sizeof(DFBaseGun_GetMuzzleAttachComponent) == 0x000010, "Wrong size on DFBaseGun_GetMuzzleAttachComponent");
//(offsetof(DFBaseGun_GetMuzzleAttachComponent, bIgnoreLocalControlOnServer) == 0x000000, "Member 'DFBaseGun_GetMuzzleAttachComponent::bIgnoreLocalControlOnServer' has a wrong offset!");
//(offsetof(DFBaseGun_GetMuzzleAttachComponent, ReturnValue) == 0x000008, "Member 'DFBaseGun_GetMuzzleAttachComponent::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetMuzzleAttachPoint
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGun_GetMuzzleAttachPoint final 
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetMuzzleAttachPoint) == 0x000004, "Wrong alignment on DFBaseGun_GetMuzzleAttachPoint");
//(sizeof(DFBaseGun_GetMuzzleAttachPoint) == 0x000008, "Wrong size on DFBaseGun_GetMuzzleAttachPoint");
//(offsetof(DFBaseGun_GetMuzzleAttachPoint, ReturnValue) == 0x000000, "Member 'DFBaseGun_GetMuzzleAttachPoint::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetMuzzleDirection
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGun_GetMuzzleDirection final 
{
public:
	bool                                          bIgnoreLocalControlOnServer;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D90[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetMuzzleDirection) == 0x000004, "Wrong alignment on DFBaseGun_GetMuzzleDirection");
//(sizeof(DFBaseGun_GetMuzzleDirection) == 0x000010, "Wrong size on DFBaseGun_GetMuzzleDirection");
//(offsetof(DFBaseGun_GetMuzzleDirection, bIgnoreLocalControlOnServer) == 0x000000, "Member 'DFBaseGun_GetMuzzleDirection::bIgnoreLocalControlOnServer' has a wrong offset!");
//(offsetof(DFBaseGun_GetMuzzleDirection, ReturnValue) == 0x000004, "Member 'DFBaseGun_GetMuzzleDirection::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetMuzzleLocation
// 0x0010 (0x0010 - 0x0000)
struct DFBaseGun_GetMuzzleLocation final 
{
public:
	bool                                          bIgnoreLocalControlOnServer;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D91[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetMuzzleLocation) == 0x000004, "Wrong alignment on DFBaseGun_GetMuzzleLocation");
//(sizeof(DFBaseGun_GetMuzzleLocation) == 0x000010, "Wrong size on DFBaseGun_GetMuzzleLocation");
//(offsetof(DFBaseGun_GetMuzzleLocation, bIgnoreLocalControlOnServer) == 0x000000, "Member 'DFBaseGun_GetMuzzleLocation::bIgnoreLocalControlOnServer' has a wrong offset!");
//(offsetof(DFBaseGun_GetMuzzleLocation, ReturnValue) == 0x000004, "Member 'DFBaseGun_GetMuzzleLocation::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetNumFreeAmmoClips
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGun_GetNumFreeAmmoClips final 
{
public:
	bool                                          bIncludeEmptyMags;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeCurrentMag;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D92[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetNumFreeAmmoClips) == 0x000004, "Wrong alignment on DFBaseGun_GetNumFreeAmmoClips");
//(sizeof(DFBaseGun_GetNumFreeAmmoClips) == 0x000008, "Wrong size on DFBaseGun_GetNumFreeAmmoClips");
//(offsetof(DFBaseGun_GetNumFreeAmmoClips, bIncludeEmptyMags) == 0x000000, "Member 'DFBaseGun_GetNumFreeAmmoClips::bIncludeEmptyMags' has a wrong offset!");
//(offsetof(DFBaseGun_GetNumFreeAmmoClips, bIncludeCurrentMag) == 0x000001, "Member 'DFBaseGun_GetNumFreeAmmoClips::bIncludeCurrentMag' has a wrong offset!");
//(offsetof(DFBaseGun_GetNumFreeAmmoClips, ReturnValue) == 0x000004, "Member 'DFBaseGun_GetNumFreeAmmoClips::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetPostReloadClipAmmo
// 0x0004 (0x0004 - 0x0000)
struct DFBaseGun_GetPostReloadClipAmmo final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetPostReloadClipAmmo) == 0x000004, "Wrong alignment on DFBaseGun_GetPostReloadClipAmmo");
//(sizeof(DFBaseGun_GetPostReloadClipAmmo) == 0x000004, "Wrong size on DFBaseGun_GetPostReloadClipAmmo");
//(offsetof(DFBaseGun_GetPostReloadClipAmmo, ReturnValue) == 0x000000, "Member 'DFBaseGun_GetPostReloadClipAmmo::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetPreviousReloadState
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_GetPreviousReloadState final 
{
public:
	EGunReloadState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetPreviousReloadState) == 0x000001, "Wrong alignment on DFBaseGun_GetPreviousReloadState");
//(sizeof(DFBaseGun_GetPreviousReloadState) == 0x000001, "Wrong size on DFBaseGun_GetPreviousReloadState");
//(offsetof(DFBaseGun_GetPreviousReloadState, ReturnValue) == 0x000000, "Member 'DFBaseGun_GetPreviousReloadState::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetReloadState
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_GetReloadState final 
{
public:
	EGunReloadState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetReloadState) == 0x000001, "Wrong alignment on DFBaseGun_GetReloadState");
//(sizeof(DFBaseGun_GetReloadState) == 0x000001, "Wrong size on DFBaseGun_GetReloadState");
//(offsetof(DFBaseGun_GetReloadState, ReturnValue) == 0x000000, "Member 'DFBaseGun_GetReloadState::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetSelectedFireMode
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_GetSelectedFireMode final 
{
public:
	EFireMode                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetSelectedFireMode) == 0x000001, "Wrong alignment on DFBaseGun_GetSelectedFireMode");
//(sizeof(DFBaseGun_GetSelectedFireMode) == 0x000001, "Wrong size on DFBaseGun_GetSelectedFireMode");
//(offsetof(DFBaseGun_GetSelectedFireMode, ReturnValue) == 0x000000, "Member 'DFBaseGun_GetSelectedFireMode::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetShellEjectAttachPoint
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGun_GetShellEjectAttachPoint final 
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetShellEjectAttachPoint) == 0x000004, "Wrong alignment on DFBaseGun_GetShellEjectAttachPoint");
//(sizeof(DFBaseGun_GetShellEjectAttachPoint) == 0x000008, "Wrong size on DFBaseGun_GetShellEjectAttachPoint");
//(offsetof(DFBaseGun_GetShellEjectAttachPoint, ReturnValue) == 0x000000, "Member 'DFBaseGun_GetShellEjectAttachPoint::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetSupportedFireModes
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_GetSupportedFireModes final 
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetSupportedFireModes) == 0x000001, "Wrong alignment on DFBaseGun_GetSupportedFireModes");
//(sizeof(DFBaseGun_GetSupportedFireModes) == 0x000001, "Wrong size on DFBaseGun_GetSupportedFireModes");
//(offsetof(DFBaseGun_GetSupportedFireModes, ReturnValue) == 0x000000, "Member 'DFBaseGun_GetSupportedFireModes::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.GetTotalAmmo
// 0x0008 (0x0008 - 0x0000)
struct DFBaseGun_GetTotalAmmo final 
{
public:
	bool                                          bIncludeLoadedMags;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D93[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_GetTotalAmmo) == 0x000004, "Wrong alignment on DFBaseGun_GetTotalAmmo");
//(sizeof(DFBaseGun_GetTotalAmmo) == 0x000008, "Wrong size on DFBaseGun_GetTotalAmmo");
//(offsetof(DFBaseGun_GetTotalAmmo, bIncludeLoadedMags) == 0x000000, "Member 'DFBaseGun_GetTotalAmmo::bIncludeLoadedMags' has a wrong offset!");
//(offsetof(DFBaseGun_GetTotalAmmo, ReturnValue) == 0x000004, "Member 'DFBaseGun_GetTotalAmmo::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.HasAmmoClip
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_HasAmmoClip final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_HasAmmoClip) == 0x000001, "Wrong alignment on DFBaseGun_HasAmmoClip");
//(sizeof(DFBaseGun_HasAmmoClip) == 0x000001, "Wrong size on DFBaseGun_HasAmmoClip");
//(offsetof(DFBaseGun_HasAmmoClip, ReturnValue) == 0x000000, "Member 'DFBaseGun_HasAmmoClip::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.HasExhaustedAllAmmo
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_HasExhaustedAllAmmo final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_HasExhaustedAllAmmo) == 0x000001, "Wrong alignment on DFBaseGun_HasExhaustedAllAmmo");
//(sizeof(DFBaseGun_HasExhaustedAllAmmo) == 0x000001, "Wrong size on DFBaseGun_HasExhaustedAllAmmo");
//(offsetof(DFBaseGun_HasExhaustedAllAmmo, ReturnValue) == 0x000000, "Member 'DFBaseGun_HasExhaustedAllAmmo::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.IsDryReloading
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_IsDryReloading final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_IsDryReloading) == 0x000001, "Wrong alignment on DFBaseGun_IsDryReloading");
//(sizeof(DFBaseGun_IsDryReloading) == 0x000001, "Wrong size on DFBaseGun_IsDryReloading");
//(offsetof(DFBaseGun_IsDryReloading, ReturnValue) == 0x000000, "Member 'DFBaseGun_IsDryReloading::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_IsReloading final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_IsReloading) == 0x000001, "Wrong alignment on DFBaseGun_IsReloading");
//(sizeof(DFBaseGun_IsReloading) == 0x000001, "Wrong size on DFBaseGun_IsReloading");
//(offsetof(DFBaseGun_IsReloading, ReturnValue) == 0x000000, "Member 'DFBaseGun_IsReloading::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.ShouldSimulateGunReload
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_ShouldSimulateGunReload final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_ShouldSimulateGunReload) == 0x000001, "Wrong alignment on DFBaseGun_ShouldSimulateGunReload");
//(sizeof(DFBaseGun_ShouldSimulateGunReload) == 0x000001, "Wrong size on DFBaseGun_ShouldSimulateGunReload");
//(offsetof(DFBaseGun_ShouldSimulateGunReload, ReturnValue) == 0x000000, "Member 'DFBaseGun_ShouldSimulateGunReload::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun.ShouldUseRecoil
// 0x0001 (0x0001 - 0x0000)
struct DFBaseGun_ShouldUseRecoil final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_ShouldUseRecoil) == 0x000001, "Wrong alignment on DFBaseGun_ShouldUseRecoil");
//(sizeof(DFBaseGun_ShouldUseRecoil) == 0x000001, "Wrong size on DFBaseGun_ShouldUseRecoil");
//(offsetof(DFBaseGun_ShouldUseRecoil, ReturnValue) == 0x000000, "Member 'DFBaseGun_ShouldUseRecoil::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFPlayerComponent.CanRestartPlayer
// 0x0001 (0x0001 - 0x0000)
struct DFPlayerComponent_CanRestartPlayer final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFPlayerComponent_CanRestartPlayer) == 0x000001, "Wrong alignment on DFPlayerComponent_CanRestartPlayer");
//(sizeof(DFPlayerComponent_CanRestartPlayer) == 0x000001, "Wrong size on DFPlayerComponent_CanRestartPlayer");
//(offsetof(DFPlayerComponent_CanRestartPlayer, ReturnValue) == 0x000000, "Member 'DFPlayerComponent_CanRestartPlayer::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFPlayerComponent.GetMinRestartDelay
// 0x0004 (0x0004 - 0x0000)
struct DFPlayerComponent_GetMinRestartDelay final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFPlayerComponent_GetMinRestartDelay) == 0x000004, "Wrong alignment on DFPlayerComponent_GetMinRestartDelay");
//(sizeof(DFPlayerComponent_GetMinRestartDelay) == 0x000004, "Wrong size on DFPlayerComponent_GetMinRestartDelay");
//(offsetof(DFPlayerComponent_GetMinRestartDelay, ReturnValue) == 0x000000, "Member 'DFPlayerComponent_GetMinRestartDelay::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFPlayerComponent.ReceiveGameHasEnded
// 0x0010 (0x0010 - 0x0000)
struct DFPlayerComponent_ReceiveGameHasEnded final 
{
public:
	class AActor*                                 EndGameFocus;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWinner;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D95[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFPlayerComponent_ReceiveGameHasEnded) == 0x000008, "Wrong alignment on DFPlayerComponent_ReceiveGameHasEnded");
//(sizeof(DFPlayerComponent_ReceiveGameHasEnded) == 0x000010, "Wrong size on DFPlayerComponent_ReceiveGameHasEnded");
//(offsetof(DFPlayerComponent_ReceiveGameHasEnded, EndGameFocus) == 0x000000, "Member 'DFPlayerComponent_ReceiveGameHasEnded::EndGameFocus' has a wrong offset!");
//(offsetof(DFPlayerComponent_ReceiveGameHasEnded, bIsWinner) == 0x000008, "Member 'DFPlayerComponent_ReceiveGameHasEnded::bIsWinner' has a wrong offset!");

// Function DonkehFramework.DFPlayerComponent.ReceiveSeamlessTravelFromCommon
// 0x0010 (0x0010 - 0x0000)
struct DFPlayerComponent_ReceiveSeamlessTravelFromCommon final 
{
public:
	class AController*                            OldC;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFPlayerComponent*                     OldCPlayerComp;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFPlayerComponent_ReceiveSeamlessTravelFromCommon) == 0x000008, "Wrong alignment on DFPlayerComponent_ReceiveSeamlessTravelFromCommon");
//(sizeof(DFPlayerComponent_ReceiveSeamlessTravelFromCommon) == 0x000010, "Wrong size on DFPlayerComponent_ReceiveSeamlessTravelFromCommon");
//(offsetof(DFPlayerComponent_ReceiveSeamlessTravelFromCommon, OldC) == 0x000000, "Member 'DFPlayerComponent_ReceiveSeamlessTravelFromCommon::OldC' has a wrong offset!");
//(offsetof(DFPlayerComponent_ReceiveSeamlessTravelFromCommon, OldCPlayerComp) == 0x000008, "Member 'DFPlayerComponent_ReceiveSeamlessTravelFromCommon::OldCPlayerComp' has a wrong offset!");

// Function DonkehFramework.DFPlayerComponent.ReceiveSeamlessTravelToCommon
// 0x0010 (0x0010 - 0x0000)
struct DFPlayerComponent_ReceiveSeamlessTravelToCommon final 
{
public:
	class AController*                            NewC;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFPlayerComponent*                     NewCPlayerComp;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFPlayerComponent_ReceiveSeamlessTravelToCommon) == 0x000008, "Wrong alignment on DFPlayerComponent_ReceiveSeamlessTravelToCommon");
//(sizeof(DFPlayerComponent_ReceiveSeamlessTravelToCommon) == 0x000010, "Wrong size on DFPlayerComponent_ReceiveSeamlessTravelToCommon");
//(offsetof(DFPlayerComponent_ReceiveSeamlessTravelToCommon, NewC) == 0x000000, "Member 'DFPlayerComponent_ReceiveSeamlessTravelToCommon::NewC' has a wrong offset!");
//(offsetof(DFPlayerComponent_ReceiveSeamlessTravelToCommon, NewCPlayerComp) == 0x000008, "Member 'DFPlayerComponent_ReceiveSeamlessTravelToCommon::NewCPlayerComp' has a wrong offset!");

// Function DonkehFramework.DFPlayerComponent.GetPawnOwner
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerComponent_GetPawnOwner final 
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFPlayerComponent_GetPawnOwner) == 0x000008, "Wrong alignment on DFPlayerComponent_GetPawnOwner");
//(sizeof(DFPlayerComponent_GetPawnOwner) == 0x000008, "Wrong size on DFPlayerComponent_GetPawnOwner");
//(offsetof(DFPlayerComponent_GetPawnOwner, ReturnValue) == 0x000000, "Member 'DFPlayerComponent_GetPawnOwner::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFPlayerComponent.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerComponent_GetPlayerState final 
{
public:
	class APlayerState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFPlayerComponent_GetPlayerState) == 0x000008, "Wrong alignment on DFPlayerComponent_GetPlayerState");
//(sizeof(DFPlayerComponent_GetPlayerState) == 0x000008, "Wrong size on DFPlayerComponent_GetPlayerState");
//(offsetof(DFPlayerComponent_GetPlayerState, ReturnValue) == 0x000000, "Member 'DFPlayerComponent_GetPlayerState::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFPlayerComponent.GetTeamState
// 0x0008 (0x0008 - 0x0000)
struct DFPlayerComponent_GetTeamState final 
{
public:
	class ADFTeamState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFPlayerComponent_GetTeamState) == 0x000008, "Wrong alignment on DFPlayerComponent_GetTeamState");
//(sizeof(DFPlayerComponent_GetTeamState) == 0x000008, "Wrong size on DFPlayerComponent_GetTeamState");
//(offsetof(DFPlayerComponent_GetTeamState, ReturnValue) == 0x000000, "Member 'DFPlayerComponent_GetTeamState::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFPlayerComponent.IsPendingRestart
// 0x0001 (0x0001 - 0x0000)
struct DFPlayerComponent_IsPendingRestart final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFPlayerComponent_IsPendingRestart) == 0x000001, "Wrong alignment on DFPlayerComponent_IsPendingRestart");
//(sizeof(DFPlayerComponent_IsPendingRestart) == 0x000001, "Wrong size on DFPlayerComponent_IsPendingRestart");
//(offsetof(DFPlayerComponent_IsPendingRestart, ReturnValue) == 0x000000, "Member 'DFPlayerComponent_IsPendingRestart::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseGun_Projectile.ClientDrawDebugFireCone
// 0x0018 (0x0018 - 0x0000)
struct DFBaseGun_Projectile_ClientDrawDebugFireCone final 
{
public:
	struct FVector                                ConeOrig;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ConeDir;                                           // 0x000C(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_Projectile_ClientDrawDebugFireCone) == 0x000004, "Wrong alignment on DFBaseGun_Projectile_ClientDrawDebugFireCone");
//(sizeof(DFBaseGun_Projectile_ClientDrawDebugFireCone) == 0x000018, "Wrong size on DFBaseGun_Projectile_ClientDrawDebugFireCone");
//(offsetof(DFBaseGun_Projectile_ClientDrawDebugFireCone, ConeOrig) == 0x000000, "Member 'DFBaseGun_Projectile_ClientDrawDebugFireCone::ConeOrig' has a wrong offset!");
//(offsetof(DFBaseGun_Projectile_ClientDrawDebugFireCone, ConeDir) == 0x00000C, "Member 'DFBaseGun_Projectile_ClientDrawDebugFireCone::ConeDir' has a wrong offset!");

// Function DonkehFramework.DFBaseGun_Projectile.ClientProjDebugImpactInfo
// 0x0020 (0x0020 - 0x0000)
struct DFBaseGun_Projectile_ClientProjDebugImpactInfo final 
{
public:
	class ADFBaseProjectile*                      Proj;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactLoc;                                         // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ImpactNorm;                                        // 0x0014(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_Projectile_ClientProjDebugImpactInfo) == 0x000008, "Wrong alignment on DFBaseGun_Projectile_ClientProjDebugImpactInfo");
//(sizeof(DFBaseGun_Projectile_ClientProjDebugImpactInfo) == 0x000020, "Wrong size on DFBaseGun_Projectile_ClientProjDebugImpactInfo");
//(offsetof(DFBaseGun_Projectile_ClientProjDebugImpactInfo, Proj) == 0x000000, "Member 'DFBaseGun_Projectile_ClientProjDebugImpactInfo::Proj' has a wrong offset!");
//(offsetof(DFBaseGun_Projectile_ClientProjDebugImpactInfo, ImpactLoc) == 0x000008, "Member 'DFBaseGun_Projectile_ClientProjDebugImpactInfo::ImpactLoc' has a wrong offset!");
//(offsetof(DFBaseGun_Projectile_ClientProjDebugImpactInfo, ImpactNorm) == 0x000014, "Member 'DFBaseGun_Projectile_ClientProjDebugImpactInfo::ImpactNorm' has a wrong offset!");

// Function DonkehFramework.DFBaseGun_Projectile.ClientProjDebugInfo
// 0x0038 (0x0038 - 0x0000)
struct DFBaseGun_Projectile_ClientProjDebugInfo final 
{
public:
	class ADFBaseProjectile*                      Proj;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewProjLoc;                                        // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastProjLoc;                                       // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewProjRot;                                        // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                NewProjVel;                                        // 0x002C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_Projectile_ClientProjDebugInfo) == 0x000008, "Wrong alignment on DFBaseGun_Projectile_ClientProjDebugInfo");
//(sizeof(DFBaseGun_Projectile_ClientProjDebugInfo) == 0x000038, "Wrong size on DFBaseGun_Projectile_ClientProjDebugInfo");
//(offsetof(DFBaseGun_Projectile_ClientProjDebugInfo, Proj) == 0x000000, "Member 'DFBaseGun_Projectile_ClientProjDebugInfo::Proj' has a wrong offset!");
//(offsetof(DFBaseGun_Projectile_ClientProjDebugInfo, NewProjLoc) == 0x000008, "Member 'DFBaseGun_Projectile_ClientProjDebugInfo::NewProjLoc' has a wrong offset!");
//(offsetof(DFBaseGun_Projectile_ClientProjDebugInfo, LastProjLoc) == 0x000014, "Member 'DFBaseGun_Projectile_ClientProjDebugInfo::LastProjLoc' has a wrong offset!");
//(offsetof(DFBaseGun_Projectile_ClientProjDebugInfo, NewProjRot) == 0x000020, "Member 'DFBaseGun_Projectile_ClientProjDebugInfo::NewProjRot' has a wrong offset!");
//(offsetof(DFBaseGun_Projectile_ClientProjDebugInfo, NewProjVel) == 0x00002C, "Member 'DFBaseGun_Projectile_ClientProjDebugInfo::NewProjVel' has a wrong offset!");

// Function DonkehFramework.DFBaseGun_Projectile.ServerNotifyCSHit
// 0x0080 (0x0080 - 0x0000)
struct DFBaseGun_Projectile_ServerNotifyCSHit final 
{
public:
	class ADFBaseProjectile*                      HitProj;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCSHitInfo                             HitInfo;                                           // 0x0008(0x0070)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ShotID;                                            // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D98[0x4];                                      // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseGun_Projectile_ServerNotifyCSHit) == 0x000008, "Wrong alignment on DFBaseGun_Projectile_ServerNotifyCSHit");
//(sizeof(DFBaseGun_Projectile_ServerNotifyCSHit) == 0x000080, "Wrong size on DFBaseGun_Projectile_ServerNotifyCSHit");
//(offsetof(DFBaseGun_Projectile_ServerNotifyCSHit, HitProj) == 0x000000, "Member 'DFBaseGun_Projectile_ServerNotifyCSHit::HitProj' has a wrong offset!");
//(offsetof(DFBaseGun_Projectile_ServerNotifyCSHit, HitInfo) == 0x000008, "Member 'DFBaseGun_Projectile_ServerNotifyCSHit::HitInfo' has a wrong offset!");
//(offsetof(DFBaseGun_Projectile_ServerNotifyCSHit, ShotID) == 0x000078, "Member 'DFBaseGun_Projectile_ServerNotifyCSHit::ShotID' has a wrong offset!");

// Function DonkehFramework.DFBaseGun_Projectile.ServerNotifyCSHitPredicted
// 0x0074 (0x0074 - 0x0000)
struct DFBaseGun_Projectile_ServerNotifyCSHitPredicted final 
{
public:
	struct FCSHitInfo                             HitInfo;                                           // 0x0000(0x0070)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ShotID;                                            // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_Projectile_ServerNotifyCSHitPredicted) == 0x000004, "Wrong alignment on DFBaseGun_Projectile_ServerNotifyCSHitPredicted");
//(sizeof(DFBaseGun_Projectile_ServerNotifyCSHitPredicted) == 0x000074, "Wrong size on DFBaseGun_Projectile_ServerNotifyCSHitPredicted");
//(offsetof(DFBaseGun_Projectile_ServerNotifyCSHitPredicted, HitInfo) == 0x000000, "Member 'DFBaseGun_Projectile_ServerNotifyCSHitPredicted::HitInfo' has a wrong offset!");
//(offsetof(DFBaseGun_Projectile_ServerNotifyCSHitPredicted, ShotID) == 0x000070, "Member 'DFBaseGun_Projectile_ServerNotifyCSHitPredicted::ShotID' has a wrong offset!");

// Function DonkehFramework.DFBaseGun_Projectile.CalcShotVector
// 0x0018 (0x0018 - 0x0000)
struct DFBaseGun_Projectile_CalcShotVector final 
{
public:
	struct FVector                                OutProjOrigin;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutProjDir;                                        // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseGun_Projectile_CalcShotVector) == 0x000004, "Wrong alignment on DFBaseGun_Projectile_CalcShotVector");
//(sizeof(DFBaseGun_Projectile_CalcShotVector) == 0x000018, "Wrong size on DFBaseGun_Projectile_CalcShotVector");
//(offsetof(DFBaseGun_Projectile_CalcShotVector, OutProjOrigin) == 0x000000, "Member 'DFBaseGun_Projectile_CalcShotVector::OutProjOrigin' has a wrong offset!");
//(offsetof(DFBaseGun_Projectile_CalcShotVector, OutProjDir) == 0x00000C, "Member 'DFBaseGun_Projectile_CalcShotVector::OutProjDir' has a wrong offset!");

// Function DonkehFramework.DFBaseImpactEffect.GetImpactFX
// 0x0010 (0x0010 - 0x0000)
struct DFBaseImpactEffect_GetImpactFX final 
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9A[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseImpactEffect_GetImpactFX) == 0x000008, "Wrong alignment on DFBaseImpactEffect_GetImpactFX");
//(sizeof(DFBaseImpactEffect_GetImpactFX) == 0x000010, "Wrong size on DFBaseImpactEffect_GetImpactFX");
//(offsetof(DFBaseImpactEffect_GetImpactFX, SurfaceType) == 0x000000, "Member 'DFBaseImpactEffect_GetImpactFX::SurfaceType' has a wrong offset!");
//(offsetof(DFBaseImpactEffect_GetImpactFX, ReturnValue) == 0x000008, "Member 'DFBaseImpactEffect_GetImpactFX::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseImpactEffect.GetImpactSound
// 0x0010 (0x0010 - 0x0000)
struct DFBaseImpactEffect_GetImpactSound final 
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9B[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseImpactEffect_GetImpactSound) == 0x000008, "Wrong alignment on DFBaseImpactEffect_GetImpactSound");
//(sizeof(DFBaseImpactEffect_GetImpactSound) == 0x000010, "Wrong size on DFBaseImpactEffect_GetImpactSound");
//(offsetof(DFBaseImpactEffect_GetImpactSound, SurfaceType) == 0x000000, "Member 'DFBaseImpactEffect_GetImpactSound::SurfaceType' has a wrong offset!");
//(offsetof(DFBaseImpactEffect_GetImpactSound, ReturnValue) == 0x000008, "Member 'DFBaseImpactEffect_GetImpactSound::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePickup.GivePickupTo
// 0x0008 (0x0008 - 0x0000)
struct DFBasePickup_GivePickupTo final 
{
public:
	class ADFBaseCharacter*                       PickupOwner;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePickup_GivePickupTo) == 0x000008, "Wrong alignment on DFBasePickup_GivePickupTo");
//(sizeof(DFBasePickup_GivePickupTo) == 0x000008, "Wrong size on DFBasePickup_GivePickupTo");
//(offsetof(DFBasePickup_GivePickupTo, PickupOwner) == 0x000000, "Member 'DFBasePickup_GivePickupTo::PickupOwner' has a wrong offset!");

// Function DonkehFramework.DFBasePickup.UpdatePickupState
// 0x0001 (0x0001 - 0x0000)
struct DFBasePickup_UpdatePickupState final 
{
public:
	bool                                          bNewActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePickup_UpdatePickupState) == 0x000001, "Wrong alignment on DFBasePickup_UpdatePickupState");
//(sizeof(DFBasePickup_UpdatePickupState) == 0x000001, "Wrong size on DFBasePickup_UpdatePickupState");
//(offsetof(DFBasePickup_UpdatePickupState, bNewActive) == 0x000000, "Member 'DFBasePickup_UpdatePickupState::bNewActive' has a wrong offset!");

// Function DonkehFramework.DFBasePickup.CanBePickedUp
// 0x0010 (0x0010 - 0x0000)
struct DFBasePickup_CanBePickedUp final 
{
public:
	class ADFBaseCharacter*                       Invoker;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA0[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePickup_CanBePickedUp) == 0x000008, "Wrong alignment on DFBasePickup_CanBePickedUp");
//(sizeof(DFBasePickup_CanBePickedUp) == 0x000010, "Wrong size on DFBasePickup_CanBePickedUp");
//(offsetof(DFBasePickup_CanBePickedUp, Invoker) == 0x000000, "Member 'DFBasePickup_CanBePickedUp::Invoker' has a wrong offset!");
//(offsetof(DFBasePickup_CanBePickedUp, ReturnValue) == 0x000008, "Member 'DFBasePickup_CanBePickedUp::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.LookUpAtRate
// 0x0004 (0x0004 - 0x0000)
struct DFBasePlayerCharacter_LookUpAtRate final 
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_LookUpAtRate) == 0x000004, "Wrong alignment on DFBasePlayerCharacter_LookUpAtRate");
//(sizeof(DFBasePlayerCharacter_LookUpAtRate) == 0x000004, "Wrong size on DFBasePlayerCharacter_LookUpAtRate");
//(offsetof(DFBasePlayerCharacter_LookUpAtRate, Rate) == 0x000000, "Member 'DFBasePlayerCharacter_LookUpAtRate::Rate' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.MoveForward
// 0x0004 (0x0004 - 0x0000)
struct DFBasePlayerCharacter_MoveForward final 
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_MoveForward) == 0x000004, "Wrong alignment on DFBasePlayerCharacter_MoveForward");
//(sizeof(DFBasePlayerCharacter_MoveForward) == 0x000004, "Wrong size on DFBasePlayerCharacter_MoveForward");
//(offsetof(DFBasePlayerCharacter_MoveForward, Value) == 0x000000, "Member 'DFBasePlayerCharacter_MoveForward::Value' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.MoveRight
// 0x0004 (0x0004 - 0x0000)
struct DFBasePlayerCharacter_MoveRight final 
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_MoveRight) == 0x000004, "Wrong alignment on DFBasePlayerCharacter_MoveRight");
//(sizeof(DFBasePlayerCharacter_MoveRight) == 0x000004, "Wrong size on DFBasePlayerCharacter_MoveRight");
//(offsetof(DFBasePlayerCharacter_MoveRight, Value) == 0x000000, "Member 'DFBasePlayerCharacter_MoveRight::Value' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.MoveUp
// 0x0004 (0x0004 - 0x0000)
struct DFBasePlayerCharacter_MoveUp final 
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_MoveUp) == 0x000004, "Wrong alignment on DFBasePlayerCharacter_MoveUp");
//(sizeof(DFBasePlayerCharacter_MoveUp) == 0x000004, "Wrong size on DFBasePlayerCharacter_MoveUp");
//(offsetof(DFBasePlayerCharacter_MoveUp, Value) == 0x000000, "Member 'DFBasePlayerCharacter_MoveUp::Value' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.OnToggleFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerCharacter_OnToggleFirstPerson final 
{
public:
	bool                                          bNewFirstPerson;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_OnToggleFirstPerson) == 0x000001, "Wrong alignment on DFBasePlayerCharacter_OnToggleFirstPerson");
//(sizeof(DFBasePlayerCharacter_OnToggleFirstPerson) == 0x000001, "Wrong size on DFBasePlayerCharacter_OnToggleFirstPerson");
//(offsetof(DFBasePlayerCharacter_OnToggleFirstPerson, bNewFirstPerson) == 0x000000, "Member 'DFBasePlayerCharacter_OnToggleFirstPerson::bNewFirstPerson' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.ServerOnToggleFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerCharacter_ServerOnToggleFirstPerson final 
{
public:
	bool                                          bNewFirstPerson;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_ServerOnToggleFirstPerson) == 0x000001, "Wrong alignment on DFBasePlayerCharacter_ServerOnToggleFirstPerson");
//(sizeof(DFBasePlayerCharacter_ServerOnToggleFirstPerson) == 0x000001, "Wrong size on DFBasePlayerCharacter_ServerOnToggleFirstPerson");
//(offsetof(DFBasePlayerCharacter_ServerOnToggleFirstPerson, bNewFirstPerson) == 0x000000, "Member 'DFBasePlayerCharacter_ServerOnToggleFirstPerson::bNewFirstPerson' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.ServerUse
// 0x0020 (0x0020 - 0x0000)
struct DFBasePlayerCharacter_ServerUse final 
{
public:
	class AActor*                                 UseTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    UseTraceStart;                                     // 0x0008(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    UseTraceEnd;                                       // 0x0014(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_ServerUse) == 0x000008, "Wrong alignment on DFBasePlayerCharacter_ServerUse");
//(sizeof(DFBasePlayerCharacter_ServerUse) == 0x000020, "Wrong size on DFBasePlayerCharacter_ServerUse");
//(offsetof(DFBasePlayerCharacter_ServerUse, UseTarget) == 0x000000, "Member 'DFBasePlayerCharacter_ServerUse::UseTarget' has a wrong offset!");
//(offsetof(DFBasePlayerCharacter_ServerUse, UseTraceStart) == 0x000008, "Member 'DFBasePlayerCharacter_ServerUse::UseTraceStart' has a wrong offset!");
//(offsetof(DFBasePlayerCharacter_ServerUse, UseTraceEnd) == 0x000014, "Member 'DFBasePlayerCharacter_ServerUse::UseTraceEnd' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.SetMeshVisibility
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerCharacter_SetMeshVisibility final 
{
public:
	bool                                          bFirstPersonVisibility;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_SetMeshVisibility) == 0x000001, "Wrong alignment on DFBasePlayerCharacter_SetMeshVisibility");
//(sizeof(DFBasePlayerCharacter_SetMeshVisibility) == 0x000001, "Wrong size on DFBasePlayerCharacter_SetMeshVisibility");
//(offsetof(DFBasePlayerCharacter_SetMeshVisibility, bFirstPersonVisibility) == 0x000000, "Member 'DFBasePlayerCharacter_SetMeshVisibility::bFirstPersonVisibility' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.TurnAtRate
// 0x0004 (0x0004 - 0x0000)
struct DFBasePlayerCharacter_TurnAtRate final 
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_TurnAtRate) == 0x000004, "Wrong alignment on DFBasePlayerCharacter_TurnAtRate");
//(sizeof(DFBasePlayerCharacter_TurnAtRate) == 0x000004, "Wrong size on DFBasePlayerCharacter_TurnAtRate");
//(offsetof(DFBasePlayerCharacter_TurnAtRate, Rate) == 0x000000, "Member 'DFBasePlayerCharacter_TurnAtRate::Rate' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.GetCamera
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerCharacter_GetCamera final 
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_GetCamera) == 0x000008, "Wrong alignment on DFBasePlayerCharacter_GetCamera");
//(sizeof(DFBasePlayerCharacter_GetCamera) == 0x000008, "Wrong size on DFBasePlayerCharacter_GetCamera");
//(offsetof(DFBasePlayerCharacter_GetCamera, ReturnValue) == 0x000000, "Member 'DFBasePlayerCharacter_GetCamera::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.GetCamera1P
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerCharacter_GetCamera1P final 
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_GetCamera1P) == 0x000008, "Wrong alignment on DFBasePlayerCharacter_GetCamera1P");
//(sizeof(DFBasePlayerCharacter_GetCamera1P) == 0x000008, "Wrong size on DFBasePlayerCharacter_GetCamera1P");
//(offsetof(DFBasePlayerCharacter_GetCamera1P, ReturnValue) == 0x000000, "Member 'DFBasePlayerCharacter_GetCamera1P::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.GetCameraBoom
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerCharacter_GetCameraBoom final 
{
public:
	class USpringArmComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_GetCameraBoom) == 0x000008, "Wrong alignment on DFBasePlayerCharacter_GetCameraBoom");
//(sizeof(DFBasePlayerCharacter_GetCameraBoom) == 0x000008, "Wrong size on DFBasePlayerCharacter_GetCameraBoom");
//(offsetof(DFBasePlayerCharacter_GetCameraBoom, ReturnValue) == 0x000000, "Member 'DFBasePlayerCharacter_GetCameraBoom::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.GetDefaultPawnMesh1P
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerCharacter_GetDefaultPawnMesh1P final 
{
public:
	class USkeletalMesh*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_GetDefaultPawnMesh1P) == 0x000008, "Wrong alignment on DFBasePlayerCharacter_GetDefaultPawnMesh1P");
//(sizeof(DFBasePlayerCharacter_GetDefaultPawnMesh1P) == 0x000008, "Wrong size on DFBasePlayerCharacter_GetDefaultPawnMesh1P");
//(offsetof(DFBasePlayerCharacter_GetDefaultPawnMesh1P, ReturnValue) == 0x000000, "Member 'DFBasePlayerCharacter_GetDefaultPawnMesh1P::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.GetItemAttachPoint1P
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerCharacter_GetItemAttachPoint1P final 
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_GetItemAttachPoint1P) == 0x000004, "Wrong alignment on DFBasePlayerCharacter_GetItemAttachPoint1P");
//(sizeof(DFBasePlayerCharacter_GetItemAttachPoint1P) == 0x000008, "Wrong size on DFBasePlayerCharacter_GetItemAttachPoint1P");
//(offsetof(DFBasePlayerCharacter_GetItemAttachPoint1P, ReturnValue) == 0x000000, "Member 'DFBasePlayerCharacter_GetItemAttachPoint1P::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.GetMesh1P
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerCharacter_GetMesh1P final 
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_GetMesh1P) == 0x000008, "Wrong alignment on DFBasePlayerCharacter_GetMesh1P");
//(sizeof(DFBasePlayerCharacter_GetMesh1P) == 0x000008, "Wrong size on DFBasePlayerCharacter_GetMesh1P");
//(offsetof(DFBasePlayerCharacter_GetMesh1P, ReturnValue) == 0x000000, "Member 'DFBasePlayerCharacter_GetMesh1P::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.IsFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerCharacter_IsFirstPerson final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_IsFirstPerson) == 0x000001, "Wrong alignment on DFBasePlayerCharacter_IsFirstPerson");
//(sizeof(DFBasePlayerCharacter_IsFirstPerson) == 0x000001, "Wrong size on DFBasePlayerCharacter_IsFirstPerson");
//(offsetof(DFBasePlayerCharacter_IsFirstPerson, ReturnValue) == 0x000000, "Member 'DFBasePlayerCharacter_IsFirstPerson::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.IsLocalFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerCharacter_IsLocalFirstPerson final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_IsLocalFirstPerson) == 0x000001, "Wrong alignment on DFBasePlayerCharacter_IsLocalFirstPerson");
//(sizeof(DFBasePlayerCharacter_IsLocalFirstPerson) == 0x000001, "Wrong size on DFBasePlayerCharacter_IsLocalFirstPerson");
//(offsetof(DFBasePlayerCharacter_IsLocalFirstPerson, ReturnValue) == 0x000000, "Member 'DFBasePlayerCharacter_IsLocalFirstPerson::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.IsTrueFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerCharacter_IsTrueFirstPerson final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_IsTrueFirstPerson) == 0x000001, "Wrong alignment on DFBasePlayerCharacter_IsTrueFirstPerson");
//(sizeof(DFBasePlayerCharacter_IsTrueFirstPerson) == 0x000001, "Wrong size on DFBasePlayerCharacter_IsTrueFirstPerson");
//(offsetof(DFBasePlayerCharacter_IsTrueFirstPerson, ReturnValue) == 0x000000, "Member 'DFBasePlayerCharacter_IsTrueFirstPerson::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.IsUsingFirstPersonMesh
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerCharacter_IsUsingFirstPersonMesh final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_IsUsingFirstPersonMesh) == 0x000001, "Wrong alignment on DFBasePlayerCharacter_IsUsingFirstPersonMesh");
//(sizeof(DFBasePlayerCharacter_IsUsingFirstPersonMesh) == 0x000001, "Wrong size on DFBasePlayerCharacter_IsUsingFirstPersonMesh");
//(offsetof(DFBasePlayerCharacter_IsUsingFirstPersonMesh, ReturnValue) == 0x000000, "Member 'DFBasePlayerCharacter_IsUsingFirstPersonMesh::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerCharacter.ReceiveGetDefaultPawnMesh1P
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerCharacter_ReceiveGetDefaultPawnMesh1P final 
{
public:
	class USkeletalMesh*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerCharacter_ReceiveGetDefaultPawnMesh1P) == 0x000008, "Wrong alignment on DFBasePlayerCharacter_ReceiveGetDefaultPawnMesh1P");
//(sizeof(DFBasePlayerCharacter_ReceiveGetDefaultPawnMesh1P) == 0x000008, "Wrong size on DFBasePlayerCharacter_ReceiveGetDefaultPawnMesh1P");
//(offsetof(DFBasePlayerCharacter_ReceiveGetDefaultPawnMesh1P, ReturnValue) == 0x000000, "Member 'DFBasePlayerCharacter_ReceiveGetDefaultPawnMesh1P::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.Admin
// 0x0010 (0x0010 - 0x0000)
struct DFBasePlayerController_Admin final 
{
public:
	class FString                                 Cmd;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_Admin) == 0x000008, "Wrong alignment on DFBasePlayerController_Admin");
//(sizeof(DFBasePlayerController_Admin) == 0x000010, "Wrong size on DFBasePlayerController_Admin");
//(offsetof(DFBasePlayerController_Admin, Cmd) == 0x000000, "Member 'DFBasePlayerController_Admin::Cmd' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.CastVote
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerController_CastVote final 
{
public:
	int32                                         VoteSelectionIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDFVotingChannel                              VotingChannel;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAD[0x2];                                      // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePlayerController_CastVote) == 0x000004, "Wrong alignment on DFBasePlayerController_CastVote");
//(sizeof(DFBasePlayerController_CastVote) == 0x000008, "Wrong size on DFBasePlayerController_CastVote");
//(offsetof(DFBasePlayerController_CastVote, VoteSelectionIndex) == 0x000000, "Member 'DFBasePlayerController_CastVote::VoteSelectionIndex' has a wrong offset!");
//(offsetof(DFBasePlayerController_CastVote, VotingChannel) == 0x000004, "Member 'DFBasePlayerController_CastVote::VotingChannel' has a wrong offset!");
//(offsetof(DFBasePlayerController_CastVote, ReturnValue) == 0x000005, "Member 'DFBasePlayerController_CastVote::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.InitiateVote
// 0x0028 (0x0028 - 0x0000)
struct DFBasePlayerController_InitiateVote final 
{
public:
	TSubclassOf<class UDFVoteIssue>               IssueClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFVoteIssueContext                    IssueContext;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         VoteSelectionIndex;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDFVotingChannel                              VotingChannel;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAE[0x2];                                      // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePlayerController_InitiateVote) == 0x000008, "Wrong alignment on DFBasePlayerController_InitiateVote");
//(sizeof(DFBasePlayerController_InitiateVote) == 0x000028, "Wrong size on DFBasePlayerController_InitiateVote");
//(offsetof(DFBasePlayerController_InitiateVote, IssueClass) == 0x000000, "Member 'DFBasePlayerController_InitiateVote::IssueClass' has a wrong offset!");
//(offsetof(DFBasePlayerController_InitiateVote, IssueContext) == 0x000008, "Member 'DFBasePlayerController_InitiateVote::IssueContext' has a wrong offset!");
//(offsetof(DFBasePlayerController_InitiateVote, VoteSelectionIndex) == 0x000020, "Member 'DFBasePlayerController_InitiateVote::VoteSelectionIndex' has a wrong offset!");
//(offsetof(DFBasePlayerController_InitiateVote, VotingChannel) == 0x000024, "Member 'DFBasePlayerController_InitiateVote::VotingChannel' has a wrong offset!");
//(offsetof(DFBasePlayerController_InitiateVote, ReturnValue) == 0x000025, "Member 'DFBasePlayerController_InitiateVote::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.IsGameInputAllowed
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerController_IsGameInputAllowed final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_IsGameInputAllowed) == 0x000001, "Wrong alignment on DFBasePlayerController_IsGameInputAllowed");
//(sizeof(DFBasePlayerController_IsGameInputAllowed) == 0x000001, "Wrong size on DFBasePlayerController_IsGameInputAllowed");
//(offsetof(DFBasePlayerController_IsGameInputAllowed, ReturnValue) == 0x000000, "Member 'DFBasePlayerController_IsGameInputAllowed::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ReceiveGameHasEnded
// 0x0010 (0x0010 - 0x0000)
struct DFBasePlayerController_ReceiveGameHasEnded final 
{
public:
	class AActor*                                 EndGameFocus;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWinner;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAF[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePlayerController_ReceiveGameHasEnded) == 0x000008, "Wrong alignment on DFBasePlayerController_ReceiveGameHasEnded");
//(sizeof(DFBasePlayerController_ReceiveGameHasEnded) == 0x000010, "Wrong size on DFBasePlayerController_ReceiveGameHasEnded");
//(offsetof(DFBasePlayerController_ReceiveGameHasEnded, EndGameFocus) == 0x000000, "Member 'DFBasePlayerController_ReceiveGameHasEnded::EndGameFocus' has a wrong offset!");
//(offsetof(DFBasePlayerController_ReceiveGameHasEnded, bIsWinner) == 0x000008, "Member 'DFBasePlayerController_ReceiveGameHasEnded::bIsWinner' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ReceiveNewChatMsg
// 0x0030 (0x0030 - 0x0000)
struct DFBasePlayerController_ReceiveNewChatMsg final 
{
public:
	struct FPlayerChatMsg                         ChatMsg;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_ReceiveNewChatMsg) == 0x000008, "Wrong alignment on DFBasePlayerController_ReceiveNewChatMsg");
//(sizeof(DFBasePlayerController_ReceiveNewChatMsg) == 0x000030, "Wrong size on DFBasePlayerController_ReceiveNewChatMsg");
//(offsetof(DFBasePlayerController_ReceiveNewChatMsg, ChatMsg) == 0x000000, "Member 'DFBasePlayerController_ReceiveNewChatMsg::ChatMsg' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ReceivePlayerTeamNumUpdated
// 0x0002 (0x0002 - 0x0000)
struct DFBasePlayerController_ReceivePlayerTeamNumUpdated final 
{
public:
	uint8                                         LastTeamNum;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewTeamNum;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_ReceivePlayerTeamNumUpdated) == 0x000001, "Wrong alignment on DFBasePlayerController_ReceivePlayerTeamNumUpdated");
//(sizeof(DFBasePlayerController_ReceivePlayerTeamNumUpdated) == 0x000002, "Wrong size on DFBasePlayerController_ReceivePlayerTeamNumUpdated");
//(offsetof(DFBasePlayerController_ReceivePlayerTeamNumUpdated, LastTeamNum) == 0x000000, "Member 'DFBasePlayerController_ReceivePlayerTeamNumUpdated::LastTeamNum' has a wrong offset!");
//(offsetof(DFBasePlayerController_ReceivePlayerTeamNumUpdated, NewTeamNum) == 0x000001, "Member 'DFBasePlayerController_ReceivePlayerTeamNumUpdated::NewTeamNum' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ReceivePlayerTeamStateUpdated
// 0x0018 (0x0018 - 0x0000)
struct DFBasePlayerController_ReceivePlayerTeamStateUpdated final 
{
public:
	class ADFTeamState*                           LastTeamState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFTeamState*                           NewTeamState;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewTeamStateInit;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB0[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePlayerController_ReceivePlayerTeamStateUpdated) == 0x000008, "Wrong alignment on DFBasePlayerController_ReceivePlayerTeamStateUpdated");
//(sizeof(DFBasePlayerController_ReceivePlayerTeamStateUpdated) == 0x000018, "Wrong size on DFBasePlayerController_ReceivePlayerTeamStateUpdated");
//(offsetof(DFBasePlayerController_ReceivePlayerTeamStateUpdated, LastTeamState) == 0x000000, "Member 'DFBasePlayerController_ReceivePlayerTeamStateUpdated::LastTeamState' has a wrong offset!");
//(offsetof(DFBasePlayerController_ReceivePlayerTeamStateUpdated, NewTeamState) == 0x000008, "Member 'DFBasePlayerController_ReceivePlayerTeamStateUpdated::NewTeamState' has a wrong offset!");
//(offsetof(DFBasePlayerController_ReceivePlayerTeamStateUpdated, bNewTeamStateInit) == 0x000010, "Member 'DFBasePlayerController_ReceivePlayerTeamStateUpdated::bNewTeamStateInit' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ReceivePossessPawn
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerController_ReceivePossessPawn final 
{
public:
	class APawn*                                  NewPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_ReceivePossessPawn) == 0x000008, "Wrong alignment on DFBasePlayerController_ReceivePossessPawn");
//(sizeof(DFBasePlayerController_ReceivePossessPawn) == 0x000008, "Wrong size on DFBasePlayerController_ReceivePossessPawn");
//(offsetof(DFBasePlayerController_ReceivePossessPawn, NewPawn) == 0x000000, "Member 'DFBasePlayerController_ReceivePossessPawn::NewPawn' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ReceivePreClientTravel
// 0x0018 (0x0018 - 0x0000)
struct DFBasePlayerController_ReceivePreClientTravel final 
{
public:
	class FString                                 PendingURL;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSeamlessTravelWithRelativeTravelType;           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB1[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePlayerController_ReceivePreClientTravel) == 0x000008, "Wrong alignment on DFBasePlayerController_ReceivePreClientTravel");
//(sizeof(DFBasePlayerController_ReceivePreClientTravel) == 0x000018, "Wrong size on DFBasePlayerController_ReceivePreClientTravel");
//(offsetof(DFBasePlayerController_ReceivePreClientTravel, PendingURL) == 0x000000, "Member 'DFBasePlayerController_ReceivePreClientTravel::PendingURL' has a wrong offset!");
//(offsetof(DFBasePlayerController_ReceivePreClientTravel, bIsSeamlessTravelWithRelativeTravelType) == 0x000010, "Member 'DFBasePlayerController_ReceivePreClientTravel::bIsSeamlessTravelWithRelativeTravelType' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ReceiveUnpossessPawn
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerController_ReceiveUnpossessPawn final 
{
public:
	class APawn*                                  UnpossessedPawn;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_ReceiveUnpossessPawn) == 0x000008, "Wrong alignment on DFBasePlayerController_ReceiveUnpossessPawn");
//(sizeof(DFBasePlayerController_ReceiveUnpossessPawn) == 0x000008, "Wrong size on DFBasePlayerController_ReceiveUnpossessPawn");
//(offsetof(DFBasePlayerController_ReceiveUnpossessPawn, UnpossessedPawn) == 0x000000, "Member 'DFBasePlayerController_ReceiveUnpossessPawn::UnpossessedPawn' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.Say
// 0x0010 (0x0010 - 0x0000)
struct DFBasePlayerController_Say final 
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_Say) == 0x000008, "Wrong alignment on DFBasePlayerController_Say");
//(sizeof(DFBasePlayerController_Say) == 0x000010, "Wrong size on DFBasePlayerController_Say");
//(offsetof(DFBasePlayerController_Say, Msg) == 0x000000, "Member 'DFBasePlayerController_Say::Msg' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ServerAdmin
// 0x0010 (0x0010 - 0x0000)
struct DFBasePlayerController_ServerAdmin final 
{
public:
	class FString                                 Cmd;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_ServerAdmin) == 0x000008, "Wrong alignment on DFBasePlayerController_ServerAdmin");
//(sizeof(DFBasePlayerController_ServerAdmin) == 0x000010, "Wrong size on DFBasePlayerController_ServerAdmin");
//(offsetof(DFBasePlayerController_ServerAdmin, Cmd) == 0x000000, "Member 'DFBasePlayerController_ServerAdmin::Cmd' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ServerCastVote
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerController_ServerCastVote final 
{
public:
	int32                                         VoteSelectionIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDFVotingChannel                              VotingChannel;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB2[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePlayerController_ServerCastVote) == 0x000004, "Wrong alignment on DFBasePlayerController_ServerCastVote");
//(sizeof(DFBasePlayerController_ServerCastVote) == 0x000008, "Wrong size on DFBasePlayerController_ServerCastVote");
//(offsetof(DFBasePlayerController_ServerCastVote, VoteSelectionIndex) == 0x000000, "Member 'DFBasePlayerController_ServerCastVote::VoteSelectionIndex' has a wrong offset!");
//(offsetof(DFBasePlayerController_ServerCastVote, VotingChannel) == 0x000004, "Member 'DFBasePlayerController_ServerCastVote::VotingChannel' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ServerInitiateVote
// 0x0028 (0x0028 - 0x0000)
struct DFBasePlayerController_ServerInitiateVote final 
{
public:
	TSubclassOf<class UDFVoteIssue>               IssueClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFVoteIssueContext                    IssueContext;                                      // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         VoteSelectionIndex;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDFVotingChannel                              VotingChannel;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB3[0x3];                                      // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePlayerController_ServerInitiateVote) == 0x000008, "Wrong alignment on DFBasePlayerController_ServerInitiateVote");
//(sizeof(DFBasePlayerController_ServerInitiateVote) == 0x000028, "Wrong size on DFBasePlayerController_ServerInitiateVote");
//(offsetof(DFBasePlayerController_ServerInitiateVote, IssueClass) == 0x000000, "Member 'DFBasePlayerController_ServerInitiateVote::IssueClass' has a wrong offset!");
//(offsetof(DFBasePlayerController_ServerInitiateVote, IssueContext) == 0x000008, "Member 'DFBasePlayerController_ServerInitiateVote::IssueContext' has a wrong offset!");
//(offsetof(DFBasePlayerController_ServerInitiateVote, VoteSelectionIndex) == 0x000020, "Member 'DFBasePlayerController_ServerInitiateVote::VoteSelectionIndex' has a wrong offset!");
//(offsetof(DFBasePlayerController_ServerInitiateVote, VotingChannel) == 0x000024, "Member 'DFBasePlayerController_ServerInitiateVote::VotingChannel' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ServerNotifyProjCSHit
// 0x0088 (0x0088 - 0x0000)
struct DFBasePlayerController_ServerNotifyProjCSHit final 
{
public:
	class ADFBaseProjectile*                      HitProj;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  HitProjDamageInstigator;                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCSHitInfo                             HitInfo;                                           // 0x0010(0x0070)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ShotID;                                            // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB4[0x4];                                      // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePlayerController_ServerNotifyProjCSHit) == 0x000008, "Wrong alignment on DFBasePlayerController_ServerNotifyProjCSHit");
//(sizeof(DFBasePlayerController_ServerNotifyProjCSHit) == 0x000088, "Wrong size on DFBasePlayerController_ServerNotifyProjCSHit");
//(offsetof(DFBasePlayerController_ServerNotifyProjCSHit, HitProj) == 0x000000, "Member 'DFBasePlayerController_ServerNotifyProjCSHit::HitProj' has a wrong offset!");
//(offsetof(DFBasePlayerController_ServerNotifyProjCSHit, HitProjDamageInstigator) == 0x000008, "Member 'DFBasePlayerController_ServerNotifyProjCSHit::HitProjDamageInstigator' has a wrong offset!");
//(offsetof(DFBasePlayerController_ServerNotifyProjCSHit, HitInfo) == 0x000010, "Member 'DFBasePlayerController_ServerNotifyProjCSHit::HitInfo' has a wrong offset!");
//(offsetof(DFBasePlayerController_ServerNotifyProjCSHit, ShotID) == 0x000080, "Member 'DFBasePlayerController_ServerNotifyProjCSHit::ShotID' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ServerSay
// 0x0010 (0x0010 - 0x0000)
struct DFBasePlayerController_ServerSay final 
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_ServerSay) == 0x000008, "Wrong alignment on DFBasePlayerController_ServerSay");
//(sizeof(DFBasePlayerController_ServerSay) == 0x000010, "Wrong size on DFBasePlayerController_ServerSay");
//(offsetof(DFBasePlayerController_ServerSay, Msg) == 0x000000, "Member 'DFBasePlayerController_ServerSay::Msg' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.ServerTeamSay
// 0x0010 (0x0010 - 0x0000)
struct DFBasePlayerController_ServerTeamSay final 
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_ServerTeamSay) == 0x000008, "Wrong alignment on DFBasePlayerController_ServerTeamSay");
//(sizeof(DFBasePlayerController_ServerTeamSay) == 0x000010, "Wrong size on DFBasePlayerController_ServerTeamSay");
//(offsetof(DFBasePlayerController_ServerTeamSay, Msg) == 0x000000, "Member 'DFBasePlayerController_ServerTeamSay::Msg' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.TeamSay
// 0x0010 (0x0010 - 0x0000)
struct DFBasePlayerController_TeamSay final 
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_TeamSay) == 0x000008, "Wrong alignment on DFBasePlayerController_TeamSay");
//(sizeof(DFBasePlayerController_TeamSay) == 0x000010, "Wrong size on DFBasePlayerController_TeamSay");
//(offsetof(DFBasePlayerController_TeamSay, Msg) == 0x000000, "Member 'DFBasePlayerController_TeamSay::Msg' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.GetUnFreezeTimerHandle
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerController_GetUnFreezeTimerHandle final 
{
public:
	struct FTimerHandle                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_GetUnFreezeTimerHandle) == 0x000008, "Wrong alignment on DFBasePlayerController_GetUnFreezeTimerHandle");
//(sizeof(DFBasePlayerController_GetUnFreezeTimerHandle) == 0x000008, "Wrong size on DFBasePlayerController_GetUnFreezeTimerHandle");
//(offsetof(DFBasePlayerController_GetUnFreezeTimerHandle, ReturnValue) == 0x000000, "Member 'DFBasePlayerController_GetUnFreezeTimerHandle::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.GetVotingComponentByChannel
// 0x0010 (0x0010 - 0x0000)
struct DFBasePlayerController_GetVotingComponentByChannel final 
{
public:
	EDFVotingChannel                              VotingChannel;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB5[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDFVotingComponent*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_GetVotingComponentByChannel) == 0x000008, "Wrong alignment on DFBasePlayerController_GetVotingComponentByChannel");
//(sizeof(DFBasePlayerController_GetVotingComponentByChannel) == 0x000010, "Wrong size on DFBasePlayerController_GetVotingComponentByChannel");
//(offsetof(DFBasePlayerController_GetVotingComponentByChannel, VotingChannel) == 0x000000, "Member 'DFBasePlayerController_GetVotingComponentByChannel::VotingChannel' has a wrong offset!");
//(offsetof(DFBasePlayerController_GetVotingComponentByChannel, ReturnValue) == 0x000008, "Member 'DFBasePlayerController_GetVotingComponentByChannel::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerController.IsServerAdministrator
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerController_IsServerAdministrator final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerController_IsServerAdministrator) == 0x000001, "Wrong alignment on DFBasePlayerController_IsServerAdministrator");
//(sizeof(DFBasePlayerController_IsServerAdministrator) == 0x000001, "Wrong size on DFBasePlayerController_IsServerAdministrator");
//(offsetof(DFBasePlayerController_IsServerAdministrator, ReturnValue) == 0x000000, "Member 'DFBasePlayerController_IsServerAdministrator::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFSingleActionWeapAnimInstInterface.PlayActionMontage
// 0x0010 (0x0010 - 0x0000)
struct DFSingleActionWeapAnimInstInterface_PlayActionMontage final 
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB6[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFSingleActionWeapAnimInstInterface_PlayActionMontage) == 0x000008, "Wrong alignment on DFSingleActionWeapAnimInstInterface_PlayActionMontage");
//(sizeof(DFSingleActionWeapAnimInstInterface_PlayActionMontage) == 0x000010, "Wrong size on DFSingleActionWeapAnimInstInterface_PlayActionMontage");
//(offsetof(DFSingleActionWeapAnimInstInterface_PlayActionMontage, MontageToPlay) == 0x000000, "Member 'DFSingleActionWeapAnimInstInterface_PlayActionMontage::MontageToPlay' has a wrong offset!");
//(offsetof(DFSingleActionWeapAnimInstInterface_PlayActionMontage, ReturnValue) == 0x000008, "Member 'DFSingleActionWeapAnimInstInterface_PlayActionMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.OnRep_bAdmin
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerState_OnRep_bAdmin final 
{
public:
	bool                                          bAdminStatusBeforeUpdate;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_OnRep_bAdmin) == 0x000001, "Wrong alignment on DFBasePlayerState_OnRep_bAdmin");
//(sizeof(DFBasePlayerState_OnRep_bAdmin) == 0x000001, "Wrong size on DFBasePlayerState_OnRep_bAdmin");
//(offsetof(DFBasePlayerState_OnRep_bAdmin, bAdminStatusBeforeUpdate) == 0x000000, "Member 'DFBasePlayerState_OnRep_bAdmin::bAdminStatusBeforeUpdate' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.OnRep_NumAssists
// 0x0004 (0x0004 - 0x0000)
struct DFBasePlayerState_OnRep_NumAssists final 
{
public:
	int32                                         PrevNumAssists;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_OnRep_NumAssists) == 0x000004, "Wrong alignment on DFBasePlayerState_OnRep_NumAssists");
//(sizeof(DFBasePlayerState_OnRep_NumAssists) == 0x000004, "Wrong size on DFBasePlayerState_OnRep_NumAssists");
//(offsetof(DFBasePlayerState_OnRep_NumAssists, PrevNumAssists) == 0x000000, "Member 'DFBasePlayerState_OnRep_NumAssists::PrevNumAssists' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.OnRep_NumDeaths
// 0x0004 (0x0004 - 0x0000)
struct DFBasePlayerState_OnRep_NumDeaths final 
{
public:
	int32                                         PrevNumDeaths;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_OnRep_NumDeaths) == 0x000004, "Wrong alignment on DFBasePlayerState_OnRep_NumDeaths");
//(sizeof(DFBasePlayerState_OnRep_NumDeaths) == 0x000004, "Wrong size on DFBasePlayerState_OnRep_NumDeaths");
//(offsetof(DFBasePlayerState_OnRep_NumDeaths, PrevNumDeaths) == 0x000000, "Member 'DFBasePlayerState_OnRep_NumDeaths::PrevNumDeaths' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.OnRep_NumKills
// 0x0004 (0x0004 - 0x0000)
struct DFBasePlayerState_OnRep_NumKills final 
{
public:
	int32                                         PrevNumKills;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_OnRep_NumKills) == 0x000004, "Wrong alignment on DFBasePlayerState_OnRep_NumKills");
//(sizeof(DFBasePlayerState_OnRep_NumKills) == 0x000004, "Wrong size on DFBasePlayerState_OnRep_NumKills");
//(offsetof(DFBasePlayerState_OnRep_NumKills, PrevNumKills) == 0x000000, "Member 'DFBasePlayerState_OnRep_NumKills::PrevNumKills' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.OnRep_TeamNum
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerState_OnRep_TeamNum final 
{
public:
	uint8                                         TeamNumBeforeUpdate;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_OnRep_TeamNum) == 0x000001, "Wrong alignment on DFBasePlayerState_OnRep_TeamNum");
//(sizeof(DFBasePlayerState_OnRep_TeamNum) == 0x000001, "Wrong size on DFBasePlayerState_OnRep_TeamNum");
//(offsetof(DFBasePlayerState_OnRep_TeamNum, TeamNumBeforeUpdate) == 0x000000, "Member 'DFBasePlayerState_OnRep_TeamNum::TeamNumBeforeUpdate' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.OnRep_TeamState
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerState_OnRep_TeamState final 
{
public:
	class ADFTeamState*                           TeamStateBeforeUpdate;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_OnRep_TeamState) == 0x000008, "Wrong alignment on DFBasePlayerState_OnRep_TeamState");
//(sizeof(DFBasePlayerState_OnRep_TeamState) == 0x000008, "Wrong size on DFBasePlayerState_OnRep_TeamState");
//(offsetof(DFBasePlayerState_OnRep_TeamState, TeamStateBeforeUpdate) == 0x000000, "Member 'DFBasePlayerState_OnRep_TeamState::TeamStateBeforeUpdate' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.OnTeamNumUpdated
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerState_OnTeamNumUpdated final 
{
public:
	uint8                                         TeamNumBeforeUpdate;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_OnTeamNumUpdated) == 0x000001, "Wrong alignment on DFBasePlayerState_OnTeamNumUpdated");
//(sizeof(DFBasePlayerState_OnTeamNumUpdated) == 0x000001, "Wrong size on DFBasePlayerState_OnTeamNumUpdated");
//(offsetof(DFBasePlayerState_OnTeamNumUpdated, TeamNumBeforeUpdate) == 0x000000, "Member 'DFBasePlayerState_OnTeamNumUpdated::TeamNumBeforeUpdate' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.OnTeamStateUpdated
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerState_OnTeamStateUpdated final 
{
public:
	class ADFTeamState*                           TeamStateBeforeUpdate;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_OnTeamStateUpdated) == 0x000008, "Wrong alignment on DFBasePlayerState_OnTeamStateUpdated");
//(sizeof(DFBasePlayerState_OnTeamStateUpdated) == 0x000008, "Wrong size on DFBasePlayerState_OnTeamStateUpdated");
//(offsetof(DFBasePlayerState_OnTeamStateUpdated, TeamStateBeforeUpdate) == 0x000000, "Member 'DFBasePlayerState_OnTeamStateUpdated::TeamStateBeforeUpdate' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.ScoreAssistPlayer
// 0x0018 (0x0018 - 0x0000)
struct DFBasePlayerState_ScoreAssistPlayer final 
{
public:
	class ADFBasePlayerState*                     Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBasePlayerState*                     Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Points;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBB[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePlayerState_ScoreAssistPlayer) == 0x000008, "Wrong alignment on DFBasePlayerState_ScoreAssistPlayer");
//(sizeof(DFBasePlayerState_ScoreAssistPlayer) == 0x000018, "Wrong size on DFBasePlayerState_ScoreAssistPlayer");
//(offsetof(DFBasePlayerState_ScoreAssistPlayer, Killer) == 0x000000, "Member 'DFBasePlayerState_ScoreAssistPlayer::Killer' has a wrong offset!");
//(offsetof(DFBasePlayerState_ScoreAssistPlayer, Victim) == 0x000008, "Member 'DFBasePlayerState_ScoreAssistPlayer::Victim' has a wrong offset!");
//(offsetof(DFBasePlayerState_ScoreAssistPlayer, Points) == 0x000010, "Member 'DFBasePlayerState_ScoreAssistPlayer::Points' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.ScoreDeath
// 0x0010 (0x0010 - 0x0000)
struct DFBasePlayerState_ScoreDeath final 
{
public:
	class ADFBasePlayerState*                     KilledBy;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Points;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBC[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePlayerState_ScoreDeath) == 0x000008, "Wrong alignment on DFBasePlayerState_ScoreDeath");
//(sizeof(DFBasePlayerState_ScoreDeath) == 0x000010, "Wrong size on DFBasePlayerState_ScoreDeath");
//(offsetof(DFBasePlayerState_ScoreDeath, KilledBy) == 0x000000, "Member 'DFBasePlayerState_ScoreDeath::KilledBy' has a wrong offset!");
//(offsetof(DFBasePlayerState_ScoreDeath, Points) == 0x000008, "Member 'DFBasePlayerState_ScoreDeath::Points' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.ScoreKillPlayer
// 0x0010 (0x0010 - 0x0000)
struct DFBasePlayerState_ScoreKillPlayer final 
{
public:
	class ADFBasePlayerState*                     Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Points;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBD[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePlayerState_ScoreKillPlayer) == 0x000008, "Wrong alignment on DFBasePlayerState_ScoreKillPlayer");
//(sizeof(DFBasePlayerState_ScoreKillPlayer) == 0x000010, "Wrong size on DFBasePlayerState_ScoreKillPlayer");
//(offsetof(DFBasePlayerState_ScoreKillPlayer, Victim) == 0x000000, "Member 'DFBasePlayerState_ScoreKillPlayer::Victim' has a wrong offset!");
//(offsetof(DFBasePlayerState_ScoreKillPlayer, Points) == 0x000008, "Member 'DFBasePlayerState_ScoreKillPlayer::Points' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.ScorePoints
// 0x0008 (0x0008 - 0x0000)
struct DFBasePlayerState_ScorePoints final 
{
public:
	float                                         Points;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceNetUpdate;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBE[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBasePlayerState_ScorePoints) == 0x000004, "Wrong alignment on DFBasePlayerState_ScorePoints");
//(sizeof(DFBasePlayerState_ScorePoints) == 0x000008, "Wrong size on DFBasePlayerState_ScorePoints");
//(offsetof(DFBasePlayerState_ScorePoints, Points) == 0x000000, "Member 'DFBasePlayerState_ScorePoints::Points' has a wrong offset!");
//(offsetof(DFBasePlayerState_ScorePoints, bForceNetUpdate) == 0x000004, "Member 'DFBasePlayerState_ScorePoints::bForceNetUpdate' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.SetAdminStatus
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerState_SetAdminStatus final 
{
public:
	bool                                          bNewAdminStatus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_SetAdminStatus) == 0x000001, "Wrong alignment on DFBasePlayerState_SetAdminStatus");
//(sizeof(DFBasePlayerState_SetAdminStatus) == 0x000001, "Wrong size on DFBasePlayerState_SetAdminStatus");
//(offsetof(DFBasePlayerState_SetAdminStatus, bNewAdminStatus) == 0x000000, "Member 'DFBasePlayerState_SetAdminStatus::bNewAdminStatus' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.SetTeam
// 0x0002 (0x0002 - 0x0000)
struct DFBasePlayerState_SetTeam final 
{
public:
	uint8                                         NewTeamNum;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyToInactivePlayerState;                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_SetTeam) == 0x000001, "Wrong alignment on DFBasePlayerState_SetTeam");
//(sizeof(DFBasePlayerState_SetTeam) == 0x000002, "Wrong size on DFBasePlayerState_SetTeam");
//(offsetof(DFBasePlayerState_SetTeam, NewTeamNum) == 0x000000, "Member 'DFBasePlayerState_SetTeam::NewTeamNum' has a wrong offset!");
//(offsetof(DFBasePlayerState_SetTeam, bCopyToInactivePlayerState) == 0x000001, "Member 'DFBasePlayerState_SetTeam::bCopyToInactivePlayerState' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.GetAssists
// 0x0004 (0x0004 - 0x0000)
struct DFBasePlayerState_GetAssists final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_GetAssists) == 0x000004, "Wrong alignment on DFBasePlayerState_GetAssists");
//(sizeof(DFBasePlayerState_GetAssists) == 0x000004, "Wrong size on DFBasePlayerState_GetAssists");
//(offsetof(DFBasePlayerState_GetAssists, ReturnValue) == 0x000000, "Member 'DFBasePlayerState_GetAssists::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.GetDeaths
// 0x0004 (0x0004 - 0x0000)
struct DFBasePlayerState_GetDeaths final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_GetDeaths) == 0x000004, "Wrong alignment on DFBasePlayerState_GetDeaths");
//(sizeof(DFBasePlayerState_GetDeaths) == 0x000004, "Wrong size on DFBasePlayerState_GetDeaths");
//(offsetof(DFBasePlayerState_GetDeaths, ReturnValue) == 0x000000, "Member 'DFBasePlayerState_GetDeaths::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.GetKills
// 0x0004 (0x0004 - 0x0000)
struct DFBasePlayerState_GetKills final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_GetKills) == 0x000004, "Wrong alignment on DFBasePlayerState_GetKills");
//(sizeof(DFBasePlayerState_GetKills) == 0x000004, "Wrong size on DFBasePlayerState_GetKills");
//(offsetof(DFBasePlayerState_GetKills, ReturnValue) == 0x000000, "Member 'DFBasePlayerState_GetKills::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.GetPreviousTeam
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerState_GetPreviousTeam final 
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_GetPreviousTeam) == 0x000001, "Wrong alignment on DFBasePlayerState_GetPreviousTeam");
//(sizeof(DFBasePlayerState_GetPreviousTeam) == 0x000001, "Wrong size on DFBasePlayerState_GetPreviousTeam");
//(offsetof(DFBasePlayerState_GetPreviousTeam, ReturnValue) == 0x000000, "Member 'DFBasePlayerState_GetPreviousTeam::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBasePlayerState.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct DFBasePlayerState_GetTeam final 
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBasePlayerState_GetTeam) == 0x000001, "Wrong alignment on DFBasePlayerState_GetTeam");
//(sizeof(DFBasePlayerState_GetTeam) == 0x000001, "Wrong size on DFBasePlayerState_GetTeam");
//(offsetof(DFBasePlayerState_GetTeam, ReturnValue) == 0x000000, "Member 'DFBasePlayerState_GetTeam::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFSingleLoadWeapAnimInstInterface.PlayEndReloadMontage
// 0x0010 (0x0010 - 0x0000)
struct DFSingleLoadWeapAnimInstInterface_PlayEndReloadMontage final 
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullReload;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBF[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFSingleLoadWeapAnimInstInterface_PlayEndReloadMontage) == 0x000008, "Wrong alignment on DFSingleLoadWeapAnimInstInterface_PlayEndReloadMontage");
//(sizeof(DFSingleLoadWeapAnimInstInterface_PlayEndReloadMontage) == 0x000010, "Wrong size on DFSingleLoadWeapAnimInstInterface_PlayEndReloadMontage");
//(offsetof(DFSingleLoadWeapAnimInstInterface_PlayEndReloadMontage, MontageToPlay) == 0x000000, "Member 'DFSingleLoadWeapAnimInstInterface_PlayEndReloadMontage::MontageToPlay' has a wrong offset!");
//(offsetof(DFSingleLoadWeapAnimInstInterface_PlayEndReloadMontage, bFullReload) == 0x000008, "Member 'DFSingleLoadWeapAnimInstInterface_PlayEndReloadMontage::bFullReload' has a wrong offset!");
//(offsetof(DFSingleLoadWeapAnimInstInterface_PlayEndReloadMontage, ReturnValue) == 0x00000C, "Member 'DFSingleLoadWeapAnimInstInterface_PlayEndReloadMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFSingleLoadWeapAnimInstInterface.PlayStartReloadMontage
// 0x0010 (0x0010 - 0x0000)
struct DFSingleLoadWeapAnimInstInterface_PlayStartReloadMontage final 
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullReload;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC0[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFSingleLoadWeapAnimInstInterface_PlayStartReloadMontage) == 0x000008, "Wrong alignment on DFSingleLoadWeapAnimInstInterface_PlayStartReloadMontage");
//(sizeof(DFSingleLoadWeapAnimInstInterface_PlayStartReloadMontage) == 0x000010, "Wrong size on DFSingleLoadWeapAnimInstInterface_PlayStartReloadMontage");
//(offsetof(DFSingleLoadWeapAnimInstInterface_PlayStartReloadMontage, MontageToPlay) == 0x000000, "Member 'DFSingleLoadWeapAnimInstInterface_PlayStartReloadMontage::MontageToPlay' has a wrong offset!");
//(offsetof(DFSingleLoadWeapAnimInstInterface_PlayStartReloadMontage, bFullReload) == 0x000008, "Member 'DFSingleLoadWeapAnimInstInterface_PlayStartReloadMontage::bFullReload' has a wrong offset!");
//(offsetof(DFSingleLoadWeapAnimInstInterface_PlayStartReloadMontage, ReturnValue) == 0x00000C, "Member 'DFSingleLoadWeapAnimInstInterface_PlayStartReloadMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.ApplyDamageToImpactedActor
// 0x00B8 (0x00B8 - 0x0000)
struct DFBaseProjectile_ApplyDamageToImpactedActor final 
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00B0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC8[0x4];                                      // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseProjectile_ApplyDamageToImpactedActor) == 0x000008, "Wrong alignment on DFBaseProjectile_ApplyDamageToImpactedActor");
//(sizeof(DFBaseProjectile_ApplyDamageToImpactedActor) == 0x0000B8, "Wrong size on DFBaseProjectile_ApplyDamageToImpactedActor");
//(offsetof(DFBaseProjectile_ApplyDamageToImpactedActor, OtherActor) == 0x000000, "Member 'DFBaseProjectile_ApplyDamageToImpactedActor::OtherActor' has a wrong offset!");
//(offsetof(DFBaseProjectile_ApplyDamageToImpactedActor, OtherComp) == 0x000008, "Member 'DFBaseProjectile_ApplyDamageToImpactedActor::OtherComp' has a wrong offset!");
//(offsetof(DFBaseProjectile_ApplyDamageToImpactedActor, HitLocation) == 0x000010, "Member 'DFBaseProjectile_ApplyDamageToImpactedActor::HitLocation' has a wrong offset!");
//(offsetof(DFBaseProjectile_ApplyDamageToImpactedActor, HitNormal) == 0x00001C, "Member 'DFBaseProjectile_ApplyDamageToImpactedActor::HitNormal' has a wrong offset!");
//(offsetof(DFBaseProjectile_ApplyDamageToImpactedActor, HitResult) == 0x000028, "Member 'DFBaseProjectile_ApplyDamageToImpactedActor::HitResult' has a wrong offset!");
//(offsetof(DFBaseProjectile_ApplyDamageToImpactedActor, ReturnValue) == 0x0000B0, "Member 'DFBaseProjectile_ApplyDamageToImpactedActor::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.IgnoreInstigatorWhenMoving
// 0x0002 (0x0002 - 0x0000)
struct DFBaseProjectile_IgnoreInstigatorWhenMoving final 
{
public:
	bool                                          bShouldIgnore;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBidirectional;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectile_IgnoreInstigatorWhenMoving) == 0x000001, "Wrong alignment on DFBaseProjectile_IgnoreInstigatorWhenMoving");
//(sizeof(DFBaseProjectile_IgnoreInstigatorWhenMoving) == 0x000002, "Wrong size on DFBaseProjectile_IgnoreInstigatorWhenMoving");
//(offsetof(DFBaseProjectile_IgnoreInstigatorWhenMoving, bShouldIgnore) == 0x000000, "Member 'DFBaseProjectile_IgnoreInstigatorWhenMoving::bShouldIgnore' has a wrong offset!");
//(offsetof(DFBaseProjectile_IgnoreInstigatorWhenMoving, bBidirectional) == 0x000001, "Member 'DFBaseProjectile_IgnoreInstigatorWhenMoving::bBidirectional' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.K2_PostProcessValidHit
// 0x00B8 (0x00B8 - 0x0000)
struct DFBaseProjectile_K2_PostProcessValidHit final 
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bFromCSHitNotify;                                  // 0x00B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC9[0x7];                                      // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseProjectile_K2_PostProcessValidHit) == 0x000008, "Wrong alignment on DFBaseProjectile_K2_PostProcessValidHit");
//(sizeof(DFBaseProjectile_K2_PostProcessValidHit) == 0x0000B8, "Wrong size on DFBaseProjectile_K2_PostProcessValidHit");
//(offsetof(DFBaseProjectile_K2_PostProcessValidHit, OtherActor) == 0x000000, "Member 'DFBaseProjectile_K2_PostProcessValidHit::OtherActor' has a wrong offset!");
//(offsetof(DFBaseProjectile_K2_PostProcessValidHit, OtherComp) == 0x000008, "Member 'DFBaseProjectile_K2_PostProcessValidHit::OtherComp' has a wrong offset!");
//(offsetof(DFBaseProjectile_K2_PostProcessValidHit, HitLocation) == 0x000010, "Member 'DFBaseProjectile_K2_PostProcessValidHit::HitLocation' has a wrong offset!");
//(offsetof(DFBaseProjectile_K2_PostProcessValidHit, HitNormal) == 0x00001C, "Member 'DFBaseProjectile_K2_PostProcessValidHit::HitNormal' has a wrong offset!");
//(offsetof(DFBaseProjectile_K2_PostProcessValidHit, HitResult) == 0x000028, "Member 'DFBaseProjectile_K2_PostProcessValidHit::HitResult' has a wrong offset!");
//(offsetof(DFBaseProjectile_K2_PostProcessValidHit, bFromCSHitNotify) == 0x0000B0, "Member 'DFBaseProjectile_K2_PostProcessValidHit::bFromCSHitNotify' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.ProjectileBounce
// 0x0094 (0x0094 - 0x0000)
struct DFBaseProjectile_ProjectileBounce final 
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectile_ProjectileBounce) == 0x000004, "Wrong alignment on DFBaseProjectile_ProjectileBounce");
//(sizeof(DFBaseProjectile_ProjectileBounce) == 0x000094, "Wrong size on DFBaseProjectile_ProjectileBounce");
//(offsetof(DFBaseProjectile_ProjectileBounce, ImpactResult) == 0x000000, "Member 'DFBaseProjectile_ProjectileBounce::ImpactResult' has a wrong offset!");
//(offsetof(DFBaseProjectile_ProjectileBounce, ImpactVelocity) == 0x000088, "Member 'DFBaseProjectile_ProjectileBounce::ImpactVelocity' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.ProjectileStop
// 0x0088 (0x0088 - 0x0000)
struct DFBaseProjectile_ProjectileStop final 
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectile_ProjectileStop) == 0x000004, "Wrong alignment on DFBaseProjectile_ProjectileStop");
//(sizeof(DFBaseProjectile_ProjectileStop) == 0x000088, "Wrong size on DFBaseProjectile_ProjectileStop");
//(offsetof(DFBaseProjectile_ProjectileStop, ImpactResult) == 0x000000, "Member 'DFBaseProjectile_ProjectileStop::ImpactResult' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.ReceivePayloadActivated
// 0x0088 (0x0088 - 0x0000)
struct DFBaseProjectile_ReceivePayloadActivated final 
{
public:
	struct FHitResult                             ImpactHitResult;                                   // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectile_ReceivePayloadActivated) == 0x000004, "Wrong alignment on DFBaseProjectile_ReceivePayloadActivated");
//(sizeof(DFBaseProjectile_ReceivePayloadActivated) == 0x000088, "Wrong size on DFBaseProjectile_ReceivePayloadActivated");
//(offsetof(DFBaseProjectile_ReceivePayloadActivated, ImpactHitResult) == 0x000000, "Member 'DFBaseProjectile_ReceivePayloadActivated::ImpactHitResult' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.SetProjectileUpdatedComponent
// 0x0008 (0x0008 - 0x0000)
struct DFBaseProjectile_SetProjectileUpdatedComponent final 
{
public:
	class USceneComponent*                        NewProjectileUpdatedComponent;                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectile_SetProjectileUpdatedComponent) == 0x000008, "Wrong alignment on DFBaseProjectile_SetProjectileUpdatedComponent");
//(sizeof(DFBaseProjectile_SetProjectileUpdatedComponent) == 0x000008, "Wrong size on DFBaseProjectile_SetProjectileUpdatedComponent");
//(offsetof(DFBaseProjectile_SetProjectileUpdatedComponent, NewProjectileUpdatedComponent) == 0x000000, "Member 'DFBaseProjectile_SetProjectileUpdatedComponent::NewProjectileUpdatedComponent' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.SpawnImpactFX
// 0x0088 (0x0088 - 0x0000)
struct DFBaseProjectile_SpawnImpactFX final 
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectile_SpawnImpactFX) == 0x000004, "Wrong alignment on DFBaseProjectile_SpawnImpactFX");
//(sizeof(DFBaseProjectile_SpawnImpactFX) == 0x000088, "Wrong size on DFBaseProjectile_SpawnImpactFX");
//(offsetof(DFBaseProjectile_SpawnImpactFX, Impact) == 0x000000, "Member 'DFBaseProjectile_SpawnImpactFX::Impact' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.TriggerPayload
// 0x008C (0x008C - 0x0000)
struct DFBaseProjectile_TriggerPayload final 
{
public:
	struct FHitResult                             ImpactHitResult;                                   // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bFromTearOff;                                      // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCA[0x3];                                      // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseProjectile_TriggerPayload) == 0x000004, "Wrong alignment on DFBaseProjectile_TriggerPayload");
//(sizeof(DFBaseProjectile_TriggerPayload) == 0x00008C, "Wrong size on DFBaseProjectile_TriggerPayload");
//(offsetof(DFBaseProjectile_TriggerPayload, ImpactHitResult) == 0x000000, "Member 'DFBaseProjectile_TriggerPayload::ImpactHitResult' has a wrong offset!");
//(offsetof(DFBaseProjectile_TriggerPayload, bFromTearOff) == 0x000088, "Member 'DFBaseProjectile_TriggerPayload::bFromTearOff' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.GetAdjustedDamageParams
// 0x0028 (0x0028 - 0x0000)
struct DFBaseProjectile_GetAdjustedDamageParams final 
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFDamageParams                        ReturnValue;                                       // 0x0014(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectile_GetAdjustedDamageParams) == 0x000008, "Wrong alignment on DFBaseProjectile_GetAdjustedDamageParams");
//(sizeof(DFBaseProjectile_GetAdjustedDamageParams) == 0x000028, "Wrong size on DFBaseProjectile_GetAdjustedDamageParams");
//(offsetof(DFBaseProjectile_GetAdjustedDamageParams, OtherActor) == 0x000000, "Member 'DFBaseProjectile_GetAdjustedDamageParams::OtherActor' has a wrong offset!");
//(offsetof(DFBaseProjectile_GetAdjustedDamageParams, HitLocation) == 0x000008, "Member 'DFBaseProjectile_GetAdjustedDamageParams::HitLocation' has a wrong offset!");
//(offsetof(DFBaseProjectile_GetAdjustedDamageParams, ReturnValue) == 0x000014, "Member 'DFBaseProjectile_GetAdjustedDamageParams::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.GetImpactFXClass
// 0x0008 (0x0008 - 0x0000)
struct DFBaseProjectile_GetImpactFXClass final 
{
public:
	TSubclassOf<class ADFBaseImpactEffect>        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectile_GetImpactFXClass) == 0x000008, "Wrong alignment on DFBaseProjectile_GetImpactFXClass");
//(sizeof(DFBaseProjectile_GetImpactFXClass) == 0x000008, "Wrong size on DFBaseProjectile_GetImpactFXClass");
//(offsetof(DFBaseProjectile_GetImpactFXClass, ReturnValue) == 0x000000, "Member 'DFBaseProjectile_GetImpactFXClass::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.GetOwningWeapon
// 0x0008 (0x0008 - 0x0000)
struct DFBaseProjectile_GetOwningWeapon final 
{
public:
	class ADFBaseWeapon*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectile_GetOwningWeapon) == 0x000008, "Wrong alignment on DFBaseProjectile_GetOwningWeapon");
//(sizeof(DFBaseProjectile_GetOwningWeapon) == 0x000008, "Wrong size on DFBaseProjectile_GetOwningWeapon");
//(offsetof(DFBaseProjectile_GetOwningWeapon, ReturnValue) == 0x000000, "Member 'DFBaseProjectile_GetOwningWeapon::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.GetProjectileUpdatedComponent
// 0x0008 (0x0008 - 0x0000)
struct DFBaseProjectile_GetProjectileUpdatedComponent final 
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectile_GetProjectileUpdatedComponent) == 0x000008, "Wrong alignment on DFBaseProjectile_GetProjectileUpdatedComponent");
//(sizeof(DFBaseProjectile_GetProjectileUpdatedComponent) == 0x000008, "Wrong size on DFBaseProjectile_GetProjectileUpdatedComponent");
//(offsetof(DFBaseProjectile_GetProjectileUpdatedComponent, ReturnValue) == 0x000000, "Member 'DFBaseProjectile_GetProjectileUpdatedComponent::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.GetProjectileUpdatedPrimitive
// 0x0008 (0x0008 - 0x0000)
struct DFBaseProjectile_GetProjectileUpdatedPrimitive final 
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectile_GetProjectileUpdatedPrimitive) == 0x000008, "Wrong alignment on DFBaseProjectile_GetProjectileUpdatedPrimitive");
//(sizeof(DFBaseProjectile_GetProjectileUpdatedPrimitive) == 0x000008, "Wrong size on DFBaseProjectile_GetProjectileUpdatedPrimitive");
//(offsetof(DFBaseProjectile_GetProjectileUpdatedPrimitive, ReturnValue) == 0x000000, "Member 'DFBaseProjectile_GetProjectileUpdatedPrimitive::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.HasValidPredictedClientProjectile
// 0x0001 (0x0001 - 0x0000)
struct DFBaseProjectile_HasValidPredictedClientProjectile final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectile_HasValidPredictedClientProjectile) == 0x000001, "Wrong alignment on DFBaseProjectile_HasValidPredictedClientProjectile");
//(sizeof(DFBaseProjectile_HasValidPredictedClientProjectile) == 0x000001, "Wrong size on DFBaseProjectile_HasValidPredictedClientProjectile");
//(offsetof(DFBaseProjectile_HasValidPredictedClientProjectile, ReturnValue) == 0x000000, "Member 'DFBaseProjectile_HasValidPredictedClientProjectile::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectile.K2_ShouldIgnoreHit
// 0x00A0 (0x00A0 - 0x0000)
struct DFBaseProjectile_K2_ShouldIgnoreHit final 
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCB[0x7];                                      // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBaseProjectile_K2_ShouldIgnoreHit) == 0x000008, "Wrong alignment on DFBaseProjectile_K2_ShouldIgnoreHit");
//(sizeof(DFBaseProjectile_K2_ShouldIgnoreHit) == 0x0000A0, "Wrong size on DFBaseProjectile_K2_ShouldIgnoreHit");
//(offsetof(DFBaseProjectile_K2_ShouldIgnoreHit, OtherActor) == 0x000000, "Member 'DFBaseProjectile_K2_ShouldIgnoreHit::OtherActor' has a wrong offset!");
//(offsetof(DFBaseProjectile_K2_ShouldIgnoreHit, OtherComp) == 0x000008, "Member 'DFBaseProjectile_K2_ShouldIgnoreHit::OtherComp' has a wrong offset!");
//(offsetof(DFBaseProjectile_K2_ShouldIgnoreHit, HitResult) == 0x000010, "Member 'DFBaseProjectile_K2_ShouldIgnoreHit::HitResult' has a wrong offset!");
//(offsetof(DFBaseProjectile_K2_ShouldIgnoreHit, ReturnValue) == 0x000098, "Member 'DFBaseProjectile_K2_ShouldIgnoreHit::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFTableLibrary.GetColumnFromIndex
// 0x000C (0x000C - 0x0000)
struct DFTableLibrary_GetColumnFromIndex final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TableWidth;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFTableLibrary_GetColumnFromIndex) == 0x000004, "Wrong alignment on DFTableLibrary_GetColumnFromIndex");
//(sizeof(DFTableLibrary_GetColumnFromIndex) == 0x00000C, "Wrong size on DFTableLibrary_GetColumnFromIndex");
//(offsetof(DFTableLibrary_GetColumnFromIndex, Param_Index) == 0x000000, "Member 'DFTableLibrary_GetColumnFromIndex::Param_Index' has a wrong offset!");
//(offsetof(DFTableLibrary_GetColumnFromIndex, TableWidth) == 0x000004, "Member 'DFTableLibrary_GetColumnFromIndex::TableWidth' has a wrong offset!");
//(offsetof(DFTableLibrary_GetColumnFromIndex, ReturnValue) == 0x000008, "Member 'DFTableLibrary_GetColumnFromIndex::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFTableLibrary.GetColumnInvFromIndex
// 0x000C (0x000C - 0x0000)
struct DFTableLibrary_GetColumnInvFromIndex final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TableHeight;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFTableLibrary_GetColumnInvFromIndex) == 0x000004, "Wrong alignment on DFTableLibrary_GetColumnInvFromIndex");
//(sizeof(DFTableLibrary_GetColumnInvFromIndex) == 0x00000C, "Wrong size on DFTableLibrary_GetColumnInvFromIndex");
//(offsetof(DFTableLibrary_GetColumnInvFromIndex, Param_Index) == 0x000000, "Member 'DFTableLibrary_GetColumnInvFromIndex::Param_Index' has a wrong offset!");
//(offsetof(DFTableLibrary_GetColumnInvFromIndex, TableHeight) == 0x000004, "Member 'DFTableLibrary_GetColumnInvFromIndex::TableHeight' has a wrong offset!");
//(offsetof(DFTableLibrary_GetColumnInvFromIndex, ReturnValue) == 0x000008, "Member 'DFTableLibrary_GetColumnInvFromIndex::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFTableLibrary.GetIndexFromColumnRowPair
// 0x0010 (0x0010 - 0x0000)
struct DFTableLibrary_GetIndexFromColumnRowPair final 
{
public:
	int32                                         Column;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TableHeight;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFTableLibrary_GetIndexFromColumnRowPair) == 0x000004, "Wrong alignment on DFTableLibrary_GetIndexFromColumnRowPair");
//(sizeof(DFTableLibrary_GetIndexFromColumnRowPair) == 0x000010, "Wrong size on DFTableLibrary_GetIndexFromColumnRowPair");
//(offsetof(DFTableLibrary_GetIndexFromColumnRowPair, Column) == 0x000000, "Member 'DFTableLibrary_GetIndexFromColumnRowPair::Column' has a wrong offset!");
//(offsetof(DFTableLibrary_GetIndexFromColumnRowPair, Row) == 0x000004, "Member 'DFTableLibrary_GetIndexFromColumnRowPair::Row' has a wrong offset!");
//(offsetof(DFTableLibrary_GetIndexFromColumnRowPair, TableHeight) == 0x000008, "Member 'DFTableLibrary_GetIndexFromColumnRowPair::TableHeight' has a wrong offset!");
//(offsetof(DFTableLibrary_GetIndexFromColumnRowPair, ReturnValue) == 0x00000C, "Member 'DFTableLibrary_GetIndexFromColumnRowPair::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFTableLibrary.GetIndexFromRowColumnPair
// 0x0010 (0x0010 - 0x0000)
struct DFTableLibrary_GetIndexFromRowColumnPair final 
{
public:
	int32                                         Row;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TableWidth;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFTableLibrary_GetIndexFromRowColumnPair) == 0x000004, "Wrong alignment on DFTableLibrary_GetIndexFromRowColumnPair");
//(sizeof(DFTableLibrary_GetIndexFromRowColumnPair) == 0x000010, "Wrong size on DFTableLibrary_GetIndexFromRowColumnPair");
//(offsetof(DFTableLibrary_GetIndexFromRowColumnPair, Row) == 0x000000, "Member 'DFTableLibrary_GetIndexFromRowColumnPair::Row' has a wrong offset!");
//(offsetof(DFTableLibrary_GetIndexFromRowColumnPair, Column) == 0x000004, "Member 'DFTableLibrary_GetIndexFromRowColumnPair::Column' has a wrong offset!");
//(offsetof(DFTableLibrary_GetIndexFromRowColumnPair, TableWidth) == 0x000008, "Member 'DFTableLibrary_GetIndexFromRowColumnPair::TableWidth' has a wrong offset!");
//(offsetof(DFTableLibrary_GetIndexFromRowColumnPair, ReturnValue) == 0x00000C, "Member 'DFTableLibrary_GetIndexFromRowColumnPair::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFTableLibrary.GetRowFromIndex
// 0x000C (0x000C - 0x0000)
struct DFTableLibrary_GetRowFromIndex final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TableWidth;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFTableLibrary_GetRowFromIndex) == 0x000004, "Wrong alignment on DFTableLibrary_GetRowFromIndex");
//(sizeof(DFTableLibrary_GetRowFromIndex) == 0x00000C, "Wrong size on DFTableLibrary_GetRowFromIndex");
//(offsetof(DFTableLibrary_GetRowFromIndex, Param_Index) == 0x000000, "Member 'DFTableLibrary_GetRowFromIndex::Param_Index' has a wrong offset!");
//(offsetof(DFTableLibrary_GetRowFromIndex, TableWidth) == 0x000004, "Member 'DFTableLibrary_GetRowFromIndex::TableWidth' has a wrong offset!");
//(offsetof(DFTableLibrary_GetRowFromIndex, ReturnValue) == 0x000008, "Member 'DFTableLibrary_GetRowFromIndex::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFTableLibrary.GetRowInvFromIndex
// 0x000C (0x000C - 0x0000)
struct DFTableLibrary_GetRowInvFromIndex final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TableHeight;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFTableLibrary_GetRowInvFromIndex) == 0x000004, "Wrong alignment on DFTableLibrary_GetRowInvFromIndex");
//(sizeof(DFTableLibrary_GetRowInvFromIndex) == 0x00000C, "Wrong size on DFTableLibrary_GetRowInvFromIndex");
//(offsetof(DFTableLibrary_GetRowInvFromIndex, Param_Index) == 0x000000, "Member 'DFTableLibrary_GetRowInvFromIndex::Param_Index' has a wrong offset!");
//(offsetof(DFTableLibrary_GetRowInvFromIndex, TableHeight) == 0x000004, "Member 'DFTableLibrary_GetRowInvFromIndex::TableHeight' has a wrong offset!");
//(offsetof(DFTableLibrary_GetRowInvFromIndex, ReturnValue) == 0x000008, "Member 'DFTableLibrary_GetRowInvFromIndex::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectileLegacy.ProjectileBounce
// 0x0094 (0x0094 - 0x0000)
struct DFBaseProjectileLegacy_ProjectileBounce final 
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectileLegacy_ProjectileBounce) == 0x000004, "Wrong alignment on DFBaseProjectileLegacy_ProjectileBounce");
//(sizeof(DFBaseProjectileLegacy_ProjectileBounce) == 0x000094, "Wrong size on DFBaseProjectileLegacy_ProjectileBounce");
//(offsetof(DFBaseProjectileLegacy_ProjectileBounce, ImpactResult) == 0x000000, "Member 'DFBaseProjectileLegacy_ProjectileBounce::ImpactResult' has a wrong offset!");
//(offsetof(DFBaseProjectileLegacy_ProjectileBounce, ImpactVelocity) == 0x000088, "Member 'DFBaseProjectileLegacy_ProjectileBounce::ImpactVelocity' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectileLegacy.ProjectileStop
// 0x0088 (0x0088 - 0x0000)
struct DFBaseProjectileLegacy_ProjectileStop final 
{
public:
	struct FHitResult                             ImpactResult;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectileLegacy_ProjectileStop) == 0x000004, "Wrong alignment on DFBaseProjectileLegacy_ProjectileStop");
//(sizeof(DFBaseProjectileLegacy_ProjectileStop) == 0x000088, "Wrong size on DFBaseProjectileLegacy_ProjectileStop");
//(offsetof(DFBaseProjectileLegacy_ProjectileStop, ImpactResult) == 0x000000, "Member 'DFBaseProjectileLegacy_ProjectileStop::ImpactResult' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectileLegacy.ReceivePayloadActivated
// 0x0088 (0x0088 - 0x0000)
struct DFBaseProjectileLegacy_ReceivePayloadActivated final 
{
public:
	struct FHitResult                             ImpactHitResult;                                   // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectileLegacy_ReceivePayloadActivated) == 0x000004, "Wrong alignment on DFBaseProjectileLegacy_ReceivePayloadActivated");
//(sizeof(DFBaseProjectileLegacy_ReceivePayloadActivated) == 0x000088, "Wrong size on DFBaseProjectileLegacy_ReceivePayloadActivated");
//(offsetof(DFBaseProjectileLegacy_ReceivePayloadActivated, ImpactHitResult) == 0x000000, "Member 'DFBaseProjectileLegacy_ReceivePayloadActivated::ImpactHitResult' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectileLegacy.SpawnImpactFX
// 0x0088 (0x0088 - 0x0000)
struct DFBaseProjectileLegacy_SpawnImpactFX final 
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectileLegacy_SpawnImpactFX) == 0x000004, "Wrong alignment on DFBaseProjectileLegacy_SpawnImpactFX");
//(sizeof(DFBaseProjectileLegacy_SpawnImpactFX) == 0x000088, "Wrong size on DFBaseProjectileLegacy_SpawnImpactFX");
//(offsetof(DFBaseProjectileLegacy_SpawnImpactFX, Impact) == 0x000000, "Member 'DFBaseProjectileLegacy_SpawnImpactFX::Impact' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectileLegacy.TriggerPayload
// 0x0088 (0x0088 - 0x0000)
struct DFBaseProjectileLegacy_TriggerPayload final 
{
public:
	struct FHitResult                             ImpactHitResult;                                   // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectileLegacy_TriggerPayload) == 0x000004, "Wrong alignment on DFBaseProjectileLegacy_TriggerPayload");
//(sizeof(DFBaseProjectileLegacy_TriggerPayload) == 0x000088, "Wrong size on DFBaseProjectileLegacy_TriggerPayload");
//(offsetof(DFBaseProjectileLegacy_TriggerPayload, ImpactHitResult) == 0x000000, "Member 'DFBaseProjectileLegacy_TriggerPayload::ImpactHitResult' has a wrong offset!");

// Function DonkehFramework.DFBaseProjectileLegacy.GetOwningWeapon
// 0x0008 (0x0008 - 0x0000)
struct DFBaseProjectileLegacy_GetOwningWeapon final 
{
public:
	class ADFBaseWeapon*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBaseProjectileLegacy_GetOwningWeapon) == 0x000008, "Wrong alignment on DFBaseProjectileLegacy_GetOwningWeapon");
//(sizeof(DFBaseProjectileLegacy_GetOwningWeapon) == 0x000008, "Wrong size on DFBaseProjectileLegacy_GetOwningWeapon");
//(offsetof(DFBaseProjectileLegacy_GetOwningWeapon, ReturnValue) == 0x000000, "Member 'DFBaseProjectileLegacy_GetOwningWeapon::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.Array_AssetDescriptorSort
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_Array_AssetDescriptorSort final 
{
public:
	TArray<struct FAssetDescriptor>               ArrayToSort;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDescending;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompareDisplayText;                               // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD6[0x6];                                      // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_Array_AssetDescriptorSort) == 0x000008, "Wrong alignment on DFBlueprintFunctions_Array_AssetDescriptorSort");
//(sizeof(DFBlueprintFunctions_Array_AssetDescriptorSort) == 0x000018, "Wrong size on DFBlueprintFunctions_Array_AssetDescriptorSort");
//(offsetof(DFBlueprintFunctions_Array_AssetDescriptorSort, ArrayToSort) == 0x000000, "Member 'DFBlueprintFunctions_Array_AssetDescriptorSort::ArrayToSort' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_Array_AssetDescriptorSort, bDescending) == 0x000010, "Member 'DFBlueprintFunctions_Array_AssetDescriptorSort::bDescending' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_Array_AssetDescriptorSort, bCompareDisplayText) == 0x000011, "Member 'DFBlueprintFunctions_Array_AssetDescriptorSort::bCompareDisplayText' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.Array_FloatSort
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_Array_FloatSort final 
{
public:
	TArray<float>                                 ArrayToSort;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDescending;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD7[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_Array_FloatSort) == 0x000008, "Wrong alignment on DFBlueprintFunctions_Array_FloatSort");
//(sizeof(DFBlueprintFunctions_Array_FloatSort) == 0x000018, "Wrong size on DFBlueprintFunctions_Array_FloatSort");
//(offsetof(DFBlueprintFunctions_Array_FloatSort, ArrayToSort) == 0x000000, "Member 'DFBlueprintFunctions_Array_FloatSort::ArrayToSort' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_Array_FloatSort, bDescending) == 0x000010, "Member 'DFBlueprintFunctions_Array_FloatSort::bDescending' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.Array_Int32Sort
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_Array_Int32Sort final 
{
public:
	TArray<int32>                                 ArrayToSort;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDescending;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD8[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_Array_Int32Sort) == 0x000008, "Wrong alignment on DFBlueprintFunctions_Array_Int32Sort");
//(sizeof(DFBlueprintFunctions_Array_Int32Sort) == 0x000018, "Wrong size on DFBlueprintFunctions_Array_Int32Sort");
//(offsetof(DFBlueprintFunctions_Array_Int32Sort, ArrayToSort) == 0x000000, "Member 'DFBlueprintFunctions_Array_Int32Sort::ArrayToSort' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_Array_Int32Sort, bDescending) == 0x000010, "Member 'DFBlueprintFunctions_Array_Int32Sort::bDescending' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.Array_Int64Sort
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_Array_Int64Sort final 
{
public:
	TArray<int64>                                 ArrayToSort;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDescending;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD9[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_Array_Int64Sort) == 0x000008, "Wrong alignment on DFBlueprintFunctions_Array_Int64Sort");
//(sizeof(DFBlueprintFunctions_Array_Int64Sort) == 0x000018, "Wrong size on DFBlueprintFunctions_Array_Int64Sort");
//(offsetof(DFBlueprintFunctions_Array_Int64Sort, ArrayToSort) == 0x000000, "Member 'DFBlueprintFunctions_Array_Int64Sort::ArrayToSort' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_Array_Int64Sort, bDescending) == 0x000010, "Member 'DFBlueprintFunctions_Array_Int64Sort::bDescending' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.Array_NameSort
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_Array_NameSort final 
{
public:
	TArray<class FName>                           ArrayToSort;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDescending;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDA[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_Array_NameSort) == 0x000008, "Wrong alignment on DFBlueprintFunctions_Array_NameSort");
//(sizeof(DFBlueprintFunctions_Array_NameSort) == 0x000018, "Wrong size on DFBlueprintFunctions_Array_NameSort");
//(offsetof(DFBlueprintFunctions_Array_NameSort, ArrayToSort) == 0x000000, "Member 'DFBlueprintFunctions_Array_NameSort::ArrayToSort' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_Array_NameSort, bDescending) == 0x000010, "Member 'DFBlueprintFunctions_Array_NameSort::bDescending' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.Array_Reverse
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_Array_Reverse final 
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_Array_Reverse) == 0x000008, "Wrong alignment on DFBlueprintFunctions_Array_Reverse");
//(sizeof(DFBlueprintFunctions_Array_Reverse) == 0x000010, "Wrong size on DFBlueprintFunctions_Array_Reverse");
//(offsetof(DFBlueprintFunctions_Array_Reverse, TargetArray) == 0x000000, "Member 'DFBlueprintFunctions_Array_Reverse::TargetArray' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.Array_StringSort
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_Array_StringSort final 
{
public:
	TArray<class FString>                         ArrayToSort;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDescending;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDB[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_Array_StringSort) == 0x000008, "Wrong alignment on DFBlueprintFunctions_Array_StringSort");
//(sizeof(DFBlueprintFunctions_Array_StringSort) == 0x000018, "Wrong size on DFBlueprintFunctions_Array_StringSort");
//(offsetof(DFBlueprintFunctions_Array_StringSort, ArrayToSort) == 0x000000, "Member 'DFBlueprintFunctions_Array_StringSort::ArrayToSort' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_Array_StringSort, bDescending) == 0x000010, "Member 'DFBlueprintFunctions_Array_StringSort::bDescending' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.Array_TextSort
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_Array_TextSort final 
{
public:
	TArray<class FText>                           ArrayToSort;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDescending;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDC[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_Array_TextSort) == 0x000008, "Wrong alignment on DFBlueprintFunctions_Array_TextSort");
//(sizeof(DFBlueprintFunctions_Array_TextSort) == 0x000018, "Wrong size on DFBlueprintFunctions_Array_TextSort");
//(offsetof(DFBlueprintFunctions_Array_TextSort, ArrayToSort) == 0x000000, "Member 'DFBlueprintFunctions_Array_TextSort::ArrayToSort' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_Array_TextSort, bDescending) == 0x000010, "Member 'DFBlueprintFunctions_Array_TextSort::bDescending' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.Array_UInt8Sort
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_Array_UInt8Sort final 
{
public:
	TArray<uint8>                                 ArrayToSort;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDescending;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDD[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_Array_UInt8Sort) == 0x000008, "Wrong alignment on DFBlueprintFunctions_Array_UInt8Sort");
//(sizeof(DFBlueprintFunctions_Array_UInt8Sort) == 0x000018, "Wrong size on DFBlueprintFunctions_Array_UInt8Sort");
//(offsetof(DFBlueprintFunctions_Array_UInt8Sort, ArrayToSort) == 0x000000, "Member 'DFBlueprintFunctions_Array_UInt8Sort::ArrayToSort' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_Array_UInt8Sort, bDescending) == 0x000010, "Member 'DFBlueprintFunctions_Array_UInt8Sort::bDescending' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.CharacterVariationDataFromTableRow
// 0x0030 (0x0030 - 0x0000)
struct DFBlueprintFunctions_CharacterVariationDataFromTableRow final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    RowHandle;                                         // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDFCharacterVariationDataHandle        ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_CharacterVariationDataFromTableRow) == 0x000008, "Wrong alignment on DFBlueprintFunctions_CharacterVariationDataFromTableRow");
//(sizeof(DFBlueprintFunctions_CharacterVariationDataFromTableRow) == 0x000030, "Wrong size on DFBlueprintFunctions_CharacterVariationDataFromTableRow");
//(offsetof(DFBlueprintFunctions_CharacterVariationDataFromTableRow, WorldContextObject) == 0x000000, "Member 'DFBlueprintFunctions_CharacterVariationDataFromTableRow::WorldContextObject' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_CharacterVariationDataFromTableRow, RowHandle) == 0x000008, "Member 'DFBlueprintFunctions_CharacterVariationDataFromTableRow::RowHandle' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_CharacterVariationDataFromTableRow, ReturnValue) == 0x000018, "Member 'DFBlueprintFunctions_CharacterVariationDataFromTableRow::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.CharacterVariationGetData
// 0x0080 (0x0080 - 0x0000)
struct DFBlueprintFunctions_CharacterVariationGetData final 
{
public:
	struct FDFCharacterVariationDataHandle        VariationData;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FDFCharacterVariationData              ReturnValue;                                       // 0x0018(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_CharacterVariationGetData) == 0x000008, "Wrong alignment on DFBlueprintFunctions_CharacterVariationGetData");
//(sizeof(DFBlueprintFunctions_CharacterVariationGetData) == 0x000080, "Wrong size on DFBlueprintFunctions_CharacterVariationGetData");
//(offsetof(DFBlueprintFunctions_CharacterVariationGetData, VariationData) == 0x000000, "Member 'DFBlueprintFunctions_CharacterVariationGetData::VariationData' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_CharacterVariationGetData, ReturnValue) == 0x000018, "Member 'DFBlueprintFunctions_CharacterVariationGetData::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.CharacterVariationIsValid
// 0x0020 (0x0020 - 0x0000)
struct DFBlueprintFunctions_CharacterVariationIsValid final 
{
public:
	struct FDFCharacterVariationDataHandle        VariationData;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDE[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_CharacterVariationIsValid) == 0x000008, "Wrong alignment on DFBlueprintFunctions_CharacterVariationIsValid");
//(sizeof(DFBlueprintFunctions_CharacterVariationIsValid) == 0x000020, "Wrong size on DFBlueprintFunctions_CharacterVariationIsValid");
//(offsetof(DFBlueprintFunctions_CharacterVariationIsValid, VariationData) == 0x000000, "Member 'DFBlueprintFunctions_CharacterVariationIsValid::VariationData' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_CharacterVariationIsValid, ReturnValue) == 0x000018, "Member 'DFBlueprintFunctions_CharacterVariationIsValid::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.DoesMapIDSupportGMDefinition
// 0x0020 (0x0020 - 0x0000)
struct DFBlueprintFunctions_DoesMapIDSupportGMDefinition final 
{
public:
	struct FPrimaryAssetId                        MapId;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFGameModeDefinition*                  GMDef;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDF[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_DoesMapIDSupportGMDefinition) == 0x000008, "Wrong alignment on DFBlueprintFunctions_DoesMapIDSupportGMDefinition");
//(sizeof(DFBlueprintFunctions_DoesMapIDSupportGMDefinition) == 0x000020, "Wrong size on DFBlueprintFunctions_DoesMapIDSupportGMDefinition");
//(offsetof(DFBlueprintFunctions_DoesMapIDSupportGMDefinition, MapId) == 0x000000, "Member 'DFBlueprintFunctions_DoesMapIDSupportGMDefinition::MapId' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_DoesMapIDSupportGMDefinition, GMDef) == 0x000010, "Member 'DFBlueprintFunctions_DoesMapIDSupportGMDefinition::GMDef' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_DoesMapIDSupportGMDefinition, ReturnValue) == 0x000018, "Member 'DFBlueprintFunctions_DoesMapIDSupportGMDefinition::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.EqualEqual_CharacterAnimCollection
// 0x0258 (0x0258 - 0x0000)
struct DFBlueprintFunctions_EqualEqual_CharacterAnimCollection final 
{
public:
	struct FCharacterAnimCollection               A;                                                 // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterAnimCollection               B;                                                 // 0x0128(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0250(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE0[0x7];                                      // 0x0251(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_EqualEqual_CharacterAnimCollection) == 0x000008, "Wrong alignment on DFBlueprintFunctions_EqualEqual_CharacterAnimCollection");
//(sizeof(DFBlueprintFunctions_EqualEqual_CharacterAnimCollection) == 0x000258, "Wrong size on DFBlueprintFunctions_EqualEqual_CharacterAnimCollection");
//(offsetof(DFBlueprintFunctions_EqualEqual_CharacterAnimCollection, A) == 0x000000, "Member 'DFBlueprintFunctions_EqualEqual_CharacterAnimCollection::A' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_CharacterAnimCollection, B) == 0x000128, "Member 'DFBlueprintFunctions_EqualEqual_CharacterAnimCollection::B' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_CharacterAnimCollection, ReturnValue) == 0x000250, "Member 'DFBlueprintFunctions_EqualEqual_CharacterAnimCollection::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.EqualEqual_CharacterSoundCollection
// 0x0028 (0x0028 - 0x0000)
struct DFBlueprintFunctions_EqualEqual_CharacterSoundCollection final 
{
public:
	struct FCharacterSoundCollection              A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterSoundCollection              B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE1[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_EqualEqual_CharacterSoundCollection) == 0x000008, "Wrong alignment on DFBlueprintFunctions_EqualEqual_CharacterSoundCollection");
//(sizeof(DFBlueprintFunctions_EqualEqual_CharacterSoundCollection) == 0x000028, "Wrong size on DFBlueprintFunctions_EqualEqual_CharacterSoundCollection");
//(offsetof(DFBlueprintFunctions_EqualEqual_CharacterSoundCollection, A) == 0x000000, "Member 'DFBlueprintFunctions_EqualEqual_CharacterSoundCollection::A' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_CharacterSoundCollection, B) == 0x000010, "Member 'DFBlueprintFunctions_EqualEqual_CharacterSoundCollection::B' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_CharacterSoundCollection, ReturnValue) == 0x000020, "Member 'DFBlueprintFunctions_EqualEqual_CharacterSoundCollection::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.EqualEqual_PerspectiveAnim
// 0x0028 (0x0028 - 0x0000)
struct DFBlueprintFunctions_EqualEqual_PerspectiveAnim final 
{
public:
	struct FPerspectiveAnim                       A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE2[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_EqualEqual_PerspectiveAnim) == 0x000008, "Wrong alignment on DFBlueprintFunctions_EqualEqual_PerspectiveAnim");
//(sizeof(DFBlueprintFunctions_EqualEqual_PerspectiveAnim) == 0x000028, "Wrong size on DFBlueprintFunctions_EqualEqual_PerspectiveAnim");
//(offsetof(DFBlueprintFunctions_EqualEqual_PerspectiveAnim, A) == 0x000000, "Member 'DFBlueprintFunctions_EqualEqual_PerspectiveAnim::A' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_PerspectiveAnim, B) == 0x000010, "Member 'DFBlueprintFunctions_EqualEqual_PerspectiveAnim::B' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_PerspectiveAnim, ReturnValue) == 0x000020, "Member 'DFBlueprintFunctions_EqualEqual_PerspectiveAnim::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.EqualEqual_PerspectiveAnimSequence
// 0x0028 (0x0028 - 0x0000)
struct DFBlueprintFunctions_EqualEqual_PerspectiveAnimSequence final 
{
public:
	struct FPerspectiveAnimSequence               A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnimSequence               B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE3[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_EqualEqual_PerspectiveAnimSequence) == 0x000008, "Wrong alignment on DFBlueprintFunctions_EqualEqual_PerspectiveAnimSequence");
//(sizeof(DFBlueprintFunctions_EqualEqual_PerspectiveAnimSequence) == 0x000028, "Wrong size on DFBlueprintFunctions_EqualEqual_PerspectiveAnimSequence");
//(offsetof(DFBlueprintFunctions_EqualEqual_PerspectiveAnimSequence, A) == 0x000000, "Member 'DFBlueprintFunctions_EqualEqual_PerspectiveAnimSequence::A' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_PerspectiveAnimSequence, B) == 0x000010, "Member 'DFBlueprintFunctions_EqualEqual_PerspectiveAnimSequence::B' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_PerspectiveAnimSequence, ReturnValue) == 0x000020, "Member 'DFBlueprintFunctions_EqualEqual_PerspectiveAnimSequence::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.EqualEqual_PerspectiveSound
// 0x0028 (0x0028 - 0x0000)
struct DFBlueprintFunctions_EqualEqual_PerspectiveSound final 
{
public:
	struct FPerspectiveSound                      A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveSound                      B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE4[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_EqualEqual_PerspectiveSound) == 0x000008, "Wrong alignment on DFBlueprintFunctions_EqualEqual_PerspectiveSound");
//(sizeof(DFBlueprintFunctions_EqualEqual_PerspectiveSound) == 0x000028, "Wrong size on DFBlueprintFunctions_EqualEqual_PerspectiveSound");
//(offsetof(DFBlueprintFunctions_EqualEqual_PerspectiveSound, A) == 0x000000, "Member 'DFBlueprintFunctions_EqualEqual_PerspectiveSound::A' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_PerspectiveSound, B) == 0x000010, "Member 'DFBlueprintFunctions_EqualEqual_PerspectiveSound::B' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_PerspectiveSound, ReturnValue) == 0x000020, "Member 'DFBlueprintFunctions_EqualEqual_PerspectiveSound::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.EqualEqual_WeaponAnim
// 0x0028 (0x0028 - 0x0000)
struct DFBlueprintFunctions_EqualEqual_WeaponAnim final 
{
public:
	struct FWeaponAnim                            A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponAnim                            B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE5[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_EqualEqual_WeaponAnim) == 0x000008, "Wrong alignment on DFBlueprintFunctions_EqualEqual_WeaponAnim");
//(sizeof(DFBlueprintFunctions_EqualEqual_WeaponAnim) == 0x000028, "Wrong size on DFBlueprintFunctions_EqualEqual_WeaponAnim");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponAnim, A) == 0x000000, "Member 'DFBlueprintFunctions_EqualEqual_WeaponAnim::A' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponAnim, B) == 0x000010, "Member 'DFBlueprintFunctions_EqualEqual_WeaponAnim::B' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponAnim, ReturnValue) == 0x000020, "Member 'DFBlueprintFunctions_EqualEqual_WeaponAnim::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.EqualEqual_WeaponAnimCollection
// 0x01E8 (0x01E8 - 0x0000)
struct DFBlueprintFunctions_EqualEqual_WeaponAnimCollection final 
{
public:
	struct FWeaponAnimCollection                  A;                                                 // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponAnimCollection                  B;                                                 // 0x00F0(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE6[0x7];                                      // 0x01E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_EqualEqual_WeaponAnimCollection) == 0x000008, "Wrong alignment on DFBlueprintFunctions_EqualEqual_WeaponAnimCollection");
//(sizeof(DFBlueprintFunctions_EqualEqual_WeaponAnimCollection) == 0x0001E8, "Wrong size on DFBlueprintFunctions_EqualEqual_WeaponAnimCollection");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponAnimCollection, A) == 0x000000, "Member 'DFBlueprintFunctions_EqualEqual_WeaponAnimCollection::A' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponAnimCollection, B) == 0x0000F0, "Member 'DFBlueprintFunctions_EqualEqual_WeaponAnimCollection::B' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponAnimCollection, ReturnValue) == 0x0001E0, "Member 'DFBlueprintFunctions_EqualEqual_WeaponAnimCollection::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.EqualEqual_WeaponAnimMontage
// 0x0028 (0x0028 - 0x0000)
struct DFBlueprintFunctions_EqualEqual_WeaponAnimMontage final 
{
public:
	struct FWeaponAnimMontage                     A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponAnimMontage                     B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE7[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_EqualEqual_WeaponAnimMontage) == 0x000008, "Wrong alignment on DFBlueprintFunctions_EqualEqual_WeaponAnimMontage");
//(sizeof(DFBlueprintFunctions_EqualEqual_WeaponAnimMontage) == 0x000028, "Wrong size on DFBlueprintFunctions_EqualEqual_WeaponAnimMontage");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponAnimMontage, A) == 0x000000, "Member 'DFBlueprintFunctions_EqualEqual_WeaponAnimMontage::A' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponAnimMontage, B) == 0x000010, "Member 'DFBlueprintFunctions_EqualEqual_WeaponAnimMontage::B' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponAnimMontage, ReturnValue) == 0x000020, "Member 'DFBlueprintFunctions_EqualEqual_WeaponAnimMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.EqualEqual_WeaponAnimSequence
// 0x0028 (0x0028 - 0x0000)
struct DFBlueprintFunctions_EqualEqual_WeaponAnimSequence final 
{
public:
	struct FWeaponAnimSequence                    A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponAnimSequence                    B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE8[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_EqualEqual_WeaponAnimSequence) == 0x000008, "Wrong alignment on DFBlueprintFunctions_EqualEqual_WeaponAnimSequence");
//(sizeof(DFBlueprintFunctions_EqualEqual_WeaponAnimSequence) == 0x000028, "Wrong size on DFBlueprintFunctions_EqualEqual_WeaponAnimSequence");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponAnimSequence, A) == 0x000000, "Member 'DFBlueprintFunctions_EqualEqual_WeaponAnimSequence::A' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponAnimSequence, B) == 0x000010, "Member 'DFBlueprintFunctions_EqualEqual_WeaponAnimSequence::B' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponAnimSequence, ReturnValue) == 0x000020, "Member 'DFBlueprintFunctions_EqualEqual_WeaponAnimSequence::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.EqualEqual_WeaponSoundCollection
// 0x0108 (0x0108 - 0x0000)
struct DFBlueprintFunctions_EqualEqual_WeaponSoundCollection final 
{
public:
	struct FWeaponSoundCollection                 A;                                                 // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponSoundCollection                 B;                                                 // 0x0080(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE9[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_EqualEqual_WeaponSoundCollection) == 0x000008, "Wrong alignment on DFBlueprintFunctions_EqualEqual_WeaponSoundCollection");
//(sizeof(DFBlueprintFunctions_EqualEqual_WeaponSoundCollection) == 0x000108, "Wrong size on DFBlueprintFunctions_EqualEqual_WeaponSoundCollection");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponSoundCollection, A) == 0x000000, "Member 'DFBlueprintFunctions_EqualEqual_WeaponSoundCollection::A' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponSoundCollection, B) == 0x000080, "Member 'DFBlueprintFunctions_EqualEqual_WeaponSoundCollection::B' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_EqualEqual_WeaponSoundCollection, ReturnValue) == 0x000100, "Member 'DFBlueprintFunctions_EqualEqual_WeaponSoundCollection::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.FindMapIdByDisplayName
// 0x0038 (0x0038 - 0x0000)
struct DFBlueprintFunctions_FindMapIdByDisplayName final 
{
public:
	class FText                                   MapDisplayName;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetId>                MapIds;                                            // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_FindMapIdByDisplayName) == 0x000008, "Wrong alignment on DFBlueprintFunctions_FindMapIdByDisplayName");
//(sizeof(DFBlueprintFunctions_FindMapIdByDisplayName) == 0x000038, "Wrong size on DFBlueprintFunctions_FindMapIdByDisplayName");
//(offsetof(DFBlueprintFunctions_FindMapIdByDisplayName, MapDisplayName) == 0x000000, "Member 'DFBlueprintFunctions_FindMapIdByDisplayName::MapDisplayName' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_FindMapIdByDisplayName, MapIds) == 0x000018, "Member 'DFBlueprintFunctions_FindMapIdByDisplayName::MapIds' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_FindMapIdByDisplayName, ReturnValue) == 0x000028, "Member 'DFBlueprintFunctions_FindMapIdByDisplayName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.FlushPressedKeys
// 0x0008 (0x0008 - 0x0000)
struct DFBlueprintFunctions_FlushPressedKeys final 
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_FlushPressedKeys) == 0x000008, "Wrong alignment on DFBlueprintFunctions_FlushPressedKeys");
//(sizeof(DFBlueprintFunctions_FlushPressedKeys) == 0x000008, "Wrong size on DFBlueprintFunctions_FlushPressedKeys");
//(offsetof(DFBlueprintFunctions_FlushPressedKeys, PC) == 0x000000, "Member 'DFBlueprintFunctions_FlushPressedKeys::PC' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GameHasEnded
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_GameHasEnded final 
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EndGameFocus;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWinner;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEA[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GameHasEnded) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GameHasEnded");
//(sizeof(DFBlueprintFunctions_GameHasEnded) == 0x000018, "Wrong size on DFBlueprintFunctions_GameHasEnded");
//(offsetof(DFBlueprintFunctions_GameHasEnded, Controller) == 0x000000, "Member 'DFBlueprintFunctions_GameHasEnded::Controller' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GameHasEnded, EndGameFocus) == 0x000008, "Member 'DFBlueprintFunctions_GameHasEnded::EndGameFocus' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GameHasEnded, bIsWinner) == 0x000010, "Member 'DFBlueprintFunctions_GameHasEnded::bIsWinner' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetAllMapNames
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_GetAllMapNames final 
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetAllMapNames) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetAllMapNames");
//(sizeof(DFBlueprintFunctions_GetAllMapNames) == 0x000010, "Wrong size on DFBlueprintFunctions_GetAllMapNames");
//(offsetof(DFBlueprintFunctions_GetAllMapNames, ReturnValue) == 0x000000, "Member 'DFBlueprintFunctions_GetAllMapNames::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetCopyrightNotice
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_GetCopyrightNotice final 
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetCopyrightNotice) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetCopyrightNotice");
//(sizeof(DFBlueprintFunctions_GetCopyrightNotice) == 0x000010, "Wrong size on DFBlueprintFunctions_GetCopyrightNotice");
//(offsetof(DFBlueprintFunctions_GetCopyrightNotice, ReturnValue) == 0x000000, "Member 'DFBlueprintFunctions_GetCopyrightNotice::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetDefaultBoundingCylinder
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_GetDefaultBoundingCylinder final 
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CylinderRadius;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CylinderHalfHeight;                                // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetDefaultBoundingCylinder) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetDefaultBoundingCylinder");
//(sizeof(DFBlueprintFunctions_GetDefaultBoundingCylinder) == 0x000010, "Wrong size on DFBlueprintFunctions_GetDefaultBoundingCylinder");
//(offsetof(DFBlueprintFunctions_GetDefaultBoundingCylinder, Actor) == 0x000000, "Member 'DFBlueprintFunctions_GetDefaultBoundingCylinder::Actor' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetDefaultBoundingCylinder, CylinderRadius) == 0x000008, "Member 'DFBlueprintFunctions_GetDefaultBoundingCylinder::CylinderRadius' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetDefaultBoundingCylinder, CylinderHalfHeight) == 0x00000C, "Member 'DFBlueprintFunctions_GetDefaultBoundingCylinder::CylinderHalfHeight' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetFocalPoint
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_GetFocalPoint final 
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEB[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetFocalPoint) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetFocalPoint");
//(sizeof(DFBlueprintFunctions_GetFocalPoint) == 0x000018, "Wrong size on DFBlueprintFunctions_GetFocalPoint");
//(offsetof(DFBlueprintFunctions_GetFocalPoint, Actor) == 0x000000, "Member 'DFBlueprintFunctions_GetFocalPoint::Actor' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetFocalPoint, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_GetFocalPoint::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetGameBuildInfo
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_GetGameBuildInfo final 
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetGameBuildInfo) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetGameBuildInfo");
//(sizeof(DFBlueprintFunctions_GetGameBuildInfo) == 0x000010, "Wrong size on DFBlueprintFunctions_GetGameBuildInfo");
//(offsetof(DFBlueprintFunctions_GetGameBuildInfo, ReturnValue) == 0x000000, "Member 'DFBlueprintFunctions_GetGameBuildInfo::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetGameDefaultMap
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_GetGameDefaultMap final 
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetGameDefaultMap) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetGameDefaultMap");
//(sizeof(DFBlueprintFunctions_GetGameDefaultMap) == 0x000010, "Wrong size on DFBlueprintFunctions_GetGameDefaultMap");
//(offsetof(DFBlueprintFunctions_GetGameDefaultMap, ReturnValue) == 0x000000, "Member 'DFBlueprintFunctions_GetGameDefaultMap::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetGameModeForMapName
// 0x0020 (0x0020 - 0x0000)
struct DFBlueprintFunctions_GetGameModeForMapName final 
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetGameModeForMapName) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetGameModeForMapName");
//(sizeof(DFBlueprintFunctions_GetGameModeForMapName) == 0x000020, "Wrong size on DFBlueprintFunctions_GetGameModeForMapName");
//(offsetof(DFBlueprintFunctions_GetGameModeForMapName, MapName) == 0x000000, "Member 'DFBlueprintFunctions_GetGameModeForMapName::MapName' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetGameModeForMapName, ReturnValue) == 0x000010, "Member 'DFBlueprintFunctions_GetGameModeForMapName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetGameModeForName
// 0x0020 (0x0020 - 0x0000)
struct DFBlueprintFunctions_GetGameModeForName final 
{
public:
	class FString                                 GameModeName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetGameModeForName) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetGameModeForName");
//(sizeof(DFBlueprintFunctions_GetGameModeForName) == 0x000020, "Wrong size on DFBlueprintFunctions_GetGameModeForName");
//(offsetof(DFBlueprintFunctions_GetGameModeForName, GameModeName) == 0x000000, "Member 'DFBlueprintFunctions_GetGameModeForName::GameModeName' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetGameModeForName, ReturnValue) == 0x000010, "Member 'DFBlueprintFunctions_GetGameModeForName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetGameNameForDisplay
// 0x0020 (0x0020 - 0x0000)
struct DFBlueprintFunctions_GetGameNameForDisplay final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetGameNameForDisplay) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetGameNameForDisplay");
//(sizeof(DFBlueprintFunctions_GetGameNameForDisplay) == 0x000020, "Wrong size on DFBlueprintFunctions_GetGameNameForDisplay");
//(offsetof(DFBlueprintFunctions_GetGameNameForDisplay, WorldContextObject) == 0x000000, "Member 'DFBlueprintFunctions_GetGameNameForDisplay::WorldContextObject' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetGameNameForDisplay, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_GetGameNameForDisplay::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetGameVersion
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_GetGameVersion final 
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetGameVersion) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetGameVersion");
//(sizeof(DFBlueprintFunctions_GetGameVersion) == 0x000010, "Wrong size on DFBlueprintFunctions_GetGameVersion");
//(offsetof(DFBlueprintFunctions_GetGameVersion, ReturnValue) == 0x000000, "Member 'DFBlueprintFunctions_GetGameVersion::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetGlobalDefaultGameMode
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_GetGlobalDefaultGameMode final 
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetGlobalDefaultGameMode) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetGlobalDefaultGameMode");
//(sizeof(DFBlueprintFunctions_GetGlobalDefaultGameMode) == 0x000010, "Wrong size on DFBlueprintFunctions_GetGlobalDefaultGameMode");
//(offsetof(DFBlueprintFunctions_GetGlobalDefaultGameMode, ReturnValue) == 0x000000, "Member 'DFBlueprintFunctions_GetGlobalDefaultGameMode::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetDataDefaultGameMode
// 0x0080 (0x0080 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetDataDefaultGameMode final 
{
public:
	struct FAssetData                             WorldAsset;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OutDefaultGameModeRef;                             // 0x0050(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEC[0x7];                                      // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetDataDefaultGameMode) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetDataDefaultGameMode");
//(sizeof(DFBlueprintFunctions_GetMapAssetDataDefaultGameMode) == 0x000080, "Wrong size on DFBlueprintFunctions_GetMapAssetDataDefaultGameMode");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataDefaultGameMode, WorldAsset) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetDataDefaultGameMode::WorldAsset' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataDefaultGameMode, OutDefaultGameModeRef) == 0x000050, "Member 'DFBlueprintFunctions_GetMapAssetDataDefaultGameMode::OutDefaultGameModeRef' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataDefaultGameMode, ReturnValue) == 0x000078, "Member 'DFBlueprintFunctions_GetMapAssetDataDefaultGameMode::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetDataDescription
// 0x0068 (0x0068 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetDataDescription final 
{
public:
	struct FAssetData                             WorldAsset;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutMapDescription;                                 // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DED[0x7];                                      // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetDataDescription) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetDataDescription");
//(sizeof(DFBlueprintFunctions_GetMapAssetDataDescription) == 0x000068, "Wrong size on DFBlueprintFunctions_GetMapAssetDataDescription");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataDescription, WorldAsset) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetDataDescription::WorldAsset' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataDescription, OutMapDescription) == 0x000050, "Member 'DFBlueprintFunctions_GetMapAssetDataDescription::OutMapDescription' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataDescription, ReturnValue) == 0x000060, "Member 'DFBlueprintFunctions_GetMapAssetDataDescription::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetDataDisplayName
// 0x0070 (0x0070 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetDataDisplayName final 
{
public:
	struct FAssetData                             WorldAsset;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutMapDisplayName;                                 // 0x0050(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEE[0x7];                                      // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetDataDisplayName) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetDataDisplayName");
//(sizeof(DFBlueprintFunctions_GetMapAssetDataDisplayName) == 0x000070, "Wrong size on DFBlueprintFunctions_GetMapAssetDataDisplayName");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataDisplayName, WorldAsset) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetDataDisplayName::WorldAsset' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataDisplayName, OutMapDisplayName) == 0x000050, "Member 'DFBlueprintFunctions_GetMapAssetDataDisplayName::OutMapDisplayName' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataDisplayName, ReturnValue) == 0x000068, "Member 'DFBlueprintFunctions_GetMapAssetDataDisplayName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetDataGameRulesetClasses
// 0x00A8 (0x00A8 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetDataGameRulesetClasses final 
{
public:
	struct FAssetData                             WorldAsset;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<TSoftClassPtr<class UClass>>             OutGameRulesetClasses;                             // 0x0050(0x0050)(Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEF[0x7];                                      // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetDataGameRulesetClasses) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetDataGameRulesetClasses");
//(sizeof(DFBlueprintFunctions_GetMapAssetDataGameRulesetClasses) == 0x0000A8, "Wrong size on DFBlueprintFunctions_GetMapAssetDataGameRulesetClasses");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataGameRulesetClasses, WorldAsset) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetDataGameRulesetClasses::WorldAsset' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataGameRulesetClasses, OutGameRulesetClasses) == 0x000050, "Member 'DFBlueprintFunctions_GetMapAssetDataGameRulesetClasses::OutGameRulesetClasses' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataGameRulesetClasses, ReturnValue) == 0x0000A0, "Member 'DFBlueprintFunctions_GetMapAssetDataGameRulesetClasses::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetDataNameForDisplay
// 0x0068 (0x0068 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetDataNameForDisplay final 
{
public:
	struct FAssetData                             WorldAsset;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0050(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetMapAssetDataNameForDisplay) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetDataNameForDisplay");
//(sizeof(DFBlueprintFunctions_GetMapAssetDataNameForDisplay) == 0x000068, "Wrong size on DFBlueprintFunctions_GetMapAssetDataNameForDisplay");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataNameForDisplay, WorldAsset) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetDataNameForDisplay::WorldAsset' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataNameForDisplay, ReturnValue) == 0x000050, "Member 'DFBlueprintFunctions_GetMapAssetDataNameForDisplay::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetDataPreviewBannerImg
// 0x0080 (0x0080 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetDataPreviewBannerImg final 
{
public:
	struct FAssetData                             WorldAsset;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              OutMapPreviewBannerImgRef;                         // 0x0050(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF0[0x7];                                      // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetDataPreviewBannerImg) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetDataPreviewBannerImg");
//(sizeof(DFBlueprintFunctions_GetMapAssetDataPreviewBannerImg) == 0x000080, "Wrong size on DFBlueprintFunctions_GetMapAssetDataPreviewBannerImg");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataPreviewBannerImg, WorldAsset) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetDataPreviewBannerImg::WorldAsset' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataPreviewBannerImg, OutMapPreviewBannerImgRef) == 0x000050, "Member 'DFBlueprintFunctions_GetMapAssetDataPreviewBannerImg::OutMapPreviewBannerImgRef' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataPreviewBannerImg, ReturnValue) == 0x000078, "Member 'DFBlueprintFunctions_GetMapAssetDataPreviewBannerImg::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetDataPreviewImg
// 0x0080 (0x0080 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetDataPreviewImg final 
{
public:
	struct FAssetData                             WorldAsset;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              OutMapPreviewImgRef;                               // 0x0050(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF1[0x7];                                      // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetDataPreviewImg) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetDataPreviewImg");
//(sizeof(DFBlueprintFunctions_GetMapAssetDataPreviewImg) == 0x000080, "Wrong size on DFBlueprintFunctions_GetMapAssetDataPreviewImg");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataPreviewImg, WorldAsset) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetDataPreviewImg::WorldAsset' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataPreviewImg, OutMapPreviewImgRef) == 0x000050, "Member 'DFBlueprintFunctions_GetMapAssetDataPreviewImg::OutMapPreviewImgRef' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataPreviewImg, ReturnValue) == 0x000078, "Member 'DFBlueprintFunctions_GetMapAssetDataPreviewImg::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetDataSupportedGameModes
// 0x00A8 (0x00A8 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetDataSupportedGameModes final 
{
public:
	struct FAssetData                             WorldAsset;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<TSoftClassPtr<class UClass>>             OutSupportedGameModes;                             // 0x0050(0x0050)(Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF2[0x7];                                      // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetDataSupportedGameModes) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetDataSupportedGameModes");
//(sizeof(DFBlueprintFunctions_GetMapAssetDataSupportedGameModes) == 0x0000A8, "Wrong size on DFBlueprintFunctions_GetMapAssetDataSupportedGameModes");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataSupportedGameModes, WorldAsset) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetDataSupportedGameModes::WorldAsset' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataSupportedGameModes, OutSupportedGameModes) == 0x000050, "Member 'DFBlueprintFunctions_GetMapAssetDataSupportedGameModes::OutSupportedGameModes' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDataSupportedGameModes, ReturnValue) == 0x0000A0, "Member 'DFBlueprintFunctions_GetMapAssetDataSupportedGameModes::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetDefaultGameMode
// 0x0040 (0x0040 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetDefaultGameMode final 
{
public:
	struct FPrimaryAssetId                        WorldAssetId;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OutDefaultGameModeRef;                             // 0x0010(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF3[0x7];                                      // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetDefaultGameMode) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetDefaultGameMode");
//(sizeof(DFBlueprintFunctions_GetMapAssetDefaultGameMode) == 0x000040, "Wrong size on DFBlueprintFunctions_GetMapAssetDefaultGameMode");
//(offsetof(DFBlueprintFunctions_GetMapAssetDefaultGameMode, WorldAssetId) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetDefaultGameMode::WorldAssetId' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDefaultGameMode, OutDefaultGameModeRef) == 0x000010, "Member 'DFBlueprintFunctions_GetMapAssetDefaultGameMode::OutDefaultGameModeRef' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDefaultGameMode, ReturnValue) == 0x000038, "Member 'DFBlueprintFunctions_GetMapAssetDefaultGameMode::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetDescription
// 0x0028 (0x0028 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetDescription final 
{
public:
	struct FPrimaryAssetId                        WorldAssetId;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutMapDescription;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF4[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetDescription) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetDescription");
//(sizeof(DFBlueprintFunctions_GetMapAssetDescription) == 0x000028, "Wrong size on DFBlueprintFunctions_GetMapAssetDescription");
//(offsetof(DFBlueprintFunctions_GetMapAssetDescription, WorldAssetId) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetDescription::WorldAssetId' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDescription, OutMapDescription) == 0x000010, "Member 'DFBlueprintFunctions_GetMapAssetDescription::OutMapDescription' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetDescription, ReturnValue) == 0x000020, "Member 'DFBlueprintFunctions_GetMapAssetDescription::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetGameRulesetClasses
// 0x0068 (0x0068 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetGameRulesetClasses final 
{
public:
	struct FPrimaryAssetId                        WorldAssetId;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<TSoftClassPtr<class UClass>>             OutGameRulesetClasses;                             // 0x0010(0x0050)(Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF5[0x7];                                      // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetGameRulesetClasses) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetGameRulesetClasses");
//(sizeof(DFBlueprintFunctions_GetMapAssetGameRulesetClasses) == 0x000068, "Wrong size on DFBlueprintFunctions_GetMapAssetGameRulesetClasses");
//(offsetof(DFBlueprintFunctions_GetMapAssetGameRulesetClasses, WorldAssetId) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetGameRulesetClasses::WorldAssetId' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetGameRulesetClasses, OutGameRulesetClasses) == 0x000010, "Member 'DFBlueprintFunctions_GetMapAssetGameRulesetClasses::OutGameRulesetClasses' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetGameRulesetClasses, ReturnValue) == 0x000060, "Member 'DFBlueprintFunctions_GetMapAssetGameRulesetClasses::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetNameForDisplay
// 0x0028 (0x0028 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetNameForDisplay final 
{
public:
	struct FPrimaryAssetId                        WorldAssetId;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetMapAssetNameForDisplay) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetNameForDisplay");
//(sizeof(DFBlueprintFunctions_GetMapAssetNameForDisplay) == 0x000028, "Wrong size on DFBlueprintFunctions_GetMapAssetNameForDisplay");
//(offsetof(DFBlueprintFunctions_GetMapAssetNameForDisplay, WorldAssetId) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetNameForDisplay::WorldAssetId' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetNameForDisplay, ReturnValue) == 0x000010, "Member 'DFBlueprintFunctions_GetMapAssetNameForDisplay::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetPreviewBannerImg
// 0x0040 (0x0040 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetPreviewBannerImg final 
{
public:
	struct FPrimaryAssetId                        WorldAssetId;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              OutMapPreviewBannerImgRef;                         // 0x0010(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF6[0x7];                                      // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetPreviewBannerImg) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetPreviewBannerImg");
//(sizeof(DFBlueprintFunctions_GetMapAssetPreviewBannerImg) == 0x000040, "Wrong size on DFBlueprintFunctions_GetMapAssetPreviewBannerImg");
//(offsetof(DFBlueprintFunctions_GetMapAssetPreviewBannerImg, WorldAssetId) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetPreviewBannerImg::WorldAssetId' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetPreviewBannerImg, OutMapPreviewBannerImgRef) == 0x000010, "Member 'DFBlueprintFunctions_GetMapAssetPreviewBannerImg::OutMapPreviewBannerImgRef' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetPreviewBannerImg, ReturnValue) == 0x000038, "Member 'DFBlueprintFunctions_GetMapAssetPreviewBannerImg::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetPreviewImg
// 0x0040 (0x0040 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetPreviewImg final 
{
public:
	struct FPrimaryAssetId                        WorldAssetId;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              OutMapPreviewImgRef;                               // 0x0010(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF7[0x7];                                      // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetPreviewImg) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetPreviewImg");
//(sizeof(DFBlueprintFunctions_GetMapAssetPreviewImg) == 0x000040, "Wrong size on DFBlueprintFunctions_GetMapAssetPreviewImg");
//(offsetof(DFBlueprintFunctions_GetMapAssetPreviewImg, WorldAssetId) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetPreviewImg::WorldAssetId' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetPreviewImg, OutMapPreviewImgRef) == 0x000010, "Member 'DFBlueprintFunctions_GetMapAssetPreviewImg::OutMapPreviewImgRef' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetPreviewImg, ReturnValue) == 0x000038, "Member 'DFBlueprintFunctions_GetMapAssetPreviewImg::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetSupportedGameModes
// 0x0068 (0x0068 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetSupportedGameModes final 
{
public:
	struct FPrimaryAssetId                        WorldAssetId;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<TSoftClassPtr<class UClass>>             OutSupportedGameModes;                             // 0x0010(0x0050)(Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF8[0x7];                                      // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetSupportedGameModes) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapAssetSupportedGameModes");
//(sizeof(DFBlueprintFunctions_GetMapAssetSupportedGameModes) == 0x000068, "Wrong size on DFBlueprintFunctions_GetMapAssetSupportedGameModes");
//(offsetof(DFBlueprintFunctions_GetMapAssetSupportedGameModes, WorldAssetId) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetSupportedGameModes::WorldAssetId' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetSupportedGameModes, OutSupportedGameModes) == 0x000010, "Member 'DFBlueprintFunctions_GetMapAssetSupportedGameModes::OutSupportedGameModes' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetSupportedGameModes, ReturnValue) == 0x000060, "Member 'DFBlueprintFunctions_GetMapAssetSupportedGameModes::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapAssetVisibleInMapSelectUI
// 0x0014 (0x0014 - 0x0000)
struct DFBlueprintFunctions_GetMapAssetVisibleInMapSelectUI final 
{
public:
	struct FPrimaryAssetId                        WorldAssetId;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutVisibleInMapSelectUI;                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF9[0x2];                                      // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetMapAssetVisibleInMapSelectUI) == 0x000004, "Wrong alignment on DFBlueprintFunctions_GetMapAssetVisibleInMapSelectUI");
//(sizeof(DFBlueprintFunctions_GetMapAssetVisibleInMapSelectUI) == 0x000014, "Wrong size on DFBlueprintFunctions_GetMapAssetVisibleInMapSelectUI");
//(offsetof(DFBlueprintFunctions_GetMapAssetVisibleInMapSelectUI, WorldAssetId) == 0x000000, "Member 'DFBlueprintFunctions_GetMapAssetVisibleInMapSelectUI::WorldAssetId' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetVisibleInMapSelectUI, bOutVisibleInMapSelectUI) == 0x000010, "Member 'DFBlueprintFunctions_GetMapAssetVisibleInMapSelectUI::bOutVisibleInMapSelectUI' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapAssetVisibleInMapSelectUI, ReturnValue) == 0x000011, "Member 'DFBlueprintFunctions_GetMapAssetVisibleInMapSelectUI::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapName
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_GetMapName final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetMapName) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapName");
//(sizeof(DFBlueprintFunctions_GetMapName) == 0x000018, "Wrong size on DFBlueprintFunctions_GetMapName");
//(offsetof(DFBlueprintFunctions_GetMapName, WorldContextObject) == 0x000000, "Member 'DFBlueprintFunctions_GetMapName::WorldContextObject' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapName, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_GetMapName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetMapNameForDisplay
// 0x0020 (0x0020 - 0x0000)
struct DFBlueprintFunctions_GetMapNameForDisplay final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetMapNameForDisplay) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetMapNameForDisplay");
//(sizeof(DFBlueprintFunctions_GetMapNameForDisplay) == 0x000020, "Wrong size on DFBlueprintFunctions_GetMapNameForDisplay");
//(offsetof(DFBlueprintFunctions_GetMapNameForDisplay, WorldContextObject) == 0x000000, "Member 'DFBlueprintFunctions_GetMapNameForDisplay::WorldContextObject' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetMapNameForDisplay, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_GetMapNameForDisplay::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetNumShotsFiredBPCompat
// 0x000C (0x000C - 0x0000)
struct DFBlueprintFunctions_GetNumShotsFiredBPCompat final 
{
public:
	struct FRepShotInfo                           Counter;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRepShotInfo                           PreviousCounter;                                   // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetNumShotsFiredBPCompat) == 0x000004, "Wrong alignment on DFBlueprintFunctions_GetNumShotsFiredBPCompat");
//(sizeof(DFBlueprintFunctions_GetNumShotsFiredBPCompat) == 0x00000C, "Wrong size on DFBlueprintFunctions_GetNumShotsFiredBPCompat");
//(offsetof(DFBlueprintFunctions_GetNumShotsFiredBPCompat, Counter) == 0x000000, "Member 'DFBlueprintFunctions_GetNumShotsFiredBPCompat::Counter' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetNumShotsFiredBPCompat, PreviousCounter) == 0x000004, "Member 'DFBlueprintFunctions_GetNumShotsFiredBPCompat::PreviousCounter' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetNumShotsFiredBPCompat, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_GetNumShotsFiredBPCompat::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetPluginFriendlyName
// 0x0020 (0x0020 - 0x0000)
struct DFBlueprintFunctions_GetPluginFriendlyName final 
{
public:
	class FString                                 PluginName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetPluginFriendlyName) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetPluginFriendlyName");
//(sizeof(DFBlueprintFunctions_GetPluginFriendlyName) == 0x000020, "Wrong size on DFBlueprintFunctions_GetPluginFriendlyName");
//(offsetof(DFBlueprintFunctions_GetPluginFriendlyName, PluginName) == 0x000000, "Member 'DFBlueprintFunctions_GetPluginFriendlyName::PluginName' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetPluginFriendlyName, ReturnValue) == 0x000010, "Member 'DFBlueprintFunctions_GetPluginFriendlyName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetShotCounterBPCompat
// 0x0008 (0x0008 - 0x0000)
struct DFBlueprintFunctions_GetShotCounterBPCompat final 
{
public:
	struct FRepShotInfo                           Counter;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetShotCounterBPCompat) == 0x000004, "Wrong alignment on DFBlueprintFunctions_GetShotCounterBPCompat");
//(sizeof(DFBlueprintFunctions_GetShotCounterBPCompat) == 0x000008, "Wrong size on DFBlueprintFunctions_GetShotCounterBPCompat");
//(offsetof(DFBlueprintFunctions_GetShotCounterBPCompat, Counter) == 0x000000, "Member 'DFBlueprintFunctions_GetShotCounterBPCompat::Counter' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetShotCounterBPCompat, ReturnValue) == 0x000004, "Member 'DFBlueprintFunctions_GetShotCounterBPCompat::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetStartSpot
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_GetStartSpot final 
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetStartSpot) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetStartSpot");
//(sizeof(DFBlueprintFunctions_GetStartSpot) == 0x000010, "Wrong size on DFBlueprintFunctions_GetStartSpot");
//(offsetof(DFBlueprintFunctions_GetStartSpot, Controller) == 0x000000, "Member 'DFBlueprintFunctions_GetStartSpot::Controller' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetStartSpot, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_GetStartSpot::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetSurfaceName
// 0x000C (0x000C - 0x0000)
struct DFBlueprintFunctions_GetSurfaceName final 
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFA[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetSurfaceName) == 0x000004, "Wrong alignment on DFBlueprintFunctions_GetSurfaceName");
//(sizeof(DFBlueprintFunctions_GetSurfaceName) == 0x00000C, "Wrong size on DFBlueprintFunctions_GetSurfaceName");
//(offsetof(DFBlueprintFunctions_GetSurfaceName, SurfaceType) == 0x000000, "Member 'DFBlueprintFunctions_GetSurfaceName::SurfaceType' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetSurfaceName, ReturnValue) == 0x000004, "Member 'DFBlueprintFunctions_GetSurfaceName::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetTargetLocation
// 0x0020 (0x0020 - 0x0000)
struct DFBlueprintFunctions_GetTargetLocation final 
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 RequestedBy;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFB[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetTargetLocation) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetTargetLocation");
//(sizeof(DFBlueprintFunctions_GetTargetLocation) == 0x000020, "Wrong size on DFBlueprintFunctions_GetTargetLocation");
//(offsetof(DFBlueprintFunctions_GetTargetLocation, Actor) == 0x000000, "Member 'DFBlueprintFunctions_GetTargetLocation::Actor' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetTargetLocation, RequestedBy) == 0x000008, "Member 'DFBlueprintFunctions_GetTargetLocation::RequestedBy' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetTargetLocation, ReturnValue) == 0x000010, "Member 'DFBlueprintFunctions_GetTargetLocation::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetTeamNum
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_GetTeamNum final 
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFC[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetTeamNum) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetTeamNum");
//(sizeof(DFBlueprintFunctions_GetTeamNum) == 0x000010, "Wrong size on DFBlueprintFunctions_GetTeamNum");
//(offsetof(DFBlueprintFunctions_GetTeamNum, Target) == 0x000000, "Member 'DFBlueprintFunctions_GetTeamNum::Target' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetTeamNum, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_GetTeamNum::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetTeamStateFromTeamId
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_GetTeamStateFromTeamId final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamIdNum;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFD[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADFTeamState*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetTeamStateFromTeamId) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetTeamStateFromTeamId");
//(sizeof(DFBlueprintFunctions_GetTeamStateFromTeamId) == 0x000018, "Wrong size on DFBlueprintFunctions_GetTeamStateFromTeamId");
//(offsetof(DFBlueprintFunctions_GetTeamStateFromTeamId, WorldContextObject) == 0x000000, "Member 'DFBlueprintFunctions_GetTeamStateFromTeamId::WorldContextObject' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetTeamStateFromTeamId, TeamIdNum) == 0x000008, "Member 'DFBlueprintFunctions_GetTeamStateFromTeamId::TeamIdNum' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetTeamStateFromTeamId, ReturnValue) == 0x000010, "Member 'DFBlueprintFunctions_GetTeamStateFromTeamId::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetVisibilityDefault
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_GetVisibilityDefault final 
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFE[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_GetVisibilityDefault) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetVisibilityDefault");
//(sizeof(DFBlueprintFunctions_GetVisibilityDefault) == 0x000010, "Wrong size on DFBlueprintFunctions_GetVisibilityDefault");
//(offsetof(DFBlueprintFunctions_GetVisibilityDefault, Widget) == 0x000000, "Member 'DFBlueprintFunctions_GetVisibilityDefault::Widget' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetVisibilityDefault, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_GetVisibilityDefault::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetVOIPTalkerForPlayer
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_GetVOIPTalkerForPlayer final 
{
public:
	class APlayerState*                           InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVOIPTalker*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetVOIPTalkerForPlayer) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetVOIPTalkerForPlayer");
//(sizeof(DFBlueprintFunctions_GetVOIPTalkerForPlayer) == 0x000010, "Wrong size on DFBlueprintFunctions_GetVOIPTalkerForPlayer");
//(offsetof(DFBlueprintFunctions_GetVOIPTalkerForPlayer, InPlayerState) == 0x000000, "Member 'DFBlueprintFunctions_GetVOIPTalkerForPlayer::InPlayerState' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetVOIPTalkerForPlayer, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_GetVOIPTalkerForPlayer::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.GetWorldSettings
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_GetWorldSettings final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWorldSettings*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_GetWorldSettings) == 0x000008, "Wrong alignment on DFBlueprintFunctions_GetWorldSettings");
//(sizeof(DFBlueprintFunctions_GetWorldSettings) == 0x000010, "Wrong size on DFBlueprintFunctions_GetWorldSettings");
//(offsetof(DFBlueprintFunctions_GetWorldSettings, WorldContextObject) == 0x000000, "Member 'DFBlueprintFunctions_GetWorldSettings::WorldContextObject' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_GetWorldSettings, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_GetWorldSettings::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.HasFiringStopped
// 0x0006 (0x0006 - 0x0000)
struct DFBlueprintFunctions_HasFiringStopped final 
{
public:
	struct FRepShotInfo                           Counter;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFF[0x1];                                      // 0x0005(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_HasFiringStopped) == 0x000002, "Wrong alignment on DFBlueprintFunctions_HasFiringStopped");
//(sizeof(DFBlueprintFunctions_HasFiringStopped) == 0x000006, "Wrong size on DFBlueprintFunctions_HasFiringStopped");
//(offsetof(DFBlueprintFunctions_HasFiringStopped, Counter) == 0x000000, "Member 'DFBlueprintFunctions_HasFiringStopped::Counter' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_HasFiringStopped, ReturnValue) == 0x000004, "Member 'DFBlueprintFunctions_HasFiringStopped::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.HasOptions
// 0x0028 (0x0028 - 0x0000)
struct DFBlueprintFunctions_HasOptions final 
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Keys;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchAll;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E00[0x6];                                      // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_HasOptions) == 0x000008, "Wrong alignment on DFBlueprintFunctions_HasOptions");
//(sizeof(DFBlueprintFunctions_HasOptions) == 0x000028, "Wrong size on DFBlueprintFunctions_HasOptions");
//(offsetof(DFBlueprintFunctions_HasOptions, Options) == 0x000000, "Member 'DFBlueprintFunctions_HasOptions::Options' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_HasOptions, Keys) == 0x000010, "Member 'DFBlueprintFunctions_HasOptions::Keys' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_HasOptions, bMatchAll) == 0x000020, "Member 'DFBlueprintFunctions_HasOptions::bMatchAll' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_HasOptions, ReturnValue) == 0x000021, "Member 'DFBlueprintFunctions_HasOptions::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.IsEmptyOrWhitespace
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_IsEmptyOrWhitespace final 
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E01[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_IsEmptyOrWhitespace) == 0x000008, "Wrong alignment on DFBlueprintFunctions_IsEmptyOrWhitespace");
//(sizeof(DFBlueprintFunctions_IsEmptyOrWhitespace) == 0x000018, "Wrong size on DFBlueprintFunctions_IsEmptyOrWhitespace");
//(offsetof(DFBlueprintFunctions_IsEmptyOrWhitespace, InString) == 0x000000, "Member 'DFBlueprintFunctions_IsEmptyOrWhitespace::InString' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_IsEmptyOrWhitespace, ReturnValue) == 0x000010, "Member 'DFBlueprintFunctions_IsEmptyOrWhitespace::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.IsLocallyPlayerControlled
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_IsLocallyPlayerControlled final 
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E02[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_IsLocallyPlayerControlled) == 0x000008, "Wrong alignment on DFBlueprintFunctions_IsLocallyPlayerControlled");
//(sizeof(DFBlueprintFunctions_IsLocallyPlayerControlled) == 0x000010, "Wrong size on DFBlueprintFunctions_IsLocallyPlayerControlled");
//(offsetof(DFBlueprintFunctions_IsLocallyPlayerControlled, Pawn) == 0x000000, "Member 'DFBlueprintFunctions_IsLocallyPlayerControlled::Pawn' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_IsLocallyPlayerControlled, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_IsLocallyPlayerControlled::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.IsPendingKillPending
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_IsPendingKillPending final 
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E03[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_IsPendingKillPending) == 0x000008, "Wrong alignment on DFBlueprintFunctions_IsPendingKillPending");
//(sizeof(DFBlueprintFunctions_IsPendingKillPending) == 0x000010, "Wrong size on DFBlueprintFunctions_IsPendingKillPending");
//(offsetof(DFBlueprintFunctions_IsPendingKillPending, Actor) == 0x000000, "Member 'DFBlueprintFunctions_IsPendingKillPending::Actor' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_IsPendingKillPending, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_IsPendingKillPending::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.IsPlayerMuted
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_IsPlayerMuted final 
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PSToCheck;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E04[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_IsPlayerMuted) == 0x000008, "Wrong alignment on DFBlueprintFunctions_IsPlayerMuted");
//(sizeof(DFBlueprintFunctions_IsPlayerMuted) == 0x000018, "Wrong size on DFBlueprintFunctions_IsPlayerMuted");
//(offsetof(DFBlueprintFunctions_IsPlayerMuted, PC) == 0x000000, "Member 'DFBlueprintFunctions_IsPlayerMuted::PC' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_IsPlayerMuted, PSToCheck) == 0x000008, "Member 'DFBlueprintFunctions_IsPlayerMuted::PSToCheck' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_IsPlayerMuted, ReturnValue) == 0x000010, "Member 'DFBlueprintFunctions_IsPlayerMuted::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.IsPlayerTalking
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_IsPlayerTalking final 
{
public:
	class APlayerState*                           PlayerPS;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E05[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_IsPlayerTalking) == 0x000008, "Wrong alignment on DFBlueprintFunctions_IsPlayerTalking");
//(sizeof(DFBlueprintFunctions_IsPlayerTalking) == 0x000010, "Wrong size on DFBlueprintFunctions_IsPlayerTalking");
//(offsetof(DFBlueprintFunctions_IsPlayerTalking, PlayerPS) == 0x000000, "Member 'DFBlueprintFunctions_IsPlayerTalking::PlayerPS' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_IsPlayerTalking, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_IsPlayerTalking::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.IsPlayInEditor
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_IsPlayInEditor final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E06[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_IsPlayInEditor) == 0x000008, "Wrong alignment on DFBlueprintFunctions_IsPlayInEditor");
//(sizeof(DFBlueprintFunctions_IsPlayInEditor) == 0x000010, "Wrong size on DFBlueprintFunctions_IsPlayInEditor");
//(offsetof(DFBlueprintFunctions_IsPlayInEditor, WorldContextObject) == 0x000000, "Member 'DFBlueprintFunctions_IsPlayInEditor::WorldContextObject' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_IsPlayInEditor, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_IsPlayInEditor::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.IsValidActor
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_IsValidActor final 
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E07[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_IsValidActor) == 0x000008, "Wrong alignment on DFBlueprintFunctions_IsValidActor");
//(sizeof(DFBlueprintFunctions_IsValidActor) == 0x000010, "Wrong size on DFBlueprintFunctions_IsValidActor");
//(offsetof(DFBlueprintFunctions_IsValidActor, Actor) == 0x000000, "Member 'DFBlueprintFunctions_IsValidActor::Actor' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_IsValidActor, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_IsValidActor::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.IsVOIPTalkerStillAlive
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_IsVOIPTalkerStillAlive final 
{
public:
	class UVOIPTalker*                            InTalker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E08[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_IsVOIPTalkerStillAlive) == 0x000008, "Wrong alignment on DFBlueprintFunctions_IsVOIPTalkerStillAlive");
//(sizeof(DFBlueprintFunctions_IsVOIPTalkerStillAlive) == 0x000010, "Wrong size on DFBlueprintFunctions_IsVOIPTalkerStillAlive");
//(offsetof(DFBlueprintFunctions_IsVOIPTalkerStillAlive, InTalker) == 0x000000, "Member 'DFBlueprintFunctions_IsVOIPTalkerStillAlive::InTalker' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_IsVOIPTalkerStillAlive, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_IsVOIPTalkerStillAlive::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.PrintStringToLog
// 0x0020 (0x0020 - 0x0000)
struct DFBlueprintFunctions_PrintStringToLog final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InString;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELogVerbosityBP                               InLogVerbosity;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintStackTrace;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E09[0x6];                                      // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_PrintStringToLog) == 0x000008, "Wrong alignment on DFBlueprintFunctions_PrintStringToLog");
//(sizeof(DFBlueprintFunctions_PrintStringToLog) == 0x000020, "Wrong size on DFBlueprintFunctions_PrintStringToLog");
//(offsetof(DFBlueprintFunctions_PrintStringToLog, WorldContextObject) == 0x000000, "Member 'DFBlueprintFunctions_PrintStringToLog::WorldContextObject' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_PrintStringToLog, InString) == 0x000008, "Member 'DFBlueprintFunctions_PrintStringToLog::InString' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_PrintStringToLog, InLogVerbosity) == 0x000018, "Member 'DFBlueprintFunctions_PrintStringToLog::InLogVerbosity' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_PrintStringToLog, bPrintStackTrace) == 0x000019, "Member 'DFBlueprintFunctions_PrintStringToLog::bPrintStackTrace' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.PrintTextToLog
// 0x0028 (0x0028 - 0x0000)
struct DFBlueprintFunctions_PrintTextToLog final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InText;                                            // 0x0008(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	ELogVerbosityBP                               InLogVerbosity;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintStackTrace;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0A[0x6];                                      // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_PrintTextToLog) == 0x000008, "Wrong alignment on DFBlueprintFunctions_PrintTextToLog");
//(sizeof(DFBlueprintFunctions_PrintTextToLog) == 0x000028, "Wrong size on DFBlueprintFunctions_PrintTextToLog");
//(offsetof(DFBlueprintFunctions_PrintTextToLog, WorldContextObject) == 0x000000, "Member 'DFBlueprintFunctions_PrintTextToLog::WorldContextObject' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_PrintTextToLog, InText) == 0x000008, "Member 'DFBlueprintFunctions_PrintTextToLog::InText' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_PrintTextToLog, InLogVerbosity) == 0x000020, "Member 'DFBlueprintFunctions_PrintTextToLog::InLogVerbosity' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_PrintTextToLog, bPrintStackTrace) == 0x000021, "Member 'DFBlueprintFunctions_PrintTextToLog::bPrintStackTrace' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.ResetPlayerVoiceTalker
// 0x0008 (0x0008 - 0x0000)
struct DFBlueprintFunctions_ResetPlayerVoiceTalker final 
{
public:
	class APlayerState*                           InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_ResetPlayerVoiceTalker) == 0x000008, "Wrong alignment on DFBlueprintFunctions_ResetPlayerVoiceTalker");
//(sizeof(DFBlueprintFunctions_ResetPlayerVoiceTalker) == 0x000008, "Wrong size on DFBlueprintFunctions_ResetPlayerVoiceTalker");
//(offsetof(DFBlueprintFunctions_ResetPlayerVoiceTalker, InPlayerState) == 0x000000, "Member 'DFBlueprintFunctions_ResetPlayerVoiceTalker::InPlayerState' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.SetCastStaticShadow
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_SetCastStaticShadow final 
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastStaticShadow;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0B[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_SetCastStaticShadow) == 0x000008, "Wrong alignment on DFBlueprintFunctions_SetCastStaticShadow");
//(sizeof(DFBlueprintFunctions_SetCastStaticShadow) == 0x000010, "Wrong size on DFBlueprintFunctions_SetCastStaticShadow");
//(offsetof(DFBlueprintFunctions_SetCastStaticShadow, PrimitiveComponent) == 0x000000, "Member 'DFBlueprintFunctions_SetCastStaticShadow::PrimitiveComponent' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SetCastStaticShadow, bCastStaticShadow) == 0x000008, "Member 'DFBlueprintFunctions_SetCastStaticShadow::bCastStaticShadow' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.SetNetAddressable
// 0x0008 (0x0008 - 0x0000)
struct DFBlueprintFunctions_SetNetAddressable final 
{
public:
	class UActorComponent*                        ActorComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_SetNetAddressable) == 0x000008, "Wrong alignment on DFBlueprintFunctions_SetNetAddressable");
//(sizeof(DFBlueprintFunctions_SetNetAddressable) == 0x000008, "Wrong size on DFBlueprintFunctions_SetNetAddressable");
//(offsetof(DFBlueprintFunctions_SetNetAddressable, ActorComp) == 0x000000, "Member 'DFBlueprintFunctions_SetNetAddressable::ActorComp' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.SetStartSpot
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_SetStartSpot final 
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewStartSpot;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_SetStartSpot) == 0x000008, "Wrong alignment on DFBlueprintFunctions_SetStartSpot");
//(sizeof(DFBlueprintFunctions_SetStartSpot) == 0x000010, "Wrong size on DFBlueprintFunctions_SetStartSpot");
//(offsetof(DFBlueprintFunctions_SetStartSpot, Controller) == 0x000000, "Member 'DFBlueprintFunctions_SetStartSpot::Controller' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SetStartSpot, NewStartSpot) == 0x000008, "Member 'DFBlueprintFunctions_SetStartSpot::NewStartSpot' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.SetTeamNum
// 0x0010 (0x0010 - 0x0000)
struct DFBlueprintFunctions_SetTeamNum final 
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewTeamNum;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0C[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_SetTeamNum) == 0x000008, "Wrong alignment on DFBlueprintFunctions_SetTeamNum");
//(sizeof(DFBlueprintFunctions_SetTeamNum) == 0x000010, "Wrong size on DFBlueprintFunctions_SetTeamNum");
//(offsetof(DFBlueprintFunctions_SetTeamNum, Target) == 0x000000, "Member 'DFBlueprintFunctions_SetTeamNum::Target' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SetTeamNum, NewTeamNum) == 0x000008, "Member 'DFBlueprintFunctions_SetTeamNum::NewTeamNum' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.SpawnImpactFXFromDamageEvent
// 0x0048 (0x0048 - 0x0000)
struct DFBlueprintFunctions_SpawnImpactFXFromDamageEvent final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADFBaseImpactEffect>        ImpactClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageTaken;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0D[0x4];                                      // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitInstigator;                                     // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBaseImpactEffect*                    ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_SpawnImpactFXFromDamageEvent) == 0x000008, "Wrong alignment on DFBlueprintFunctions_SpawnImpactFXFromDamageEvent");
//(sizeof(DFBlueprintFunctions_SpawnImpactFXFromDamageEvent) == 0x000048, "Wrong size on DFBlueprintFunctions_SpawnImpactFXFromDamageEvent");
//(offsetof(DFBlueprintFunctions_SpawnImpactFXFromDamageEvent, WorldContextObject) == 0x000000, "Member 'DFBlueprintFunctions_SpawnImpactFXFromDamageEvent::WorldContextObject' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SpawnImpactFXFromDamageEvent, ImpactClass) == 0x000008, "Member 'DFBlueprintFunctions_SpawnImpactFXFromDamageEvent::ImpactClass' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SpawnImpactFXFromDamageEvent, DamageTaken) == 0x000010, "Member 'DFBlueprintFunctions_SpawnImpactFXFromDamageEvent::DamageTaken' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SpawnImpactFXFromDamageEvent, DamageEvent) == 0x000018, "Member 'DFBlueprintFunctions_SpawnImpactFXFromDamageEvent::DamageEvent' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SpawnImpactFXFromDamageEvent, HitActor) == 0x000028, "Member 'DFBlueprintFunctions_SpawnImpactFXFromDamageEvent::HitActor' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SpawnImpactFXFromDamageEvent, HitInstigator) == 0x000030, "Member 'DFBlueprintFunctions_SpawnImpactFXFromDamageEvent::HitInstigator' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SpawnImpactFXFromDamageEvent, DamageCauser) == 0x000038, "Member 'DFBlueprintFunctions_SpawnImpactFXFromDamageEvent::DamageCauser' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SpawnImpactFXFromDamageEvent, ReturnValue) == 0x000040, "Member 'DFBlueprintFunctions_SpawnImpactFXFromDamageEvent::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.SpawnImpactFXFromHitResult
// 0x00A0 (0x00A0 - 0x0000)
struct DFBlueprintFunctions_SpawnImpactFXFromHitResult final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADFBaseImpactEffect>        ImpactClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Impact;                                            // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ADFBaseImpactEffect*                    ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFBlueprintFunctions_SpawnImpactFXFromHitResult) == 0x000008, "Wrong alignment on DFBlueprintFunctions_SpawnImpactFXFromHitResult");
//(sizeof(DFBlueprintFunctions_SpawnImpactFXFromHitResult) == 0x0000A0, "Wrong size on DFBlueprintFunctions_SpawnImpactFXFromHitResult");
//(offsetof(DFBlueprintFunctions_SpawnImpactFXFromHitResult, WorldContextObject) == 0x000000, "Member 'DFBlueprintFunctions_SpawnImpactFXFromHitResult::WorldContextObject' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SpawnImpactFXFromHitResult, ImpactClass) == 0x000008, "Member 'DFBlueprintFunctions_SpawnImpactFXFromHitResult::ImpactClass' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SpawnImpactFXFromHitResult, Impact) == 0x000010, "Member 'DFBlueprintFunctions_SpawnImpactFXFromHitResult::Impact' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_SpawnImpactFXFromHitResult, ReturnValue) == 0x000098, "Member 'DFBlueprintFunctions_SpawnImpactFXFromHitResult::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.TextIsEmptyOrWhitespace
// 0x0020 (0x0020 - 0x0000)
struct DFBlueprintFunctions_TextIsEmptyOrWhitespace final 
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0E[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_TextIsEmptyOrWhitespace) == 0x000008, "Wrong alignment on DFBlueprintFunctions_TextIsEmptyOrWhitespace");
//(sizeof(DFBlueprintFunctions_TextIsEmptyOrWhitespace) == 0x000020, "Wrong size on DFBlueprintFunctions_TextIsEmptyOrWhitespace");
//(offsetof(DFBlueprintFunctions_TextIsEmptyOrWhitespace, InText) == 0x000000, "Member 'DFBlueprintFunctions_TextIsEmptyOrWhitespace::InText' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_TextIsEmptyOrWhitespace, ReturnValue) == 0x000018, "Member 'DFBlueprintFunctions_TextIsEmptyOrWhitespace::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.TransferInventoryItems
// 0x0018 (0x0018 - 0x0000)
struct DFBlueprintFunctions_TransferInventoryItems final 
{
public:
	class UDFInventoryComponent*                  FromInv;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFInventoryComponent*                  ToInv;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepLoadedAmmo;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0F[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_TransferInventoryItems) == 0x000008, "Wrong alignment on DFBlueprintFunctions_TransferInventoryItems");
//(sizeof(DFBlueprintFunctions_TransferInventoryItems) == 0x000018, "Wrong size on DFBlueprintFunctions_TransferInventoryItems");
//(offsetof(DFBlueprintFunctions_TransferInventoryItems, FromInv) == 0x000000, "Member 'DFBlueprintFunctions_TransferInventoryItems::FromInv' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_TransferInventoryItems, ToInv) == 0x000008, "Member 'DFBlueprintFunctions_TransferInventoryItems::ToInv' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_TransferInventoryItems, bKeepLoadedAmmo) == 0x000010, "Member 'DFBlueprintFunctions_TransferInventoryItems::bKeepLoadedAmmo' has a wrong offset!");

// Function DonkehFramework.DFBlueprintFunctions.WasShotFired
// 0x000A (0x000A - 0x0000)
struct DFBlueprintFunctions_WasShotFired final 
{
public:
	struct FRepShotInfo                           Counter;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRepShotInfo                           OtherCounter;                                      // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E10[0x1];                                      // 0x0009(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFBlueprintFunctions_WasShotFired) == 0x000002, "Wrong alignment on DFBlueprintFunctions_WasShotFired");
//(sizeof(DFBlueprintFunctions_WasShotFired) == 0x00000A, "Wrong size on DFBlueprintFunctions_WasShotFired");
//(offsetof(DFBlueprintFunctions_WasShotFired, Counter) == 0x000000, "Member 'DFBlueprintFunctions_WasShotFired::Counter' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_WasShotFired, OtherCounter) == 0x000004, "Member 'DFBlueprintFunctions_WasShotFired::OtherCounter' has a wrong offset!");
//(offsetof(DFBlueprintFunctions_WasShotFired, ReturnValue) == 0x000008, "Member 'DFBlueprintFunctions_WasShotFired::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFTeamAgentInterface.EventSetTeamNum
// 0x0001 (0x0001 - 0x0000)
struct DFTeamAgentInterface_EventSetTeamNum final 
{
public:
	uint8                                         NewTeamNum;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFTeamAgentInterface_EventSetTeamNum) == 0x000001, "Wrong alignment on DFTeamAgentInterface_EventSetTeamNum");
//(sizeof(DFTeamAgentInterface_EventSetTeamNum) == 0x000001, "Wrong size on DFTeamAgentInterface_EventSetTeamNum");
//(offsetof(DFTeamAgentInterface_EventSetTeamNum, NewTeamNum) == 0x000000, "Member 'DFTeamAgentInterface_EventSetTeamNum::NewTeamNum' has a wrong offset!");

// Function DonkehFramework.DFTeamAgentInterface.EventGetTeamNum
// 0x0001 (0x0001 - 0x0000)
struct DFTeamAgentInterface_EventGetTeamNum final 
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFTeamAgentInterface_EventGetTeamNum) == 0x000001, "Wrong alignment on DFTeamAgentInterface_EventGetTeamNum");
//(sizeof(DFTeamAgentInterface_EventGetTeamNum) == 0x000001, "Wrong size on DFTeamAgentInterface_EventGetTeamNum");
//(offsetof(DFTeamAgentInterface_EventGetTeamNum, ReturnValue) == 0x000000, "Member 'DFTeamAgentInterface_EventGetTeamNum::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct DFCharacterLeanHandler_ReceiveTick final 
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_ReceiveTick) == 0x000004, "Wrong alignment on DFCharacterLeanHandler_ReceiveTick");
//(sizeof(DFCharacterLeanHandler_ReceiveTick) == 0x000004, "Wrong size on DFCharacterLeanHandler_ReceiveTick");
//(offsetof(DFCharacterLeanHandler_ReceiveTick, DeltaTime) == 0x000000, "Member 'DFCharacterLeanHandler_ReceiveTick::DeltaTime' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.UpdateLeanDirection
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterLeanHandler_UpdateLeanDirection final 
{
public:
	ELeanDirection                                NewLeanDir;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_UpdateLeanDirection) == 0x000001, "Wrong alignment on DFCharacterLeanHandler_UpdateLeanDirection");
//(sizeof(DFCharacterLeanHandler_UpdateLeanDirection) == 0x000001, "Wrong size on DFCharacterLeanHandler_UpdateLeanDirection");
//(offsetof(DFCharacterLeanHandler_UpdateLeanDirection, NewLeanDir) == 0x000000, "Member 'DFCharacterLeanHandler_UpdateLeanDirection::NewLeanDir' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.DetermineLeanTargetAmount
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterLeanHandler_DetermineLeanTargetAmount final 
{
public:
	ELeanDirection                                DesiredLeanDir;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoving;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E14[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_DetermineLeanTargetAmount) == 0x000004, "Wrong alignment on DFCharacterLeanHandler_DetermineLeanTargetAmount");
//(sizeof(DFCharacterLeanHandler_DetermineLeanTargetAmount) == 0x000008, "Wrong size on DFCharacterLeanHandler_DetermineLeanTargetAmount");
//(offsetof(DFCharacterLeanHandler_DetermineLeanTargetAmount, DesiredLeanDir) == 0x000000, "Member 'DFCharacterLeanHandler_DetermineLeanTargetAmount::DesiredLeanDir' has a wrong offset!");
//(offsetof(DFCharacterLeanHandler_DetermineLeanTargetAmount, bMoving) == 0x000001, "Member 'DFCharacterLeanHandler_DetermineLeanTargetAmount::bMoving' has a wrong offset!");
//(offsetof(DFCharacterLeanHandler_DetermineLeanTargetAmount, ReturnValue) == 0x000004, "Member 'DFCharacterLeanHandler_DetermineLeanTargetAmount::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.GetLeanRollRot
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterLeanHandler_GetLeanRollRot final 
{
public:
	float                                         DesiredLeanAmt;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_GetLeanRollRot) == 0x000004, "Wrong alignment on DFCharacterLeanHandler_GetLeanRollRot");
//(sizeof(DFCharacterLeanHandler_GetLeanRollRot) == 0x000008, "Wrong size on DFCharacterLeanHandler_GetLeanRollRot");
//(offsetof(DFCharacterLeanHandler_GetLeanRollRot, DesiredLeanAmt) == 0x000000, "Member 'DFCharacterLeanHandler_GetLeanRollRot::DesiredLeanAmt' has a wrong offset!");
//(offsetof(DFCharacterLeanHandler_GetLeanRollRot, ReturnValue) == 0x000004, "Member 'DFCharacterLeanHandler_GetLeanRollRot::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.GetLeanXOffset
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterLeanHandler_GetLeanXOffset final 
{
public:
	float                                         DesiredLeanAmt;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_GetLeanXOffset) == 0x000004, "Wrong alignment on DFCharacterLeanHandler_GetLeanXOffset");
//(sizeof(DFCharacterLeanHandler_GetLeanXOffset) == 0x000008, "Wrong size on DFCharacterLeanHandler_GetLeanXOffset");
//(offsetof(DFCharacterLeanHandler_GetLeanXOffset, DesiredLeanAmt) == 0x000000, "Member 'DFCharacterLeanHandler_GetLeanXOffset::DesiredLeanAmt' has a wrong offset!");
//(offsetof(DFCharacterLeanHandler_GetLeanXOffset, ReturnValue) == 0x000004, "Member 'DFCharacterLeanHandler_GetLeanXOffset::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.GetLeanYOffset
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterLeanHandler_GetLeanYOffset final 
{
public:
	float                                         DesiredLeanAmt;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_GetLeanYOffset) == 0x000004, "Wrong alignment on DFCharacterLeanHandler_GetLeanYOffset");
//(sizeof(DFCharacterLeanHandler_GetLeanYOffset) == 0x000008, "Wrong size on DFCharacterLeanHandler_GetLeanYOffset");
//(offsetof(DFCharacterLeanHandler_GetLeanYOffset, DesiredLeanAmt) == 0x000000, "Member 'DFCharacterLeanHandler_GetLeanYOffset::DesiredLeanAmt' has a wrong offset!");
//(offsetof(DFCharacterLeanHandler_GetLeanYOffset, ReturnValue) == 0x000004, "Member 'DFCharacterLeanHandler_GetLeanYOffset::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.GetMaxLeanXOffset
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterLeanHandler_GetMaxLeanXOffset final 
{
public:
	ELeanDirection                                NewLeanDir;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterStance                              LeanStance;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoving;                                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E15[0x1];                                      // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_GetMaxLeanXOffset) == 0x000004, "Wrong alignment on DFCharacterLeanHandler_GetMaxLeanXOffset");
//(sizeof(DFCharacterLeanHandler_GetMaxLeanXOffset) == 0x000008, "Wrong size on DFCharacterLeanHandler_GetMaxLeanXOffset");
//(offsetof(DFCharacterLeanHandler_GetMaxLeanXOffset, NewLeanDir) == 0x000000, "Member 'DFCharacterLeanHandler_GetMaxLeanXOffset::NewLeanDir' has a wrong offset!");
//(offsetof(DFCharacterLeanHandler_GetMaxLeanXOffset, LeanStance) == 0x000001, "Member 'DFCharacterLeanHandler_GetMaxLeanXOffset::LeanStance' has a wrong offset!");
//(offsetof(DFCharacterLeanHandler_GetMaxLeanXOffset, bMoving) == 0x000002, "Member 'DFCharacterLeanHandler_GetMaxLeanXOffset::bMoving' has a wrong offset!");
//(offsetof(DFCharacterLeanHandler_GetMaxLeanXOffset, ReturnValue) == 0x000004, "Member 'DFCharacterLeanHandler_GetMaxLeanXOffset::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.GetOwningCharacter
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterLeanHandler_GetOwningCharacter final 
{
public:
	class ADFBaseCharacter*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_GetOwningCharacter) == 0x000008, "Wrong alignment on DFCharacterLeanHandler_GetOwningCharacter");
//(sizeof(DFCharacterLeanHandler_GetOwningCharacter) == 0x000008, "Wrong size on DFCharacterLeanHandler_GetOwningCharacter");
//(offsetof(DFCharacterLeanHandler_GetOwningCharacter, ReturnValue) == 0x000000, "Member 'DFCharacterLeanHandler_GetOwningCharacter::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.GetOwningCharacterMovement
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterLeanHandler_GetOwningCharacterMovement final 
{
public:
	class UDFCharacterMovementComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_GetOwningCharacterMovement) == 0x000008, "Wrong alignment on DFCharacterLeanHandler_GetOwningCharacterMovement");
//(sizeof(DFCharacterLeanHandler_GetOwningCharacterMovement) == 0x000008, "Wrong size on DFCharacterLeanHandler_GetOwningCharacterMovement");
//(offsetof(DFCharacterLeanHandler_GetOwningCharacterMovement, ReturnValue) == 0x000000, "Member 'DFCharacterLeanHandler_GetOwningCharacterMovement::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.GetPreviousStance
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterLeanHandler_GetPreviousStance final 
{
public:
	ECharacterStance                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_GetPreviousStance) == 0x000001, "Wrong alignment on DFCharacterLeanHandler_GetPreviousStance");
//(sizeof(DFCharacterLeanHandler_GetPreviousStance) == 0x000001, "Wrong size on DFCharacterLeanHandler_GetPreviousStance");
//(offsetof(DFCharacterLeanHandler_GetPreviousStance, ReturnValue) == 0x000000, "Member 'DFCharacterLeanHandler_GetPreviousStance::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.GetStance
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterLeanHandler_GetStance final 
{
public:
	ECharacterStance                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_GetStance) == 0x000001, "Wrong alignment on DFCharacterLeanHandler_GetStance");
//(sizeof(DFCharacterLeanHandler_GetStance) == 0x000001, "Wrong size on DFCharacterLeanHandler_GetStance");
//(offsetof(DFCharacterLeanHandler_GetStance, ReturnValue) == 0x000000, "Member 'DFCharacterLeanHandler_GetStance::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.IsLeaning
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterLeanHandler_IsLeaning final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_IsLeaning) == 0x000001, "Wrong alignment on DFCharacterLeanHandler_IsLeaning");
//(sizeof(DFCharacterLeanHandler_IsLeaning) == 0x000001, "Wrong size on DFCharacterLeanHandler_IsLeaning");
//(offsetof(DFCharacterLeanHandler_IsLeaning, ReturnValue) == 0x000000, "Member 'DFCharacterLeanHandler_IsLeaning::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterLeanHandler.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterLeanHandler_IsMoving final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterLeanHandler_IsMoving) == 0x000001, "Wrong alignment on DFCharacterLeanHandler_IsMoving");
//(sizeof(DFCharacterLeanHandler_IsMoving) == 0x000001, "Wrong size on DFCharacterLeanHandler_IsMoving");
//(offsetof(DFCharacterLeanHandler_IsMoving, ReturnValue) == 0x000000, "Member 'DFCharacterLeanHandler_IsMoving::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.ClampSpeedMultiplier
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterMovementComponent_ClampSpeedMultiplier final 
{
public:
	float                                         MultValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_ClampSpeedMultiplier) == 0x000004, "Wrong alignment on DFCharacterMovementComponent_ClampSpeedMultiplier");
//(sizeof(DFCharacterMovementComponent_ClampSpeedMultiplier) == 0x000008, "Wrong size on DFCharacterMovementComponent_ClampSpeedMultiplier");
//(offsetof(DFCharacterMovementComponent_ClampSpeedMultiplier, MultValue) == 0x000000, "Member 'DFCharacterMovementComponent_ClampSpeedMultiplier::MultValue' has a wrong offset!");
//(offsetof(DFCharacterMovementComponent_ClampSpeedMultiplier, ReturnValue) == 0x000004, "Member 'DFCharacterMovementComponent_ClampSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.GetDFCharacterOwner
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterMovementComponent_GetDFCharacterOwner final 
{
public:
	class ADFBaseCharacter*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_GetDFCharacterOwner) == 0x000008, "Wrong alignment on DFCharacterMovementComponent_GetDFCharacterOwner");
//(sizeof(DFCharacterMovementComponent_GetDFCharacterOwner) == 0x000008, "Wrong size on DFCharacterMovementComponent_GetDFCharacterOwner");
//(offsetof(DFCharacterMovementComponent_GetDFCharacterOwner, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_GetDFCharacterOwner::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.GetLeanAmount
// 0x0004 (0x0004 - 0x0000)
struct DFCharacterMovementComponent_GetLeanAmount final 
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_GetLeanAmount) == 0x000004, "Wrong alignment on DFCharacterMovementComponent_GetLeanAmount");
//(sizeof(DFCharacterMovementComponent_GetLeanAmount) == 0x000004, "Wrong size on DFCharacterMovementComponent_GetLeanAmount");
//(offsetof(DFCharacterMovementComponent_GetLeanAmount, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_GetLeanAmount::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.GetLeanDirection
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_GetLeanDirection final 
{
public:
	ELeanDirection                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_GetLeanDirection) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_GetLeanDirection");
//(sizeof(DFCharacterMovementComponent_GetLeanDirection) == 0x000001, "Wrong size on DFCharacterMovementComponent_GetLeanDirection");
//(offsetof(DFCharacterMovementComponent_GetLeanDirection, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_GetLeanDirection::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.GetPreviousStance
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_GetPreviousStance final 
{
public:
	ECharacterStance                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_GetPreviousStance) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_GetPreviousStance");
//(sizeof(DFCharacterMovementComponent_GetPreviousStance) == 0x000001, "Wrong size on DFCharacterMovementComponent_GetPreviousStance");
//(offsetof(DFCharacterMovementComponent_GetPreviousStance, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_GetPreviousStance::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.GetStance
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_GetStance final 
{
public:
	ECharacterStance                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_GetStance) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_GetStance");
//(sizeof(DFCharacterMovementComponent_GetStance) == 0x000001, "Wrong size on DFCharacterMovementComponent_GetStance");
//(offsetof(DFCharacterMovementComponent_GetStance, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_GetStance::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.IsAiming
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_IsAiming final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_IsAiming) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_IsAiming");
//(sizeof(DFCharacterMovementComponent_IsAiming) == 0x000001, "Wrong size on DFCharacterMovementComponent_IsAiming");
//(offsetof(DFCharacterMovementComponent_IsAiming, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_IsAiming::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_IsAlive final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_IsAlive) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_IsAlive");
//(sizeof(DFCharacterMovementComponent_IsAlive) == 0x000001, "Wrong size on DFCharacterMovementComponent_IsAlive");
//(offsetof(DFCharacterMovementComponent_IsAlive, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_IsAlive::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.IsCrawling
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_IsCrawling final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_IsCrawling) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_IsCrawling");
//(sizeof(DFCharacterMovementComponent_IsCrawling) == 0x000001, "Wrong size on DFCharacterMovementComponent_IsCrawling");
//(offsetof(DFCharacterMovementComponent_IsCrawling, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_IsCrawling::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.IsLeaning
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_IsLeaning final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_IsLeaning) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_IsLeaning");
//(sizeof(DFCharacterMovementComponent_IsLeaning) == 0x000001, "Wrong size on DFCharacterMovementComponent_IsLeaning");
//(offsetof(DFCharacterMovementComponent_IsLeaning, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_IsLeaning::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.IsMoving
// 0x0002 (0x0002 - 0x0000)
struct DFCharacterMovementComponent_IsMoving final 
{
public:
	bool                                          bIgnoreZVel;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_IsMoving) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_IsMoving");
//(sizeof(DFCharacterMovementComponent_IsMoving) == 0x000002, "Wrong size on DFCharacterMovementComponent_IsMoving");
//(offsetof(DFCharacterMovementComponent_IsMoving, bIgnoreZVel) == 0x000000, "Member 'DFCharacterMovementComponent_IsMoving::bIgnoreZVel' has a wrong offset!");
//(offsetof(DFCharacterMovementComponent_IsMoving, ReturnValue) == 0x000001, "Member 'DFCharacterMovementComponent_IsMoving::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.IsMovingForward
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_IsMovingForward final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_IsMovingForward) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_IsMovingForward");
//(sizeof(DFCharacterMovementComponent_IsMovingForward) == 0x000001, "Wrong size on DFCharacterMovementComponent_IsMovingForward");
//(offsetof(DFCharacterMovementComponent_IsMovingForward, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_IsMovingForward::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.IsProne
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_IsProne final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_IsProne) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_IsProne");
//(sizeof(DFCharacterMovementComponent_IsProne) == 0x000001, "Wrong size on DFCharacterMovementComponent_IsProne");
//(offsetof(DFCharacterMovementComponent_IsProne, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_IsProne::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_IsReloading final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_IsReloading) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_IsReloading");
//(sizeof(DFCharacterMovementComponent_IsReloading) == 0x000001, "Wrong size on DFCharacterMovementComponent_IsReloading");
//(offsetof(DFCharacterMovementComponent_IsReloading, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_IsReloading::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_IsSprinting final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_IsSprinting) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_IsSprinting");
//(sizeof(DFCharacterMovementComponent_IsSprinting) == 0x000001, "Wrong size on DFCharacterMovementComponent_IsSprinting");
//(offsetof(DFCharacterMovementComponent_IsSprinting, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_IsSprinting::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.IsStanding
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_IsStanding final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_IsStanding) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_IsStanding");
//(sizeof(DFCharacterMovementComponent_IsStanding) == 0x000001, "Wrong size on DFCharacterMovementComponent_IsStanding");
//(offsetof(DFCharacterMovementComponent_IsStanding, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_IsStanding::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.IsStrafing
// 0x0008 (0x0008 - 0x0000)
struct DFCharacterMovementComponent_IsStrafing final 
{
public:
	float                                         Threshold;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E22[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFCharacterMovementComponent_IsStrafing) == 0x000004, "Wrong alignment on DFCharacterMovementComponent_IsStrafing");
//(sizeof(DFCharacterMovementComponent_IsStrafing) == 0x000008, "Wrong size on DFCharacterMovementComponent_IsStrafing");
//(offsetof(DFCharacterMovementComponent_IsStrafing, Threshold) == 0x000000, "Member 'DFCharacterMovementComponent_IsStrafing::Threshold' has a wrong offset!");
//(offsetof(DFCharacterMovementComponent_IsStrafing, ReturnValue) == 0x000004, "Member 'DFCharacterMovementComponent_IsStrafing::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.IsVaulting
// 0x0001 (0x0001 - 0x0000)
struct DFCharacterMovementComponent_IsVaulting final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_IsVaulting) == 0x000001, "Wrong alignment on DFCharacterMovementComponent_IsVaulting");
//(sizeof(DFCharacterMovementComponent_IsVaulting) == 0x000001, "Wrong size on DFCharacterMovementComponent_IsVaulting");
//(offsetof(DFCharacterMovementComponent_IsVaulting, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_IsVaulting::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFCharacterMovementComponent.VaultTrace
// 0x001C (0x001C - 0x0000)
struct DFCharacterMovementComponent_VaultTrace final 
{
public:
	struct FDFVaultTraceResult                    ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(DFCharacterMovementComponent_VaultTrace) == 0x000004, "Wrong alignment on DFCharacterMovementComponent_VaultTrace");
//(sizeof(DFCharacterMovementComponent_VaultTrace) == 0x00001C, "Wrong size on DFCharacterMovementComponent_VaultTrace");
//(offsetof(DFCharacterMovementComponent_VaultTrace, ReturnValue) == 0x000000, "Member 'DFCharacterMovementComponent_VaultTrace::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFFunctionLibrary.ClearMeshAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct DFFunctionLibrary_ClearMeshAnimInstance final 
{
public:
	class USkeletalMeshComponent*                 MeshToClear;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFFunctionLibrary_ClearMeshAnimInstance) == 0x000008, "Wrong alignment on DFFunctionLibrary_ClearMeshAnimInstance");
//(sizeof(DFFunctionLibrary_ClearMeshAnimInstance) == 0x000008, "Wrong size on DFFunctionLibrary_ClearMeshAnimInstance");
//(offsetof(DFFunctionLibrary_ClearMeshAnimInstance, MeshToClear) == 0x000000, "Member 'DFFunctionLibrary_ClearMeshAnimInstance::MeshToClear' has a wrong offset!");

// Function DonkehFramework.DFFunctionLibrary.SetEnableAutoBlendOutForActiveMontage
// 0x0018 (0x0018 - 0x0000)
struct DFFunctionLibrary_SetEnableAutoBlendOutForActiveMontage final 
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 AnimSourceMesh;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewEnableAutoBlendOut;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E24[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFFunctionLibrary_SetEnableAutoBlendOutForActiveMontage) == 0x000008, "Wrong alignment on DFFunctionLibrary_SetEnableAutoBlendOutForActiveMontage");
//(sizeof(DFFunctionLibrary_SetEnableAutoBlendOutForActiveMontage) == 0x000018, "Wrong size on DFFunctionLibrary_SetEnableAutoBlendOutForActiveMontage");
//(offsetof(DFFunctionLibrary_SetEnableAutoBlendOutForActiveMontage, AnimMontage) == 0x000000, "Member 'DFFunctionLibrary_SetEnableAutoBlendOutForActiveMontage::AnimMontage' has a wrong offset!");
//(offsetof(DFFunctionLibrary_SetEnableAutoBlendOutForActiveMontage, AnimSourceMesh) == 0x000008, "Member 'DFFunctionLibrary_SetEnableAutoBlendOutForActiveMontage::AnimSourceMesh' has a wrong offset!");
//(offsetof(DFFunctionLibrary_SetEnableAutoBlendOutForActiveMontage, bNewEnableAutoBlendOut) == 0x000010, "Member 'DFFunctionLibrary_SetEnableAutoBlendOutForActiveMontage::bNewEnableAutoBlendOut' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.PlayerDied
// 0x0008 (0x0008 - 0x0000)
struct DFGameRulesetBase_PlayerDied final 
{
public:
	class AController*                            Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_PlayerDied) == 0x000008, "Wrong alignment on DFGameRulesetBase_PlayerDied");
//(sizeof(DFGameRulesetBase_PlayerDied) == 0x000008, "Wrong size on DFGameRulesetBase_PlayerDied");
//(offsetof(DFGameRulesetBase_PlayerDied, Victim) == 0x000000, "Member 'DFGameRulesetBase_PlayerDied::Victim' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.PlayerJoined
// 0x0008 (0x0008 - 0x0000)
struct DFGameRulesetBase_PlayerJoined final 
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_PlayerJoined) == 0x000008, "Wrong alignment on DFGameRulesetBase_PlayerJoined");
//(sizeof(DFGameRulesetBase_PlayerJoined) == 0x000008, "Wrong size on DFGameRulesetBase_PlayerJoined");
//(offsetof(DFGameRulesetBase_PlayerJoined, NewPlayer) == 0x000000, "Member 'DFGameRulesetBase_PlayerJoined::NewPlayer' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.PlayerJoinedTeam
// 0x0010 (0x0010 - 0x0000)
struct DFGameRulesetBase_PlayerJoinedTeam final 
{
public:
	class AController*                            JoiningPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamNum;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2A[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFGameRulesetBase_PlayerJoinedTeam) == 0x000008, "Wrong alignment on DFGameRulesetBase_PlayerJoinedTeam");
//(sizeof(DFGameRulesetBase_PlayerJoinedTeam) == 0x000010, "Wrong size on DFGameRulesetBase_PlayerJoinedTeam");
//(offsetof(DFGameRulesetBase_PlayerJoinedTeam, JoiningPlayer) == 0x000000, "Member 'DFGameRulesetBase_PlayerJoinedTeam::JoiningPlayer' has a wrong offset!");
//(offsetof(DFGameRulesetBase_PlayerJoinedTeam, TeamNum) == 0x000008, "Member 'DFGameRulesetBase_PlayerJoinedTeam::TeamNum' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.PlayerKilled
// 0x0010 (0x0010 - 0x0000)
struct DFGameRulesetBase_PlayerKilled final 
{
public:
	class AController*                            Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_PlayerKilled) == 0x000008, "Wrong alignment on DFGameRulesetBase_PlayerKilled");
//(sizeof(DFGameRulesetBase_PlayerKilled) == 0x000010, "Wrong size on DFGameRulesetBase_PlayerKilled");
//(offsetof(DFGameRulesetBase_PlayerKilled, Killer) == 0x000000, "Member 'DFGameRulesetBase_PlayerKilled::Killer' has a wrong offset!");
//(offsetof(DFGameRulesetBase_PlayerKilled, Victim) == 0x000008, "Member 'DFGameRulesetBase_PlayerKilled::Victim' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.PlayerPostLogin
// 0x0008 (0x0008 - 0x0000)
struct DFGameRulesetBase_PlayerPostLogin final 
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_PlayerPostLogin) == 0x000008, "Wrong alignment on DFGameRulesetBase_PlayerPostLogin");
//(sizeof(DFGameRulesetBase_PlayerPostLogin) == 0x000008, "Wrong size on DFGameRulesetBase_PlayerPostLogin");
//(offsetof(DFGameRulesetBase_PlayerPostLogin, NewPlayer) == 0x000000, "Member 'DFGameRulesetBase_PlayerPostLogin::NewPlayer' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.PlayerPostLogout
// 0x0008 (0x0008 - 0x0000)
struct DFGameRulesetBase_PlayerPostLogout final 
{
public:
	class AController*                            ExitingPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_PlayerPostLogout) == 0x000008, "Wrong alignment on DFGameRulesetBase_PlayerPostLogout");
//(sizeof(DFGameRulesetBase_PlayerPostLogout) == 0x000008, "Wrong size on DFGameRulesetBase_PlayerPostLogout");
//(offsetof(DFGameRulesetBase_PlayerPostLogout, ExitingPlayer) == 0x000000, "Member 'DFGameRulesetBase_PlayerPostLogout::ExitingPlayer' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.PlayerSpawn
// 0x0010 (0x0010 - 0x0000)
struct DFGameRulesetBase_PlayerSpawn final 
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPlayerPawn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_PlayerSpawn) == 0x000008, "Wrong alignment on DFGameRulesetBase_PlayerSpawn");
//(sizeof(DFGameRulesetBase_PlayerSpawn) == 0x000010, "Wrong size on DFGameRulesetBase_PlayerSpawn");
//(offsetof(DFGameRulesetBase_PlayerSpawn, Player) == 0x000000, "Member 'DFGameRulesetBase_PlayerSpawn::Player' has a wrong offset!");
//(offsetof(DFGameRulesetBase_PlayerSpawn, NewPlayerPawn) == 0x000008, "Member 'DFGameRulesetBase_PlayerSpawn::NewPlayerPawn' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.PlayerSuicide
// 0x0008 (0x0008 - 0x0000)
struct DFGameRulesetBase_PlayerSuicide final 
{
public:
	class AController*                            Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_PlayerSuicide) == 0x000008, "Wrong alignment on DFGameRulesetBase_PlayerSuicide");
//(sizeof(DFGameRulesetBase_PlayerSuicide) == 0x000008, "Wrong size on DFGameRulesetBase_PlayerSuicide");
//(offsetof(DFGameRulesetBase_PlayerSuicide, Victim) == 0x000000, "Member 'DFGameRulesetBase_PlayerSuicide::Victim' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.PlayerWounded
// 0x0028 (0x0028 - 0x0000)
struct DFGameRulesetBase_PlayerWounded final 
{
public:
	class AController*                            Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2B[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamageType*                            DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_PlayerWounded) == 0x000008, "Wrong alignment on DFGameRulesetBase_PlayerWounded");
//(sizeof(DFGameRulesetBase_PlayerWounded) == 0x000028, "Wrong size on DFGameRulesetBase_PlayerWounded");
//(offsetof(DFGameRulesetBase_PlayerWounded, Victim) == 0x000000, "Member 'DFGameRulesetBase_PlayerWounded::Victim' has a wrong offset!");
//(offsetof(DFGameRulesetBase_PlayerWounded, DamageAmount) == 0x000008, "Member 'DFGameRulesetBase_PlayerWounded::DamageAmount' has a wrong offset!");
//(offsetof(DFGameRulesetBase_PlayerWounded, DamageType) == 0x000010, "Member 'DFGameRulesetBase_PlayerWounded::DamageType' has a wrong offset!");
//(offsetof(DFGameRulesetBase_PlayerWounded, InstigatedBy) == 0x000018, "Member 'DFGameRulesetBase_PlayerWounded::InstigatedBy' has a wrong offset!");
//(offsetof(DFGameRulesetBase_PlayerWounded, DamageCauser) == 0x000020, "Member 'DFGameRulesetBase_PlayerWounded::DamageCauser' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct DFGameRulesetBase_ReceiveTick final 
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_ReceiveTick) == 0x000004, "Wrong alignment on DFGameRulesetBase_ReceiveTick");
//(sizeof(DFGameRulesetBase_ReceiveTick) == 0x000004, "Wrong size on DFGameRulesetBase_ReceiveTick");
//(offsetof(DFGameRulesetBase_ReceiveTick, DeltaTime) == 0x000000, "Member 'DFGameRulesetBase_ReceiveTick::DeltaTime' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.RegisterActor
// 0x0008 (0x0008 - 0x0000)
struct DFGameRulesetBase_RegisterActor final 
{
public:
	class AActor*                                 RegisteredActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_RegisterActor) == 0x000008, "Wrong alignment on DFGameRulesetBase_RegisterActor");
//(sizeof(DFGameRulesetBase_RegisterActor) == 0x000008, "Wrong size on DFGameRulesetBase_RegisterActor");
//(offsetof(DFGameRulesetBase_RegisterActor, RegisteredActor) == 0x000000, "Member 'DFGameRulesetBase_RegisterActor::RegisteredActor' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.UnregisterActor
// 0x0008 (0x0008 - 0x0000)
struct DFGameRulesetBase_UnregisterActor final 
{
public:
	class AActor*                                 UnregisteredActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_UnregisterActor) == 0x000008, "Wrong alignment on DFGameRulesetBase_UnregisterActor");
//(sizeof(DFGameRulesetBase_UnregisterActor) == 0x000008, "Wrong size on DFGameRulesetBase_UnregisterActor");
//(offsetof(DFGameRulesetBase_UnregisterActor, UnregisteredActor) == 0x000000, "Member 'DFGameRulesetBase_UnregisterActor::UnregisteredActor' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.GetGameMode
// 0x0008 (0x0008 - 0x0000)
struct DFGameRulesetBase_GetGameMode final 
{
public:
	class ADFBaseGameMode*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_GetGameMode) == 0x000008, "Wrong alignment on DFGameRulesetBase_GetGameMode");
//(sizeof(DFGameRulesetBase_GetGameMode) == 0x000008, "Wrong size on DFGameRulesetBase_GetGameMode");
//(offsetof(DFGameRulesetBase_GetGameMode, ReturnValue) == 0x000000, "Member 'DFGameRulesetBase_GetGameMode::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFGameRulesetBase.GetGameState
// 0x0008 (0x0008 - 0x0000)
struct DFGameRulesetBase_GetGameState final 
{
public:
	class ADFBaseGameState*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFGameRulesetBase_GetGameState) == 0x000008, "Wrong alignment on DFGameRulesetBase_GetGameState");
//(sizeof(DFGameRulesetBase_GetGameState) == 0x000008, "Wrong size on DFGameRulesetBase_GetGameState");
//(offsetof(DFGameRulesetBase_GetGameState, ReturnValue) == 0x000000, "Member 'DFGameRulesetBase_GetGameState::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFInventoryComponent.Add
// 0x0010 (0x0010 - 0x0000)
struct DFInventoryComponent_Add final 
{
public:
	class ADFBaseItem*                            Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2E[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFInventoryComponent_Add) == 0x000008, "Wrong alignment on DFInventoryComponent_Add");
//(sizeof(DFInventoryComponent_Add) == 0x000010, "Wrong size on DFInventoryComponent_Add");
//(offsetof(DFInventoryComponent_Add, Item) == 0x000000, "Member 'DFInventoryComponent_Add::Item' has a wrong offset!");
//(offsetof(DFInventoryComponent_Add, ReturnValue) == 0x000008, "Member 'DFInventoryComponent_Add::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFInventoryComponent.Clear
// 0x0001 (0x0001 - 0x0000)
struct DFInventoryComponent_Clear final 
{
public:
	bool                                          bDestroyItems;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFInventoryComponent_Clear) == 0x000001, "Wrong alignment on DFInventoryComponent_Clear");
//(sizeof(DFInventoryComponent_Clear) == 0x000001, "Wrong size on DFInventoryComponent_Clear");
//(offsetof(DFInventoryComponent_Clear, bDestroyItems) == 0x000000, "Member 'DFInventoryComponent_Clear::bDestroyItems' has a wrong offset!");

// Function DonkehFramework.DFInventoryComponent.Remove
// 0x0010 (0x0010 - 0x0000)
struct DFInventoryComponent_Remove final 
{
public:
	class ADFBaseItem*                            Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyItem;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2F[0x6];                                      // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFInventoryComponent_Remove) == 0x000008, "Wrong alignment on DFInventoryComponent_Remove");
//(sizeof(DFInventoryComponent_Remove) == 0x000010, "Wrong size on DFInventoryComponent_Remove");
//(offsetof(DFInventoryComponent_Remove, Item) == 0x000000, "Member 'DFInventoryComponent_Remove::Item' has a wrong offset!");
//(offsetof(DFInventoryComponent_Remove, bDestroyItem) == 0x000008, "Member 'DFInventoryComponent_Remove::bDestroyItem' has a wrong offset!");
//(offsetof(DFInventoryComponent_Remove, ReturnValue) == 0x000009, "Member 'DFInventoryComponent_Remove::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFInventoryComponent.RemoveItemAt
// 0x0018 (0x0018 - 0x0000)
struct DFInventoryComponent_RemoveItemAt final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E30[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADFBaseItem*                            OutRemovedItem;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyItem;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E31[0x6];                                      // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFInventoryComponent_RemoveItemAt) == 0x000008, "Wrong alignment on DFInventoryComponent_RemoveItemAt");
//(sizeof(DFInventoryComponent_RemoveItemAt) == 0x000018, "Wrong size on DFInventoryComponent_RemoveItemAt");
//(offsetof(DFInventoryComponent_RemoveItemAt, Param_Index) == 0x000000, "Member 'DFInventoryComponent_RemoveItemAt::Param_Index' has a wrong offset!");
//(offsetof(DFInventoryComponent_RemoveItemAt, OutRemovedItem) == 0x000008, "Member 'DFInventoryComponent_RemoveItemAt::OutRemovedItem' has a wrong offset!");
//(offsetof(DFInventoryComponent_RemoveItemAt, bDestroyItem) == 0x000010, "Member 'DFInventoryComponent_RemoveItemAt::bDestroyItem' has a wrong offset!");
//(offsetof(DFInventoryComponent_RemoveItemAt, ReturnValue) == 0x000011, "Member 'DFInventoryComponent_RemoveItemAt::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFInventoryComponent.Find
// 0x0010 (0x0010 - 0x0000)
struct DFInventoryComponent_Find final 
{
public:
	class ADFBaseItem*                            ItemToCompare;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutIndex;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E32[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFInventoryComponent_Find) == 0x000008, "Wrong alignment on DFInventoryComponent_Find");
//(sizeof(DFInventoryComponent_Find) == 0x000010, "Wrong size on DFInventoryComponent_Find");
//(offsetof(DFInventoryComponent_Find, ItemToCompare) == 0x000000, "Member 'DFInventoryComponent_Find::ItemToCompare' has a wrong offset!");
//(offsetof(DFInventoryComponent_Find, OutIndex) == 0x000008, "Member 'DFInventoryComponent_Find::OutIndex' has a wrong offset!");
//(offsetof(DFInventoryComponent_Find, ReturnValue) == 0x00000C, "Member 'DFInventoryComponent_Find::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFInventoryComponent.FindItemByClass
// 0x0018 (0x0018 - 0x0000)
struct DFInventoryComponent_FindItemByClass final 
{
public:
	TSubclassOf<class ADFBaseItem>                ItemClass;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADFBaseItem*                            OutItem;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E33[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFInventoryComponent_FindItemByClass) == 0x000008, "Wrong alignment on DFInventoryComponent_FindItemByClass");
//(sizeof(DFInventoryComponent_FindItemByClass) == 0x000018, "Wrong size on DFInventoryComponent_FindItemByClass");
//(offsetof(DFInventoryComponent_FindItemByClass, ItemClass) == 0x000000, "Member 'DFInventoryComponent_FindItemByClass::ItemClass' has a wrong offset!");
//(offsetof(DFInventoryComponent_FindItemByClass, OutItem) == 0x000008, "Member 'DFInventoryComponent_FindItemByClass::OutItem' has a wrong offset!");
//(offsetof(DFInventoryComponent_FindItemByClass, ReturnValue) == 0x000010, "Member 'DFInventoryComponent_FindItemByClass::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFInventoryComponent.GetItem
// 0x0018 (0x0018 - 0x0000)
struct DFInventoryComponent_GetItem final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E34[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADFBaseItem*                            OutItem;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E35[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFInventoryComponent_GetItem) == 0x000008, "Wrong alignment on DFInventoryComponent_GetItem");
//(sizeof(DFInventoryComponent_GetItem) == 0x000018, "Wrong size on DFInventoryComponent_GetItem");
//(offsetof(DFInventoryComponent_GetItem, Param_Index) == 0x000000, "Member 'DFInventoryComponent_GetItem::Param_Index' has a wrong offset!");
//(offsetof(DFInventoryComponent_GetItem, OutItem) == 0x000008, "Member 'DFInventoryComponent_GetItem::OutItem' has a wrong offset!");
//(offsetof(DFInventoryComponent_GetItem, ReturnValue) == 0x000010, "Member 'DFInventoryComponent_GetItem::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFInventoryComponent.IsValidIndex
// 0x0008 (0x0008 - 0x0000)
struct DFInventoryComponent_IsValidIndex final 
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E36[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFInventoryComponent_IsValidIndex) == 0x000004, "Wrong alignment on DFInventoryComponent_IsValidIndex");
//(sizeof(DFInventoryComponent_IsValidIndex) == 0x000008, "Wrong size on DFInventoryComponent_IsValidIndex");
//(offsetof(DFInventoryComponent_IsValidIndex, Param_Index) == 0x000000, "Member 'DFInventoryComponent_IsValidIndex::Param_Index' has a wrong offset!");
//(offsetof(DFInventoryComponent_IsValidIndex, ReturnValue) == 0x000004, "Member 'DFInventoryComponent_IsValidIndex::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFInventoryComponent.Size
// 0x0004 (0x0004 - 0x0000)
struct DFInventoryComponent_Size final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFInventoryComponent_Size) == 0x000004, "Wrong alignment on DFInventoryComponent_Size");
//(sizeof(DFInventoryComponent_Size) == 0x000004, "Wrong size on DFInventoryComponent_Size");
//(offsetof(DFInventoryComponent_Size, ReturnValue) == 0x000000, "Member 'DFInventoryComponent_Size::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFTeamState.ReceiveInitTeam
// 0x0008 (0x0008 - 0x0000)
struct DFTeamState_ReceiveInitTeam final 
{
public:
	class UDFTeamDefinition*                      InTeamDef;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFTeamState_ReceiveInitTeam) == 0x000008, "Wrong alignment on DFTeamState_ReceiveInitTeam");
//(sizeof(DFTeamState_ReceiveInitTeam) == 0x000008, "Wrong size on DFTeamState_ReceiveInitTeam");
//(offsetof(DFTeamState_ReceiveInitTeam, InTeamDef) == 0x000000, "Member 'DFTeamState_ReceiveInitTeam::InTeamDef' has a wrong offset!");

// Function DonkehFramework.DFTeamState.GetFactionInfo
// 0x0008 (0x0008 - 0x0000)
struct DFTeamState_GetFactionInfo final 
{
public:
	class UDFFactionInfo*                         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFTeamState_GetFactionInfo) == 0x000008, "Wrong alignment on DFTeamState_GetFactionInfo");
//(sizeof(DFTeamState_GetFactionInfo) == 0x000008, "Wrong size on DFTeamState_GetFactionInfo");
//(offsetof(DFTeamState_GetFactionInfo, ReturnValue) == 0x000000, "Member 'DFTeamState_GetFactionInfo::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFTeamState.IsPendingSetupBP
// 0x0001 (0x0001 - 0x0000)
struct DFTeamState_IsPendingSetupBP final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFTeamState_IsPendingSetupBP) == 0x000001, "Wrong alignment on DFTeamState_IsPendingSetupBP");
//(sizeof(DFTeamState_IsPendingSetupBP) == 0x000001, "Wrong size on DFTeamState_IsPendingSetupBP");
//(offsetof(DFTeamState_IsPendingSetupBP, ReturnValue) == 0x000000, "Member 'DFTeamState_IsPendingSetupBP::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFTeamState.IsReadyToInitialize
// 0x0001 (0x0001 - 0x0000)
struct DFTeamState_IsReadyToInitialize final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFTeamState_IsReadyToInitialize) == 0x000001, "Wrong alignment on DFTeamState_IsReadyToInitialize");
//(sizeof(DFTeamState_IsReadyToInitialize) == 0x000001, "Wrong size on DFTeamState_IsReadyToInitialize");
//(offsetof(DFTeamState_IsReadyToInitialize, ReturnValue) == 0x000000, "Member 'DFTeamState_IsReadyToInitialize::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFThrowableWeapAnimInstInterface.PlayCockMontage
// 0x0010 (0x0010 - 0x0000)
struct DFThrowableWeapAnimInstInterface_PlayCockMontage final 
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3D[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFThrowableWeapAnimInstInterface_PlayCockMontage) == 0x000008, "Wrong alignment on DFThrowableWeapAnimInstInterface_PlayCockMontage");
//(sizeof(DFThrowableWeapAnimInstInterface_PlayCockMontage) == 0x000010, "Wrong size on DFThrowableWeapAnimInstInterface_PlayCockMontage");
//(offsetof(DFThrowableWeapAnimInstInterface_PlayCockMontage, MontageToPlay) == 0x000000, "Member 'DFThrowableWeapAnimInstInterface_PlayCockMontage::MontageToPlay' has a wrong offset!");
//(offsetof(DFThrowableWeapAnimInstInterface_PlayCockMontage, ReturnValue) == 0x000008, "Member 'DFThrowableWeapAnimInstInterface_PlayCockMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFThrowableWeapAnimInstInterface.PlayThrowOverhandMontage
// 0x0010 (0x0010 - 0x0000)
struct DFThrowableWeapAnimInstInterface_PlayThrowOverhandMontage final 
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3E[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFThrowableWeapAnimInstInterface_PlayThrowOverhandMontage) == 0x000008, "Wrong alignment on DFThrowableWeapAnimInstInterface_PlayThrowOverhandMontage");
//(sizeof(DFThrowableWeapAnimInstInterface_PlayThrowOverhandMontage) == 0x000010, "Wrong size on DFThrowableWeapAnimInstInterface_PlayThrowOverhandMontage");
//(offsetof(DFThrowableWeapAnimInstInterface_PlayThrowOverhandMontage, MontageToPlay) == 0x000000, "Member 'DFThrowableWeapAnimInstInterface_PlayThrowOverhandMontage::MontageToPlay' has a wrong offset!");
//(offsetof(DFThrowableWeapAnimInstInterface_PlayThrowOverhandMontage, ReturnValue) == 0x000008, "Member 'DFThrowableWeapAnimInstInterface_PlayThrowOverhandMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFThrowableWeapAnimInstInterface.PlayThrowUnderhandMontage
// 0x0010 (0x0010 - 0x0000)
struct DFThrowableWeapAnimInstInterface_PlayThrowUnderhandMontage final 
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3F[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFThrowableWeapAnimInstInterface_PlayThrowUnderhandMontage) == 0x000008, "Wrong alignment on DFThrowableWeapAnimInstInterface_PlayThrowUnderhandMontage");
//(sizeof(DFThrowableWeapAnimInstInterface_PlayThrowUnderhandMontage) == 0x000010, "Wrong size on DFThrowableWeapAnimInstInterface_PlayThrowUnderhandMontage");
//(offsetof(DFThrowableWeapAnimInstInterface_PlayThrowUnderhandMontage, MontageToPlay) == 0x000000, "Member 'DFThrowableWeapAnimInstInterface_PlayThrowUnderhandMontage::MontageToPlay' has a wrong offset!");
//(offsetof(DFThrowableWeapAnimInstInterface_PlayThrowUnderhandMontage, ReturnValue) == 0x000008, "Member 'DFThrowableWeapAnimInstInterface_PlayThrowUnderhandMontage::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVoteIssue.GetVoteSelections
// 0x0010 (0x0010 - 0x0000)
struct DFVoteIssue_GetVoteSelections final 
{
public:
	TArray<struct FDFPlayerVoteSelection>         OutVoteSelections;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFVoteIssue_GetVoteSelections) == 0x000008, "Wrong alignment on DFVoteIssue_GetVoteSelections");
//(sizeof(DFVoteIssue_GetVoteSelections) == 0x000010, "Wrong size on DFVoteIssue_GetVoteSelections");
//(offsetof(DFVoteIssue_GetVoteSelections, OutVoteSelections) == 0x000000, "Member 'DFVoteIssue_GetVoteSelections::OutVoteSelections' has a wrong offset!");

// Function DonkehFramework.DFVoteIssue.AllowsStartVoteBy
// 0x0010 (0x0010 - 0x0000)
struct DFVoteIssue_AllowsStartVoteBy final 
{
public:
	class APlayerState*                           InvokingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E45[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFVoteIssue_AllowsStartVoteBy) == 0x000008, "Wrong alignment on DFVoteIssue_AllowsStartVoteBy");
//(sizeof(DFVoteIssue_AllowsStartVoteBy) == 0x000010, "Wrong size on DFVoteIssue_AllowsStartVoteBy");
//(offsetof(DFVoteIssue_AllowsStartVoteBy, InvokingPlayer) == 0x000000, "Member 'DFVoteIssue_AllowsStartVoteBy::InvokingPlayer' has a wrong offset!");
//(offsetof(DFVoteIssue_AllowsStartVoteBy, ReturnValue) == 0x000008, "Member 'DFVoteIssue_AllowsStartVoteBy::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVoteIssue.AllowsVoteFrom
// 0x0010 (0x0010 - 0x0000)
struct DFVoteIssue_AllowsVoteFrom final 
{
public:
	class APlayerState*                           VoterPS;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E46[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFVoteIssue_AllowsVoteFrom) == 0x000008, "Wrong alignment on DFVoteIssue_AllowsVoteFrom");
//(sizeof(DFVoteIssue_AllowsVoteFrom) == 0x000010, "Wrong size on DFVoteIssue_AllowsVoteFrom");
//(offsetof(DFVoteIssue_AllowsVoteFrom, VoterPS) == 0x000000, "Member 'DFVoteIssue_AllowsVoteFrom::VoterPS' has a wrong offset!");
//(offsetof(DFVoteIssue_AllowsVoteFrom, ReturnValue) == 0x000008, "Member 'DFVoteIssue_AllowsVoteFrom::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVoteIssue.CanStartVote
// 0x0010 (0x0010 - 0x0000)
struct DFVoteIssue_CanStartVote final 
{
public:
	class APlayerState*                           InvokingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E47[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFVoteIssue_CanStartVote) == 0x000008, "Wrong alignment on DFVoteIssue_CanStartVote");
//(sizeof(DFVoteIssue_CanStartVote) == 0x000010, "Wrong size on DFVoteIssue_CanStartVote");
//(offsetof(DFVoteIssue_CanStartVote, InvokingPlayer) == 0x000000, "Member 'DFVoteIssue_CanStartVote::InvokingPlayer' has a wrong offset!");
//(offsetof(DFVoteIssue_CanStartVote, ReturnValue) == 0x000008, "Member 'DFVoteIssue_CanStartVote::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVoteIssue.CanVoteOn
// 0x0010 (0x0010 - 0x0000)
struct DFVoteIssue_CanVoteOn final 
{
public:
	class APlayerState*                           VoterPS;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E48[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFVoteIssue_CanVoteOn) == 0x000008, "Wrong alignment on DFVoteIssue_CanVoteOn");
//(sizeof(DFVoteIssue_CanVoteOn) == 0x000010, "Wrong size on DFVoteIssue_CanVoteOn");
//(offsetof(DFVoteIssue_CanVoteOn, VoterPS) == 0x000000, "Member 'DFVoteIssue_CanVoteOn::VoterPS' has a wrong offset!");
//(offsetof(DFVoteIssue_CanVoteOn, ReturnValue) == 0x000008, "Member 'DFVoteIssue_CanVoteOn::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVoteIssue.DetermineVoteStatus
// 0x0001 (0x0001 - 0x0000)
struct DFVoteIssue_DetermineVoteStatus final 
{
public:
	EDFVoteStatus                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFVoteIssue_DetermineVoteStatus) == 0x000001, "Wrong alignment on DFVoteIssue_DetermineVoteStatus");
//(sizeof(DFVoteIssue_DetermineVoteStatus) == 0x000001, "Wrong size on DFVoteIssue_DetermineVoteStatus");
//(offsetof(DFVoteIssue_DetermineVoteStatus, ReturnValue) == 0x000000, "Member 'DFVoteIssue_DetermineVoteStatus::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVoteIssue.GetEligibleVoterCount
// 0x0004 (0x0004 - 0x0000)
struct DFVoteIssue_GetEligibleVoterCount final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFVoteIssue_GetEligibleVoterCount) == 0x000004, "Wrong alignment on DFVoteIssue_GetEligibleVoterCount");
//(sizeof(DFVoteIssue_GetEligibleVoterCount) == 0x000004, "Wrong size on DFVoteIssue_GetEligibleVoterCount");
//(offsetof(DFVoteIssue_GetEligibleVoterCount, ReturnValue) == 0x000000, "Member 'DFVoteIssue_GetEligibleVoterCount::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVoteIssue.GetEligibleVoters
// 0x0010 (0x0010 - 0x0000)
struct DFVoteIssue_GetEligibleVoters final 
{
public:
	TArray<class APlayerState*>                   OutEligibleVoters;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFVoteIssue_GetEligibleVoters) == 0x000008, "Wrong alignment on DFVoteIssue_GetEligibleVoters");
//(sizeof(DFVoteIssue_GetEligibleVoters) == 0x000010, "Wrong size on DFVoteIssue_GetEligibleVoters");
//(offsetof(DFVoteIssue_GetEligibleVoters, OutEligibleVoters) == 0x000000, "Member 'DFVoteIssue_GetEligibleVoters::OutEligibleVoters' has a wrong offset!");

// Function DonkehFramework.DFVoteIssue.GetOwningVotingComponent
// 0x0008 (0x0008 - 0x0000)
struct DFVoteIssue_GetOwningVotingComponent final 
{
public:
	class UDFVotingComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFVoteIssue_GetOwningVotingComponent) == 0x000008, "Wrong alignment on DFVoteIssue_GetOwningVotingComponent");
//(sizeof(DFVoteIssue_GetOwningVotingComponent) == 0x000008, "Wrong size on DFVoteIssue_GetOwningVotingComponent");
//(offsetof(DFVoteIssue_GetOwningVotingComponent, ReturnValue) == 0x000000, "Member 'DFVoteIssue_GetOwningVotingComponent::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVoteIssue.GetRequiredVoteCountToPass
// 0x0004 (0x0004 - 0x0000)
struct DFVoteIssue_GetRequiredVoteCountToPass final 
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFVoteIssue_GetRequiredVoteCountToPass) == 0x000004, "Wrong alignment on DFVoteIssue_GetRequiredVoteCountToPass");
//(sizeof(DFVoteIssue_GetRequiredVoteCountToPass) == 0x000004, "Wrong size on DFVoteIssue_GetRequiredVoteCountToPass");
//(offsetof(DFVoteIssue_GetRequiredVoteCountToPass, ReturnValue) == 0x000000, "Member 'DFVoteIssue_GetRequiredVoteCountToPass::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVoteIssue.GetYesNoVoteCounts
// 0x0008 (0x0008 - 0x0000)
struct DFVoteIssue_GetYesNoVoteCounts final 
{
public:
	int32                                         OutYesVotes;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutNoVotes;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFVoteIssue_GetYesNoVoteCounts) == 0x000004, "Wrong alignment on DFVoteIssue_GetYesNoVoteCounts");
//(sizeof(DFVoteIssue_GetYesNoVoteCounts) == 0x000008, "Wrong size on DFVoteIssue_GetYesNoVoteCounts");
//(offsetof(DFVoteIssue_GetYesNoVoteCounts, OutYesVotes) == 0x000000, "Member 'DFVoteIssue_GetYesNoVoteCounts::OutYesVotes' has a wrong offset!");
//(offsetof(DFVoteIssue_GetYesNoVoteCounts, OutNoVotes) == 0x000004, "Member 'DFVoteIssue_GetYesNoVoteCounts::OutNoVotes' has a wrong offset!");

// Function DonkehFramework.DFVoteIssuePlayer.CanInitiateVoteWithTarget
// 0x0010 (0x0010 - 0x0000)
struct DFVoteIssuePlayer_CanInitiateVoteWithTarget final 
{
public:
	class APlayerState*                           TargetPS;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4A[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFVoteIssuePlayer_CanInitiateVoteWithTarget) == 0x000008, "Wrong alignment on DFVoteIssuePlayer_CanInitiateVoteWithTarget");
//(sizeof(DFVoteIssuePlayer_CanInitiateVoteWithTarget) == 0x000010, "Wrong size on DFVoteIssuePlayer_CanInitiateVoteWithTarget");
//(offsetof(DFVoteIssuePlayer_CanInitiateVoteWithTarget, TargetPS) == 0x000000, "Member 'DFVoteIssuePlayer_CanInitiateVoteWithTarget::TargetPS' has a wrong offset!");
//(offsetof(DFVoteIssuePlayer_CanInitiateVoteWithTarget, ReturnValue) == 0x000008, "Member 'DFVoteIssuePlayer_CanInitiateVoteWithTarget::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVotingComponent.CastVote
// 0x0010 (0x0010 - 0x0000)
struct DFVotingComponent_CastVote final 
{
public:
	class APlayerState*                           InvokingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoteSelectionID;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4E[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFVotingComponent_CastVote) == 0x000008, "Wrong alignment on DFVotingComponent_CastVote");
//(sizeof(DFVotingComponent_CastVote) == 0x000010, "Wrong size on DFVotingComponent_CastVote");
//(offsetof(DFVotingComponent_CastVote, InvokingPlayer) == 0x000000, "Member 'DFVotingComponent_CastVote::InvokingPlayer' has a wrong offset!");
//(offsetof(DFVotingComponent_CastVote, VoteSelectionID) == 0x000008, "Member 'DFVotingComponent_CastVote::VoteSelectionID' has a wrong offset!");
//(offsetof(DFVotingComponent_CastVote, ReturnValue) == 0x00000C, "Member 'DFVotingComponent_CastVote::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVotingComponent.InitiateVote
// 0x0030 (0x0030 - 0x0000)
struct DFVotingComponent_InitiateVote final 
{
public:
	class APlayerState*                           InvokingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDFVoteIssue>               IssueClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFVoteIssueContext                    IssueContext;                                      // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4F[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFVotingComponent_InitiateVote) == 0x000008, "Wrong alignment on DFVotingComponent_InitiateVote");
//(sizeof(DFVotingComponent_InitiateVote) == 0x000030, "Wrong size on DFVotingComponent_InitiateVote");
//(offsetof(DFVotingComponent_InitiateVote, InvokingPlayer) == 0x000000, "Member 'DFVotingComponent_InitiateVote::InvokingPlayer' has a wrong offset!");
//(offsetof(DFVotingComponent_InitiateVote, IssueClass) == 0x000008, "Member 'DFVotingComponent_InitiateVote::IssueClass' has a wrong offset!");
//(offsetof(DFVotingComponent_InitiateVote, IssueContext) == 0x000010, "Member 'DFVotingComponent_InitiateVote::IssueContext' has a wrong offset!");
//(offsetof(DFVotingComponent_InitiateVote, ReturnValue) == 0x000028, "Member 'DFVotingComponent_InitiateVote::ReturnValue' has a wrong offset!");

// DelegateFunction DonkehFramework.DFVotingComponent.OnPlayerVoteIssueEventDynamic__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct DFVotingComponent_OnPlayerVoteIssueEventDynamic__DelegateSignature final 
{
public:
	class UDFVotingComponent*                     SourceVotingComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFVotingComponent_OnPlayerVoteIssueEventDynamic__DelegateSignature) == 0x000008, "Wrong alignment on DFVotingComponent_OnPlayerVoteIssueEventDynamic__DelegateSignature");
//(sizeof(DFVotingComponent_OnPlayerVoteIssueEventDynamic__DelegateSignature) == 0x000008, "Wrong size on DFVotingComponent_OnPlayerVoteIssueEventDynamic__DelegateSignature");
//(offsetof(DFVotingComponent_OnPlayerVoteIssueEventDynamic__DelegateSignature, SourceVotingComponent) == 0x000000, "Member 'DFVotingComponent_OnPlayerVoteIssueEventDynamic__DelegateSignature::SourceVotingComponent' has a wrong offset!");

// Function DonkehFramework.DFVotingComponent.OnRep_ActiveVoteInfo
// 0x0048 (0x0048 - 0x0000)
struct DFVotingComponent_OnRep_ActiveVoteInfo final 
{
public:
	struct FDFActiveVoteInfo                      PreviousValue;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
//(alignof(DFVotingComponent_OnRep_ActiveVoteInfo) == 0x000008, "Wrong alignment on DFVotingComponent_OnRep_ActiveVoteInfo");
//(sizeof(DFVotingComponent_OnRep_ActiveVoteInfo) == 0x000048, "Wrong size on DFVotingComponent_OnRep_ActiveVoteInfo");
//(offsetof(DFVotingComponent_OnRep_ActiveVoteInfo, PreviousValue) == 0x000000, "Member 'DFVotingComponent_OnRep_ActiveVoteInfo::PreviousValue' has a wrong offset!");

// Function DonkehFramework.DFVotingComponent.CanCastVote
// 0x0010 (0x0010 - 0x0000)
struct DFVotingComponent_CanCastVote final 
{
public:
	class APlayerState*                           VotingPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoteSelectionID;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E50[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFVotingComponent_CanCastVote) == 0x000008, "Wrong alignment on DFVotingComponent_CanCastVote");
//(sizeof(DFVotingComponent_CanCastVote) == 0x000010, "Wrong size on DFVotingComponent_CanCastVote");
//(offsetof(DFVotingComponent_CanCastVote, VotingPlayer) == 0x000000, "Member 'DFVotingComponent_CanCastVote::VotingPlayer' has a wrong offset!");
//(offsetof(DFVotingComponent_CanCastVote, VoteSelectionID) == 0x000008, "Member 'DFVotingComponent_CanCastVote::VoteSelectionID' has a wrong offset!");
//(offsetof(DFVotingComponent_CanCastVote, ReturnValue) == 0x00000C, "Member 'DFVotingComponent_CanCastVote::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVotingComponent.CanInitiateVote
// 0x0018 (0x0018 - 0x0000)
struct DFVotingComponent_CanInitiateVote final 
{
public:
	class APlayerState*                           InvokingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDFVoteIssue>               IssueClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E51[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFVotingComponent_CanInitiateVote) == 0x000008, "Wrong alignment on DFVotingComponent_CanInitiateVote");
//(sizeof(DFVotingComponent_CanInitiateVote) == 0x000018, "Wrong size on DFVotingComponent_CanInitiateVote");
//(offsetof(DFVotingComponent_CanInitiateVote, InvokingPlayer) == 0x000000, "Member 'DFVotingComponent_CanInitiateVote::InvokingPlayer' has a wrong offset!");
//(offsetof(DFVotingComponent_CanInitiateVote, IssueClass) == 0x000008, "Member 'DFVotingComponent_CanInitiateVote::IssueClass' has a wrong offset!");
//(offsetof(DFVotingComponent_CanInitiateVote, ReturnValue) == 0x000010, "Member 'DFVotingComponent_CanInitiateVote::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVotingComponent.CanVoteTargetPlayer
// 0x0018 (0x0018 - 0x0000)
struct DFVotingComponent_CanVoteTargetPlayer final 
{
public:
	class APlayerState*                           TargetPS;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDFVoteIssue>               IssueClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E52[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFVotingComponent_CanVoteTargetPlayer) == 0x000008, "Wrong alignment on DFVotingComponent_CanVoteTargetPlayer");
//(sizeof(DFVotingComponent_CanVoteTargetPlayer) == 0x000018, "Wrong size on DFVotingComponent_CanVoteTargetPlayer");
//(offsetof(DFVotingComponent_CanVoteTargetPlayer, TargetPS) == 0x000000, "Member 'DFVotingComponent_CanVoteTargetPlayer::TargetPS' has a wrong offset!");
//(offsetof(DFVotingComponent_CanVoteTargetPlayer, IssueClass) == 0x000008, "Member 'DFVotingComponent_CanVoteTargetPlayer::IssueClass' has a wrong offset!");
//(offsetof(DFVotingComponent_CanVoteTargetPlayer, ReturnValue) == 0x000010, "Member 'DFVotingComponent_CanVoteTargetPlayer::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVotingComponent.GetVoteIssueDefinitionForClass
// 0x0020 (0x0020 - 0x0000)
struct DFVotingComponent_GetVoteIssueDefinitionForClass final 
{
public:
	TSubclassOf<class UDFVoteIssue>               IssueClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFVoteIssueDefinition                 OutIssueDefinition;                                // 0x0008(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E53[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFVotingComponent_GetVoteIssueDefinitionForClass) == 0x000008, "Wrong alignment on DFVotingComponent_GetVoteIssueDefinitionForClass");
//(sizeof(DFVotingComponent_GetVoteIssueDefinitionForClass) == 0x000020, "Wrong size on DFVotingComponent_GetVoteIssueDefinitionForClass");
//(offsetof(DFVotingComponent_GetVoteIssueDefinitionForClass, IssueClass) == 0x000000, "Member 'DFVotingComponent_GetVoteIssueDefinitionForClass::IssueClass' has a wrong offset!");
//(offsetof(DFVotingComponent_GetVoteIssueDefinitionForClass, OutIssueDefinition) == 0x000008, "Member 'DFVotingComponent_GetVoteIssueDefinitionForClass::OutIssueDefinition' has a wrong offset!");
//(offsetof(DFVotingComponent_GetVoteIssueDefinitionForClass, ReturnValue) == 0x000018, "Member 'DFVotingComponent_GetVoteIssueDefinitionForClass::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVotingComponent.GetVoteIssueForClass
// 0x0010 (0x0010 - 0x0000)
struct DFVotingComponent_GetVoteIssueForClass final 
{
public:
	TSubclassOf<class UDFVoteIssue>               IssueClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFVoteIssue*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFVotingComponent_GetVoteIssueForClass) == 0x000008, "Wrong alignment on DFVotingComponent_GetVoteIssueForClass");
//(sizeof(DFVotingComponent_GetVoteIssueForClass) == 0x000010, "Wrong size on DFVotingComponent_GetVoteIssueForClass");
//(offsetof(DFVotingComponent_GetVoteIssueForClass, IssueClass) == 0x000000, "Member 'DFVotingComponent_GetVoteIssueForClass::IssueClass' has a wrong offset!");
//(offsetof(DFVotingComponent_GetVoteIssueForClass, ReturnValue) == 0x000008, "Member 'DFVotingComponent_GetVoteIssueForClass::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVotingComponent.IsVotingInProgress
// 0x0001 (0x0001 - 0x0000)
struct DFVotingComponent_IsVotingInProgress final 
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFVotingComponent_IsVotingInProgress) == 0x000001, "Wrong alignment on DFVotingComponent_IsVotingInProgress");
//(sizeof(DFVotingComponent_IsVotingInProgress) == 0x000001, "Wrong size on DFVotingComponent_IsVotingInProgress");
//(offsetof(DFVotingComponent_IsVotingInProgress, ReturnValue) == 0x000000, "Member 'DFVotingComponent_IsVotingInProgress::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVotingStatics.GetGameStateVotingComponent
// 0x0010 (0x0010 - 0x0000)
struct DFVotingStatics_GetGameStateVotingComponent final 
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDFVotingComponent*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(DFVotingStatics_GetGameStateVotingComponent) == 0x000008, "Wrong alignment on DFVotingStatics_GetGameStateVotingComponent");
//(sizeof(DFVotingStatics_GetGameStateVotingComponent) == 0x000010, "Wrong size on DFVotingStatics_GetGameStateVotingComponent");
//(offsetof(DFVotingStatics_GetGameStateVotingComponent, WorldContextObject) == 0x000000, "Member 'DFVotingStatics_GetGameStateVotingComponent::WorldContextObject' has a wrong offset!");
//(offsetof(DFVotingStatics_GetGameStateVotingComponent, ReturnValue) == 0x000008, "Member 'DFVotingStatics_GetGameStateVotingComponent::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVotingStatics.IsValidVotingPlayer
// 0x0010 (0x0010 - 0x0000)
struct DFVotingStatics_IsValidVotingPlayer final 
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E54[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(DFVotingStatics_IsValidVotingPlayer) == 0x000008, "Wrong alignment on DFVotingStatics_IsValidVotingPlayer");
//(sizeof(DFVotingStatics_IsValidVotingPlayer) == 0x000010, "Wrong size on DFVotingStatics_IsValidVotingPlayer");
//(offsetof(DFVotingStatics_IsValidVotingPlayer, PlayerState) == 0x000000, "Member 'DFVotingStatics_IsValidVotingPlayer::PlayerState' has a wrong offset!");
//(offsetof(DFVotingStatics_IsValidVotingPlayer, ReturnValue) == 0x000008, "Member 'DFVotingStatics_IsValidVotingPlayer::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVotingStatics.MakeVoteContext
// 0x0020 (0x0020 - 0x0000)
struct DFVotingStatics_MakeVoteContext final 
{
public:
	class APlayerState*                           TargetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFVoteIssueContext                    ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//(alignof(DFVotingStatics_MakeVoteContext) == 0x000008, "Wrong alignment on DFVotingStatics_MakeVoteContext");
//(sizeof(DFVotingStatics_MakeVoteContext) == 0x000020, "Wrong size on DFVotingStatics_MakeVoteContext");
//(offsetof(DFVotingStatics_MakeVoteContext, TargetPlayer) == 0x000000, "Member 'DFVotingStatics_MakeVoteContext::TargetPlayer' has a wrong offset!");
//(offsetof(DFVotingStatics_MakeVoteContext, ReturnValue) == 0x000008, "Member 'DFVotingStatics_MakeVoteContext::ReturnValue' has a wrong offset!");

// Function DonkehFramework.DFVotingStatics.VoteInfoGetPromptTextForDisplay
// 0x0060 (0x0060 - 0x0000)
struct DFVotingStatics_VoteInfoGetPromptTextForDisplay final 
{
public:
	struct FDFActiveVoteInfo                      VoteInfo;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
//(alignof(DFVotingStatics_VoteInfoGetPromptTextForDisplay) == 0x000008, "Wrong alignment on DFVotingStatics_VoteInfoGetPromptTextForDisplay");
//(sizeof(DFVotingStatics_VoteInfoGetPromptTextForDisplay) == 0x000060, "Wrong size on DFVotingStatics_VoteInfoGetPromptTextForDisplay");
//(offsetof(DFVotingStatics_VoteInfoGetPromptTextForDisplay, VoteInfo) == 0x000000, "Member 'DFVotingStatics_VoteInfoGetPromptTextForDisplay::VoteInfo' has a wrong offset!");
//(offsetof(DFVotingStatics_VoteInfoGetPromptTextForDisplay, ReturnValue) == 0x000048, "Member 'DFVotingStatics_VoteInfoGetPromptTextForDisplay::ReturnValue' has a wrong offset!");

// Function DonkehFramework.GameSessionBlueprintLibrary.AddAdmin
// 0x0010 (0x0010 - 0x0000)
struct GameSessionBlueprintLibrary_AddAdmin final 
{
public:
	class UObject*                                WorldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      AdminPlayer;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(GameSessionBlueprintLibrary_AddAdmin) == 0x000008, "Wrong alignment on GameSessionBlueprintLibrary_AddAdmin");
//(sizeof(GameSessionBlueprintLibrary_AddAdmin) == 0x000010, "Wrong size on GameSessionBlueprintLibrary_AddAdmin");
//(offsetof(GameSessionBlueprintLibrary_AddAdmin, WorldContextObj) == 0x000000, "Member 'GameSessionBlueprintLibrary_AddAdmin::WorldContextObj' has a wrong offset!");
//(offsetof(GameSessionBlueprintLibrary_AddAdmin, AdminPlayer) == 0x000008, "Member 'GameSessionBlueprintLibrary_AddAdmin::AdminPlayer' has a wrong offset!");

// Function DonkehFramework.GameSessionBlueprintLibrary.GetMaxPlayers
// 0x0010 (0x0010 - 0x0000)
struct GameSessionBlueprintLibrary_GetMaxPlayers final 
{
public:
	class UObject*                                WorldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E56[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(GameSessionBlueprintLibrary_GetMaxPlayers) == 0x000008, "Wrong alignment on GameSessionBlueprintLibrary_GetMaxPlayers");
//(sizeof(GameSessionBlueprintLibrary_GetMaxPlayers) == 0x000010, "Wrong size on GameSessionBlueprintLibrary_GetMaxPlayers");
//(offsetof(GameSessionBlueprintLibrary_GetMaxPlayers, WorldContextObj) == 0x000000, "Member 'GameSessionBlueprintLibrary_GetMaxPlayers::WorldContextObj' has a wrong offset!");
//(offsetof(GameSessionBlueprintLibrary_GetMaxPlayers, ReturnValue) == 0x000008, "Member 'GameSessionBlueprintLibrary_GetMaxPlayers::ReturnValue' has a wrong offset!");

// Function DonkehFramework.GameSessionBlueprintLibrary.GetMaxSpectators
// 0x0010 (0x0010 - 0x0000)
struct GameSessionBlueprintLibrary_GetMaxSpectators final 
{
public:
	class UObject*                                WorldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E57[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(GameSessionBlueprintLibrary_GetMaxSpectators) == 0x000008, "Wrong alignment on GameSessionBlueprintLibrary_GetMaxSpectators");
//(sizeof(GameSessionBlueprintLibrary_GetMaxSpectators) == 0x000010, "Wrong size on GameSessionBlueprintLibrary_GetMaxSpectators");
//(offsetof(GameSessionBlueprintLibrary_GetMaxSpectators, WorldContextObj) == 0x000000, "Member 'GameSessionBlueprintLibrary_GetMaxSpectators::WorldContextObj' has a wrong offset!");
//(offsetof(GameSessionBlueprintLibrary_GetMaxSpectators, ReturnValue) == 0x000008, "Member 'GameSessionBlueprintLibrary_GetMaxSpectators::ReturnValue' has a wrong offset!");

// Function DonkehFramework.GameSessionBlueprintLibrary.GetMinPlayers
// 0x0010 (0x0010 - 0x0000)
struct GameSessionBlueprintLibrary_GetMinPlayers final 
{
public:
	class UObject*                                WorldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E58[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(GameSessionBlueprintLibrary_GetMinPlayers) == 0x000008, "Wrong alignment on GameSessionBlueprintLibrary_GetMinPlayers");
//(sizeof(GameSessionBlueprintLibrary_GetMinPlayers) == 0x000010, "Wrong size on GameSessionBlueprintLibrary_GetMinPlayers");
//(offsetof(GameSessionBlueprintLibrary_GetMinPlayers, WorldContextObj) == 0x000000, "Member 'GameSessionBlueprintLibrary_GetMinPlayers::WorldContextObj' has a wrong offset!");
//(offsetof(GameSessionBlueprintLibrary_GetMinPlayers, ReturnValue) == 0x000008, "Member 'GameSessionBlueprintLibrary_GetMinPlayers::ReturnValue' has a wrong offset!");

// Function DonkehFramework.GameSessionBlueprintLibrary.RemoveAdmin
// 0x0010 (0x0010 - 0x0000)
struct GameSessionBlueprintLibrary_RemoveAdmin final 
{
public:
	class UObject*                                WorldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      AdminPlayer;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(GameSessionBlueprintLibrary_RemoveAdmin) == 0x000008, "Wrong alignment on GameSessionBlueprintLibrary_RemoveAdmin");
//(sizeof(GameSessionBlueprintLibrary_RemoveAdmin) == 0x000010, "Wrong size on GameSessionBlueprintLibrary_RemoveAdmin");
//(offsetof(GameSessionBlueprintLibrary_RemoveAdmin, WorldContextObj) == 0x000000, "Member 'GameSessionBlueprintLibrary_RemoveAdmin::WorldContextObj' has a wrong offset!");
//(offsetof(GameSessionBlueprintLibrary_RemoveAdmin, AdminPlayer) == 0x000008, "Member 'GameSessionBlueprintLibrary_RemoveAdmin::AdminPlayer' has a wrong offset!");

// Function DonkehFramework.SpawnPointProviderInterface.CanRestartPlayerFromSpawnPointBP
// 0x0070 (0x0070 - 0x0000)
struct SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP final 
{
public:
	struct FSpawnPointDef                         SpawnPoint;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AController*                            Player;                                            // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      PlayerPawnClass;                                   // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E59[0xF];                                      // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP) == 0x000010, "Wrong alignment on SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP");
//(sizeof(SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP) == 0x000070, "Wrong size on SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP");
//(offsetof(SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP, SpawnPoint) == 0x000000, "Member 'SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP::SpawnPoint' has a wrong offset!");
//(offsetof(SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP, Player) == 0x000050, "Member 'SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP::Player' has a wrong offset!");
//(offsetof(SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP, PlayerPawnClass) == 0x000058, "Member 'SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP::PlayerPawnClass' has a wrong offset!");
//(offsetof(SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP, ReturnValue) == 0x000060, "Member 'SpawnPointProviderInterface_CanRestartPlayerFromSpawnPointBP::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointProviderInterface.CanSpawnActorFromSpawnPointBP
// 0x0060 (0x0060 - 0x0000)
struct SpawnPointProviderInterface_CanSpawnActorFromSpawnPointBP final 
{
public:
	struct FSpawnPointDef                         SpawnPoint;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     SpawnActorClass;                                   // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5A[0x7];                                      // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointProviderInterface_CanSpawnActorFromSpawnPointBP) == 0x000010, "Wrong alignment on SpawnPointProviderInterface_CanSpawnActorFromSpawnPointBP");
//(sizeof(SpawnPointProviderInterface_CanSpawnActorFromSpawnPointBP) == 0x000060, "Wrong size on SpawnPointProviderInterface_CanSpawnActorFromSpawnPointBP");
//(offsetof(SpawnPointProviderInterface_CanSpawnActorFromSpawnPointBP, SpawnPoint) == 0x000000, "Member 'SpawnPointProviderInterface_CanSpawnActorFromSpawnPointBP::SpawnPoint' has a wrong offset!");
//(offsetof(SpawnPointProviderInterface_CanSpawnActorFromSpawnPointBP, SpawnActorClass) == 0x000050, "Member 'SpawnPointProviderInterface_CanSpawnActorFromSpawnPointBP::SpawnActorClass' has a wrong offset!");
//(offsetof(SpawnPointProviderInterface_CanSpawnActorFromSpawnPointBP, ReturnValue) == 0x000058, "Member 'SpawnPointProviderInterface_CanSpawnActorFromSpawnPointBP::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointProviderInterface.FindSpawnPointBP
// 0x0070 (0x0070 - 0x0000)
struct SpawnPointProviderInterface_FindSpawnPointBP final 
{
public:
	int32                                         SpawnPointID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5B[0xC];                                      // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpawnPointDef                         FoundSpawnPoint;                                   // 0x0010(0x0050)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5C[0xF];                                      // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointProviderInterface_FindSpawnPointBP) == 0x000010, "Wrong alignment on SpawnPointProviderInterface_FindSpawnPointBP");
//(sizeof(SpawnPointProviderInterface_FindSpawnPointBP) == 0x000070, "Wrong size on SpawnPointProviderInterface_FindSpawnPointBP");
//(offsetof(SpawnPointProviderInterface_FindSpawnPointBP, SpawnPointID) == 0x000000, "Member 'SpawnPointProviderInterface_FindSpawnPointBP::SpawnPointID' has a wrong offset!");
//(offsetof(SpawnPointProviderInterface_FindSpawnPointBP, FoundSpawnPoint) == 0x000010, "Member 'SpawnPointProviderInterface_FindSpawnPointBP::FoundSpawnPoint' has a wrong offset!");
//(offsetof(SpawnPointProviderInterface_FindSpawnPointBP, ReturnValue) == 0x000060, "Member 'SpawnPointProviderInterface_FindSpawnPointBP::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointProviderInterface.GetAllSpawnPointsBP
// 0x0018 (0x0018 - 0x0000)
struct SpawnPointProviderInterface_GetAllSpawnPointsBP final 
{
public:
	TArray<struct FSpawnPointDef>                 SpawnPoints;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5D[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointProviderInterface_GetAllSpawnPointsBP) == 0x000008, "Wrong alignment on SpawnPointProviderInterface_GetAllSpawnPointsBP");
//(sizeof(SpawnPointProviderInterface_GetAllSpawnPointsBP) == 0x000018, "Wrong size on SpawnPointProviderInterface_GetAllSpawnPointsBP");
//(offsetof(SpawnPointProviderInterface_GetAllSpawnPointsBP, SpawnPoints) == 0x000000, "Member 'SpawnPointProviderInterface_GetAllSpawnPointsBP::SpawnPoints' has a wrong offset!");
//(offsetof(SpawnPointProviderInterface_GetAllSpawnPointsBP, ReturnValue) == 0x000010, "Member 'SpawnPointProviderInterface_GetAllSpawnPointsBP::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointProviderInterface.GetSpawnPointCollisionHandlingOverrideBP
// 0x0060 (0x0060 - 0x0000)
struct SpawnPointProviderInterface_GetSpawnPointCollisionHandlingOverrideBP final 
{
public:
	struct FSpawnPointDef                         SpawnPoint;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            OutSpawnCollisionMethod;                           // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5E[0xE];                                      // 0x0052(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointProviderInterface_GetSpawnPointCollisionHandlingOverrideBP) == 0x000010, "Wrong alignment on SpawnPointProviderInterface_GetSpawnPointCollisionHandlingOverrideBP");
//(sizeof(SpawnPointProviderInterface_GetSpawnPointCollisionHandlingOverrideBP) == 0x000060, "Wrong size on SpawnPointProviderInterface_GetSpawnPointCollisionHandlingOverrideBP");
//(offsetof(SpawnPointProviderInterface_GetSpawnPointCollisionHandlingOverrideBP, SpawnPoint) == 0x000000, "Member 'SpawnPointProviderInterface_GetSpawnPointCollisionHandlingOverrideBP::SpawnPoint' has a wrong offset!");
//(offsetof(SpawnPointProviderInterface_GetSpawnPointCollisionHandlingOverrideBP, OutSpawnCollisionMethod) == 0x000050, "Member 'SpawnPointProviderInterface_GetSpawnPointCollisionHandlingOverrideBP::OutSpawnCollisionMethod' has a wrong offset!");
//(offsetof(SpawnPointProviderInterface_GetSpawnPointCollisionHandlingOverrideBP, ReturnValue) == 0x000051, "Member 'SpawnPointProviderInterface_GetSpawnPointCollisionHandlingOverrideBP::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointStatics.CanRestartPlayerFromAnySpawnPoint
// 0x0020 (0x0020 - 0x0000)
struct SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint final 
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      PlayerPawnClass;                                   // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5F[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint) == 0x000008, "Wrong alignment on SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint");
//(sizeof(SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint) == 0x000020, "Wrong size on SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint");
//(offsetof(SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint, Target) == 0x000000, "Member 'SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint::Target' has a wrong offset!");
//(offsetof(SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint, Player) == 0x000008, "Member 'SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint::Player' has a wrong offset!");
//(offsetof(SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint, PlayerPawnClass) == 0x000010, "Member 'SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint::PlayerPawnClass' has a wrong offset!");
//(offsetof(SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint, ReturnValue) == 0x000018, "Member 'SpawnPointStatics_CanRestartPlayerFromAnySpawnPoint::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointStatics.CanRestartPlayerFromSpawnPoint
// 0x0080 (0x0080 - 0x0000)
struct SpawnPointStatics_CanRestartPlayerFromSpawnPoint final 
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E60[0x8];                                      // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpawnPointDef                         SpawnPoint;                                        // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AController*                            Player;                                            // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      PlayerPawnClass;                                   // 0x0068(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E61[0xF];                                      // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointStatics_CanRestartPlayerFromSpawnPoint) == 0x000010, "Wrong alignment on SpawnPointStatics_CanRestartPlayerFromSpawnPoint");
//(sizeof(SpawnPointStatics_CanRestartPlayerFromSpawnPoint) == 0x000080, "Wrong size on SpawnPointStatics_CanRestartPlayerFromSpawnPoint");
//(offsetof(SpawnPointStatics_CanRestartPlayerFromSpawnPoint, Target) == 0x000000, "Member 'SpawnPointStatics_CanRestartPlayerFromSpawnPoint::Target' has a wrong offset!");
//(offsetof(SpawnPointStatics_CanRestartPlayerFromSpawnPoint, SpawnPoint) == 0x000010, "Member 'SpawnPointStatics_CanRestartPlayerFromSpawnPoint::SpawnPoint' has a wrong offset!");
//(offsetof(SpawnPointStatics_CanRestartPlayerFromSpawnPoint, Player) == 0x000060, "Member 'SpawnPointStatics_CanRestartPlayerFromSpawnPoint::Player' has a wrong offset!");
//(offsetof(SpawnPointStatics_CanRestartPlayerFromSpawnPoint, PlayerPawnClass) == 0x000068, "Member 'SpawnPointStatics_CanRestartPlayerFromSpawnPoint::PlayerPawnClass' has a wrong offset!");
//(offsetof(SpawnPointStatics_CanRestartPlayerFromSpawnPoint, ReturnValue) == 0x000070, "Member 'SpawnPointStatics_CanRestartPlayerFromSpawnPoint::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointStatics.CanSpawnActorFromAnySpawnPoint
// 0x0018 (0x0018 - 0x0000)
struct SpawnPointStatics_CanSpawnActorFromAnySpawnPoint final 
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     SpawnActorClass;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E62[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointStatics_CanSpawnActorFromAnySpawnPoint) == 0x000008, "Wrong alignment on SpawnPointStatics_CanSpawnActorFromAnySpawnPoint");
//(sizeof(SpawnPointStatics_CanSpawnActorFromAnySpawnPoint) == 0x000018, "Wrong size on SpawnPointStatics_CanSpawnActorFromAnySpawnPoint");
//(offsetof(SpawnPointStatics_CanSpawnActorFromAnySpawnPoint, Target) == 0x000000, "Member 'SpawnPointStatics_CanSpawnActorFromAnySpawnPoint::Target' has a wrong offset!");
//(offsetof(SpawnPointStatics_CanSpawnActorFromAnySpawnPoint, SpawnActorClass) == 0x000008, "Member 'SpawnPointStatics_CanSpawnActorFromAnySpawnPoint::SpawnActorClass' has a wrong offset!");
//(offsetof(SpawnPointStatics_CanSpawnActorFromAnySpawnPoint, ReturnValue) == 0x000010, "Member 'SpawnPointStatics_CanSpawnActorFromAnySpawnPoint::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointStatics.CanSpawnActorFromSpawnPoint
// 0x0070 (0x0070 - 0x0000)
struct SpawnPointStatics_CanSpawnActorFromSpawnPoint final 
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E63[0x8];                                      // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpawnPointDef                         SpawnPoint;                                        // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     SpawnActorClass;                                   // 0x0060(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E64[0x7];                                      // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointStatics_CanSpawnActorFromSpawnPoint) == 0x000010, "Wrong alignment on SpawnPointStatics_CanSpawnActorFromSpawnPoint");
//(sizeof(SpawnPointStatics_CanSpawnActorFromSpawnPoint) == 0x000070, "Wrong size on SpawnPointStatics_CanSpawnActorFromSpawnPoint");
//(offsetof(SpawnPointStatics_CanSpawnActorFromSpawnPoint, Target) == 0x000000, "Member 'SpawnPointStatics_CanSpawnActorFromSpawnPoint::Target' has a wrong offset!");
//(offsetof(SpawnPointStatics_CanSpawnActorFromSpawnPoint, SpawnPoint) == 0x000010, "Member 'SpawnPointStatics_CanSpawnActorFromSpawnPoint::SpawnPoint' has a wrong offset!");
//(offsetof(SpawnPointStatics_CanSpawnActorFromSpawnPoint, SpawnActorClass) == 0x000060, "Member 'SpawnPointStatics_CanSpawnActorFromSpawnPoint::SpawnActorClass' has a wrong offset!");
//(offsetof(SpawnPointStatics_CanSpawnActorFromSpawnPoint, ReturnValue) == 0x000068, "Member 'SpawnPointStatics_CanSpawnActorFromSpawnPoint::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointStatics.FindSpawnPoint
// 0x0070 (0x0070 - 0x0000)
struct SpawnPointStatics_FindSpawnPoint final 
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnPointID;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E65[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpawnPointDef                         FoundSpawnPoint;                                   // 0x0010(0x0050)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E66[0xF];                                      // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointStatics_FindSpawnPoint) == 0x000010, "Wrong alignment on SpawnPointStatics_FindSpawnPoint");
//(sizeof(SpawnPointStatics_FindSpawnPoint) == 0x000070, "Wrong size on SpawnPointStatics_FindSpawnPoint");
//(offsetof(SpawnPointStatics_FindSpawnPoint, Target) == 0x000000, "Member 'SpawnPointStatics_FindSpawnPoint::Target' has a wrong offset!");
//(offsetof(SpawnPointStatics_FindSpawnPoint, SpawnPointID) == 0x000008, "Member 'SpawnPointStatics_FindSpawnPoint::SpawnPointID' has a wrong offset!");
//(offsetof(SpawnPointStatics_FindSpawnPoint, FoundSpawnPoint) == 0x000010, "Member 'SpawnPointStatics_FindSpawnPoint::FoundSpawnPoint' has a wrong offset!");
//(offsetof(SpawnPointStatics_FindSpawnPoint, ReturnValue) == 0x000060, "Member 'SpawnPointStatics_FindSpawnPoint::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointStatics.GetAllSpawnPoints
// 0x0020 (0x0020 - 0x0000)
struct SpawnPointStatics_GetAllSpawnPoints final 
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSpawnPointDef>                 SpawnPoints;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E67[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointStatics_GetAllSpawnPoints) == 0x000008, "Wrong alignment on SpawnPointStatics_GetAllSpawnPoints");
//(sizeof(SpawnPointStatics_GetAllSpawnPoints) == 0x000020, "Wrong size on SpawnPointStatics_GetAllSpawnPoints");
//(offsetof(SpawnPointStatics_GetAllSpawnPoints, Target) == 0x000000, "Member 'SpawnPointStatics_GetAllSpawnPoints::Target' has a wrong offset!");
//(offsetof(SpawnPointStatics_GetAllSpawnPoints, SpawnPoints) == 0x000008, "Member 'SpawnPointStatics_GetAllSpawnPoints::SpawnPoints' has a wrong offset!");
//(offsetof(SpawnPointStatics_GetAllSpawnPoints, ReturnValue) == 0x000018, "Member 'SpawnPointStatics_GetAllSpawnPoints::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointStatics.GetAllSpawnPointTransforms
// 0x0020 (0x0020 - 0x0000)
struct SpawnPointStatics_GetAllSpawnPointTransforms final 
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     SpawnPointTransforms;                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E68[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointStatics_GetAllSpawnPointTransforms) == 0x000008, "Wrong alignment on SpawnPointStatics_GetAllSpawnPointTransforms");
//(sizeof(SpawnPointStatics_GetAllSpawnPointTransforms) == 0x000020, "Wrong size on SpawnPointStatics_GetAllSpawnPointTransforms");
//(offsetof(SpawnPointStatics_GetAllSpawnPointTransforms, Target) == 0x000000, "Member 'SpawnPointStatics_GetAllSpawnPointTransforms::Target' has a wrong offset!");
//(offsetof(SpawnPointStatics_GetAllSpawnPointTransforms, SpawnPointTransforms) == 0x000008, "Member 'SpawnPointStatics_GetAllSpawnPointTransforms::SpawnPointTransforms' has a wrong offset!");
//(offsetof(SpawnPointStatics_GetAllSpawnPointTransforms, ReturnValue) == 0x000018, "Member 'SpawnPointStatics_GetAllSpawnPointTransforms::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointStatics.GetSpawnPointCollisionHandlingOverride
// 0x0070 (0x0070 - 0x0000)
struct SpawnPointStatics_GetSpawnPointCollisionHandlingOverride final 
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E69[0x8];                                      // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpawnPointDef                         SpawnPoint;                                        // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            OutSpawnCollisionMethod;                           // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E6A[0xE];                                      // 0x0062(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointStatics_GetSpawnPointCollisionHandlingOverride) == 0x000010, "Wrong alignment on SpawnPointStatics_GetSpawnPointCollisionHandlingOverride");
//(sizeof(SpawnPointStatics_GetSpawnPointCollisionHandlingOverride) == 0x000070, "Wrong size on SpawnPointStatics_GetSpawnPointCollisionHandlingOverride");
//(offsetof(SpawnPointStatics_GetSpawnPointCollisionHandlingOverride, Target) == 0x000000, "Member 'SpawnPointStatics_GetSpawnPointCollisionHandlingOverride::Target' has a wrong offset!");
//(offsetof(SpawnPointStatics_GetSpawnPointCollisionHandlingOverride, SpawnPoint) == 0x000010, "Member 'SpawnPointStatics_GetSpawnPointCollisionHandlingOverride::SpawnPoint' has a wrong offset!");
//(offsetof(SpawnPointStatics_GetSpawnPointCollisionHandlingOverride, OutSpawnCollisionMethod) == 0x000060, "Member 'SpawnPointStatics_GetSpawnPointCollisionHandlingOverride::OutSpawnCollisionMethod' has a wrong offset!");
//(offsetof(SpawnPointStatics_GetSpawnPointCollisionHandlingOverride, ReturnValue) == 0x000061, "Member 'SpawnPointStatics_GetSpawnPointCollisionHandlingOverride::ReturnValue' has a wrong offset!");

// Function DonkehFramework.SpawnPointStatics.SpawnPointExists
// 0x0010 (0x0010 - 0x0000)
struct SpawnPointStatics_SpawnPointExists final 
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnPointID;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E6B[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(SpawnPointStatics_SpawnPointExists) == 0x000008, "Wrong alignment on SpawnPointStatics_SpawnPointExists");
//(sizeof(SpawnPointStatics_SpawnPointExists) == 0x000010, "Wrong size on SpawnPointStatics_SpawnPointExists");
//(offsetof(SpawnPointStatics_SpawnPointExists, Target) == 0x000000, "Member 'SpawnPointStatics_SpawnPointExists::Target' has a wrong offset!");
//(offsetof(SpawnPointStatics_SpawnPointExists, SpawnPointID) == 0x000008, "Member 'SpawnPointStatics_SpawnPointExists::SpawnPointID' has a wrong offset!");
//(offsetof(SpawnPointStatics_SpawnPointExists, ReturnValue) == 0x00000C, "Member 'SpawnPointStatics_SpawnPointExists::ReturnValue' has a wrong offset!");

// Function DonkehFramework.UseableInterface.Used
// 0x0008 (0x0008 - 0x0000)
struct UseableInterface_Used final 
{
public:
	class AActor*                                 Invoker;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(UseableInterface_Used) == 0x000008, "Wrong alignment on UseableInterface_Used");
//(sizeof(UseableInterface_Used) == 0x000008, "Wrong size on UseableInterface_Used");
//(offsetof(UseableInterface_Used, Invoker) == 0x000000, "Member 'UseableInterface_Used::Invoker' has a wrong offset!");

// Function DonkehFramework.VisibilityInterface.EventGetFocalPoint
// 0x000C (0x000C - 0x0000)
struct VisibilityInterface_EventGetFocalPoint final 
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(VisibilityInterface_EventGetFocalPoint) == 0x000004, "Wrong alignment on VisibilityInterface_EventGetFocalPoint");
//(sizeof(VisibilityInterface_EventGetFocalPoint) == 0x00000C, "Wrong size on VisibilityInterface_EventGetFocalPoint");
//(offsetof(VisibilityInterface_EventGetFocalPoint, ReturnValue) == 0x000000, "Member 'VisibilityInterface_EventGetFocalPoint::ReturnValue' has a wrong offset!");

}


#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioMixer

#include "Basic.hpp"


namespace SDK
{

// Enum AudioMixer.EAudioSpectrumType
// NumValues: 0x0003
enum class EAudioSpectrumType : uint8
{
	MagnitudeSpectrum                        = 0,
	PowerSpectrum                            = 1,
	EAudioSpectrumType_MAX                   = 2,
};

// Enum AudioMixer.EFFTWindowType
// NumValues: 0x0005
enum class EFFTWindowType : uint8
{
	None                                     = 0,
	Hamming                                  = 1,
	Hann                                     = 2,
	Blackman                                 = 3,
	EFFTWindowType_MAX                       = 4,
};

// Enum AudioMixer.EFFTPeakInterpolationMethod
// NumValues: 0x0004
enum class EFFTPeakInterpolationMethod : uint8
{
	NearestNeighbor                          = 0,
	Linear                                   = 1,
	Quadratic                                = 2,
	EFFTPeakInterpolationMethod_MAX          = 3,
};

// Enum AudioMixer.EFFTSize
// NumValues: 0x0006
enum class EFFTSize : uint8
{
	DefaultSize                              = 0,
	Min                                      = 1,
	Small                                    = 2,
	Medium                                   = 3,
	Large                                    = 4,
	Max                                      = 5,
};

// Enum AudioMixer.ESubmixEffectDynamicsChannelLinkMode
// NumValues: 0x0005
enum class ESubmixEffectDynamicsChannelLinkMode : uint8
{
	Disabled                                 = 0,
	Average                                  = 1,
	Peak                                     = 2,
	Count                                    = 3,
	ESubmixEffectDynamicsChannelLinkMode_MAX = 4,
};

// Enum AudioMixer.ESubmixEffectDynamicsPeakMode
// NumValues: 0x0005
enum class ESubmixEffectDynamicsPeakMode : uint8
{
	MeanSquared                              = 0,
	RootMeanSquared                          = 1,
	Peak                                     = 2,
	Count                                    = 3,
	ESubmixEffectDynamicsPeakMode_MAX        = 4,
};

// Enum AudioMixer.ESubmixEffectDynamicsProcessorType
// NumValues: 0x0006
enum class ESubmixEffectDynamicsProcessorType : uint8
{
	Compressor                               = 0,
	Limiter                                  = 1,
	Expander                                 = 2,
	Gate                                     = 3,
	Count                                    = 4,
	ESubmixEffectDynamicsProcessorType_MAX   = 5,
};

// ScriptStruct AudioMixer.SubmixEffectDynamicProcessorFilterSettings
// 0x000C (0x000C - 0x0000)
struct FSubmixEffectDynamicProcessorFilterSettings final 
{
public:
	uint8                                         bEnabled : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CB4[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Cutoff;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GainDb;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubmixEffectDynamicProcessorFilterSettings) == 0x000004, "Wrong alignment on FSubmixEffectDynamicProcessorFilterSettings");
static_assert(sizeof(FSubmixEffectDynamicProcessorFilterSettings) == 0x00000C, "Wrong size on FSubmixEffectDynamicProcessorFilterSettings");
static_assert(offsetof(FSubmixEffectDynamicProcessorFilterSettings, Cutoff) == 0x000004, "Member 'FSubmixEffectDynamicProcessorFilterSettings::Cutoff' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicProcessorFilterSettings, GainDb) == 0x000008, "Member 'FSubmixEffectDynamicProcessorFilterSettings::GainDb' has a wrong offset!");

// ScriptStruct AudioMixer.SubmixEffectDynamicsProcessorSettings
// 0x0050 (0x0050 - 0x0000)
struct FSubmixEffectDynamicsProcessorSettings final 
{
public:
	ESubmixEffectDynamicsProcessorType            DynamicsProcessorType;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubmixEffectDynamicsPeakMode                 PeakMode;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubmixEffectDynamicsChannelLinkMode          LinkMode;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB5[0x1];                                      // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputGainDb;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThresholdDb;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KneeBandwidthDb;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAheadMsec;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackTimeMsec;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReleaseTimeMsec;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           ExternalSubmix;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bChannelLinked : 1;                                // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAnalogMode : 1;                                   // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bKeyAudition : 1;                                  // 0x0028(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CB6[0x3];                                      // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KeyGainDb;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutputGainDb;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSubmixEffectDynamicProcessorFilterSettings KeyHighshelf;                                      // 0x0034(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSubmixEffectDynamicProcessorFilterSettings KeyLowshelf;                                       // 0x0040(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB7[0x4];                                      // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubmixEffectDynamicsProcessorSettings) == 0x000008, "Wrong alignment on FSubmixEffectDynamicsProcessorSettings");
static_assert(sizeof(FSubmixEffectDynamicsProcessorSettings) == 0x000050, "Wrong size on FSubmixEffectDynamicsProcessorSettings");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType) == 0x000000, "Member 'FSubmixEffectDynamicsProcessorSettings::DynamicsProcessorType' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, PeakMode) == 0x000001, "Member 'FSubmixEffectDynamicsProcessorSettings::PeakMode' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, LinkMode) == 0x000002, "Member 'FSubmixEffectDynamicsProcessorSettings::LinkMode' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, InputGainDb) == 0x000004, "Member 'FSubmixEffectDynamicsProcessorSettings::InputGainDb' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, ThresholdDb) == 0x000008, "Member 'FSubmixEffectDynamicsProcessorSettings::ThresholdDb' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, Ratio) == 0x00000C, "Member 'FSubmixEffectDynamicsProcessorSettings::Ratio' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb) == 0x000010, "Member 'FSubmixEffectDynamicsProcessorSettings::KneeBandwidthDb' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, LookAheadMsec) == 0x000014, "Member 'FSubmixEffectDynamicsProcessorSettings::LookAheadMsec' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec) == 0x000018, "Member 'FSubmixEffectDynamicsProcessorSettings::AttackTimeMsec' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec) == 0x00001C, "Member 'FSubmixEffectDynamicsProcessorSettings::ReleaseTimeMsec' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, ExternalSubmix) == 0x000020, "Member 'FSubmixEffectDynamicsProcessorSettings::ExternalSubmix' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, KeyGainDb) == 0x00002C, "Member 'FSubmixEffectDynamicsProcessorSettings::KeyGainDb' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, OutputGainDb) == 0x000030, "Member 'FSubmixEffectDynamicsProcessorSettings::OutputGainDb' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, KeyHighshelf) == 0x000034, "Member 'FSubmixEffectDynamicsProcessorSettings::KeyHighshelf' has a wrong offset!");
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, KeyLowshelf) == 0x000040, "Member 'FSubmixEffectDynamicsProcessorSettings::KeyLowshelf' has a wrong offset!");

// ScriptStruct AudioMixer.SubmixEffectEQBand
// 0x0010 (0x0010 - 0x0000)
struct FSubmixEffectEQBand final 
{
public:
	float                                         Frequency;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bandwidth;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GainDb;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CB8[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubmixEffectEQBand) == 0x000004, "Wrong alignment on FSubmixEffectEQBand");
static_assert(sizeof(FSubmixEffectEQBand) == 0x000010, "Wrong size on FSubmixEffectEQBand");
static_assert(offsetof(FSubmixEffectEQBand, Frequency) == 0x000000, "Member 'FSubmixEffectEQBand::Frequency' has a wrong offset!");
static_assert(offsetof(FSubmixEffectEQBand, Bandwidth) == 0x000004, "Member 'FSubmixEffectEQBand::Bandwidth' has a wrong offset!");
static_assert(offsetof(FSubmixEffectEQBand, GainDb) == 0x000008, "Member 'FSubmixEffectEQBand::GainDb' has a wrong offset!");

// ScriptStruct AudioMixer.SubmixEffectSubmixEQSettings
// 0x0010 (0x0010 - 0x0000)
struct FSubmixEffectSubmixEQSettings final 
{
public:
	TArray<struct FSubmixEffectEQBand>            EQBands;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubmixEffectSubmixEQSettings) == 0x000008, "Wrong alignment on FSubmixEffectSubmixEQSettings");
static_assert(sizeof(FSubmixEffectSubmixEQSettings) == 0x000010, "Wrong size on FSubmixEffectSubmixEQSettings");
static_assert(offsetof(FSubmixEffectSubmixEQSettings, EQBands) == 0x000000, "Member 'FSubmixEffectSubmixEQSettings::EQBands' has a wrong offset!");

// ScriptStruct AudioMixer.SubmixEffectReverbSettings
// 0x0034 (0x0034 - 0x0000)
struct FSubmixEffectReverbSettings final 
{
public:
	float                                         Density;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Diffusion;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gain;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GainHF;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayTime;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayHFRatio;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionsGain;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionsDelay;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateGain;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateDelay;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirAbsorptionGainHF;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetLevel;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryLevel;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubmixEffectReverbSettings) == 0x000004, "Wrong alignment on FSubmixEffectReverbSettings");
static_assert(sizeof(FSubmixEffectReverbSettings) == 0x000034, "Wrong size on FSubmixEffectReverbSettings");
static_assert(offsetof(FSubmixEffectReverbSettings, Density) == 0x000000, "Member 'FSubmixEffectReverbSettings::Density' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbSettings, Diffusion) == 0x000004, "Member 'FSubmixEffectReverbSettings::Diffusion' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbSettings, Gain) == 0x000008, "Member 'FSubmixEffectReverbSettings::Gain' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbSettings, GainHF) == 0x00000C, "Member 'FSubmixEffectReverbSettings::GainHF' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbSettings, DecayTime) == 0x000010, "Member 'FSubmixEffectReverbSettings::DecayTime' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbSettings, DecayHFRatio) == 0x000014, "Member 'FSubmixEffectReverbSettings::DecayHFRatio' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbSettings, ReflectionsGain) == 0x000018, "Member 'FSubmixEffectReverbSettings::ReflectionsGain' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbSettings, ReflectionsDelay) == 0x00001C, "Member 'FSubmixEffectReverbSettings::ReflectionsDelay' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbSettings, LateGain) == 0x000020, "Member 'FSubmixEffectReverbSettings::LateGain' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbSettings, LateDelay) == 0x000024, "Member 'FSubmixEffectReverbSettings::LateDelay' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbSettings, AirAbsorptionGainHF) == 0x000028, "Member 'FSubmixEffectReverbSettings::AirAbsorptionGainHF' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbSettings, WetLevel) == 0x00002C, "Member 'FSubmixEffectReverbSettings::WetLevel' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbSettings, DryLevel) == 0x000030, "Member 'FSubmixEffectReverbSettings::DryLevel' has a wrong offset!");

// ScriptStruct AudioMixer.SubmixEffectReverbFastSettings
// 0x0038 (0x0038 - 0x0000)
struct FSubmixEffectReverbFastSettings final 
{
public:
	bool                                          bBypass;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB9[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Density;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Diffusion;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gain;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GainHF;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayTime;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayHFRatio;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionsGain;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionsDelay;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateGain;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateDelay;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirAbsorptionGainHF;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetLevel;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryLevel;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubmixEffectReverbFastSettings) == 0x000004, "Wrong alignment on FSubmixEffectReverbFastSettings");
static_assert(sizeof(FSubmixEffectReverbFastSettings) == 0x000038, "Wrong size on FSubmixEffectReverbFastSettings");
static_assert(offsetof(FSubmixEffectReverbFastSettings, bBypass) == 0x000000, "Member 'FSubmixEffectReverbFastSettings::bBypass' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, Density) == 0x000004, "Member 'FSubmixEffectReverbFastSettings::Density' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, Diffusion) == 0x000008, "Member 'FSubmixEffectReverbFastSettings::Diffusion' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, Gain) == 0x00000C, "Member 'FSubmixEffectReverbFastSettings::Gain' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, GainHF) == 0x000010, "Member 'FSubmixEffectReverbFastSettings::GainHF' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, DecayTime) == 0x000014, "Member 'FSubmixEffectReverbFastSettings::DecayTime' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, DecayHFRatio) == 0x000018, "Member 'FSubmixEffectReverbFastSettings::DecayHFRatio' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, ReflectionsGain) == 0x00001C, "Member 'FSubmixEffectReverbFastSettings::ReflectionsGain' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, ReflectionsDelay) == 0x000020, "Member 'FSubmixEffectReverbFastSettings::ReflectionsDelay' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, LateGain) == 0x000024, "Member 'FSubmixEffectReverbFastSettings::LateGain' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, LateDelay) == 0x000028, "Member 'FSubmixEffectReverbFastSettings::LateDelay' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, AirAbsorptionGainHF) == 0x00002C, "Member 'FSubmixEffectReverbFastSettings::AirAbsorptionGainHF' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, WetLevel) == 0x000030, "Member 'FSubmixEffectReverbFastSettings::WetLevel' has a wrong offset!");
static_assert(offsetof(FSubmixEffectReverbFastSettings, DryLevel) == 0x000034, "Member 'FSubmixEffectReverbFastSettings::DryLevel' has a wrong offset!");

}


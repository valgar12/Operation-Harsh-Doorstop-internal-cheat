#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HDMain

#include "Basic.hpp"

#include "HDMain_classes.hpp"
#include "HDMain_parameters.hpp"


namespace SDK
{

// Function HDMain.HDServerListFilterRule.MatchesServer
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UHDServerListItemData*            ListItem                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDServerListFilterRule::MatchesServer(class UHDServerListItemData* ListItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDServerListFilterRule", "MatchesServer");

	Params::HDServerListFilterRule_MatchesServer Parms{};

	Parms.ListItem = ListItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.DeployMenu_PlatoonSquadListBase.DeconstructSquad
// (Event, Protected, BlueprintEvent)
// Parameters:
// class USquadListEntry*                  RemovedSquadData                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RemovedSquadIdx                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_PlatoonSquadListBase::DeconstructSquad(class USquadListEntry* RemovedSquadData, int32 RemovedSquadIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_PlatoonSquadListBase", "DeconstructSquad");

	Params::DeployMenu_PlatoonSquadListBase_DeconstructSquad Parms{};

	Parms.RemovedSquadData = RemovedSquadData;
	Parms.RemovedSquadIdx = RemovedSquadIdx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.DeployMenu_PlatoonSquadListBase.GenerateSquad
// (Event, Protected, BlueprintEvent)
// Parameters:
// class USquadListEntry*                  SquadData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_PlatoonSquadListBase::GenerateSquad(class USquadListEntry* SquadData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_PlatoonSquadListBase", "GenerateSquad");

	Params::DeployMenu_PlatoonSquadListBase_GenerateSquad Parms{};

	Parms.SquadData = SquadData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.DeployMenu_PlatoonSquadListBase.OnPlatoonSet
// (Event, Protected, BlueprintEvent)

void UDeployMenu_PlatoonSquadListBase::OnPlatoonSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_PlatoonSquadListBase", "OnPlatoonSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.DeployMenu_PlatoonSquadListBase.RepopulatePlatoon
// (Final, Native, Public, BlueprintCallable)

void UDeployMenu_PlatoonSquadListBase::RepopulatePlatoon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_PlatoonSquadListBase", "RepopulatePlatoon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_PlatoonSquadListBase.SetupPlatoon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPlatoonListEntry*                InPlatoonData                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_PlatoonSquadListBase::SetupPlatoon(class UPlatoonListEntry* InPlatoonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_PlatoonSquadListBase", "SetupPlatoon");

	Params::DeployMenu_PlatoonSquadListBase_SetupPlatoon Parms{};

	Parms.InPlatoonData = InPlatoonData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_PlatoonSquadListBase.SquadAddedToPlatoon
// (Final, Native, Private)
// Parameters:
// class AHDPlatoonState*                  SourcePlatoon                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDSquadState*                    NewSquad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_PlatoonSquadListBase::SquadAddedToPlatoon(class AHDPlatoonState* SourcePlatoon, class AHDSquadState* NewSquad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_PlatoonSquadListBase", "SquadAddedToPlatoon");

	Params::DeployMenu_PlatoonSquadListBase_SquadAddedToPlatoon Parms{};

	Parms.SourcePlatoon = SourcePlatoon;
	Parms.NewSquad = NewSquad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_PlatoonSquadListBase.SquadPreRemoveFromPlatoon
// (Final, Native, Private)
// Parameters:
// class AHDPlatoonState*                  SourcePlatoon                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDSquadState*                    SquadToBeRemoved                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_PlatoonSquadListBase::SquadPreRemoveFromPlatoon(class AHDPlatoonState* SourcePlatoon, class AHDSquadState* SquadToBeRemoved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_PlatoonSquadListBase", "SquadPreRemoveFromPlatoon");

	Params::DeployMenu_PlatoonSquadListBase_SquadPreRemoveFromPlatoon Parms{};

	Parms.SourcePlatoon = SourcePlatoon;
	Parms.SquadToBeRemoved = SquadToBeRemoved;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_PlatoonSquadListBase.GetPlatoonStateFromData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlatoonState*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDPlatoonState* UDeployMenu_PlatoonSquadListBase::GetPlatoonStateFromData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_PlatoonSquadListBase", "GetPlatoonStateFromData");

	Params::DeployMenu_PlatoonSquadListBase_GetPlatoonStateFromData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.DeployMenu_SquadListBase.DeconstructSquadMember
// (Event, Protected, BlueprintEvent)
// Parameters:
// class USquadMemberInfo*                 RemovedMemberData                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadListBase::DeconstructSquadMember(class USquadMemberInfo* RemovedMemberData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "DeconstructSquadMember");

	Params::DeployMenu_SquadListBase_DeconstructSquadMember Parms{};

	Parms.RemovedMemberData = RemovedMemberData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.DeployMenu_SquadListBase.GenerateSquadMember
// (Event, Protected, BlueprintEvent)
// Parameters:
// class USquadMemberInfo*                 MemberData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadListBase::GenerateSquadMember(class USquadMemberInfo* MemberData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "GenerateSquadMember");

	Params::DeployMenu_SquadListBase_GenerateSquadMember Parms{};

	Parms.MemberData = MemberData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.DeployMenu_SquadListBase.MemberAddedToSquad
// (Final, Native, Private)
// Parameters:
// class AHDSquadState*                    SourceSquad                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlayerState*                   NewMemberPS                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadListBase::MemberAddedToSquad(class AHDSquadState* SourceSquad, class AHDPlayerState* NewMemberPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "MemberAddedToSquad");

	Params::DeployMenu_SquadListBase_MemberAddedToSquad Parms{};

	Parms.SourceSquad = SourceSquad;
	Parms.NewMemberPS = NewMemberPS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadListBase.MemberPreRemoveFromSquad
// (Final, Native, Private)
// Parameters:
// class AHDSquadState*                    SourceSquad                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlayerState*                   MemberPSToBeRemoved                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadListBase::MemberPreRemoveFromSquad(class AHDSquadState* SourceSquad, class AHDPlayerState* MemberPSToBeRemoved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "MemberPreRemoveFromSquad");

	Params::DeployMenu_SquadListBase_MemberPreRemoveFromSquad Parms{};

	Parms.SourceSquad = SourceSquad;
	Parms.MemberPSToBeRemoved = MemberPSToBeRemoved;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadListBase.MemberSquadInfoUpdated
// (Final, Native, Private, HasOutParams)
// Parameters:
// class AHDSquadState*                    SourceSquad                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlayerState*                   MemberPS                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHDSquadAssignmentInfo           MemberSQInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDeployMenu_SquadListBase::MemberSquadInfoUpdated(class AHDSquadState* SourceSquad, class AHDPlayerState* MemberPS, struct FHDSquadAssignmentInfo& MemberSQInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "MemberSquadInfoUpdated");

	Params::DeployMenu_SquadListBase_MemberSquadInfoUpdated Parms{};

	Parms.SourceSquad = SourceSquad;
	Parms.MemberPS = MemberPS;
	Parms.MemberSQInfo = std::move(MemberSQInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadListBase.OnListRefresh
// (Final, Native, Private)

void UDeployMenu_SquadListBase::OnListRefresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "OnListRefresh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadListBase.OnSquadLeaderUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDPlayerState*                   NewLeaderPS                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlayerState*                   PrevLeaderPS                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadListBase::OnSquadLeaderUpdated(class AHDPlayerState* NewLeaderPS, class AHDPlayerState* PrevLeaderPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "OnSquadLeaderUpdated");

	Params::DeployMenu_SquadListBase_OnSquadLeaderUpdated Parms{};

	Parms.NewLeaderPS = NewLeaderPS;
	Parms.PrevLeaderPS = PrevLeaderPS;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.DeployMenu_SquadListBase.OnSquadLockStateUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewLockedState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadListBase::OnSquadLockStateUpdated(bool bNewLockedState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "OnSquadLockStateUpdated");

	Params::DeployMenu_SquadListBase_OnSquadLockStateUpdated Parms{};

	Parms.bNewLockedState = bNewLockedState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.DeployMenu_SquadListBase.OnSquadNameUpdated
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             NewSquadName                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             PreviousSquadName                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDeployMenu_SquadListBase::OnSquadNameUpdated(class FText& NewSquadName, class FText& PreviousSquadName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "OnSquadNameUpdated");

	Params::DeployMenu_SquadListBase_OnSquadNameUpdated Parms{};

	Parms.NewSquadName = NewSquadName;
	Parms.PreviousSquadName = PreviousSquadName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.DeployMenu_SquadListBase.OnSquadSet
// (Event, Protected, BlueprintEvent)

void UDeployMenu_SquadListBase::OnSquadSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "OnSquadSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.DeployMenu_SquadListBase.RepopulateSquad
// (Final, Native, Public, BlueprintCallable)

void UDeployMenu_SquadListBase::RepopulateSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "RepopulateSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadListBase.SetupSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USquadListEntry*                  InSquadData                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadListBase::SetupSquad(class USquadListEntry* InSquadData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "SetupSquad");

	Params::DeployMenu_SquadListBase_SetupSquad Parms{};

	Parms.InSquadData = InSquadData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadListBase.SquadLeaderChanged
// (Final, Native, Private)
// Parameters:
// class AHDSquadState*                    SourceSquad                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlayerState*                   NewLeaderPS                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlayerState*                   PrevLeaderPS                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadListBase::SquadLeaderChanged(class AHDSquadState* SourceSquad, class AHDPlayerState* NewLeaderPS, class AHDPlayerState* PrevLeaderPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "SquadLeaderChanged");

	Params::DeployMenu_SquadListBase_SquadLeaderChanged Parms{};

	Parms.SourceSquad = SourceSquad;
	Parms.NewLeaderPS = NewLeaderPS;
	Parms.PrevLeaderPS = PrevLeaderPS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadListBase.SquadLockStateUpdated
// (Final, Native, Private)
// Parameters:
// class AHDSquadState*                    SourceSquad                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewLocked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadListBase::SquadLockStateUpdated(class AHDSquadState* SourceSquad, bool bNewLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "SquadLockStateUpdated");

	Params::DeployMenu_SquadListBase_SquadLockStateUpdated Parms{};

	Parms.SourceSquad = SourceSquad;
	Parms.bNewLocked = bNewLocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadListBase.SquadNameChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// class AHDSquadState*                    SourceSquad                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             NewName                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             PrevName                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDeployMenu_SquadListBase::SquadNameChanged(class AHDSquadState* SourceSquad, class FText& NewName, class FText& PrevName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "SquadNameChanged");

	Params::DeployMenu_SquadListBase_SquadNameChanged Parms{};

	Parms.SourceSquad = SourceSquad;
	Parms.NewName = NewName;
	Parms.PrevName = PrevName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadListBase.GetParentPlatoonStateFromData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlatoonState*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDPlatoonState* UDeployMenu_SquadListBase::GetParentPlatoonStateFromData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "GetParentPlatoonStateFromData");

	Params::DeployMenu_SquadListBase_GetParentPlatoonStateFromData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.DeployMenu_SquadListBase.GetSquadStateFromData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDSquadState*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDSquadState* UDeployMenu_SquadListBase::GetSquadStateFromData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadListBase", "GetSquadStateFromData");

	Params::DeployMenu_SquadListBase_GetSquadStateFromData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.DeployMenu_SquadMemberListingBase.MemberPlayerNameChanged
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewPlayerName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadMemberListingBase::MemberPlayerNameChanged(class APlayerState* PlayerState, const class FString& NewPlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadMemberListingBase", "MemberPlayerNameChanged");

	Params::DeployMenu_SquadMemberListingBase_MemberPlayerNameChanged Parms{};

	Parms.PlayerState = PlayerState;
	Parms.NewPlayerName = std::move(NewPlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadMemberListingBase.OnMemberPlayerNameUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FString                           NewPlayerName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadMemberListingBase::OnMemberPlayerNameUpdated(const class FString& NewPlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadMemberListingBase", "OnMemberPlayerNameUpdated");

	Params::DeployMenu_SquadMemberListingBase_OnMemberPlayerNameUpdated Parms{};

	Parms.NewPlayerName = std::move(NewPlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.DeployMenu_SquadMemberListingBase.OnMemberSet
// (Event, Protected, BlueprintEvent)

void UDeployMenu_SquadMemberListingBase::OnMemberSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadMemberListingBase", "OnMemberSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.DeployMenu_SquadMemberListingBase.SetupMember
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USquadMemberInfo*                 InMemberData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadMemberListingBase::SetupMember(class USquadMemberInfo* InMemberData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadMemberListingBase", "SetupMember");

	Params::DeployMenu_SquadMemberListingBase_SetupMember Parms{};

	Parms.InMemberData = InMemberData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadMemberListingBase.GetParentPlatoonStateFromData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlatoonState*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDPlatoonState* UDeployMenu_SquadMemberListingBase::GetParentPlatoonStateFromData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadMemberListingBase", "GetParentPlatoonStateFromData");

	Params::DeployMenu_SquadMemberListingBase_GetParentPlatoonStateFromData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.DeployMenu_SquadMemberListingBase.GetParentSquadStateFromData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDSquadState*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDSquadState* UDeployMenu_SquadMemberListingBase::GetParentSquadStateFromData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadMemberListingBase", "GetParentSquadStateFromData");

	Params::DeployMenu_SquadMemberListingBase_GetParentSquadStateFromData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.DeployMenu_SquadMemberListingBase.GetPlayerStateFromData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDPlayerState* UDeployMenu_SquadMemberListingBase::GetPlayerStateFromData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadMemberListingBase", "GetPlayerStateFromData");

	Params::DeployMenu_SquadMemberListingBase_GetPlayerStateFromData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDScoreboardListingRowBase.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UHDScoreboardBase*                InParentMenu                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADFBasePlayerState*               InPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInRefreshListingOnTick                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDScoreboardListingRowBase::Init(class UHDScoreboardBase* InParentMenu, class ADFBasePlayerState* InPlayerState, bool bInRefreshListingOnTick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDScoreboardListingRowBase", "Init");

	Params::HDScoreboardListingRowBase_Init Parms{};

	Parms.InParentMenu = InParentMenu;
	Parms.InPlayerState = InPlayerState;
	Parms.bInRefreshListingOnTick = bInRefreshListingOnTick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDScoreboardListingRowBase.OnMutePlayer
// (Final, Native, Private)

void UHDScoreboardListingRowBase::OnMutePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDScoreboardListingRowBase", "OnMutePlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDScoreboardListingRowBase.ReceivePlayerVoiceStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EPlayerVoiceState                       NewVoiceState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDScoreboardListingRowBase::ReceivePlayerVoiceStateChanged(EPlayerVoiceState NewVoiceState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDScoreboardListingRowBase", "ReceivePlayerVoiceStateChanged");

	Params::HDScoreboardListingRowBase_ReceivePlayerVoiceStateChanged Parms{};

	Parms.NewVoiceState = NewVoiceState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDScoreboardListingRowBase.ReceiveRefreshListing
// (Event, Protected, BlueprintEvent)

void UHDScoreboardListingRowBase::ReceiveRefreshListing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDScoreboardListingRowBase", "ReceiveRefreshListing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDScoreboardListingRowBase.RefreshListing
// (Native, Public, BlueprintCallable)

void UHDScoreboardListingRowBase::RefreshListing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDScoreboardListingRowBase", "RefreshListing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDScoreboardListingRowBase.SetVoiceStateIcon
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UTexture2D*                       NewIcon                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDScoreboardListingRowBase::SetVoiceStateIcon(class UTexture2D* NewIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDScoreboardListingRowBase", "SetVoiceStateIcon");

	Params::HDScoreboardListingRowBase_SetVoiceStateIcon Parms{};

	Parms.NewIcon = NewIcon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDScoreboardListingRowBase.GetCurrentPing
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHDScoreboardListingRowBase::GetCurrentPing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDScoreboardListingRowBase", "GetCurrentPing");

	Params::HDScoreboardListingRowBase_GetCurrentPing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDScoreboardListingRowBase.GetIconForVoiceState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlayerVoiceState                       VoiceState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UHDScoreboardListingRowBase::GetIconForVoiceState(EPlayerVoiceState VoiceState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDScoreboardListingRowBase", "GetIconForVoiceState");

	Params::HDScoreboardListingRowBase_GetIconForVoiceState Parms{};

	Parms.VoiceState = VoiceState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDScoreboardListingRowBase.HasInitialized
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDScoreboardListingRowBase::HasInitialized() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDScoreboardListingRowBase", "HasInitialized");

	Params::HDScoreboardListingRowBase_HasInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.DeployMenu_SquadSelectionWidgetBase.DeconstructPlatoon
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UPlatoonListEntry*                RemovedPlatoonData                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RemovedPlatoonIdx                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadSelectionWidgetBase::DeconstructPlatoon(class UPlatoonListEntry* RemovedPlatoonData, int32 RemovedPlatoonIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadSelectionWidgetBase", "DeconstructPlatoon");

	Params::DeployMenu_SquadSelectionWidgetBase_DeconstructPlatoon Parms{};

	Parms.RemovedPlatoonData = RemovedPlatoonData;
	Parms.RemovedPlatoonIdx = RemovedPlatoonIdx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.DeployMenu_SquadSelectionWidgetBase.GeneratePlatoon
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UPlatoonListEntry*                PlatoonData                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadSelectionWidgetBase::GeneratePlatoon(class UPlatoonListEntry* PlatoonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadSelectionWidgetBase", "GeneratePlatoon");

	Params::DeployMenu_SquadSelectionWidgetBase_GeneratePlatoon Parms{};

	Parms.PlatoonData = PlatoonData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.DeployMenu_SquadSelectionWidgetBase.OnSquadSelectionSet
// (Event, Protected, BlueprintEvent)

void UDeployMenu_SquadSelectionWidgetBase::OnSquadSelectionSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadSelectionWidgetBase", "OnSquadSelectionSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.DeployMenu_SquadSelectionWidgetBase.PlatoonAddedToTeam
// (Final, Native, Private)
// Parameters:
// class AHDTeamState*                     SourceTeam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlatoonState*                  NewPlatoon                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadSelectionWidgetBase::PlatoonAddedToTeam(class AHDTeamState* SourceTeam, class AHDPlatoonState* NewPlatoon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadSelectionWidgetBase", "PlatoonAddedToTeam");

	Params::DeployMenu_SquadSelectionWidgetBase_PlatoonAddedToTeam Parms{};

	Parms.SourceTeam = SourceTeam;
	Parms.NewPlatoon = NewPlatoon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadSelectionWidgetBase.PlatoonPreRemoveFromTeam
// (Final, Native, Private)
// Parameters:
// class AHDTeamState*                     SourceTeam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlatoonState*                  PlatoonToBeRemoved                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadSelectionWidgetBase::PlatoonPreRemoveFromTeam(class AHDTeamState* SourceTeam, class AHDPlatoonState* PlatoonToBeRemoved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadSelectionWidgetBase", "PlatoonPreRemoveFromTeam");

	Params::DeployMenu_SquadSelectionWidgetBase_PlatoonPreRemoveFromTeam Parms{};

	Parms.SourceTeam = SourceTeam;
	Parms.PlatoonToBeRemoved = PlatoonToBeRemoved;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadSelectionWidgetBase.RepopulateSquadSelection
// (Final, Native, Public, BlueprintCallable)

void UDeployMenu_SquadSelectionWidgetBase::RepopulateSquadSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadSelectionWidgetBase", "RepopulateSquadSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.DeployMenu_SquadSelectionWidgetBase.SetupSquadSelection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AHDTeamState*                     InPlatoonTeamState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployMenu_SquadSelectionWidgetBase::SetupSquadSelection(class AHDTeamState* InPlatoonTeamState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployMenu_SquadSelectionWidgetBase", "SetupSquadSelection");

	Params::DeployMenu_SquadSelectionWidgetBase_SetupSquadSelection Parms{};

	Parms.InPlatoonTeamState = InPlatoonTeamState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICaptureHandler.EstablishNewControlPoint
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAICaptureHandler::EstablishNewControlPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "EstablishNewControlPoint");

	Params::HDAICaptureHandler_EstablishNewControlPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICaptureHandler.GetCurrentCPLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UHDAICaptureHandler::GetCurrentCPLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "GetCurrentCPLocation");

	Params::HDAICaptureHandler_GetCurrentCPLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICaptureHandler.GetTotalNumberOfCapturePoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHDAICaptureHandler::GetTotalNumberOfCapturePoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "GetTotalNumberOfCapturePoints");

	Params::HDAICaptureHandler_GetTotalNumberOfCapturePoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICaptureHandler.SetCurrentCaptureMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHDAICaptureMode                        NewCaptureMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAICaptureHandler::SetCurrentCaptureMode(EHDAICaptureMode NewCaptureMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "SetCurrentCaptureMode");

	Params::HDAICaptureHandler_SetCurrentCaptureMode Parms{};

	Parms.NewCaptureMode = NewCaptureMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICaptureHandler.SetCurrentCP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AHDBaseCapturePoint*              InCurrentCP                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAICaptureHandler::SetCurrentCP(class AHDBaseCapturePoint* InCurrentCP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "SetCurrentCP");

	Params::HDAICaptureHandler_SetCurrentCP Parms{};

	Parms.InCurrentCP = InCurrentCP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICaptureHandler.FindAvailableControlPointsOfType
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHDAICaptureMode                        InCaptureMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AHDBaseCapturePoint*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TArray<class AHDBaseCapturePoint*> UHDAICaptureHandler::FindAvailableControlPointsOfType(EHDAICaptureMode InCaptureMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "FindAvailableControlPointsOfType");

	Params::HDAICaptureHandler_FindAvailableControlPointsOfType Parms{};

	Parms.InCaptureMode = InCaptureMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICaptureHandler.FindAvailableControlPointsOfTypeV1
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHDAICaptureMode                        InCaptureMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AHDBaseCapturePoint*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TArray<class AHDBaseCapturePoint*> UHDAICaptureHandler::FindAvailableControlPointsOfTypeV1(EHDAICaptureMode InCaptureMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "FindAvailableControlPointsOfTypeV1");

	Params::HDAICaptureHandler_FindAvailableControlPointsOfTypeV1 Parms{};

	Parms.InCaptureMode = InCaptureMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICaptureHandler.FindAvailableControlPointsOfTypeV2
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHDAICaptureMode                        InCaptureMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AHDBaseCapturePoint*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TArray<class AHDBaseCapturePoint*> UHDAICaptureHandler::FindAvailableControlPointsOfTypeV2(EHDAICaptureMode InCaptureMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "FindAvailableControlPointsOfTypeV2");

	Params::HDAICaptureHandler_FindAvailableControlPointsOfTypeV2 Parms{};

	Parms.InCaptureMode = InCaptureMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICaptureHandler.FindAvailableControlPointsOfTypeV3
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHDAICaptureMode                        InCaptureMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AHDBaseCapturePoint*>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TArray<class AHDBaseCapturePoint*> UHDAICaptureHandler::FindAvailableControlPointsOfTypeV3(EHDAICaptureMode InCaptureMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "FindAvailableControlPointsOfTypeV3");

	Params::HDAICaptureHandler_FindAvailableControlPointsOfTypeV3 Parms{};

	Parms.InCaptureMode = InCaptureMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICaptureHandler.FindControlPointClosestToPawn
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AHDBaseCapturePoint*>      CPs                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDBaseCapturePoint*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDBaseCapturePoint* UHDAICaptureHandler::FindControlPointClosestToPawn(TArray<class AHDBaseCapturePoint*>& CPs) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "FindControlPointClosestToPawn");

	Params::HDAICaptureHandler_FindControlPointClosestToPawn Parms{};

	Parms.CPs = std::move(CPs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICaptureHandler.FindControlPointRandom
// (Final, Native, Private, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AHDBaseCapturePoint*>      CPs                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDBaseCapturePoint*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDBaseCapturePoint* UHDAICaptureHandler::FindControlPointRandom(TArray<class AHDBaseCapturePoint*>& CPs) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "FindControlPointRandom");

	Params::HDAICaptureHandler_FindControlPointRandom Parms{};

	Parms.CPs = std::move(CPs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICaptureHandler.FindControlPointToCapture
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDBaseCapturePoint*              OutFoundCP                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAICaptureHandler::FindControlPointToCapture(class AHDBaseCapturePoint** OutFoundCP) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "FindControlPointToCapture");

	Params::HDAICaptureHandler_FindControlPointToCapture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFoundCP != nullptr)
		*OutFoundCP = Parms.OutFoundCP;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICaptureHandler.GetStartSpotClosestToControlPoint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           InCapturePoint                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UHDAICaptureHandler::GetStartSpotClosestToControlPoint(class AActor* InCapturePoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "GetStartSpotClosestToControlPoint");

	Params::HDAICaptureHandler_GetStartSpotClosestToControlPoint Parms{};

	Parms.InCapturePoint = InCapturePoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICaptureHandler.ShouldEstablishNewControlPoint
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAICaptureHandler::ShouldEstablishNewControlPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICaptureHandler", "ShouldEstablishNewControlPoint");

	Params::HDAICaptureHandler_ShouldEstablishNewControlPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSQCommChannelState.GetChannelNameForSquad
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AHDSquadState*                    Squad                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UHDSQCommChannelState::GetChannelNameForSquad(class AHDSquadState* Squad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDSQCommChannelState", "GetChannelNameForSquad");

	Params::HDSQCommChannelState_GetChannelNameForSquad Parms{};

	Parms.Squad = Squad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSQCommChannelState.SetupSQChannelState
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AHDSquadState*                    ForSquadState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDSQCommChannelState::SetupSQChannelState(class AHDSquadState* ForSquadState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSQCommChannelState", "SetupSQChannelState");

	Params::HDSQCommChannelState_SetupSQChannelState Parms{};

	Parms.ForSquadState = ForSquadState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIAimingHandler.AimAtCurrentTarget
// (Final, Native, Protected, BlueprintCallable)

void UHDAIAimingHandler::AimAtCurrentTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "AimAtCurrentTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIAimingHandler.CalcAimingDirection
// (Final, Native, Protected, BlueprintCallable)

void UHDAIAimingHandler::CalcAimingDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "CalcAimingDirection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIAimingHandler.CheckForTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAIStimulus                      Stimulus                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIAimingHandler::CheckForTarget(class AActor* TargetActor, const struct FAIStimulus& Stimulus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "CheckForTarget");

	Params::HDAIAimingHandler_CheckForTarget Parms{};

	Parms.TargetActor = TargetActor;
	Parms.Stimulus = std::move(Stimulus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIAimingHandler.EstablishNewTargetFromPerception
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UAISense>             SenseToUse                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIAimingHandler::EstablishNewTargetFromPerception(TSubclassOf<class UAISense>& SenseToUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "EstablishNewTargetFromPerception");

	Params::HDAIAimingHandler_EstablishNewTargetFromPerception Parms{};

	Parms.SenseToUse = SenseToUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIAimingHandler.MakeNoEnemyFocalPoint
// (Final, Native, Protected, BlueprintCallable)

void UHDAIAimingHandler::MakeNoEnemyFocalPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "MakeNoEnemyFocalPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIAimingHandler.SetEnableNoEnemyLookAround
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInEnableNoEnemyLookAround                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIAimingHandler::SetEnableNoEnemyLookAround(bool bInEnableNoEnemyLookAround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "SetEnableNoEnemyLookAround");

	Params::HDAIAimingHandler_SetEnableNoEnemyLookAround Parms{};

	Parms.bInEnableNoEnemyLookAround = bInEnableNoEnemyLookAround;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIAimingHandler.ShouldChangeNoEnemyFocalPoint
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIAimingHandler::ShouldChangeNoEnemyFocalPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "ShouldChangeNoEnemyFocalPoint");

	Params::HDAIAimingHandler_ShouldChangeNoEnemyFocalPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIAimingHandler.SuggestProjectileVelocity
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          TossVelocity                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TossSpeed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIAimingHandler::SuggestProjectileVelocity(struct FVector* TossVelocity, const struct FVector& StartLocation, const struct FVector& EndLocation, float TossSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "SuggestProjectileVelocity");

	Params::HDAIAimingHandler_SuggestProjectileVelocity Parms{};

	Parms.StartLocation = std::move(StartLocation);
	Parms.EndLocation = std::move(EndLocation);
	Parms.TossSpeed = TossSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TossVelocity != nullptr)
		*TossVelocity = std::move(Parms.TossVelocity);

	return Parms.ReturnValue;
}


// Function HDMain.HDAIAimingHandler.GetActorStimulusData
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           InActor                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutStrength                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutAge                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIAimingHandler::GetActorStimulusData(class AActor* InActor, struct FVector* OutLocation, float* OutStrength, float* OutAge) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "GetActorStimulusData");

	Params::HDAIAimingHandler_GetActorStimulusData Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	if (OutStrength != nullptr)
		*OutStrength = Parms.OutStrength;

	if (OutAge != nullptr)
		*OutAge = Parms.OutAge;
}


// Function HDMain.HDAIAimingHandler.GetEnableNoEnemyLookAround
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIAimingHandler::GetEnableNoEnemyLookAround() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "GetEnableNoEnemyLookAround");

	Params::HDAIAimingHandler_GetEnableNoEnemyLookAround Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIAimingHandler.GetIsNewTargetMoreRelevant
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   OldTargetStrength                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewTargetStrength                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIAimingHandler::GetIsNewTargetMoreRelevant(float OldTargetStrength, float NewTargetStrength) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "GetIsNewTargetMoreRelevant");

	Params::HDAIAimingHandler_GetIsNewTargetMoreRelevant Parms{};

	Parms.OldTargetStrength = OldTargetStrength;
	Parms.NewTargetStrength = NewTargetStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIAimingHandler.GetNoEnemyFocalPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UHDAIAimingHandler::GetNoEnemyFocalPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "GetNoEnemyFocalPoint");

	Params::HDAIAimingHandler_GetNoEnemyFocalPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIAimingHandler.HasValidCustomAimingTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIAimingHandler::HasValidCustomAimingTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "HasValidCustomAimingTarget");

	Params::HDAIAimingHandler_HasValidCustomAimingTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIAimingHandler.IsAimingAtTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIAimingHandler::IsAimingAtTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "IsAimingAtTarget");

	Params::HDAIAimingHandler_IsAimingAtTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIAimingHandler.IsCandidateTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ActorToCheck                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIAimingHandler::IsCandidateTarget(class AActor* ActorToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIAimingHandler", "IsCandidateTarget");

	Params::HDAIAimingHandler_IsCandidateTarget Parms{};

	Parms.ActorToCheck = ActorToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIBehaviorStateBase.CanEnterState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIBehaviorStateBase::CanEnterState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorStateBase", "CanEnterState");

	Params::HDAIBehaviorStateBase_CanEnterState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIBehaviorStateBase.CanExitState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIBehaviorStateBase::CanExitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorStateBase", "CanExitState");

	Params::HDAIBehaviorStateBase_CanExitState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIBehaviorStateBase.CanUpdateState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIBehaviorStateBase::CanUpdateState(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorStateBase", "CanUpdateState");

	Params::HDAIBehaviorStateBase_CanUpdateState Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIBehaviorStateBase.EnterState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UHDAIBehaviorStateBase::EnterState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorStateBase", "EnterState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorStateBase.ExitCurrentSubState
// (Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIBehaviorStateBase::ExitCurrentSubState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorStateBase", "ExitCurrentSubState");

	Params::HDAIBehaviorStateBase_ExitCurrentSubState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIBehaviorStateBase.ExitState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UHDAIBehaviorStateBase::ExitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorStateBase", "ExitState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorStateBase.Init
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHDAIController*                  InController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHDGOAPComponent*                 InGOAPComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHDAIBehaviorStateBase*           InParentState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIBehaviorStateBase::Init(class AHDAIController* InController, class UHDGOAPComponent* InGOAPComponent, class UHDAIBehaviorStateBase* InParentState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorStateBase", "Init");

	Params::HDAIBehaviorStateBase_Init Parms{};

	Parms.InController = InController;
	Parms.InGOAPComponent = InGOAPComponent;
	Parms.InParentState = InParentState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorStateBase.ResetUpdateTimer
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   InTimerInterval                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIBehaviorStateBase::ResetUpdateTimer(float InTimerInterval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorStateBase", "ResetUpdateTimer");

	Params::HDAIBehaviorStateBase_ResetUpdateTimer Parms{};

	Parms.InTimerInterval = InTimerInterval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorStateBase.SwitchToSubState
// (Native, Public, BlueprintCallable)
// Parameters:
// class UHDAIBehaviorStateBase*           InNewState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIBehaviorStateBase::SwitchToSubState(class UHDAIBehaviorStateBase* InNewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorStateBase", "SwitchToSubState");

	Params::HDAIBehaviorStateBase_SwitchToSubState Parms{};

	Parms.InNewState = InNewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIBehaviorStateBase.UpdateCurrentSubState
// (Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIBehaviorStateBase::UpdateCurrentSubState(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorStateBase", "UpdateCurrentSubState");

	Params::HDAIBehaviorStateBase_UpdateCurrentSubState Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIBehaviorStateBase.UpdateState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIBehaviorStateBase::UpdateState(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorStateBase", "UpdateState");

	Params::HDAIBehaviorStateBase_UpdateState Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCombat.FindAttackSpot
// (Native, Public, BlueprintCallable)

void UHDAIBehState_BasicAASCombat::FindAttackSpot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCombat", "FindAttackSpot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCombat.FindSafeSpot
// (Native, Public, BlueprintCallable)

void UHDAIBehState_BasicAASCombat::FindSafeSpot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCombat", "FindSafeSpot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCombat.HandleCombatRepositioning
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_BasicAASCombat::HandleCombatRepositioning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCombat", "HandleCombatRepositioning");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCombat.HandleExitCombatStateTimer
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIBehState_BasicAASCombat::HandleExitCombatStateTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCombat", "HandleExitCombatStateTimer");

	Params::HDAIBehState_BasicAASCombat_HandleExitCombatStateTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIBehState_BasicAASCombat.IsValidAttackSpot
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InAttackSpot                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIBehState_BasicAASCombat::IsValidAttackSpot(struct FVector& InAttackSpot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCombat", "IsValidAttackSpot");

	Params::HDAIBehState_BasicAASCombat_IsValidAttackSpot Parms{};

	Parms.InAttackSpot = std::move(InAttackSpot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIBehState_BasicAASCombat.IsValidSafeSpot
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InSafeSpot                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIBehState_BasicAASCombat::IsValidSafeSpot(struct FVector& InSafeSpot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCombat", "IsValidSafeSpot");

	Params::HDAIBehState_BasicAASCombat_IsValidSafeSpot Parms{};

	Parms.InSafeSpot = std::move(InSafeSpot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIBehState_BasicAASCombat.ProcessCombatLocations
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_BasicAASCombat::ProcessCombatLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCombat", "ProcessCombatLocations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCombat.StartAttacking
// (Native, Public, BlueprintCallable)

void UHDAIBehState_BasicAASCombat::StartAttacking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCombat", "StartAttacking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCombat.StartCombatRepositioning
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InMoveTarget                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIBehState_BasicAASCombat::StartCombatRepositioning(const struct FVector& InMoveTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCombat", "StartCombatRepositioning");

	Params::HDAIBehState_BasicAASCombat_StartCombatRepositioning Parms{};

	Parms.InMoveTarget = std::move(InMoveTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCombat.StartSafespotting
// (Native, Public, BlueprintCallable)

void UHDAIBehState_BasicAASCombat::StartSafespotting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCombat", "StartSafespotting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDURLStatics.GetDisableKitRestrictionsOptionName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHDURLStatics::GetDisableKitRestrictionsOptionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDURLStatics", "GetDisableKitRestrictionsOptionName");

	Params::HDURLStatics_GetDisableKitRestrictionsOptionName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDURLStatics.GetFactionOptionName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EHDTeam                                 Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHDURLStatics::GetFactionOptionName(EHDTeam Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDURLStatics", "GetFactionOptionName");

	Params::HDURLStatics_GetFactionOptionName Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDURLStatics.GetNumBotsOptionName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EHDTeam                                 Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHDURLStatics::GetNumBotsOptionName(EHDTeam Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDURLStatics", "GetNumBotsOptionName");

	Params::HDURLStatics_GetNumBotsOptionName Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDURLStatics.GetNumTicketsOptionName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EHDTeam                                 Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHDURLStatics::GetNumTicketsOptionName(EHDTeam Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDURLStatics", "GetNumTicketsOptionName");

	Params::HDURLStatics_GetNumTicketsOptionName Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIBehaviorHandler.CalcThreatLevels
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehaviorHandler::CalcThreatLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "CalcThreatLevels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorHandler.EnterCurrentBehaviorState
// (Native, Protected, BlueprintCallable)

void UHDAIBehaviorHandler::EnterCurrentBehaviorState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "EnterCurrentBehaviorState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorHandler.ExitCurrentBehaviorState
// (Native, Protected, BlueprintCallable)

void UHDAIBehaviorHandler::ExitCurrentBehaviorState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "ExitCurrentBehaviorState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorHandler.HandleBehaviorStates
// (Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIBehaviorHandler::HandleBehaviorStates(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "HandleBehaviorStates");

	Params::HDAIBehaviorHandler_HandleBehaviorStates Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorHandler.OnOwnerDeath
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class APawn*                            VictimPawn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      VictimController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   KillingDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class APawn*                            InstigatingPawn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIBehaviorHandler::OnOwnerDeath(class APawn* VictimPawn, class AController* VictimController, float KillingDamage, struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "OnOwnerDeath");

	Params::HDAIBehaviorHandler_OnOwnerDeath Parms{};

	Parms.VictimPawn = VictimPawn;
	Parms.VictimController = VictimController;
	Parms.KillingDamage = KillingDamage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.InstigatingPawn = InstigatingPawn;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorHandler.ReceiveHitDamage
// (Final, Native, Public, BlueprintCallable)

void UHDAIBehaviorHandler::ReceiveHitDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "ReceiveHitDamage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorHandler.ReceiveSuppression
// (Final, Native, Public, BlueprintCallable)

void UHDAIBehaviorHandler::ReceiveSuppression()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "ReceiveSuppression");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorHandler.StartCombatBehaviorState
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InCombatTarget                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InNavigationAnchor                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIBehaviorHandler::StartCombatBehaviorState(const struct FVector& InCombatTarget, const struct FVector& InNavigationAnchor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "StartCombatBehaviorState");

	Params::HDAIBehaviorHandler_StartCombatBehaviorState Parms{};

	Parms.InCombatTarget = std::move(InCombatTarget);
	Parms.InNavigationAnchor = std::move(InNavigationAnchor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorHandler.StartCombatRepositioning
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InMoveTarget                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIBehaviorHandler::StartCombatRepositioning(const struct FVector& InMoveTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "StartCombatRepositioning");

	Params::HDAIBehaviorHandler_StartCombatRepositioning Parms{};

	Parms.InMoveTarget = std::move(InMoveTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorHandler.StartMoveToObjectiveBehaviorState
// (Native, Public, BlueprintCallable)

void UHDAIBehaviorHandler::StartMoveToObjectiveBehaviorState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "StartMoveToObjectiveBehaviorState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorHandler.UpdateCurrentBehaviorState
// (Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIBehaviorHandler::UpdateCurrentBehaviorState(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "UpdateCurrentBehaviorState");

	Params::HDAIBehaviorHandler_UpdateCurrentBehaviorState Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehaviorHandler.GetIsBeingHit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIBehaviorHandler::GetIsBeingHit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "GetIsBeingHit");

	Params::HDAIBehaviorHandler_GetIsBeingHit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIBehaviorHandler.GetIsUnderSuppression
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIBehaviorHandler::GetIsUnderSuppression() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehaviorHandler", "GetIsUnderSuppression");

	Params::HDAIBehaviorHandler_GetIsUnderSuppression Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDServerListView.SetItemFilterRules
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<TSubclassOf<class UHDServerListFilterRule>, struct FHDFilterRuleParams>FilterRules                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHDServerListView::SetItemFilterRules(TMap<TSubclassOf<class UHDServerListFilterRule>, struct FHDFilterRuleParams>& FilterRules)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDServerListView", "SetItemFilterRules");

	Params::HDServerListView_SetItemFilterRules Parms{};

	Parms.FilterRules = std::move(FilterRules);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDServerListView.SetItemSortAscending
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSortAscending                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDServerListView::SetItemSortAscending(bool bSortAscending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDServerListView", "SetItemSortAscending");

	Params::HDServerListView_SetItemSortAscending Parms{};

	Parms.bSortAscending = bSortAscending;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDServerListView.SetItemSortBy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHDServerListSortBy                     SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDServerListView::SetItemSortBy(EHDServerListSortBy SortBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDServerListView", "SetItemSortBy");

	Params::HDServerListView_SetItemSortBy Parms{};

	Parms.SortBy = SortBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDServerListView.SortListItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSortAscending                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDServerListSortBy                     SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDServerListView::SortListItems(bool bSortAscending, EHDServerListSortBy SortBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDServerListView", "SortListItems");

	Params::HDServerListView_SortListItems Parms{};

	Parms.bSortAscending = bSortAscending;
	Parms.SortBy = SortBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDServerListView.DoesFilterExcludeListItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          Item                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDServerListView::DoesFilterExcludeListItem(class UObject* Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDServerListView", "DoesFilterExcludeListItem");

	Params::HDServerListView_DoesFilterExcludeListItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDServerListView.GetDesiredEntryPaddingForItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin UHDServerListView::GetDesiredEntryPaddingForItem(class UObject* Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDServerListView", "GetDesiredEntryPaddingForItem");

	Params::HDServerListView_GetDesiredEntryPaddingForItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDServerListView.GetEntrySpacing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHDServerListView::GetEntrySpacing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDServerListView", "GetEntrySpacing");

	Params::HDServerListView_GetEntrySpacing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDTeamCommChannelState.GetChannelNameForCommand
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AHDTeamState*                     CmdTeam                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UHDTeamCommChannelState::GetChannelNameForCommand(class AHDTeamState* CmdTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDTeamCommChannelState", "GetChannelNameForCommand");

	Params::HDTeamCommChannelState_GetChannelNameForCommand Parms{};

	Parms.CmdTeam = CmdTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDTeamCommChannelState.GetChannelNameForTeam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AHDTeamState*                     Team                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UHDTeamCommChannelState::GetChannelNameForTeam(class AHDTeamState* Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDTeamCommChannelState", "GetChannelNameForTeam");

	Params::HDTeamCommChannelState_GetChannelNameForTeam Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDTeamCommChannelState.SetupTeamChannelState
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AHDTeamState*                     ForTeamState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDTeamCommChannelState::SetupTeamChannelState(class AHDTeamState* ForTeamState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamCommChannelState", "SetupTeamChannelState");

	Params::HDTeamCommChannelState_SetupTeamChannelState Parms{};

	Parms.ForTeamState = ForTeamState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_Reposition.HandleSprinting
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_Reposition::HandleSprinting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_Reposition", "HandleSprinting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_Reposition.StartSprinting
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_Reposition::StartSprinting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_Reposition", "StartSprinting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_Reposition.StopSprinting
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_Reposition::StopSprinting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_Reposition", "StopSprinting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_Attacking.HandleAttacking
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_Attacking::HandleAttacking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_Attacking", "HandleAttacking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAAS.SelectBehaviorState
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_BasicAAS::SelectBehaviorState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAAS", "SelectBehaviorState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAAS.StartCaptureState
// (Native, Public, BlueprintCallable)

void UHDAIBehState_BasicAAS::StartCaptureState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAAS", "StartCaptureState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAAS.StartCombatRepositioning
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InMoveTarget                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIBehState_BasicAAS::StartCombatRepositioning(const struct FVector& InMoveTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAAS", "StartCombatRepositioning");

	Params::HDAIBehState_BasicAAS_StartCombatRepositioning Parms{};

	Parms.InMoveTarget = std::move(InMoveTarget);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAAS.StartCombatState
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InCombatTarget                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InNavigationAnchor                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIBehState_BasicAAS::StartCombatState(const struct FVector& InCombatTarget, const struct FVector& InNavigationAnchor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAAS", "StartCombatState");

	Params::HDAIBehState_BasicAAS_StartCombatState Parms{};

	Parms.InCombatTarget = std::move(InCombatTarget);
	Parms.InNavigationAnchor = std::move(InNavigationAnchor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCapture.AdvanceToObjective
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_BasicAASCapture::AdvanceToObjective()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCapture", "AdvanceToObjective");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCapture.GroupLeaderDecisionMaking
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_BasicAASCapture::GroupLeaderDecisionMaking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCapture", "GroupLeaderDecisionMaking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCapture.GroupMemberDecisionMaking
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_BasicAASCapture::GroupMemberDecisionMaking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCapture", "GroupMemberDecisionMaking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCapture.HandleSprinting
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_BasicAASCapture::HandleSprinting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCapture", "HandleSprinting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCapture.LoneWolfDecisionMaking
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_BasicAASCapture::LoneWolfDecisionMaking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCapture", "LoneWolfDecisionMaking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCapture.PatrolAtObjective
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_BasicAASCapture::PatrolAtObjective()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCapture", "PatrolAtObjective");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCapture.StartCapturingTheObjective
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_BasicAASCapture::StartCapturingTheObjective()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCapture", "StartCapturingTheObjective");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCapture.StartSprinting
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_BasicAASCapture::StartSprinting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCapture", "StartSprinting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_BasicAASCapture.StopSprinting
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_BasicAASCapture::StopSprinting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_BasicAASCapture", "StopSprinting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIBehState_SafeSpotting.HandleSafeSpotting
// (Final, Native, Protected, BlueprintCallable)

void UHDAIBehState_SafeSpotting::HandleSafeSpotting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIBehState_SafeSpotting", "HandleSafeSpotting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.AddSuppressionSource
// (Native, Protected, BlueprintCallable)
// Parameters:
// struct FHDAISuppressionSource           InSuppressionSource                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UHDAICombatHandler::AddSuppressionSource(const struct FHDAISuppressionSource& InSuppressionSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "AddSuppressionSource");

	Params::HDAICombatHandler_AddSuppressionSource Parms{};

	Parms.InSuppressionSource = std::move(InSuppressionSource);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.ClearCombatTargetLocation
// (Final, Native, Public, BlueprintCallable)

void UHDAICombatHandler::ClearCombatTargetLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "ClearCombatTargetLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.ClearCustomCombatTargetLocation
// (Final, Native, Public, BlueprintCallable)

void UHDAICombatHandler::ClearCustomCombatTargetLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "ClearCustomCombatTargetLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.GetMostRelevantSuppressionSource
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UHDAICombatHandler::GetMostRelevantSuppressionSource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "GetMostRelevantSuppressionSource");

	Params::HDAICombatHandler_GetMostRelevantSuppressionSource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICombatHandler.GetOldestSuppressionSource
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UHDAICombatHandler::GetOldestSuppressionSource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "GetOldestSuppressionSource");

	Params::HDAICombatHandler_GetOldestSuppressionSource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICombatHandler.PauseAttack
// (Final, Native, Public, BlueprintCallable)

void UHDAICombatHandler::PauseAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "PauseAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.ReceiveHitDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ADFBaseProjectile*                OtherProjectile                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADFBasePickup*                    Pickup                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAICombatHandler::ReceiveHitDamage(class ADFBaseProjectile* OtherProjectile, class ADFBasePickup* Pickup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "ReceiveHitDamage");

	Params::HDAICombatHandler_ReceiveHitDamage Parms{};

	Parms.OtherProjectile = OtherProjectile;
	Parms.Pickup = Pickup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.ReceiveSuppression
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ADFBaseProjectile*                OtherProjectile                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADFBasePickup*                    Pickup                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAICombatHandler::ReceiveSuppression(class ADFBaseProjectile* OtherProjectile, class ADFBasePickup* Pickup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "ReceiveSuppression");

	Params::HDAICombatHandler_ReceiveSuppression Parms{};

	Parms.OtherProjectile = OtherProjectile;
	Parms.Pickup = Pickup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.Reload
// (Native, Public, BlueprintCallable)
// Parameters:
// class AHDBaseWeapon*                    InWeapon                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAICombatHandler::Reload(class AHDBaseWeapon* InWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "Reload");

	Params::HDAICombatHandler_Reload Parms{};

	Parms.InWeapon = InWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.SetEnemy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewEnemy                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAICombatHandler::SetEnemy(class AActor* NewEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "SetEnemy");

	Params::HDAICombatHandler_SetEnemy Parms{};

	Parms.NewEnemy = NewEnemy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.SetItemAttackParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHDAISpecificItemTypeAttackData  InAttackData                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHDAICombatHandler::SetItemAttackParameters(struct FHDAISpecificItemTypeAttackData& InAttackData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "SetItemAttackParameters");

	Params::HDAICombatHandler_SetItemAttackParameters Parms{};

	Parms.InAttackData = std::move(InAttackData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.SetNextAttackTime
// (Final, Native, Public, BlueprintCallable)

void UHDAICombatHandler::SetNextAttackTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "SetNextAttackTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.SetupEquipmentReferences
// (Final, Native, Public, BlueprintCallable)

void UHDAICombatHandler::SetupEquipmentReferences()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "SetupEquipmentReferences");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.StartAttack
// (Final, Native, Public, BlueprintCallable)

void UHDAICombatHandler::StartAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "StartAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.StopAttack
// (Final, Native, Public, BlueprintCallable)

void UHDAICombatHandler::StopAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "StopAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.StopUsingSpecialtyItem
// (Final, Native, Protected, BlueprintCallable)

void UHDAICombatHandler::StopUsingSpecialtyItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "StopUsingSpecialtyItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.UpdateAttackParameters
// (Final, Native, Public, BlueprintCallable)

void UHDAICombatHandler::UpdateAttackParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "UpdateAttackParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.UpdateEquipmentHandling
// (Final, Native, Public, BlueprintCallable)

void UHDAICombatHandler::UpdateEquipmentHandling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "UpdateEquipmentHandling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.UpdateSuppressionSources
// (Native, Protected, BlueprintCallable)

void UHDAICombatHandler::UpdateSuppressionSources()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "UpdateSuppressionSources");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAICombatHandler.CanAttackEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bCheckFireTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreAmmoReloadCheck                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAICombatHandler::CanAttackEnemy(bool bCheckFireTime, bool bIgnoreAmmoReloadCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "CanAttackEnemy");

	Params::HDAICombatHandler_CanAttackEnemy Parms{};

	Parms.bCheckFireTime = bCheckFireTime;
	Parms.bIgnoreAmmoReloadCheck = bIgnoreAmmoReloadCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICombatHandler.HasAmmoLoaded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAICombatHandler::HasAmmoLoaded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "HasAmmoLoaded");

	Params::HDAICombatHandler_HasAmmoLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICombatHandler.HasValidCombatTargetLocation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAICombatHandler::HasValidCombatTargetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "HasValidCombatTargetLocation");

	Params::HDAICombatHandler_HasValidCombatTargetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICombatHandler.HasValidCustomCombatTargetLocation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAICombatHandler::HasValidCustomCombatTargetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "HasValidCustomCombatTargetLocation");

	Params::HDAICombatHandler_HasValidCustomCombatTargetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICombatHandler.HasValidEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bAliveCheck                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAICombatHandler::HasValidEnemy(bool bAliveCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "HasValidEnemy");

	Params::HDAICombatHandler_HasValidEnemy Parms{};

	Parms.bAliveCheck = bAliveCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAICombatHandler.IsFiring
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAICombatHandler::IsFiring() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAICombatHandler", "IsFiring");

	Params::HDAICombatHandler_IsFiring Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIController.JoinOrCreateSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDAIController::JoinOrCreateSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIController", "JoinOrCreateSquad");

	Params::HDAIController_JoinOrCreateSquad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIController.GetFactionSpecifiedSquadLeaderKit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UHDKit*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHDKit* AHDAIController::GetFactionSpecifiedSquadLeaderKit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIController", "GetFactionSpecifiedSquadLeaderKit");

	Params::HDAIController_GetFactionSpecifiedSquadLeaderKit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIController.GetFactionSpecifiedSquadMemberKit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UHDKit*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHDKit* AHDAIController::GetFactionSpecifiedSquadMemberKit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIController", "GetFactionSpecifiedSquadMemberKit");

	Params::HDAIController_GetFactionSpecifiedSquadMemberKit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIController.GetStartPawnClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class APawn>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class APawn> AHDAIController::GetStartPawnClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIController", "GetStartPawnClass");

	Params::HDAIController_GetStartPawnClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIGroupBehaviorHandler.AllGroupMembersAreOnPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIGroupBehaviorHandler::AllGroupMembersAreOnPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "AllGroupMembersAreOnPoint");

	Params::HDAIGroupBehaviorHandler_AllGroupMembersAreOnPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIGroupBehaviorHandler.BroadcastGroupData
// (Final, Native, Public, BlueprintCallable)

void UHDAIGroupBehaviorHandler::BroadcastGroupData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "BroadcastGroupData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIGroupBehaviorHandler.CountGroupMembers
// (Final, Native, Public, BlueprintCallable)

void UHDAIGroupBehaviorHandler::CountGroupMembers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "CountGroupMembers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIGroupBehaviorHandler.FollowHumanLeader
// (Final, Native, Public, BlueprintCallable)

void UHDAIGroupBehaviorHandler::FollowHumanLeader()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "FollowHumanLeader");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIGroupBehaviorHandler.GetGroupData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FHDAIGroupData                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FHDAIGroupData UHDAIGroupBehaviorHandler::GetGroupData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "GetGroupData");

	Params::HDAIGroupBehaviorHandler_GetGroupData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIGroupBehaviorHandler.GetGroupLeader
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AHDPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDPlayerState* UHDAIGroupBehaviorHandler::GetGroupLeader()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "GetGroupLeader");

	Params::HDAIGroupBehaviorHandler_GetGroupLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIGroupBehaviorHandler.GetGroupMembers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AHDAIController*>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TArray<class AHDAIController*> UHDAIGroupBehaviorHandler::GetGroupMembers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "GetGroupMembers");

	Params::HDAIGroupBehaviorHandler_GetGroupMembers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIGroupBehaviorHandler.InformGroupOnContact
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InCombatTarget                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InNavigationAnchor                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIGroupBehaviorHandler::InformGroupOnContact(const struct FVector& InCombatTarget, const struct FVector& InNavigationAnchor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "InformGroupOnContact");

	Params::HDAIGroupBehaviorHandler_InformGroupOnContact Parms{};

	Parms.InCombatTarget = std::move(InCombatTarget);
	Parms.InNavigationAnchor = std::move(InNavigationAnchor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIGroupBehaviorHandler.InformGroupOnLostContact
// (Final, Native, Public, BlueprintCallable)

void UHDAIGroupBehaviorHandler::InformGroupOnLostContact()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "InformGroupOnLostContact");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIGroupBehaviorHandler.InformLeaderOnContact
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InCombatTarget                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InNavigationAnchor                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIGroupBehaviorHandler::InformLeaderOnContact(const struct FVector& InCombatTarget, const struct FVector& InNavigationAnchor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "InformLeaderOnContact");

	Params::HDAIGroupBehaviorHandler_InformLeaderOnContact Parms{};

	Parms.InCombatTarget = std::move(InCombatTarget);
	Parms.InNavigationAnchor = std::move(InNavigationAnchor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIGroupBehaviorHandler.IsGroupWaitTimeOver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIGroupBehaviorHandler::IsGroupWaitTimeOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "IsGroupWaitTimeOver");

	Params::HDAIGroupBehaviorHandler_IsGroupWaitTimeOver Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIGroupBehaviorHandler.OnOwnerDeath
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class APawn*                            VictimPawn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      VictimController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   KillingDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class APawn*                            InstigatingPawn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIGroupBehaviorHandler::OnOwnerDeath(class APawn* VictimPawn, class AController* VictimController, float KillingDamage, struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "OnOwnerDeath");

	Params::HDAIGroupBehaviorHandler_OnOwnerDeath Parms{};

	Parms.VictimPawn = VictimPawn;
	Parms.VictimController = VictimController;
	Parms.KillingDamage = KillingDamage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.InstigatingPawn = InstigatingPawn;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIGroupBehaviorHandler.RequestGroupDataSync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIGroupBehaviorHandler::RequestGroupDataSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "RequestGroupDataSync");

	Params::HDAIGroupBehaviorHandler_RequestGroupDataSync Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIGroupBehaviorHandler.SetGroupParams
// (Final, Native, Public, BlueprintCallable)

void UHDAIGroupBehaviorHandler::SetGroupParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "SetGroupParams");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIGroupBehaviorHandler.SetupGroupData
// (Final, Native, Public, BlueprintCallable)

void UHDAIGroupBehaviorHandler::SetupGroupData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "SetupGroupData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIGroupBehaviorHandler.StartGroupWaitTime
// (Final, Native, Public, BlueprintCallable)

void UHDAIGroupBehaviorHandler::StartGroupWaitTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "StartGroupWaitTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIGroupBehaviorHandler.SyncGroupData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHDAIGroupData                   InGroupData                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHDAIGroupBehaviorHandler::SyncGroupData(struct FHDAIGroupData& InGroupData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "SyncGroupData");

	Params::HDAIGroupBehaviorHandler_SyncGroupData Parms{};

	Parms.InGroupData = std::move(InGroupData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIGroupBehaviorHandler.GetNumGroupMembersInCombat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHDAIGroupBehaviorHandler::GetNumGroupMembersInCombat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "GetNumGroupMembersInCombat");

	Params::HDAIGroupBehaviorHandler_GetNumGroupMembersInCombat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIGroupBehaviorHandler.GetNumValidGroupMembers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHDAIGroupBehaviorHandler::GetNumValidGroupMembers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIGroupBehaviorHandler", "GetNumValidGroupMembers");

	Params::HDAIGroupBehaviorHandler_GetNumValidGroupMembers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAINavigationHandler.PointsAreEqualXY
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          Vector1                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Vector2                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAINavigationHandler::PointsAreEqualXY(struct FVector& Vector1, struct FVector& Vector2, float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDAINavigationHandler", "PointsAreEqualXY");

	Params::HDAINavigationHandler_PointsAreEqualXY Parms{};

	Parms.Vector1 = std::move(Vector1);
	Parms.Vector2 = std::move(Vector2);
	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAINavigationHandler.CheckPawnStuckStatus
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAINavigationHandler::CheckPawnStuckStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "CheckPawnStuckStatus");

	Params::HDAINavigationHandler_CheckPawnStuckStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAINavigationHandler.GotoLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAINavigationHandler::GotoLocation(struct FVector& InLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "GotoLocation");

	Params::HDAINavigationHandler_GotoLocation Parms{};

	Parms.InLocation = std::move(InLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAINavigationHandler.GotoLocationRandomized
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InRandomizationRadius                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAINavigationHandler::GotoLocationRandomized(struct FVector& InLocation, float InRandomizationRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "GotoLocationRandomized");

	Params::HDAINavigationHandler_GotoLocationRandomized Parms{};

	Parms.InLocation = std::move(InLocation);
	Parms.InRandomizationRadius = InRandomizationRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAINavigationHandler.HandleMoveToFailed
// (Final, Native, Protected, BlueprintCallable)

void UHDAINavigationHandler::HandleMoveToFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "HandleMoveToFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAINavigationHandler.MakeNavPathSegment
// (Final, Native, Public, BlueprintCallable)

void UHDAINavigationHandler::MakeNavPathSegment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "MakeNavPathSegment");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAINavigationHandler.MakeNewMasterNavPath
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InStart                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InDestination                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAINavigationHandler::MakeNewMasterNavPath(const struct FVector& InStart, const struct FVector& InDestination)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "MakeNewMasterNavPath");

	Params::HDAINavigationHandler_MakeNewMasterNavPath Parms{};

	Parms.InStart = std::move(InStart);
	Parms.InDestination = std::move(InDestination);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAINavigationHandler.MakePathToDesiredLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAINavigationHandler::MakePathToDesiredLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "MakePathToDesiredLocation");

	Params::HDAINavigationHandler_MakePathToDesiredLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAINavigationHandler.MoveToLocationFailed
// (Final, Native, Public, BlueprintCallable)

void UHDAINavigationHandler::MoveToLocationFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "MoveToLocationFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAINavigationHandler.OnMoveToFailed
// (Final, Native, Protected, BlueprintCallable)

void UHDAINavigationHandler::OnMoveToFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "OnMoveToFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAINavigationHandler.SetDesiredLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InDesiredLocation                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAINavigationHandler::SetDesiredLocation(struct FVector& InDesiredLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "SetDesiredLocation");

	Params::HDAINavigationHandler_SetDesiredLocation Parms{};

	Parms.InDesiredLocation = std::move(InDesiredLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAINavigationHandler.SetupRVOAvoidance
// (Final, Native, Public, BlueprintCallable)

void UHDAINavigationHandler::SetupRVOAvoidance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "SetupRVOAvoidance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAINavigationHandler.FindNavLocationInsideControlPoint
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDBaseCapturePoint*              CP                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutNavLoc                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAINavigationHandler::FindNavLocationInsideControlPoint(class AHDBaseCapturePoint* CP, struct FVector* OutNavLoc) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "FindNavLocationInsideControlPoint");

	Params::HDAINavigationHandler_FindNavLocationInsideControlPoint Parms{};

	Parms.CP = CP;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNavLoc != nullptr)
		*OutNavLoc = std::move(Parms.OutNavLoc);

	return Parms.ReturnValue;
}


// Function HDMain.HDAINavigationHandler.FixVectorValuesNaN
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          InVector                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRandomize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAINavigationHandler::FixVectorValuesNaN(struct FVector* InVector, bool bRandomize) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "FixVectorValuesNaN");

	Params::HDAINavigationHandler_FixVectorValuesNaN Parms{};

	Parms.bRandomize = bRandomize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InVector != nullptr)
		*InVector = std::move(Parms.InVector);
}


// Function HDMain.HDAINavigationHandler.IsMoving
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAINavigationHandler::IsMoving() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "IsMoving");

	Params::HDAINavigationHandler_IsMoving Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAINavigationHandler.IsNavDataValidForAllControlPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAINavigationHandler::IsNavDataValidForAllControlPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "IsNavDataValidForAllControlPoints");

	Params::HDAINavigationHandler_IsNavDataValidForAllControlPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAINavigationHandler.IsNavigationPossible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAINavigationHandler::IsNavigationPossible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "IsNavigationPossible");

	Params::HDAINavigationHandler_IsNavigationPossible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAINavigationHandler.IsPawnAtDestination
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAINavigationHandler::IsPawnAtDestination() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAINavigationHandler", "IsPawnAtDestination");

	Params::HDAINavigationHandler_IsPawnAtDestination Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIPerceptionComponent.CalcSightStrength
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Distance                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHDAIPerceptionComponent::CalcSightStrength(float Distance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIPerceptionComponent", "CalcSightStrength");

	Params::HDAIPerceptionComponent_CalcSightStrength Parms{};

	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIPerceptionComponent.CanBeSeenFrom
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ObserverLocation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutSeenLocation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfLoSChecksPerformed                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutSightStrength                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           IgnoreActor                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDAIPerceptionComponent::CanBeSeenFrom(struct FVector& ObserverLocation, struct FVector* OutSeenLocation, int32* NumberOfLoSChecksPerformed, float* OutSightStrength, class AActor* IgnoreActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIPerceptionComponent", "CanBeSeenFrom");

	Params::HDAIPerceptionComponent_CanBeSeenFrom Parms{};

	Parms.ObserverLocation = std::move(ObserverLocation);
	Parms.IgnoreActor = IgnoreActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSeenLocation != nullptr)
		*OutSeenLocation = std::move(Parms.OutSeenLocation);

	if (NumberOfLoSChecksPerformed != nullptr)
		*NumberOfLoSChecksPerformed = Parms.NumberOfLoSChecksPerformed;

	if (OutSightStrength != nullptr)
		*OutSightStrength = Parms.OutSightStrength;

	return Parms.ReturnValue;
}


// Function HDMain.HDAIVocalHandler.NotifySurroundingCharacters
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EHDAIVocalizationType                   InVocalType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIVocalHandler::NotifySurroundingCharacters(EHDAIVocalizationType InVocalType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIVocalHandler", "NotifySurroundingCharacters");

	Params::HDAIVocalHandler_NotifySurroundingCharacters Parms{};

	Parms.InVocalType = InVocalType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIVocalHandler.PlayVocalSound
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EHDAIVocalizationType                   InVocalType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIVocalHandler::PlayVocalSound(EHDAIVocalizationType InVocalType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIVocalHandler", "PlayVocalSound");

	Params::HDAIVocalHandler_PlayVocalSound Parms{};

	Parms.InVocalType = InVocalType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIVocalHandler.RandomizePitchMultiplier
// (Final, Native, Public, BlueprintCallable)

void UHDAIVocalHandler::RandomizePitchMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIVocalHandler", "RandomizePitchMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIVocalHandler.SetPitchMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPitchMultiplier                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIVocalHandler::SetPitchMultiplier(float InPitchMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIVocalHandler", "SetPitchMultiplier");

	Params::HDAIVocalHandler_SetPitchMultiplier Parms{};

	Parms.InPitchMultiplier = InPitchMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIVocalHandler.SetTimeLimit
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EHDAIVocalizationType                   InVocalType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIVocalHandler::SetTimeLimit(EHDAIVocalizationType InVocalType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIVocalHandler", "SetTimeLimit");

	Params::HDAIVocalHandler_SetTimeLimit Parms{};

	Parms.InVocalType = InVocalType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIVocalHandler.Vocalize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHDAIVocalizationType                   InVocalType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIVocalHandler::Vocalize(EHDAIVocalizationType InVocalType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIVocalHandler", "Vocalize");

	Params::HDAIVocalHandler_Vocalize Parms{};

	Parms.InVocalType = InVocalType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIVocalHandler.VocalizeBeenHit
// (Final, Native, Public, BlueprintCallable)

void UHDAIVocalHandler::VocalizeBeenHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIVocalHandler", "VocalizeBeenHit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIVocalHandler.VocalizeContact
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHasContact                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDAIVocalHandler::VocalizeContact(bool bHasContact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIVocalHandler", "VocalizeContact");

	Params::HDAIVocalHandler_VocalizeContact Parms{};

	Parms.bHasContact = bHasContact;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIVocalHandler.VocalizeReload
// (Final, Native, Public, BlueprintCallable)

void UHDAIVocalHandler::VocalizeReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIVocalHandler", "VocalizeReload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDAIVocalHandler.VocalizeSuppression
// (Final, Native, Public, BlueprintCallable)

void UHDAIVocalHandler::VocalizeSuppression()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDAIVocalHandler", "VocalizeSuppression");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.ChoosePlayerStart
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class AHDPlayerController*              Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AHDBaseCapturePoint::ChoosePlayerStart(class AHDPlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "ChoosePlayerStart");

	Params::HDBaseCapturePoint_ChoosePlayerStart Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDBaseCapturePoint.Lock
// (Native, Public, BlueprintCallable)

void AHDBaseCapturePoint::Lock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "Lock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.OnBeginOverlap
// (Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AHDBaseCapturePoint::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "OnBeginOverlap");

	Params::HDBaseCapturePoint_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.OnEndOverlap
// (Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseCapturePoint::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "OnEndOverlap");

	Params::HDBaseCapturePoint_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.OnOwningTeamUpdated
// (Native, Protected, BlueprintCallable)
// Parameters:
// EHDTeam                                 LastOwningTeam                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseCapturePoint::OnOwningTeamUpdated(EHDTeam LastOwningTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "OnOwningTeamUpdated");

	Params::HDBaseCapturePoint_OnOwningTeamUpdated Parms{};

	Parms.LastOwningTeam = LastOwningTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.OnRep_Active
// (Final, Native, Protected)

void AHDBaseCapturePoint::OnRep_Active()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "OnRep_Active");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.OnRep_CapturableByTeam
// (Final, Native, Protected)

void AHDBaseCapturePoint::OnRep_CapturableByTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "OnRep_CapturableByTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.OnRep_CaptureProgress
// (Final, Native, Protected)

void AHDBaseCapturePoint::OnRep_CaptureProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "OnRep_CaptureProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.OnRep_Contested
// (Final, Native, Protected)

void AHDBaseCapturePoint::OnRep_Contested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "OnRep_Contested");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.OnRep_Locked
// (Final, Native, Protected)

void AHDBaseCapturePoint::OnRep_Locked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "OnRep_Locked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.OnRep_OwningTeam
// (Final, Native, Protected)
// Parameters:
// EHDTeam                                 LastOwningTeam                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseCapturePoint::OnRep_OwningTeam(EHDTeam LastOwningTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "OnRep_OwningTeam");

	Params::HDBaseCapturePoint_OnRep_OwningTeam Parms{};

	Parms.LastOwningTeam = LastOwningTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.ReceiveOnActive
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewActive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseCapturePoint::ReceiveOnActive(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "ReceiveOnActive");

	Params::HDBaseCapturePoint_ReceiveOnActive Parms{};

	Parms.bNewActive = bNewActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDBaseCapturePoint.ReceiveOnCaptureProgress
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewContested                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseCapturePoint::ReceiveOnCaptureProgress(bool bNewContested)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "ReceiveOnCaptureProgress");

	Params::HDBaseCapturePoint_ReceiveOnCaptureProgress Parms{};

	Parms.bNewContested = bNewContested;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDBaseCapturePoint.ReceiveOnLocked
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewLocked                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseCapturePoint::ReceiveOnLocked(bool bNewLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "ReceiveOnLocked");

	Params::HDBaseCapturePoint_ReceiveOnLocked Parms{};

	Parms.bNewLocked = bNewLocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDBaseCapturePoint.ReceiveOnOwningTeamUpdated
// (Event, Protected, BlueprintEvent)
// Parameters:
// EHDTeam                                 LastOwningTeam                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseCapturePoint::ReceiveOnOwningTeamUpdated(EHDTeam LastOwningTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "ReceiveOnOwningTeamUpdated");

	Params::HDBaseCapturePoint_ReceiveOnOwningTeamUpdated Parms{};

	Parms.LastOwningTeam = LastOwningTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDBaseCapturePoint.ReceiveOnTeamCaptureStatusUpdated
// (Event, Protected, BlueprintEvent)

void AHDBaseCapturePoint::ReceiveOnTeamCaptureStatusUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "ReceiveOnTeamCaptureStatusUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDBaseCapturePoint.SetActive
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewActive                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseCapturePoint::SetActive(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "SetActive");

	Params::HDBaseCapturePoint_SetActive Parms{};

	Parms.bNewActive = bNewActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.SetActiveRoute
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewActiveRoute                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseCapturePoint::SetActiveRoute(int32 NewActiveRoute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "SetActiveRoute");

	Params::HDBaseCapturePoint_SetActiveRoute Parms{};

	Parms.NewActiveRoute = NewActiveRoute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.Unlock
// (Native, Public, BlueprintCallable)

void AHDBaseCapturePoint::Unlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "Unlock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseCapturePoint.CanCapture
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDBaseCapturePoint::CanCapture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "CanCapture");

	Params::HDBaseCapturePoint_CanCapture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDBaseCapturePoint.CanRestartPlayer
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                      Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDBaseCapturePoint::CanRestartPlayer(class AController* Player) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "CanRestartPlayer");

	Params::HDBaseCapturePoint_CanRestartPlayer Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDBaseCapturePoint.GetMinPlayersRequiredForCaptureTeam
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHDTeam                                 CaptureTeam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AHDBaseCapturePoint::GetMinPlayersRequiredForCaptureTeam(EHDTeam CaptureTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "GetMinPlayersRequiredForCaptureTeam");

	Params::HDBaseCapturePoint_GetMinPlayersRequiredForCaptureTeam Parms{};

	Parms.CaptureTeam = CaptureTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDBaseCapturePoint.GetObjectiveTypeForTeam
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHDTeam                                 ObjTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDControlPointObjectiveType            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHDControlPointObjectiveType AHDBaseCapturePoint::GetObjectiveTypeForTeam(EHDTeam ObjTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "GetObjectiveTypeForTeam");

	Params::HDBaseCapturePoint_GetObjectiveTypeForTeam Parms{};

	Parms.ObjTeam = ObjTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDBaseCapturePoint.GetOverlappingCharactersByTeam
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class ADFBaseCharacter*>         OverlappingCharsRed                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ADFBaseCharacter*>         OverlappingCharsBlue                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseCapturePoint::GetOverlappingCharactersByTeam(TArray<class ADFBaseCharacter*>* OverlappingCharsRed, TArray<class ADFBaseCharacter*>* OverlappingCharsBlue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "GetOverlappingCharactersByTeam");

	Params::HDBaseCapturePoint_GetOverlappingCharactersByTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OverlappingCharsRed != nullptr)
		*OverlappingCharsRed = std::move(Parms.OverlappingCharsRed);

	if (OverlappingCharsBlue != nullptr)
		*OverlappingCharsBlue = std::move(Parms.OverlappingCharsBlue);
}


// Function HDMain.HDBaseCapturePoint.IsCapturableByTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHDTeam                                 CaptureTeam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDBaseCapturePoint::IsCapturableByTeam(EHDTeam CaptureTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseCapturePoint", "IsCapturableByTeam");

	Params::HDBaseCapturePoint_IsCapturableByTeam Parms{};

	Parms.CaptureTeam = CaptureTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDBaseGameMode.AddBluforBots
// (Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseGameMode::AddBluforBots(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseGameMode", "AddBluforBots");

	Params::HDBaseGameMode_AddBluforBots Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseGameMode.AddOpforBots
// (Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseGameMode::AddOpforBots(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseGameMode", "AddOpforBots");

	Params::HDBaseGameMode_AddOpforBots Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseGameMode.PlayerCanRestartAtPlayerStart
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           StartSpot                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFLoadout*                       StartLoadout                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDBaseGameMode::PlayerCanRestartAtPlayerStart(class AController* Player, class AActor* StartSpot, class UDFLoadout* StartLoadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseGameMode", "PlayerCanRestartAtPlayerStart");

	Params::HDBaseGameMode_PlayerCanRestartAtPlayerStart Parms{};

	Parms.Player = Player;
	Parms.StartSpot = StartSpot;
	Parms.StartLoadout = StartLoadout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDBaseGameMode.RemoveBluforBots
// (Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseGameMode::RemoveBluforBots(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseGameMode", "RemoveBluforBots");

	Params::HDBaseGameMode_RemoveBluforBots Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseGameMode.RemoveOpforBots
// (Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDBaseGameMode::RemoveOpforBots(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseGameMode", "RemoveOpforBots");

	Params::HDBaseGameMode_RemoveOpforBots Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDBaseWeapon.IsSelectableEquipment
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDBaseWeapon::IsSelectableEquipment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDBaseWeapon", "IsSelectableEquipment");

	Params::HDBaseWeapon_IsSelectableEquipment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDButtonBase.HandleButtonClicked
// (Final, Native, Protected)

void UHDButtonBase::HandleButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDButtonBase", "HandleButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDButtonBase.SetButtonText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHDButtonBase::SetButtonText(class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDButtonBase", "SetButtonText");

	Params::HDButtonBase_SetButtonText Parms{};

	Parms.InText = InText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDButtonBase.UpdateButtonText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHDButtonBase::UpdateButtonText(class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDButtonBase", "UpdateButtonText");

	Params::HDButtonBase_UpdateButtonText Parms{};

	Parms.InText = InText;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDPlayerController.Auth_SpawnVehicle
// (Native, Event, Public, BlueprintEvent)

void AHDPlayerController::Auth_SpawnVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "Auth_SpawnVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.CanTalkOverChannel
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             TalkChannelName                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlayerController::CanTalkOverChannel(class FName TalkChannelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "CanTalkOverChannel");

	Params::HDPlayerController_CanTalkOverChannel Parms{};

	Parms.TalkChannelName = TalkChannelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerController.ClientCheatSetAllowIdleSway
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bIdleSwayDisallowed                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerController::ClientCheatSetAllowIdleSway(bool bIdleSwayDisallowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "ClientCheatSetAllowIdleSway");

	Params::HDPlayerController_ClientCheatSetAllowIdleSway Parms{};

	Parms.bIdleSwayDisallowed = bIdleSwayDisallowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.ClientLoadTeamData
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TArray<class FString>                   FactionAssetPaths                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerController::ClientLoadTeamData(TArray<class FString>& FactionAssetPaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "ClientLoadTeamData");

	Params::HDPlayerController_ClientLoadTeamData Parms{};

	Parms.FactionAssetPaths = std::move(FactionAssetPaths);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.ClientRoundEnd
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FHDGameRoundEndEventDetails      RoundDetails                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bIsWinner                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerController::ClientRoundEnd(struct FHDGameRoundEndEventDetails& RoundDetails, bool bIsWinner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "ClientRoundEnd");

	Params::HDPlayerController_ClientRoundEnd Parms{};

	Parms.RoundDetails = std::move(RoundDetails);
	Parms.bIsWinner = bIsWinner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.GetPlayerCommsComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDFPlayerCommsComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDFPlayerCommsComponent* AHDPlayerController::GetPlayerCommsComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "GetPlayerCommsComponent");

	Params::HDPlayerController_GetPlayerCommsComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerController.GetTalkChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDFCommChannel*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDFCommChannel* AHDPlayerController::GetTalkChannel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "GetTalkChannel");

	Params::HDPlayerController_GetTalkChannel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerController.IsTalkingOverChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDFCommChannel*                   TalkChannel                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlayerController::IsTalkingOverChannel(class UDFCommChannel* TalkChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "IsTalkingOverChannel");

	Params::HDPlayerController_IsTalkingOverChannel Parms{};

	Parms.TalkChannel = TalkChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerController.IsTalkingOverChannelGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             TalkGroupName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlayerController::IsTalkingOverChannelGroup(class FName TalkGroupName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "IsTalkingOverChannelGroup");

	Params::HDPlayerController_IsTalkingOverChannelGroup Parms{};

	Parms.TalkGroupName = TalkGroupName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerController.IsTalkingOverChannelName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             TalkChannelName                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlayerController::IsTalkingOverChannelName(class FName TalkChannelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "IsTalkingOverChannelName");

	Params::HDPlayerController_IsTalkingOverChannelName Parms{};

	Parms.TalkChannelName = TalkChannelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerController.LoadVictoryMenu
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHDGameRoundEndEventDetails      RoundDetails                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bWinner                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerController::LoadVictoryMenu(struct FHDGameRoundEndEventDetails& RoundDetails, bool bWinner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "LoadVictoryMenu");

	Params::HDPlayerController_LoadVictoryMenu Parms{};

	Parms.RoundDetails = std::move(RoundDetails);
	Parms.bWinner = bWinner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.OnPauseMenu
// (Native, Protected, BlueprintCallable)

void AHDPlayerController::OnPauseMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "OnPauseMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.OnPlayerSpawnTimerElapsed
// (Event, Protected, BlueprintEvent)

void AHDPlayerController::OnPlayerSpawnTimerElapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "OnPlayerSpawnTimerElapsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDPlayerController.OnShowScoreboardPressed
// (Native, Protected, BlueprintCallable)

void AHDPlayerController::OnShowScoreboardPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "OnShowScoreboardPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.OnShowScoreboardReleased
// (Native, Protected, BlueprintCallable)

void AHDPlayerController::OnShowScoreboardReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "OnShowScoreboardReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.ReceiveVoipTalkerMsgReceived
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UDFCommChannel*                   MsgTalkerChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     MsgTalkerPS                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMsgIsTalking                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerController::ReceiveVoipTalkerMsgReceived(class UDFCommChannel* MsgTalkerChannel, class APlayerState* MsgTalkerPS, bool bMsgIsTalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "ReceiveVoipTalkerMsgReceived");

	Params::HDPlayerController_ReceiveVoipTalkerMsgReceived Parms{};

	Parms.MsgTalkerChannel = MsgTalkerChannel;
	Parms.MsgTalkerPS = MsgTalkerPS;
	Parms.bMsgIsTalking = bMsgIsTalking;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDPlayerController.ServerCheatSetAllowIdleSway
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// bool                                    bIdleSwayDisallowed                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerController::ServerCheatSetAllowIdleSway(bool bIdleSwayDisallowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "ServerCheatSetAllowIdleSway");

	Params::HDPlayerController_ServerCheatSetAllowIdleSway Parms{};

	Parms.bIdleSwayDisallowed = bIdleSwayDisallowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.ServerPickTeam
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// EHDTeam                                 DesiredTeam                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerController::ServerPickTeam(EHDTeam DesiredTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "ServerPickTeam");

	Params::HDPlayerController_ServerPickTeam Parms{};

	Parms.DesiredTeam = DesiredTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.ServerRestartPlayerAtStartSpot
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class AActor*                           DesiredStartSpot                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFLoadout*                       DesiredStartLoadout                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerController::ServerRestartPlayerAtStartSpot(class AActor* DesiredStartSpot, class UDFLoadout* DesiredStartLoadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "ServerRestartPlayerAtStartSpot");

	Params::HDPlayerController_ServerRestartPlayerAtStartSpot Parms{};

	Parms.DesiredStartSpot = DesiredStartSpot;
	Parms.DesiredStartLoadout = DesiredStartLoadout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.ServerSpawnVehicle
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AHDPlayerController::ServerSpawnVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "ServerSpawnVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.ServerSwitchTeam
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AHDPlayerController::ServerSwitchTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "ServerSwitchTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.StartTalkingOverChannel
// (Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             TalkStartChannelName                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerController::StartTalkingOverChannel(class FName TalkStartChannelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "StartTalkingOverChannel");

	Params::HDPlayerController_StartTalkingOverChannel Parms{};

	Parms.TalkStartChannelName = TalkStartChannelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.StartTalkingOverChannelGroup
// (Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             TalkStartGroupName                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerController::StartTalkingOverChannelGroup(class FName TalkStartGroupName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "StartTalkingOverChannelGroup");

	Params::HDPlayerController_StartTalkingOverChannelGroup Parms{};

	Parms.TalkStartGroupName = TalkStartGroupName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.StopTalkingOnActiveChannels
// (Native, Protected, BlueprintCallable)

void AHDPlayerController::StopTalkingOnActiveChannels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "StopTalkingOnActiveChannels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.StopTalkingOverChannelGroupIfActive
// (Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             TalkStopGroupName                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerController::StopTalkingOverChannelGroupIfActive(class FName TalkStopGroupName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "StopTalkingOverChannelGroupIfActive");

	Params::HDPlayerController_StopTalkingOverChannelGroupIfActive Parms{};

	Parms.TalkStopGroupName = TalkStopGroupName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.StopTalkingOverChannelIfActive
// (Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             TalkStopChannelName                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerController::StopTalkingOverChannelIfActive(class FName TalkStopChannelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "StopTalkingOverChannelIfActive");

	Params::HDPlayerController_StopTalkingOverChannelIfActive Parms{};

	Parms.TalkStopChannelName = TalkStopChannelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.Talk
// (Native, Public, BlueprintCallable)

void AHDPlayerController::Talk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "Talk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.TeamTalk
// (Native, Public, BlueprintCallable)

void AHDPlayerController::TeamTalk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "TeamTalk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.UnloadVictoryMenu
// (Final, Native, Public, BlueprintCallable)

void AHDPlayerController::UnloadVictoryMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "UnloadVictoryMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerController.IsIdleSwayAllowed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlayerController::IsIdleSwayAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "IsIdleSwayAllowed");

	Params::HDPlayerController_IsIdleSwayAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerController.IsInVehicle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlayerController::IsInVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "IsInVehicle");

	Params::HDPlayerController_IsInVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerController.IsTalking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bIncludeWantsToTalk                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlayerController::IsTalking(bool bIncludeWantsToTalk) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerController", "IsTalking");

	Params::HDPlayerController_IsTalking Parms{};

	Parms.bIncludeWantsToTalk = bIncludeWantsToTalk;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDCheatManager.SetFreeAimDeadzoneCameraSpeedFactor
// (Final, Exec, Native, Private)
// Parameters:
// float                                   NewSpeedFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDCheatManager::SetFreeAimDeadzoneCameraSpeedFactor(float NewSpeedFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDCheatManager", "SetFreeAimDeadzoneCameraSpeedFactor");

	Params::HDCheatManager_SetFreeAimDeadzoneCameraSpeedFactor Parms{};

	Parms.NewSpeedFactor = NewSpeedFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDCheatManager.SetFreeAimReturnToCenterInterpSpeed
// (Final, Exec, Native, Private)
// Parameters:
// float                                   NewInterpSpeed                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDCheatManager::SetFreeAimReturnToCenterInterpSpeed(float NewInterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDCheatManager", "SetFreeAimReturnToCenterInterpSpeed");

	Params::HDCheatManager_SetFreeAimReturnToCenterInterpSpeed Parms{};

	Parms.NewInterpSpeed = NewInterpSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDCheatManager.SetMaxFreeAimPitch
// (Final, Exec, Native, Private)
// Parameters:
// float                                   NewPitch                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDCheatManager::SetMaxFreeAimPitch(float NewPitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDCheatManager", "SetMaxFreeAimPitch");

	Params::HDCheatManager_SetMaxFreeAimPitch Parms{};

	Parms.NewPitch = NewPitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDCheatManager.SetMaxFreeAimPitchADS
// (Final, Exec, Native, Private)
// Parameters:
// float                                   NewPitch                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDCheatManager::SetMaxFreeAimPitchADS(float NewPitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDCheatManager", "SetMaxFreeAimPitchADS");

	Params::HDCheatManager_SetMaxFreeAimPitchADS Parms{};

	Parms.NewPitch = NewPitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDCheatManager.SetMaxFreeAimYaw
// (Final, Exec, Native, Private)
// Parameters:
// float                                   NewYaw                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDCheatManager::SetMaxFreeAimYaw(float NewYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDCheatManager", "SetMaxFreeAimYaw");

	Params::HDCheatManager_SetMaxFreeAimYaw Parms{};

	Parms.NewYaw = NewYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDCheatManager.SetMaxFreeAimYawADS
// (Final, Exec, Native, Private)
// Parameters:
// float                                   NewYaw                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDCheatManager::SetMaxFreeAimYawADS(float NewYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDCheatManager", "SetMaxFreeAimYawADS");

	Params::HDCheatManager_SetMaxFreeAimYawADS Parms{};

	Parms.NewYaw = NewYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDCheatManager.SpawnVehicle
// (Final, Exec, Native, Public, BlueprintCallable)

void UHDCheatManager::SpawnVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDCheatManager", "SpawnVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDCheatManager.ToggleFreeAim
// (Final, Exec, Native, Private)

void UHDCheatManager::ToggleFreeAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDCheatManager", "ToggleFreeAim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDCheatManager.ToggleFreeAimADS
// (Final, Exec, Native, Private)

void UHDCheatManager::ToggleFreeAimADS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDCheatManager", "ToggleFreeAimADS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDCheatManager.ToggleIdleSway
// (Final, Exec, Native, Public)

void UHDCheatManager::ToggleIdleSway()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDCheatManager", "ToggleIdleSway");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDConfirmationDialog.UpdateDialogText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             TitleText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             DescriptionText                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHDConfirmationDialog::UpdateDialogText(class FText& TitleText, class FText& DescriptionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDConfirmationDialog", "UpdateDialogText");

	Params::HDConfirmationDialog_UpdateDialogText Parms{};

	Parms.TitleText = TitleText;
	Parms.DescriptionText = DescriptionText;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDGame_AdvanceAndSecure.GetCurrentBlueCaptureTier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AHDGame_AdvanceAndSecure::GetCurrentBlueCaptureTier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGame_AdvanceAndSecure", "GetCurrentBlueCaptureTier");

	Params::HDGame_AdvanceAndSecure_GetCurrentBlueCaptureTier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGame_AdvanceAndSecure.GetCurrentRedCaptureTier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AHDGame_AdvanceAndSecure::GetCurrentRedCaptureTier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGame_AdvanceAndSecure", "GetCurrentRedCaptureTier");

	Params::HDGame_AdvanceAndSecure_GetCurrentRedCaptureTier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGameInstance.HasDLCBP
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   DLCAppID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDGameInstance::HasDLCBP(int64 DLCAppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDGameInstance", "HasDLCBP");

	Params::HDGameInstance_HasDLCBP Parms{};

	Parms.DLCAppID = DLCAppID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGameInstance.HasModsLoaded
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDGameInstance::HasModsLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDGameInstance", "HasModsLoaded");

	Params::HDGameInstance_HasModsLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGameInstance.OwnsAppBP
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   AppID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDGameInstance::OwnsAppBP(int64 AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDGameInstance", "OwnsAppBP");

	Params::HDGameInstance_OwnsAppBP Parms{};

	Parms.AppID = AppID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGameInstance.LoadScoreboardMenu
// (Final, Native, Public, BlueprintCallable)

void UHDGameInstance::LoadScoreboardMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameInstance", "LoadScoreboardMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDGameInstance.ShowConfirmationDialog
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHDGameInstance::ShowConfirmationDialog(class FText& Title, class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameInstance", "ShowConfirmationDialog");

	Params::HDGameInstance_ShowConfirmationDialog Parms{};

	Parms.Title = Title;
	Parms.Message = Message;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDGameInstance.ShowErrorDialog
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHDGameInstance::ShowErrorDialog(class FText& Title, class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameInstance", "ShowErrorDialog");

	Params::HDGameInstance_ShowErrorDialog Parms{};

	Parms.Title = Title;
	Parms.Message = Message;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDGameInstance.UnloadScoreboardMenu
// (Final, Native, Public, BlueprintCallable)

void UHDGameInstance::UnloadScoreboardMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameInstance", "UnloadScoreboardMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDGameProjectBuildSettings.IsDemoBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDGameProjectBuildSettings::IsDemoBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDGameProjectBuildSettings", "IsDemoBuild");

	Params::HDGameProjectBuildSettings_IsDemoBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGameRulesetBase.GiveTicketsToTeam
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EHDTeam                                 TicketTeam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TicketsToAdd                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDGameRulesetBase::GiveTicketsToTeam(EHDTeam TicketTeam, int32 TicketsToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameRulesetBase", "GiveTicketsToTeam");

	Params::HDGameRulesetBase_GiveTicketsToTeam Parms{};

	Parms.TicketTeam = TicketTeam;
	Parms.TicketsToAdd = TicketsToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDGameRulesetBase.RevokeTicketsFromTeam
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EHDTeam                                 TicketTeam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TicketsToRemove                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDGameRulesetBase::RevokeTicketsFromTeam(EHDTeam TicketTeam, int32 TicketsToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameRulesetBase", "RevokeTicketsFromTeam");

	Params::HDGameRulesetBase_RevokeTicketsFromTeam Parms{};

	Parms.TicketTeam = TicketTeam;
	Parms.TicketsToRemove = TicketsToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDGameRulesetBase.GetHDGameMode
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDBaseGameMode*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDBaseGameMode* UHDGameRulesetBase::GetHDGameMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameRulesetBase", "GetHDGameMode");

	Params::HDGameRulesetBase_GetHDGameMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGameRulesetBase.GetHDGameState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDGameState*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDGameState* UHDGameRulesetBase::GetHDGameState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameRulesetBase", "GetHDGameState");

	Params::HDGameRulesetBase_GetHDGameState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGameState.ClearTickets
// (Native, Public, BlueprintCallable)

void AHDGameState::ClearTickets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameState", "ClearTickets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDGameState.GiveTicketsToTeam
// (Native, Public, BlueprintCallable)
// Parameters:
// EHDTeam                                 TicketTeam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TicketsToAdd                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDGameState::GiveTicketsToTeam(EHDTeam TicketTeam, int32 TicketsToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameState", "GiveTicketsToTeam");

	Params::HDGameState_GiveTicketsToTeam Parms{};

	Parms.TicketTeam = TicketTeam;
	Parms.TicketsToAdd = TicketsToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDGameState.RevokeTicketsFromTeam
// (Native, Public, BlueprintCallable)
// Parameters:
// EHDTeam                                 TicketTeam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TicketsToRemove                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDGameState::RevokeTicketsFromTeam(EHDTeam TicketTeam, int32 TicketsToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameState", "RevokeTicketsFromTeam");

	Params::HDGameState_RevokeTicketsFromTeam Parms{};

	Parms.TicketTeam = TicketTeam;
	Parms.TicketsToRemove = TicketsToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDGameState.GetNumPlayersOnTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHDTeam                                 TeamToCheck                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AHDGameState::GetNumPlayersOnTeam(EHDTeam TeamToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameState", "GetNumPlayersOnTeam");

	Params::HDGameState_GetNumPlayersOnTeam Parms{};

	Parms.TeamToCheck = TeamToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGameState.IsGameUsingPlayerSpawnKitRestrictions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                      Controller                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDGameState::IsGameUsingPlayerSpawnKitRestrictions(class AController* Controller) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameState", "IsGameUsingPlayerSpawnKitRestrictions");

	Params::HDGameState_IsGameUsingPlayerSpawnKitRestrictions Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGameState.IsGameUsingTickets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDGameState::IsGameUsingTickets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGameState", "IsGameUsingTickets");

	Params::HDGameState_IsGameUsingTickets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGOAPComponent.ResetPlanningTimer
// (Final, Native, Public, BlueprintCallable)

void UHDGOAPComponent::ResetPlanningTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGOAPComponent", "ResetPlanningTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDGOAPComponent.TargetPerceptionUpdated
// (Native, Protected)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAIStimulus                      Stimulus                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UHDGOAPComponent::TargetPerceptionUpdated(class AActor* Actor, const struct FAIStimulus& Stimulus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGOAPComponent", "TargetPerceptionUpdated");

	Params::HDGOAPComponent_TargetPerceptionUpdated Parms{};

	Parms.Actor = Actor;
	Parms.Stimulus = std::move(Stimulus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDGOAPComponent.GetAIHandler
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UHDAIHandlerBase>     HandlerClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHDAIHandlerBase*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHDAIHandlerBase* UHDGOAPComponent::GetAIHandler(TSubclassOf<class UHDAIHandlerBase> HandlerClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGOAPComponent", "GetAIHandler");

	Params::HDGOAPComponent_GetAIHandler Parms{};

	Parms.HandlerClass = HandlerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGOAPComponent.IsAIActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDGOAPComponent::IsAIActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGOAPComponent", "IsAIActive");

	Params::HDGOAPComponent_IsAIActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDGOAPComponent.IsAIActiveInWorld
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDGOAPComponent::IsAIActiveInWorld() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDGOAPComponent", "IsAIActiveInWorld");

	Params::HDGOAPComponent_IsAIActiveInWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDJoinGameMenu.JoinGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UHDServerListItemData*            ServerItem                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           JoinPassword                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDJoinGameMenu::JoinGame(class UHDServerListItemData* ServerItem, const class FString& JoinPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDJoinGameMenu", "JoinGame");

	Params::HDJoinGameMenu_JoinGame Parms{};

	Parms.ServerItem = ServerItem;
	Parms.JoinPassword = std::move(JoinPassword);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDJoinGameMenu.OnRefresh
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    bSortAscending                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDServerListSortBy                     SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDJoinGameMenu::OnRefresh(bool bSortAscending, EHDServerListSortBy SortBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDJoinGameMenu", "OnRefresh");

	Params::HDJoinGameMenu_OnRefresh Parms{};

	Parms.bSortAscending = bSortAscending;
	Parms.SortBy = SortBy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDJoinGameMenu.ReceiveOnRefreshComplete
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bSortAscending                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDServerListSortBy                     SortBy                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDJoinGameMenu::ReceiveOnRefreshComplete(bool bSortAscending, EHDServerListSortBy SortBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDJoinGameMenu", "ReceiveOnRefreshComplete");

	Params::HDJoinGameMenu_ReceiveOnRefreshComplete Parms{};

	Parms.bSortAscending = bSortAscending;
	Parms.SortBy = SortBy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDJoinGameMenu.ReceiveOnRefreshStart
// (Event, Protected, BlueprintEvent)

void UHDJoinGameMenu::ReceiveOnRefreshStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDJoinGameMenu", "ReceiveOnRefreshStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDJoinGameMenu.IsUsingDebugServerListings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDJoinGameMenu::IsUsingDebugServerListings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDJoinGameMenu", "IsUsingDebugServerListings");

	Params::HDJoinGameMenu_IsUsingDebugServerListings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDKit.GetItemEntryDisplayEquipmentSymbol
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FHDItemEntry                     ItemEntry                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UTexture2D*                       OutDisplayEquipmentSymbol                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDKit::GetItemEntryDisplayEquipmentSymbol(struct FHDItemEntry& ItemEntry, class UTexture2D** OutDisplayEquipmentSymbol)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDKit", "GetItemEntryDisplayEquipmentSymbol");

	Params::HDKit_GetItemEntryDisplayEquipmentSymbol Parms{};

	Parms.ItemEntry = std::move(ItemEntry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDisplayEquipmentSymbol != nullptr)
		*OutDisplayEquipmentSymbol = Parms.OutDisplayEquipmentSymbol;

	return Parms.ReturnValue;
}


// Function HDMain.HDKit.GetItemEntryDisplayIcon
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FHDItemEntry                     ItemEntry                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UTexture2D*                       OutDisplayIcon                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDKit::GetItemEntryDisplayIcon(struct FHDItemEntry& ItemEntry, class UTexture2D** OutDisplayIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDKit", "GetItemEntryDisplayIcon");

	Params::HDKit_GetItemEntryDisplayIcon Parms{};

	Parms.ItemEntry = std::move(ItemEntry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDisplayIcon != nullptr)
		*OutDisplayIcon = Parms.OutDisplayIcon;

	return Parms.ReturnValue;
}


// Function HDMain.HDKit.GetItemEntryBySlotNum
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   SlotNum                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHDItemEntry                     OutEntry                                               (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDKit::GetItemEntryBySlotNum(int32 SlotNum, struct FHDItemEntry* OutEntry) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDKit", "GetItemEntryBySlotNum");

	Params::HDKit_GetItemEntryBySlotNum Parms{};

	Parms.SlotNum = SlotNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEntry != nullptr)
		*OutEntry = std::move(Parms.OutEntry);

	return Parms.ReturnValue;
}


// Function HDMain.HDKit.GetNumPlayersUsingKit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHDKit::GetNumPlayersUsingKit(class UObject* WorldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDKit", "GetNumPlayersUsingKit");

	Params::HDKit_GetNumPlayersUsingKit Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDKit.GetPlayersUsingKit
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AHDPlayerState*>           OutPSArray                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHDKit::GetPlayersUsingKit(class UObject* WorldContextObject, TArray<class AHDPlayerState*>* OutPSArray) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDKit", "GetPlayersUsingKit");

	Params::HDKit_GetPlayersUsingKit Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPSArray != nullptr)
		*OutPSArray = std::move(Parms.OutPSArray);

	return Parms.ReturnValue;
}


// Function HDMain.HDKit.GetPrimaryItemEntry
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FHDItemEntry                     OutPrimaryEntry                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDKit::GetPrimaryItemEntry(struct FHDItemEntry* OutPrimaryEntry) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDKit", "GetPrimaryItemEntry");

	Params::HDKit_GetPrimaryItemEntry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPrimaryEntry != nullptr)
		*OutPrimaryEntry = std::move(Parms.OutPrimaryEntry);

	return Parms.ReturnValue;
}


// Function HDMain.HDKit.GetPrimaryItemEntryDisplayIcon
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       OutDisplayIcon                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDKit::GetPrimaryItemEntryDisplayIcon(class UTexture2D** OutDisplayIcon) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDKit", "GetPrimaryItemEntryDisplayIcon");

	Params::HDKit_GetPrimaryItemEntryDisplayIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDisplayIcon != nullptr)
		*OutDisplayIcon = Parms.OutDisplayIcon;

	return Parms.ReturnValue;
}


// Function HDMain.HDKit.HasKitRequirements
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDKit::HasKitRequirements() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDKit", "HasKitRequirements");

	Params::HDKit_HasKitRequirements Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDKit.PlayerCanStartWithKit
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                      Player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             OutKitDenialReason                                     (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDKit::PlayerCanStartWithKit(class AController* Player, class FText* OutKitDenialReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDKit", "PlayerCanStartWithKit");

	Params::HDKit_PlayerCanStartWithKit Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutKitDenialReason != nullptr)
		*OutKitDenialReason = Parms.OutKitDenialReason;

	return Parms.ReturnValue;
}


// Function HDMain.HDKit.RandomCharacterVariationDataFromKit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDFCharacterVariationDataHandle  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FDFCharacterVariationDataHandle UHDKit::RandomCharacterVariationDataFromKit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDKit", "RandomCharacterVariationDataFromKit");

	Params::HDKit_RandomCharacterVariationDataFromKit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDModData.DoesModPluginUseLegacyMapScanning
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           PluginName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDModData::DoesModPluginUseLegacyMapScanning(const class FString& PluginName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDModData", "DoesModPluginUseLegacyMapScanning");

	Params::HDModData_DoesModPluginUseLegacyMapScanning Parms{};

	Parms.PluginName = std::move(PluginName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlatoonCreationRuleBase.SatisfiesRule
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UHDTeamDefinition*                TeamDef                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDPlatoonCreationRuleBase::SatisfiesRule(class UHDTeamDefinition* TeamDef) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonCreationRuleBase", "SatisfiesRule");

	Params::HDPlatoonCreationRuleBase_SatisfiesRule Parms{};

	Parms.TeamDef = TeamDef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlatoonInfo.ShouldCreateForTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UHDTeamDefinition*                TeamDef                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDPlatoonInfo::ShouldCreateForTeam(class UHDTeamDefinition* TeamDef) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonInfo", "ShouldCreateForTeam");

	Params::HDPlatoonInfo_ShouldCreateForTeam Parms{};

	Parms.TeamDef = TeamDef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlatoonState.AddSquad
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             SquadDisplayName                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AHDPlayerState*                   SquadLeader                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStartLocked                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDSquadState*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDSquadState* AHDPlatoonState::AddSquad(class FText& SquadDisplayName, class AHDPlayerState* SquadLeader, bool bStartLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "AddSquad");

	Params::HDPlatoonState_AddSquad Parms{};

	Parms.SquadDisplayName = SquadDisplayName;
	Parms.SquadLeader = SquadLeader;
	Parms.bStartLocked = bStartLocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlatoonState.FindSquadByName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             SquadDisplayName                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AHDSquadState*                    OutFoundSquad                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlatoonState::FindSquadByName(class FText& SquadDisplayName, class AHDSquadState** OutFoundSquad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "FindSquadByName");

	Params::HDPlatoonState_FindSquadByName Parms{};

	Parms.SquadDisplayName = SquadDisplayName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFoundSquad != nullptr)
		*OutFoundSquad = Parms.OutFoundSquad;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlatoonState.ReceiveSquadAdded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDSquadState*                    Squad                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlatoonState::ReceiveSquadAdded(class AHDSquadState* Squad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "ReceiveSquadAdded");

	Params::HDPlatoonState_ReceiveSquadAdded Parms{};

	Parms.Squad = Squad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDPlatoonState.ReceiveSquadPreRemove
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDSquadState*                    Squad                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlatoonState::ReceiveSquadPreRemove(class AHDSquadState* Squad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "ReceiveSquadPreRemove");

	Params::HDPlatoonState_ReceiveSquadPreRemove Parms{};

	Parms.Squad = Squad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDPlatoonState.RemoveFromOwner
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AHDPlatoonState::RemoveFromOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "RemoveFromOwner");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlatoonState.RemoveSquad
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AHDSquadState*                    SquadToRemove                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlatoonState::RemoveSquad(class AHDSquadState* SquadToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "RemoveSquad");

	Params::HDPlatoonState_RemoveSquad Parms{};

	Parms.SquadToRemove = SquadToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlatoonState.RemoveSquadAt
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RemoveIdx                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlatoonState::RemoveSquadAt(int32 RemoveIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "RemoveSquadAt");

	Params::HDPlatoonState_RemoveSquadAt Parms{};

	Parms.RemoveIdx = RemoveIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlatoonState.DumpSquadState
// (Final, Native, Public, BlueprintCallable, Const)

void AHDPlatoonState::DumpSquadState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "DumpSquadState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlatoonState.GetMaxSquadLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AHDPlatoonState::GetMaxSquadLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "GetMaxSquadLimit");

	Params::HDPlatoonState_GetMaxSquadLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlatoonState.GetNumSquads
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bValidSquadsOnly                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AHDPlatoonState::GetNumSquads(bool bValidSquadsOnly) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "GetNumSquads");

	Params::HDPlatoonState_GetNumSquads Parms{};

	Parms.bValidSquadsOnly = bValidSquadsOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlatoonState.GetSquadAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnorePendingRemoval                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDSquadState*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDSquadState* AHDPlatoonState::GetSquadAt(int32 Param_Index, bool bIgnorePendingRemoval) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "GetSquadAt");

	Params::HDPlatoonState_GetSquadAt Parms{};

	Parms.Param_Index = Param_Index;
	Parms.bIgnorePendingRemoval = bIgnorePendingRemoval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlatoonState.HasReachedMaxSquadLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlatoonState::HasReachedMaxSquadLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "HasReachedMaxSquadLimit");

	Params::HDPlatoonState_HasReachedMaxSquadLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlatoonState.IsSquadPendingRemovalFromPlatoon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDSquadState*                    Squad                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlatoonState::IsSquadPendingRemovalFromPlatoon(class AHDSquadState* Squad) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "IsSquadPendingRemovalFromPlatoon");

	Params::HDPlatoonState_IsSquadPendingRemovalFromPlatoon Parms{};

	Parms.Squad = Squad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlatoonState.SquadExists
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDSquadState*                    Squad                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnorePendingRemoval                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlatoonState::SquadExists(class AHDSquadState* Squad, bool bIgnorePendingRemoval) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlatoonState", "SquadExists");

	Params::HDPlatoonState_SquadExists Parms{};

	Parms.Squad = Squad;
	Parms.bIgnorePendingRemoval = bIgnorePendingRemoval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerCharacter.DropKit
// (BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)

void AHDPlayerCharacter::DropKit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "DropKit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.EquipPrimaryItem
// (Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlayerCharacter::EquipPrimaryItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "EquipPrimaryItem");

	Params::HDPlayerCharacter_EquipPrimaryItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerCharacter.FreeAim
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::FreeAim(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "FreeAim");

	Params::HDPlayerCharacter_FreeAim Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.HeadBob
// (Final, Native, Protected, BlueprintCallable)

void AHDPlayerCharacter::HeadBob()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "HeadBob");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.NotifyPlayerStateChanged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     NewPlayerState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     OldPlayerState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::NotifyPlayerStateChanged(class APlayerState* NewPlayerState, class APlayerState* OldPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "NotifyPlayerStateChanged");

	Params::HDPlayerCharacter_NotifyPlayerStateChanged Parms{};

	Parms.NewPlayerState = NewPlayerState;
	Parms.OldPlayerState = OldPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.OnPickupKit
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AHDBasePickup_Kit*                Kit                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::OnPickupKit(class AHDBasePickup_Kit* Kit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "OnPickupKit");

	Params::HDPlayerCharacter_OnPickupKit Parms{};

	Parms.Kit = Kit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.OnRep_CurrentLoadout
// (Native, Protected)

void AHDPlayerCharacter::OnRep_CurrentLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "OnRep_CurrentLoadout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.PlayVocalSoundAI
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class USoundBase*                       SoundToUse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDAIVocalizationType                   VocalType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::PlayVocalSoundAI(class USoundBase* SoundToUse, EHDAIVocalizationType VocalType, float PitchMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "PlayVocalSoundAI");

	Params::HDPlayerCharacter_PlayVocalSoundAI Parms{};

	Parms.SoundToUse = SoundToUse;
	Parms.VocalType = VocalType;
	Parms.PitchMultiplier = PitchMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.ReceiveAimStyleChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EHDWeaponAimStyle                       NewAimStyle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDWeaponAimStyle                       PrevAimStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromPlayerInput                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::ReceiveAimStyleChanged(EHDWeaponAimStyle NewAimStyle, EHDWeaponAimStyle PrevAimStyle, bool bFromPlayerInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "ReceiveAimStyleChanged");

	Params::HDPlayerCharacter_ReceiveAimStyleChanged Parms{};

	Parms.NewAimStyle = NewAimStyle;
	Parms.PrevAimStyle = PrevAimStyle;
	Parms.bFromPlayerInput = bFromPlayerInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDPlayerCharacter.ReceiveCurrentLoadout
// (Event, Protected, BlueprintEvent)

void AHDPlayerCharacter::ReceiveCurrentLoadout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "ReceiveCurrentLoadout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDPlayerCharacter.ReceiveFreeAim
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::ReceiveFreeAim(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "ReceiveFreeAim");

	Params::HDPlayerCharacter_ReceiveFreeAim Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDPlayerCharacter.ReceiveVariationDataChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FDFCharacterVariationData        NewVariation                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FDFCharacterVariationData        PreviousVariation                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::ReceiveVariationDataChanged(struct FDFCharacterVariationData& NewVariation, struct FDFCharacterVariationData& PreviousVariation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "ReceiveVariationDataChanged");

	Params::HDPlayerCharacter_ReceiveVariationDataChanged Parms{};

	Parms.NewVariation = std::move(NewVariation);
	Parms.PreviousVariation = std::move(PreviousVariation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDPlayerCharacter.ReceiveVoipTalkerMsgReceived
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UDFCommChannel*                   MsgTalkerChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     MsgTalkerPS                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMsgIsTalking                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::ReceiveVoipTalkerMsgReceived(class UDFCommChannel* MsgTalkerChannel, class APlayerState* MsgTalkerPS, bool bMsgIsTalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "ReceiveVoipTalkerMsgReceived");

	Params::HDPlayerCharacter_ReceiveVoipTalkerMsgReceived Parms{};

	Parms.MsgTalkerChannel = MsgTalkerChannel;
	Parms.MsgTalkerPS = MsgTalkerPS;
	Parms.bMsgIsTalking = bMsgIsTalking;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDPlayerCharacter.SetAimStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHDWeaponAimStyle                       InAimStyle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromPlayerInput                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::SetAimStyle(EHDWeaponAimStyle InAimStyle, bool bFromPlayerInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "SetAimStyle");

	Params::HDPlayerCharacter_SetAimStyle Parms{};

	Parms.InAimStyle = InAimStyle;
	Parms.bFromPlayerInput = bFromPlayerInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.SetAllowFreeAim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::SetAllowFreeAim(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "SetAllowFreeAim");

	Params::HDPlayerCharacter_SetAllowFreeAim Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.SetAllowFreeAimADS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::SetAllowFreeAimADS(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "SetAllowFreeAimADS");

	Params::HDPlayerCharacter_SetAllowFreeAimADS Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.SetFreeAimDeadzoneCameraSpeedFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSpeedFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::SetFreeAimDeadzoneCameraSpeedFactor(float NewSpeedFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "SetFreeAimDeadzoneCameraSpeedFactor");

	Params::HDPlayerCharacter_SetFreeAimDeadzoneCameraSpeedFactor Parms{};

	Parms.NewSpeedFactor = NewSpeedFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.SetFreeAimReturnToCenterInterpSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewInterpSpeed                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::SetFreeAimReturnToCenterInterpSpeed(float NewInterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "SetFreeAimReturnToCenterInterpSpeed");

	Params::HDPlayerCharacter_SetFreeAimReturnToCenterInterpSpeed Parms{};

	Parms.NewInterpSpeed = NewInterpSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.SetMaxFreeAimPitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewPitch                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::SetMaxFreeAimPitch(float NewPitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "SetMaxFreeAimPitch");

	Params::HDPlayerCharacter_SetMaxFreeAimPitch Parms{};

	Parms.NewPitch = NewPitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.SetMaxFreeAimPitchADS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewPitch                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::SetMaxFreeAimPitchADS(float NewPitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "SetMaxFreeAimPitchADS");

	Params::HDPlayerCharacter_SetMaxFreeAimPitchADS Parms{};

	Parms.NewPitch = NewPitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.SetMaxFreeAimYaw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewYaw                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::SetMaxFreeAimYaw(float NewYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "SetMaxFreeAimYaw");

	Params::HDPlayerCharacter_SetMaxFreeAimYaw Parms{};

	Parms.NewYaw = NewYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.SetMaxFreeAimYawADS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewYaw                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::SetMaxFreeAimYawADS(float NewYaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "SetMaxFreeAimYawADS");

	Params::HDPlayerCharacter_SetMaxFreeAimYawADS Parms{};

	Parms.NewYaw = NewYaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.SetVariationHandle
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// struct FDFCharacterVariationDataHandle  InVariationHandle                                      (Parm, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::SetVariationHandle(const struct FDFCharacterVariationDataHandle& InVariationHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "SetVariationHandle");

	Params::HDPlayerCharacter_SetVariationHandle Parms{};

	Parms.InVariationHandle = std::move(InVariationHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.VariationDataChangedInternal
// (Final, Native, Private)
// Parameters:
// struct FDFCharacterVariationDataHandle  PreviousHandle                                         (ConstParm, Parm, NativeAccessSpecifierPublic)

void AHDPlayerCharacter::VariationDataChangedInternal(struct FDFCharacterVariationDataHandle& PreviousHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "VariationDataChangedInternal");

	Params::HDPlayerCharacter_VariationDataChangedInternal Parms{};

	Parms.PreviousHandle = std::move(PreviousHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerCharacter.GetKitClassToUse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class AHDBasePickup_Kit>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const TSubclassOf<class AHDBasePickup_Kit> AHDPlayerCharacter::GetKitClassToUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "GetKitClassToUse");

	Params::HDPlayerCharacter_GetKitClassToUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerCharacter.GetMaxFreeAimPitchToUse
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AHDPlayerCharacter::GetMaxFreeAimPitchToUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "GetMaxFreeAimPitchToUse");

	Params::HDPlayerCharacter_GetMaxFreeAimPitchToUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerCharacter.GetMaxFreeAimYawToUse
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AHDPlayerCharacter::GetMaxFreeAimYawToUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "GetMaxFreeAimYawToUse");

	Params::HDPlayerCharacter_GetMaxFreeAimYawToUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerCharacter.GetPlayerComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UHDPlayerComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHDPlayerComponent* AHDPlayerCharacter::GetPlayerComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "GetPlayerComponent");

	Params::HDPlayerCharacter_GetPlayerComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerCharacter.IsInVehicle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDPlayerCharacter::IsInVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerCharacter", "IsInVehicle");

	Params::HDPlayerCharacter_IsInVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerComponent.PickTeam
// (Native, Public, BlueprintCallable)
// Parameters:
// EHDTeam                                 DesiredTeam                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDPlayerComponent::PickTeam(EHDTeam DesiredTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerComponent", "PickTeam");

	Params::HDPlayerComponent_PickTeam Parms{};

	Parms.DesiredTeam = DesiredTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerComponent.RestartPlayerAtStartSpot
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           DesiredStartSpot                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFLoadout*                       DesiredStartLoadout                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDPlayerComponent::RestartPlayerAtStartSpot(class AActor* DesiredStartSpot, class UDFLoadout* DesiredStartLoadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerComponent", "RestartPlayerAtStartSpot");

	Params::HDPlayerComponent_RestartPlayerAtStartSpot Parms{};

	Parms.DesiredStartSpot = DesiredStartSpot;
	Parms.DesiredStartLoadout = DesiredStartLoadout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerComponent.SwitchTeam
// (Exec, Native, Public, BlueprintCallable)

void UHDPlayerComponent::SwitchTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerComponent", "SwitchTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerStart.K2_GetCapsuleComponent
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCapsuleComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCapsuleComponent* AHDPlayerStart::K2_GetCapsuleComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerStart", "K2_GetCapsuleComponent");

	Params::HDPlayerStart_K2_GetCapsuleComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDPlayerState.AssignCurrentLoadout
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UHDKit*                           NewCurrentLoadout                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerState::AssignCurrentLoadout(class UHDKit* NewCurrentLoadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerState", "AssignCurrentLoadout");

	Params::HDPlayerState_AssignCurrentLoadout Parms{};

	Parms.NewCurrentLoadout = NewCurrentLoadout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerState.AssignSpawnLoadout
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UHDKit*                           NewSpawnLoadout                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerState::AssignSpawnLoadout(class UHDKit* NewSpawnLoadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerState", "AssignSpawnLoadout");

	Params::HDPlayerState_AssignSpawnLoadout Parms{};

	Parms.NewSpawnLoadout = NewSpawnLoadout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerState.OnRep_CurrentLoadout
// (Native, Protected)
// Parameters:
// class UHDKit*                           PrevLoadout                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerState::OnRep_CurrentLoadout(class UHDKit* PrevLoadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerState", "OnRep_CurrentLoadout");

	Params::HDPlayerState_OnRep_CurrentLoadout Parms{};

	Parms.PrevLoadout = PrevLoadout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerState.OnRep_SpawnLoadout
// (Native, Protected)
// Parameters:
// class UHDKit*                           PrevSpawnLoadout                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDPlayerState::OnRep_SpawnLoadout(class UHDKit* PrevSpawnLoadout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerState", "OnRep_SpawnLoadout");

	Params::HDPlayerState_OnRep_SpawnLoadout Parms{};

	Parms.PrevSpawnLoadout = PrevSpawnLoadout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerState.OnRep_SquadInfo
// (Native, Protected)

void AHDPlayerState::OnRep_SquadInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerState", "OnRep_SquadInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDPlayerState.UnregisterFromSquad
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AHDPlayerState::UnregisterFromSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDPlayerState", "UnregisterFromSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDProj_Grenade.OnRep_PayloadServerActivationTime
// (Final, Native, Private)

void AHDProj_Grenade::OnRep_PayloadServerActivationTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDProj_Grenade", "OnRep_PayloadServerActivationTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDRuleset_ControlPoint.ControlPointCaptureProgressUpdated
// (Native, Protected)
// Parameters:
// class AHDBaseCapturePoint*              ControlPoint                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bContested                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDRuleset_ControlPoint::ControlPointCaptureProgressUpdated(class AHDBaseCapturePoint* ControlPoint, bool bContested, int32 Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDRuleset_ControlPoint", "ControlPointCaptureProgressUpdated");

	Params::HDRuleset_ControlPoint_ControlPointCaptureProgressUpdated Parms{};

	Parms.ControlPoint = ControlPoint;
	Parms.bContested = bContested;
	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDRuleset_ControlPoint.ControlPointTeamUpdated
// (Native, Protected)
// Parameters:
// class AHDBaseCapturePoint*              ControlPoint                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDTeam                                 PrevTeam                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDTeam                                 NewTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCaptured                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDRuleset_ControlPoint::ControlPointTeamUpdated(class AHDBaseCapturePoint* ControlPoint, EHDTeam PrevTeam, EHDTeam NewTeam, bool bCaptured)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDRuleset_ControlPoint", "ControlPointTeamUpdated");

	Params::HDRuleset_ControlPoint_ControlPointTeamUpdated Parms{};

	Parms.ControlPoint = ControlPoint;
	Parms.PrevTeam = PrevTeam;
	Parms.NewTeam = NewTeam;
	Parms.bCaptured = bCaptured;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDRuleset_ControlPoint.GetControlPointSettingsForTeam
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHDTeam                                 ControlPointTeam                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FControlPointRulesetSettingsReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FControlPointRulesetSettings UHDRuleset_ControlPoint::GetControlPointSettingsForTeam(EHDTeam ControlPointTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDRuleset_ControlPoint", "GetControlPointSettingsForTeam");

	Params::HDRuleset_ControlPoint_GetControlPointSettingsForTeam Parms{};

	Parms.ControlPointTeam = ControlPointTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDRuleset_KillDeath.PlayerTeamKilled
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class AController*                      Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDRuleset_KillDeath::PlayerTeamKilled(class AController* Killer, class AController* Victim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDRuleset_KillDeath", "PlayerTeamKilled");

	Params::HDRuleset_KillDeath_PlayerTeamKilled Parms{};

	Parms.Killer = Killer;
	Parms.Victim = Victim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDRuleset_KillDeath.GetKillDeathSettingsForTeam
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHDTeam                                 KillDeathTeam                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FKillDeathRulesetSettings  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FKillDeathRulesetSettings UHDRuleset_KillDeath::GetKillDeathSettingsForTeam(EHDTeam KillDeathTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDRuleset_KillDeath", "GetKillDeathSettingsForTeam");

	Params::HDRuleset_KillDeath_GetKillDeathSettingsForTeam Parms{};

	Parms.KillDeathTeam = KillDeathTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDRuleset_TicketBleed.ApplyTicketBleed
// (Native, Protected, BlueprintCallable)
// Parameters:
// EHDTeam                                 BleedTeam                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TicketBleedMultiplier                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseMercyTicketBleed                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDRuleset_TicketBleed::ApplyTicketBleed(EHDTeam BleedTeam, int32 TicketBleedMultiplier, bool bUseMercyTicketBleed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDRuleset_TicketBleed", "ApplyTicketBleed");

	Params::HDRuleset_TicketBleed_ApplyTicketBleed Parms{};

	Parms.BleedTeam = BleedTeam;
	Parms.TicketBleedMultiplier = TicketBleedMultiplier;
	Parms.bUseMercyTicketBleed = bUseMercyTicketBleed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDRuleset_TicketBleed.ControlPointTeamUpdated
// (Native, Protected)
// Parameters:
// class AHDBaseCapturePoint*              ControlPoint                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDTeam                                 PrevTeam                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDTeam                                 NewTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCaptured                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDRuleset_TicketBleed::ControlPointTeamUpdated(class AHDBaseCapturePoint* ControlPoint, EHDTeam PrevTeam, EHDTeam NewTeam, bool bCaptured)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDRuleset_TicketBleed", "ControlPointTeamUpdated");

	Params::HDRuleset_TicketBleed_ControlPointTeamUpdated Parms{};

	Parms.ControlPoint = ControlPoint;
	Parms.PrevTeam = PrevTeam;
	Parms.NewTeam = NewTeam;
	Parms.bCaptured = bCaptured;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDRuleset_TicketBleed.UpdateTicketBleedState
// (Native, Protected, BlueprintCallable)

void UHDRuleset_TicketBleed::UpdateTicketBleedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDRuleset_TicketBleed", "UpdateTicketBleedState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDRuleset_TicketBleed.GetTicketBleedSettingsForTeam
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHDTeam                                 TicketBleedTeam                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTicketBleedRulesetSettingsReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FTicketBleedRulesetSettings UHDRuleset_TicketBleed::GetTicketBleedSettingsForTeam(EHDTeam TicketBleedTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDRuleset_TicketBleed", "GetTicketBleedSettingsForTeam");

	Params::HDRuleset_TicketBleed_GetTicketBleedSettingsForTeam Parms{};

	Parms.TicketBleedTeam = TicketBleedTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDScoreboardBase.ReceiveScoreboardListRowAdded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UHDScoreboardListingRowBase*      NewListEntry                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDScoreboardBase::ReceiveScoreboardListRowAdded(class UHDScoreboardListingRowBase* NewListEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDScoreboardBase", "ReceiveScoreboardListRowAdded");

	Params::HDScoreboardBase_ReceiveScoreboardListRowAdded Parms{};

	Parms.NewListEntry = NewListEntry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDServerListing.OnServerItemDataSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsDesignTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDServerListing::OnServerItemDataSet(bool bIsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDServerListing", "OnServerItemDataSet");

	Params::HDServerListing_OnServerItemDataSet Parms{};

	Parms.bIsDesignTime = bIsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDServerListing.SetupListing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UHDServerListItemData*            InServerItemData                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDServerListing::SetupListing(class UHDServerListItemData* InServerItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDServerListing", "SetupListing");

	Params::HDServerListing_SetupListing Parms{};

	Parms.InServerItemData = InServerItemData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.AssignSquadLeader
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AHDPlayerState*                   NewLeaderPS                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::AssignSquadLeader(class AHDPlayerState* NewLeaderPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "AssignSquadLeader");

	Params::HDSquadState_AssignSquadLeader Parms{};

	Parms.NewLeaderPS = NewLeaderPS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.LockSquad
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AHDSquadState::LockSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "LockSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.OnRep_bLocked
// (Native, Protected)

void AHDSquadState::OnRep_bLocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "OnRep_bLocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.OnRep_DisplayName
// (Native, Protected, HasOutParams)
// Parameters:
// class FText                             PrevDisplayName                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AHDSquadState::OnRep_DisplayName(class FText& PrevDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "OnRep_DisplayName");

	Params::HDSquadState_OnRep_DisplayName Parms{};

	Parms.PrevDisplayName = PrevDisplayName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.OnRep_SquadHiddenState
// (Native, Protected)

void AHDSquadState::OnRep_SquadHiddenState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "OnRep_SquadHiddenState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.OnRep_SquadLeader
// (Native, Protected)
// Parameters:
// class AHDPlayerState*                   PrevSquadLeader                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDSquadState::OnRep_SquadLeader(class AHDPlayerState* PrevSquadLeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "OnRep_SquadLeader");

	Params::HDSquadState_OnRep_SquadLeader Parms{};

	Parms.PrevSquadLeader = PrevSquadLeader;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.ReceiveInit
// (BlueprintAuthorityOnly, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHDSquadCreationParams           CreationParams                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AHDSquadState::ReceiveInit(struct FHDSquadCreationParams& CreationParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "ReceiveInit");

	Params::HDSquadState_ReceiveInit Parms{};

	Parms.CreationParams = std::move(CreationParams);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDSquadState.ReceiveSquadLeaderAssigned
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDPlayerState*                   NewLeaderPS                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlayerState*                   PrevLeaderPS                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDSquadState::ReceiveSquadLeaderAssigned(class AHDPlayerState* NewLeaderPS, class AHDPlayerState* PrevLeaderPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "ReceiveSquadLeaderAssigned");

	Params::HDSquadState_ReceiveSquadLeaderAssigned Parms{};

	Parms.NewLeaderPS = NewLeaderPS;
	Parms.PrevLeaderPS = PrevLeaderPS;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDSquadState.ReceiveSquadLocked
// (Event, Protected, BlueprintEvent)

void AHDSquadState::ReceiveSquadLocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "ReceiveSquadLocked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDSquadState.ReceiveSquadMemberPreUnregister
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDPlayerState*                   MemberPS                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDSquadState::ReceiveSquadMemberPreUnregister(class AHDPlayerState* MemberPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "ReceiveSquadMemberPreUnregister");

	Params::HDSquadState_ReceiveSquadMemberPreUnregister Parms{};

	Parms.MemberPS = MemberPS;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDSquadState.ReceiveSquadMemberRegistered
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDPlayerState*                   MemberPS                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDSquadState::ReceiveSquadMemberRegistered(class AHDPlayerState* MemberPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "ReceiveSquadMemberRegistered");

	Params::HDSquadState_ReceiveSquadMemberRegistered Parms{};

	Parms.MemberPS = MemberPS;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDSquadState.ReceiveSquadRenamed
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             NewName                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             PrevName                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AHDSquadState::ReceiveSquadRenamed(class FText& NewName, class FText& PrevName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "ReceiveSquadRenamed");

	Params::HDSquadState_ReceiveSquadRenamed Parms{};

	Parms.NewName = NewName;
	Parms.PrevName = PrevName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDSquadState.ReceiveSquadUnlocked
// (Event, Protected, BlueprintEvent)

void AHDSquadState::ReceiveSquadUnlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "ReceiveSquadUnlocked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDSquadState.RegisterPlayerSquadMember
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AHDPlayerController*              NewMemberPC                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::RegisterPlayerSquadMember(class AHDPlayerController* NewMemberPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "RegisterPlayerSquadMember");

	Params::HDSquadState_RegisterPlayerSquadMember Parms{};

	Parms.NewMemberPC = NewMemberPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.RegisterSquadMember
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AHDPlayerState*                   NewMemberPS                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::RegisterSquadMember(class AHDPlayerState* NewMemberPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "RegisterSquadMember");

	Params::HDSquadState_RegisterSquadMember Parms{};

	Parms.NewMemberPS = NewMemberPS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.RemoveFromOwner
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AHDSquadState::RemoveFromOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "RemoveFromOwner");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.RenameSquad
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             NewDisplayName                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AHDSquadState::RenameSquad(class FText& NewDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "RenameSquad");

	Params::HDSquadState_RenameSquad Parms{};

	Parms.NewDisplayName = NewDisplayName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.SquadMemberPSEndPlay
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDSquadState::SquadMemberPSEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "SquadMemberPSEndPlay");

	Params::HDSquadState_SquadMemberPSEndPlay Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.SquadMemberPSSquadUpdated
// (Final, Native, Private, HasOutParams)
// Parameters:
// class AHDPlayerState*                   MemberPS                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHDSquadAssignmentInfo           MemberSQInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AHDSquadState::SquadMemberPSSquadUpdated(class AHDPlayerState* MemberPS, struct FHDSquadAssignmentInfo& MemberSQInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "SquadMemberPSSquadUpdated");

	Params::HDSquadState_SquadMemberPSSquadUpdated Parms{};

	Parms.MemberPS = MemberPS;
	Parms.MemberSQInfo = std::move(MemberSQInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.SquadMemberPSTeamUpdated
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     MemberPS                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   LastTeamNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   NewTeamNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDSquadState::SquadMemberPSTeamUpdated(class APlayerState* MemberPS, uint8 LastTeamNum, uint8 NewTeamNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "SquadMemberPSTeamUpdated");

	Params::HDSquadState_SquadMemberPSTeamUpdated Parms{};

	Parms.MemberPS = MemberPS;
	Parms.LastTeamNum = LastTeamNum;
	Parms.NewTeamNum = NewTeamNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.UnlockSquad
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AHDSquadState::UnlockSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "UnlockSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.UnregisterPlayerSquadMember
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AHDPlayerController*              MemberPCToRemove                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::UnregisterPlayerSquadMember(class AHDPlayerController* MemberPCToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "UnregisterPlayerSquadMember");

	Params::HDSquadState_UnregisterPlayerSquadMember Parms{};

	Parms.MemberPCToRemove = MemberPCToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.UnregisterSquadMember
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AHDPlayerState*                   MemberPSToRemove                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::UnregisterSquadMember(class AHDPlayerState* MemberPSToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "UnregisterSquadMember");

	Params::HDSquadState_UnregisterSquadMember Parms{};

	Parms.MemberPSToRemove = MemberPSToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.UnregisterSquadMemberAt
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RemoveIdx                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::UnregisterSquadMemberAt(int32 RemoveIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "UnregisterSquadMemberAt");

	Params::HDSquadState_UnregisterSquadMemberAt Parms{};

	Parms.RemoveIdx = RemoveIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.CanRegisterPlayerSquadMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlayerController*              NewMemberPC                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::CanRegisterPlayerSquadMember(class AHDPlayerController* NewMemberPC) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "CanRegisterPlayerSquadMember");

	Params::HDSquadState_CanRegisterPlayerSquadMember Parms{};

	Parms.NewMemberPC = NewMemberPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.CanRegisterSquadMember
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlayerState*                   NewMemberPS                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::CanRegisterSquadMember(class AHDPlayerState* NewMemberPS) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "CanRegisterSquadMember");

	Params::HDSquadState_CanRegisterSquadMember Parms{};

	Parms.NewMemberPS = NewMemberPS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.DumpSquadMemberState
// (Final, Native, Public, BlueprintCallable, Const)

void AHDSquadState::DumpSquadMemberState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "DumpSquadMemberState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDSquadState.GetNumSquadMembers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bValidMembersOnly                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AHDSquadState::GetNumSquadMembers(bool bValidMembersOnly) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "GetNumSquadMembers");

	Params::HDSquadState_GetNumSquadMembers Parms{};

	Parms.bValidMembersOnly = bValidMembersOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.GetNumSquadMembersBots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bValidMembersOnly                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AHDSquadState::GetNumSquadMembersBots(bool bValidMembersOnly) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "GetNumSquadMembersBots");

	Params::HDSquadState_GetNumSquadMembersBots Parms{};

	Parms.bValidMembersOnly = bValidMembersOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.GetSquadMemberAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnorePendingRemoval                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDPlayerState* AHDSquadState::GetSquadMemberAt(int32 Param_Index, bool bIgnorePendingRemoval) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "GetSquadMemberAt");

	Params::HDSquadState_GetSquadMemberAt Parms{};

	Parms.Param_Index = Param_Index;
	Parms.bIgnorePendingRemoval = bIgnorePendingRemoval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.HasReachedMaxSquadMemberLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::HasReachedMaxSquadMemberLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "HasReachedMaxSquadMemberLimit");

	Params::HDSquadState_HasReachedMaxSquadMemberLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.IsPendingRemovalFromSquad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlayerState*                   PS                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::IsPendingRemovalFromSquad(class AHDPlayerState* PS) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "IsPendingRemovalFromSquad");

	Params::HDSquadState_IsPendingRemovalFromSquad Parms{};

	Parms.PS = PS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.IsPlayerPendingRemovalFromSquad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlayerController*              PC                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::IsPlayerPendingRemovalFromSquad(class AHDPlayerController* PC) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "IsPlayerPendingRemovalFromSquad");

	Params::HDSquadState_IsPlayerPendingRemovalFromSquad Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.IsPlayerRegisteredSquadMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlayerController*              PC                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnorePendingRemoval                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::IsPlayerRegisteredSquadMember(class AHDPlayerController* PC, bool bIgnorePendingRemoval) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "IsPlayerRegisteredSquadMember");

	Params::HDSquadState_IsPlayerRegisteredSquadMember Parms{};

	Parms.PC = PC;
	Parms.bIgnorePendingRemoval = bIgnorePendingRemoval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDSquadState.IsRegisteredSquadMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlayerState*                   PS                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnorePendingRemoval                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDSquadState::IsRegisteredSquadMember(class AHDPlayerState* PS, bool bIgnorePendingRemoval) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDSquadState", "IsRegisteredSquadMember");

	Params::HDSquadState_IsRegisteredSquadMember Parms{};

	Parms.PS = PS;
	Parms.bIgnorePendingRemoval = bIgnorePendingRemoval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDTeamState.AddPlatoon
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UHDPlatoonInfo*                   PlatoonInfo                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlatoonState*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDPlatoonState* AHDTeamState::AddPlatoon(class UHDPlatoonInfo* PlatoonInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "AddPlatoon");

	Params::HDTeamState_AddPlatoon Parms{};

	Parms.PlatoonInfo = PlatoonInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDTeamState.FindPlatoonByDefinition
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UHDPlatoonInfo*                   PlatoonDef                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlatoonState*                  OutFoundPlatoon                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDTeamState::FindPlatoonByDefinition(class UHDPlatoonInfo* PlatoonDef, class AHDPlatoonState** OutFoundPlatoon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "FindPlatoonByDefinition");

	Params::HDTeamState_FindPlatoonByDefinition Parms{};

	Parms.PlatoonDef = PlatoonDef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFoundPlatoon != nullptr)
		*OutFoundPlatoon = Parms.OutFoundPlatoon;

	return Parms.ReturnValue;
}


// Function HDMain.HDTeamState.FindPlatoonByName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             PlatoonDisplayName                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AHDPlatoonState*                  OutFoundPlatoon                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDTeamState::FindPlatoonByName(class FText& PlatoonDisplayName, class AHDPlatoonState** OutFoundPlatoon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "FindPlatoonByName");

	Params::HDTeamState_FindPlatoonByName Parms{};

	Parms.PlatoonDisplayName = PlatoonDisplayName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFoundPlatoon != nullptr)
		*OutFoundPlatoon = Parms.OutFoundPlatoon;

	return Parms.ReturnValue;
}


// Function HDMain.HDTeamState.ReceivePlatoonAdded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDPlatoonState*                  Platoon                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDTeamState::ReceivePlatoonAdded(class AHDPlatoonState* Platoon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "ReceivePlatoonAdded");

	Params::HDTeamState_ReceivePlatoonAdded Parms{};

	Parms.Platoon = Platoon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDTeamState.ReceivePlatoonPreRemove
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDPlatoonState*                  Platoon                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDTeamState::ReceivePlatoonPreRemove(class AHDPlatoonState* Platoon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "ReceivePlatoonPreRemove");

	Params::HDTeamState_ReceivePlatoonPreRemove Parms{};

	Parms.Platoon = Platoon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDTeamState.RemovePlatoon
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AHDPlatoonState*                  PlatoonToRemove                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDTeamState::RemovePlatoon(class AHDPlatoonState* PlatoonToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "RemovePlatoon");

	Params::HDTeamState_RemovePlatoon Parms{};

	Parms.PlatoonToRemove = PlatoonToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDTeamState.RemovePlatoonAt
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RemoveIdx                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHDTeamState::RemovePlatoonAt(int32 RemoveIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "RemovePlatoonAt");

	Params::HDTeamState_RemovePlatoonAt Parms{};

	Parms.RemoveIdx = RemoveIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDTeamState.DumpPlatoonState
// (Final, Native, Public, BlueprintCallable, Const)

void AHDTeamState::DumpPlatoonState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "DumpPlatoonState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDTeamState.GetNumPlatoons
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bValidPlatoonsOnly                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AHDTeamState::GetNumPlatoons(bool bValidPlatoonsOnly) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "GetNumPlatoons");

	Params::HDTeamState_GetNumPlatoons Parms{};

	Parms.bValidPlatoonsOnly = bValidPlatoonsOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDTeamState.GetPlatoonAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnorePendingRemoval                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDPlatoonState*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDPlatoonState* AHDTeamState::GetPlatoonAt(int32 Param_Index, bool bIgnorePendingRemoval) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "GetPlatoonAt");

	Params::HDTeamState_GetPlatoonAt Parms{};

	Parms.Param_Index = Param_Index;
	Parms.bIgnorePendingRemoval = bIgnorePendingRemoval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDTeamState.GetTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHDTeam                                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHDTeam AHDTeamState::GetTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "GetTeam");

	Params::HDTeamState_GetTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDTeamState.HasReachedMaxPlatoonLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDTeamState::HasReachedMaxPlatoonLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "HasReachedMaxPlatoonLimit");

	Params::HDTeamState_HasReachedMaxPlatoonLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDTeamState.IsPlatoonPendingRemovalFromTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlatoonState*                  Platoon                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDTeamState::IsPlatoonPendingRemovalFromTeam(class AHDPlatoonState* Platoon) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "IsPlatoonPendingRemovalFromTeam");

	Params::HDTeamState_IsPlatoonPendingRemovalFromTeam Parms{};

	Parms.Platoon = Platoon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDTeamState.PlatoonExists
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlatoonState*                  Platoon                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnorePendingRemoval                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AHDTeamState::PlatoonExists(class AHDPlatoonState* Platoon, bool bIgnorePendingRemoval) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTeamState", "PlatoonExists");

	Params::HDTeamState_PlatoonExists Parms{};

	Parms.Platoon = Platoon;
	Parms.bIgnorePendingRemoval = bIgnorePendingRemoval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDTextChatInputWidgetBase.OnChatMessageSubmitted
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class UHDTextChatMsgInfo*               SubmittedChatMsg                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDTextChatInputWidgetBase::OnChatMessageSubmitted(class UHDTextChatMsgInfo* SubmittedChatMsg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatInputWidgetBase", "OnChatMessageSubmitted");

	Params::HDTextChatInputWidgetBase_OnChatMessageSubmitted Parms{};

	Parms.SubmittedChatMsg = SubmittedChatMsg;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDTextChatInputWidgetBase.StartTalking
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class UDFCommChannel*                   NewTalkChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDTextChatInputWidgetBase::StartTalking(class UDFCommChannel* NewTalkChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatInputWidgetBase", "StartTalking");

	Params::HDTextChatInputWidgetBase_StartTalking Parms{};

	Parms.NewTalkChannel = NewTalkChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDTextChatInputWidgetBase.StartTalkingOnChannel
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class UDFCommChannel*                   TalkChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDTextChatInputWidgetBase::StartTalkingOnChannel(class UDFCommChannel* TalkChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatInputWidgetBase", "StartTalkingOnChannel");

	Params::HDTextChatInputWidgetBase_StartTalkingOnChannel Parms{};

	Parms.TalkChannel = TalkChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDTextChatInputWidgetBase.StopTalking
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class UDFCommChannel*                   CurrentChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDTextChatInputWidgetBase::StopTalking(class UDFCommChannel* CurrentChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatInputWidgetBase", "StopTalking");

	Params::HDTextChatInputWidgetBase_StopTalking Parms{};

	Parms.CurrentChannel = CurrentChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDTextChatInputWidgetBase.StopTalkingOnCurrentChannel
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void UHDTextChatInputWidgetBase::StopTalkingOnCurrentChannel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatInputWidgetBase", "StopTalkingOnCurrentChannel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDTextChatInputWidgetBase.SubmitChatMessage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FText                             ChatMsgText                                            (Parm, NativeAccessSpecifierPublic)

void UHDTextChatInputWidgetBase::SubmitChatMessage(class FText ChatMsgText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatInputWidgetBase", "SubmitChatMessage");

	Params::HDTextChatInputWidgetBase_SubmitChatMessage Parms{};

	Parms.ChatMsgText = ChatMsgText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDTextChatWidgetBase.DisplayChatMessage
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class UHDTextChatMsgInfo*               NewChatMsg                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDTextChatWidgetBase::DisplayChatMessage(class UHDTextChatMsgInfo* NewChatMsg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatWidgetBase", "DisplayChatMessage");

	Params::HDTextChatWidgetBase_DisplayChatMessage Parms{};

	Parms.NewChatMsg = NewChatMsg;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDTextChatWidgetBase.GetCachedChatMsgAt
// (Final, BlueprintCosmetic, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   MsgIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHDTextChatMsgInfo*               OutFoundMsg                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHDTextChatWidgetBase::GetCachedChatMsgAt(int32 MsgIndex, class UHDTextChatMsgInfo** OutFoundMsg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatWidgetBase", "GetCachedChatMsgAt");

	Params::HDTextChatWidgetBase_GetCachedChatMsgAt Parms{};

	Parms.MsgIndex = MsgIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFoundMsg != nullptr)
		*OutFoundMsg = Parms.OutFoundMsg;

	return Parms.ReturnValue;
}


// Function HDMain.HDTextChatWidgetBase.SayAllActionPressed
// (Final, Native, Private)

void UHDTextChatWidgetBase::SayAllActionPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatWidgetBase", "SayAllActionPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDTextChatWidgetBase.SaySquadActionPressed
// (Final, Native, Private)

void UHDTextChatWidgetBase::SaySquadActionPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatWidgetBase", "SaySquadActionPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDTextChatWidgetBase.SayTeamActionPressed
// (Final, Native, Private)

void UHDTextChatWidgetBase::SayTeamActionPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatWidgetBase", "SayTeamActionPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDTextChatWidgetBase.SetMaxChatMsgsToCache
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NumChatMsgsToCache                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDTextChatWidgetBase::SetMaxChatMsgsToCache(int32 NumChatMsgsToCache)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatWidgetBase", "SetMaxChatMsgsToCache");

	Params::HDTextChatWidgetBase_SetMaxChatMsgsToCache Parms{};

	Parms.NumChatMsgsToCache = NumChatMsgsToCache;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDTextChatWidgetBase.StartTalking
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class UDFCommChannel*                   TalkChannel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDTextChatWidgetBase::StartTalking(class UDFCommChannel* TalkChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatWidgetBase", "StartTalking");

	Params::HDTextChatWidgetBase_StartTalking Parms{};

	Parms.TalkChannel = TalkChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDTextChatWidgetBase.StopTalking
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UHDTextChatWidgetBase::StopTalking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatWidgetBase", "StopTalking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDTextChatWidgetBase.GetNumCachedChatMsgs
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHDTextChatWidgetBase::GetNumCachedChatMsgs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDTextChatWidgetBase", "GetNumCachedChatMsgs");

	Params::HDTextChatWidgetBase_GetNumCachedChatMsgs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDUGCLoadProgressScreen.SetupProgressScreen
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   TotalUGCToLoad                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUGCLoadProgressScreen::SetupProgressScreen(int32 TotalUGCToLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUGCLoadProgressScreen", "SetupProgressScreen");

	Params::HDUGCLoadProgressScreen_SetupProgressScreen Parms{};

	Parms.TotalUGCToLoad = TotalUGCToLoad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUGCLoadProgressScreen.UpdateLoadProgress
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   NumUGCRemainingToLoad                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUGCLoadProgressScreen::UpdateLoadProgress(int32 NumUGCRemainingToLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUGCLoadProgressScreen", "UpdateLoadProgress");

	Params::HDUGCLoadProgressScreen_UpdateLoadProgress Parms{};

	Parms.NumUGCRemainingToLoad = NumUGCRemainingToLoad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIStatics.GetServerIp
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FHDServerInfo                    InServerInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHDUIStatics::GetServerIp(struct FHDServerInfo& InServerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDUIStatics", "GetServerIp");

	Params::HDUIStatics_GetServerIp Parms{};

	Parms.InServerInfo = std::move(InServerInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDUIStatics.GetServerIpPort
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FHDServerInfo                    InServerInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UHDUIStatics::GetServerIpPort(struct FHDServerInfo& InServerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDUIStatics", "GetServerIpPort");

	Params::HDUIStatics_GetServerIpPort Parms{};

	Parms.InServerInfo = std::move(InServerInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDUIStatics.GetServerPort
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FHDServerInfo                    InServerInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UHDUIStatics::GetServerPort(struct FHDServerInfo& InServerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HDUIStatics", "GetServerPort");

	Params::HDUIStatics_GetServerPort Parms{};

	Parms.InServerInfo = std::move(InServerInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDUIUserWidget.BPDeinitializeFromOwnerPlayerCharacter
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDPlayerCharacter*               OwnerPlyChar                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUserWidget::BPDeinitializeFromOwnerPlayerCharacter(class AHDPlayerCharacter* OwnerPlyChar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "BPDeinitializeFromOwnerPlayerCharacter");

	Params::HDUIUserWidget_BPDeinitializeFromOwnerPlayerCharacter Parms{};

	Parms.OwnerPlyChar = OwnerPlyChar;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUserWidget.BPDeinitializeFromOwnerWeapon
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDBaseWeapon*                    OwnerWeap                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUserWidget::BPDeinitializeFromOwnerWeapon(class AHDBaseWeapon* OwnerWeap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "BPDeinitializeFromOwnerWeapon");

	Params::HDUIUserWidget_BPDeinitializeFromOwnerWeapon Parms{};

	Parms.OwnerWeap = OwnerWeap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUserWidget.BPInitializeForOwnerPlayerCharacter
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDPlayerCharacter*               OwnerPlyChar                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUserWidget::BPInitializeForOwnerPlayerCharacter(class AHDPlayerCharacter* OwnerPlyChar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "BPInitializeForOwnerPlayerCharacter");

	Params::HDUIUserWidget_BPInitializeForOwnerPlayerCharacter Parms{};

	Parms.OwnerPlyChar = OwnerPlyChar;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUserWidget.BPInitializeForOwnerWeapon
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDBaseWeapon*                    OwnerWeap                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUserWidget::BPInitializeForOwnerWeapon(class AHDBaseWeapon* OwnerWeap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "BPInitializeForOwnerWeapon");

	Params::HDUIUserWidget_BPInitializeForOwnerWeapon Parms{};

	Parms.OwnerWeap = OwnerWeap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUserWidget.BPOwnerDeath
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class APawn*                            VictimPawn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      VictimController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   KillingDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class APawn*                            InstigatingPawn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUserWidget::BPOwnerDeath(class APawn* VictimPawn, class AController* VictimController, float KillingDamage, struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "BPOwnerDeath");

	Params::HDUIUserWidget_BPOwnerDeath Parms{};

	Parms.VictimPawn = VictimPawn;
	Parms.VictimController = VictimController;
	Parms.KillingDamage = KillingDamage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.InstigatingPawn = InstigatingPawn;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUserWidget.BPOwnerPossessPawn
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUserWidget::BPOwnerPossessPawn(class APawn* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "BPOwnerPossessPawn");

	Params::HDUIUserWidget_BPOwnerPossessPawn Parms{};

	Parms.NewPawn = NewPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUserWidget.BPOwnerUnpossessPawn
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            UnpossessedPawn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUserWidget::BPOwnerUnpossessPawn(class APawn* UnpossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "BPOwnerUnpossessPawn");

	Params::HDUIUserWidget_BPOwnerUnpossessPawn Parms{};

	Parms.UnpossessedPawn = UnpossessedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUserWidget.BPOwnerWeaponChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDBaseWeapon*                    NewWeap                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHDBaseWeapon*                    PrevWeap                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUserWidget::BPOwnerWeaponChanged(class AHDBaseWeapon* NewWeap, class AHDBaseWeapon* PrevWeap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "BPOwnerWeaponChanged");

	Params::HDUIUserWidget_BPOwnerWeaponChanged Parms{};

	Parms.NewWeap = NewWeap;
	Parms.PrevWeap = PrevWeap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUserWidget.OwnerDeath
// (Final, Native, Private, HasOutParams)
// Parameters:
// class APawn*                            VictimPawn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      VictimController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   KillingDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class APawn*                            InstigatingPawn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUserWidget::OwnerDeath(class APawn* VictimPawn, class AController* VictimController, float KillingDamage, struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "OwnerDeath");

	Params::HDUIUserWidget_OwnerDeath Parms{};

	Parms.VictimPawn = VictimPawn;
	Parms.VictimController = VictimController;
	Parms.KillingDamage = KillingDamage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.InstigatingPawn = InstigatingPawn;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUserWidget.OwnerEquippedItemChanged
// (Final, Native, Private)
// Parameters:
// class ADFBaseCharacter*                 Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADFBaseItem*                      NewEquippedItem                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADFBaseItem*                      PrevEquippedItem                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUserWidget::OwnerEquippedItemChanged(class ADFBaseCharacter* Character, class ADFBaseItem* NewEquippedItem, class ADFBaseItem* PrevEquippedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "OwnerEquippedItemChanged");

	Params::HDUIUserWidget_OwnerEquippedItemChanged Parms{};

	Parms.Character = Character;
	Parms.NewEquippedItem = NewEquippedItem;
	Parms.PrevEquippedItem = PrevEquippedItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUserWidget.OwnerPossessPawn
// (Final, Native, Private)
// Parameters:
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUserWidget::OwnerPossessPawn(class APawn* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "OwnerPossessPawn");

	Params::HDUIUserWidget_OwnerPossessPawn Parms{};

	Parms.NewPawn = NewPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUserWidget.OwnerUnpossessPawn
// (Final, Native, Private)
// Parameters:
// class APawn*                            UnpossessedPawn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUserWidget::OwnerUnpossessPawn(class APawn* UnpossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "OwnerUnpossessPawn");

	Params::HDUIUserWidget_OwnerUnpossessPawn Parms{};

	Parms.UnpossessedPawn = UnpossessedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUserWidget.GetOwnerEquippedWeapon
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDBaseWeapon*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDBaseWeapon* UHDUIUserWidget::GetOwnerEquippedWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "GetOwnerEquippedWeapon");

	Params::HDUIUserWidget_GetOwnerEquippedWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDUIUserWidget.GetOwningHDPlayer
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDPlayerController* UHDUIUserWidget::GetOwningHDPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "GetOwningHDPlayer");

	Params::HDUIUserWidget_GetOwningHDPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDUIUserWidget.GetOwningHDPlayerCharacter
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlayerCharacter*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDPlayerCharacter* UHDUIUserWidget::GetOwningHDPlayerCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "GetOwningHDPlayerCharacter");

	Params::HDUIUserWidget_GetOwningHDPlayerCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDUIUserWidget.GetOwningHDPlayerCharacterMovement
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDFCharacterMovementComponent*    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDFCharacterMovementComponent* UHDUIUserWidget::GetOwningHDPlayerCharacterMovement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "GetOwningHDPlayerCharacterMovement");

	Params::HDUIUserWidget_GetOwningHDPlayerCharacterMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDUIUserWidget.GetOwningHDPlayerHUD
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDHUD*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDHUD* UHDUIUserWidget::GetOwningHDPlayerHUD() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "GetOwningHDPlayerHUD");

	Params::HDUIUserWidget_GetOwningHDPlayerHUD Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDUIUserWidget.GetOwningPlayerHUD
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHUD*                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHUD* UHDUIUserWidget::GetOwningPlayerHUD() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUserWidget", "GetOwningPlayerHUD");

	Params::HDUIUserWidget_GetOwningPlayerHUD Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.HDUIUWCaptureStatus.ControlPointSetCaptureProgress
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bContested                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewValueNorm                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldValueNorm                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitial                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWCaptureStatus::ControlPointSetCaptureProgress(bool bContested, float NewValueNorm, float OldValueNorm, bool bInitial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWCaptureStatus", "ControlPointSetCaptureProgress");

	Params::HDUIUWCaptureStatus_ControlPointSetCaptureProgress Parms{};

	Parms.bContested = bContested;
	Parms.NewValueNorm = NewValueNorm;
	Parms.OldValueNorm = OldValueNorm;
	Parms.bInitial = bInitial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWCaptureStatus.ControlPointSetGarrisonedPlayerCount
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   NumFriendlies                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumEnemies                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinNumRequiredForCapture                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitial                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWCaptureStatus::ControlPointSetGarrisonedPlayerCount(int32 NumFriendlies, int32 NumEnemies, int32 MinNumRequiredForCapture, bool bInitial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWCaptureStatus", "ControlPointSetGarrisonedPlayerCount");

	Params::HDUIUWCaptureStatus_ControlPointSetGarrisonedPlayerCount Parms{};

	Parms.NumFriendlies = NumFriendlies;
	Parms.NumEnemies = NumEnemies;
	Parms.MinNumRequiredForCapture = MinNumRequiredForCapture;
	Parms.bInitial = bInitial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWCaptureStatus.ControlPointSetOwnershipState
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bCaptured                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDTeam                                 NewOwningTeam                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDTeam                                 OldOwningTeam                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitial                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWCaptureStatus::ControlPointSetOwnershipState(bool bCaptured, EHDTeam NewOwningTeam, EHDTeam OldOwningTeam, bool bInitial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWCaptureStatus", "ControlPointSetOwnershipState");

	Params::HDUIUWCaptureStatus_ControlPointSetOwnershipState Parms{};

	Parms.bCaptured = bCaptured;
	Parms.NewOwningTeam = NewOwningTeam;
	Parms.OldOwningTeam = OldOwningTeam;
	Parms.bInitial = bInitial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWCaptureStatus.CPBeginEndOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedControlPointActor                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWCaptureStatus::CPBeginEndOverlap(class AActor* OverlappedControlPointActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWCaptureStatus", "CPBeginEndOverlap");

	Params::HDUIUWCaptureStatus_CPBeginEndOverlap Parms{};

	Parms.OverlappedControlPointActor = OverlappedControlPointActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUWCaptureStatus.CPCaptureProgressUpdate
// (Final, Native, Private)
// Parameters:
// class AHDBaseCapturePoint*              ControlPoint                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInCaptureContested                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCaptureProgress                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWCaptureStatus::CPCaptureProgressUpdate(class AHDBaseCapturePoint* ControlPoint, bool bInCaptureContested, int32 InCaptureProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWCaptureStatus", "CPCaptureProgressUpdate");

	Params::HDUIUWCaptureStatus_CPCaptureProgressUpdate Parms{};

	Parms.ControlPoint = ControlPoint;
	Parms.bInCaptureContested = bInCaptureContested;
	Parms.InCaptureProgress = InCaptureProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUWCaptureStatus.CPOwnershipUpdate
// (Final, Native, Private)
// Parameters:
// class AHDBaseCapturePoint*              ControlPoint                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDTeam                                 PrevOwningTeam                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDTeam                                 NewOwningTeam                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCaptured                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWCaptureStatus::CPOwnershipUpdate(class AHDBaseCapturePoint* ControlPoint, EHDTeam PrevOwningTeam, EHDTeam NewOwningTeam, bool bCaptured)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWCaptureStatus", "CPOwnershipUpdate");

	Params::HDUIUWCaptureStatus_CPOwnershipUpdate Parms{};

	Parms.ControlPoint = ControlPoint;
	Parms.PrevOwningTeam = PrevOwningTeam;
	Parms.NewOwningTeam = NewOwningTeam;
	Parms.bCaptured = bCaptured;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUWCaptureStatus.OwnerBeginOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedOwnerChar                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWCaptureStatus::OwnerBeginOverlap(class AActor* OverlappedOwnerChar, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWCaptureStatus", "OwnerBeginOverlap");

	Params::HDUIUWCaptureStatus_OwnerBeginOverlap Parms{};

	Parms.OverlappedOwnerChar = OverlappedOwnerChar;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUWCaptureStatus.OwnerEndOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedOwnerChar                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWCaptureStatus::OwnerEndOverlap(class AActor* OverlappedOwnerChar, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWCaptureStatus", "OwnerEndOverlap");

	Params::HDUIUWCaptureStatus_OwnerEndOverlap Parms{};

	Parms.OverlappedOwnerChar = OverlappedOwnerChar;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUWCaptureStatus.OwnerNoControlPoint
// (Event, Protected, BlueprintEvent)

void UHDUIUWCaptureStatus::OwnerNoControlPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWCaptureStatus", "OwnerNoControlPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDUIUWCaptureStatus.OwnerTouchingControlPoint
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AHDBaseCapturePoint*              OverlappingCP                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitial                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWCaptureStatus::OwnerTouchingControlPoint(class AHDBaseCapturePoint* OverlappingCP, bool bInitial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWCaptureStatus", "OwnerTouchingControlPoint");

	Params::HDUIUWCaptureStatus_OwnerTouchingControlPoint Parms{};

	Parms.OverlappingCP = OverlappingCP;
	Parms.bInitial = bInitial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWPlayerStatus.OwnerAimTransitionUpdate
// (Final, Native, Private)
// Parameters:
// bool                                    bIsAiming                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWPlayerStatus::OwnerAimTransitionUpdate(bool bIsAiming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerAimTransitionUpdate");

	Params::HDUIUWPlayerStatus_OwnerAimTransitionUpdate Parms{};

	Parms.bIsAiming = bIsAiming;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUWPlayerStatus.OwnerEndAim
// (Event, Protected, BlueprintEvent)

void UHDUIUWPlayerStatus::OwnerEndAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerEndAim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDUIUWPlayerStatus.OwnerEndSprint
// (Event, Protected, BlueprintEvent)

void UHDUIUWPlayerStatus::OwnerEndSprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerEndSprint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDUIUWPlayerStatus.OwnerHealthUpdate
// (Final, Native, Private)
// Parameters:
// class ADFBaseCharacter*                 Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewHealthTotal                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PrevHealthTotal                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWPlayerStatus::OwnerHealthUpdate(class ADFBaseCharacter* Character, float NewHealthTotal, float PrevHealthTotal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerHealthUpdate");

	Params::HDUIUWPlayerStatus_OwnerHealthUpdate Parms{};

	Parms.Character = Character;
	Parms.NewHealthTotal = NewHealthTotal;
	Parms.PrevHealthTotal = PrevHealthTotal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUWPlayerStatus.OwnerSetHealth
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewValueNorm                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldValueNorm                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitial                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWPlayerStatus::OwnerSetHealth(float NewValueNorm, float OldValueNorm, bool bInitial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerSetHealth");

	Params::HDUIUWPlayerStatus_OwnerSetHealth Parms{};

	Parms.NewValueNorm = NewValueNorm;
	Parms.OldValueNorm = OldValueNorm;
	Parms.bInitial = bInitial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWPlayerStatus.OwnerSetJumpStamina
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewValueNorm                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldValueNorm                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitial                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWPlayerStatus::OwnerSetJumpStamina(float NewValueNorm, float OldValueNorm, bool bInitial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerSetJumpStamina");

	Params::HDUIUWPlayerStatus_OwnerSetJumpStamina Parms{};

	Parms.NewValueNorm = NewValueNorm;
	Parms.OldValueNorm = OldValueNorm;
	Parms.bInitial = bInitial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWPlayerStatus.OwnerSetSprintStamina
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewValueNorm                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OldValueNorm                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitial                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWPlayerStatus::OwnerSetSprintStamina(float NewValueNorm, float OldValueNorm, bool bInitial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerSetSprintStamina");

	Params::HDUIUWPlayerStatus_OwnerSetSprintStamina Parms{};

	Parms.NewValueNorm = NewValueNorm;
	Parms.OldValueNorm = OldValueNorm;
	Parms.bInitial = bInitial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWPlayerStatus.OwnerSetStance
// (Event, Protected, BlueprintEvent)
// Parameters:
// ECharacterStance                        NewStance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECharacterStance                        OldStance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitial                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWPlayerStatus::OwnerSetStance(ECharacterStance NewStance, ECharacterStance OldStance, bool bInitial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerSetStance");

	Params::HDUIUWPlayerStatus_OwnerSetStance Parms{};

	Parms.NewStance = NewStance;
	Parms.OldStance = OldStance;
	Parms.bInitial = bInitial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWPlayerStatus.OwnerSetStanceState
// (Event, Protected, BlueprintEvent)
// Parameters:
// EHDUICharacterStanceState               NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDUICharacterStanceState               OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitial                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWPlayerStatus::OwnerSetStanceState(EHDUICharacterStanceState NewState, EHDUICharacterStanceState OldState, bool bInitial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerSetStanceState");

	Params::HDUIUWPlayerStatus_OwnerSetStanceState Parms{};

	Parms.NewState = NewState;
	Parms.OldState = OldState;
	Parms.bInitial = bInitial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWPlayerStatus.OwnerSprintTransitionUpdate
// (Final, Native, Private)
// Parameters:
// bool                                    bIsSprinting                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWPlayerStatus::OwnerSprintTransitionUpdate(bool bIsSprinting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerSprintTransitionUpdate");

	Params::HDUIUWPlayerStatus_OwnerSprintTransitionUpdate Parms{};

	Parms.bIsSprinting = bIsSprinting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUWPlayerStatus.OwnerStartAim
// (Event, Protected, BlueprintEvent)

void UHDUIUWPlayerStatus::OwnerStartAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerStartAim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDUIUWPlayerStatus.OwnerStartSprint
// (Event, Protected, BlueprintEvent)

void UHDUIUWPlayerStatus::OwnerStartSprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerStartSprint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HDMain.HDUIUWPlayerStatus.OwnerUpdateStamina
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   SprintValueNorm                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   JumpValueNorm                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitial                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWPlayerStatus::OwnerUpdateStamina(float SprintValueNorm, float JumpValueNorm, bool bInitial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWPlayerStatus", "OwnerUpdateStamina");

	Params::HDUIUWPlayerStatus_OwnerUpdateStamina Parms{};

	Parms.SprintValueNorm = SprintValueNorm;
	Parms.JumpValueNorm = JumpValueNorm;
	Parms.bInitial = bInitial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWWeaponStatus.BPOwnerWeaponAmmoUpdated
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHDUIWeaponAmmoState             AmmoState                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bFromReload                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTotalFreeAmmoUpdated                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNumFreeAmmoClipsUpdated                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWWeaponStatus::BPOwnerWeaponAmmoUpdated(struct FHDUIWeaponAmmoState& AmmoState, bool bFromReload, bool bTotalFreeAmmoUpdated, bool bNumFreeAmmoClipsUpdated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWWeaponStatus", "BPOwnerWeaponAmmoUpdated");

	Params::HDUIUWWeaponStatus_BPOwnerWeaponAmmoUpdated Parms{};

	Parms.AmmoState = std::move(AmmoState);
	Parms.bFromReload = bFromReload;
	Parms.bTotalFreeAmmoUpdated = bTotalFreeAmmoUpdated;
	Parms.bNumFreeAmmoClipsUpdated = bNumFreeAmmoClipsUpdated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWWeaponStatus.BPOwnerWeaponSetFireMode
// (Event, Protected, BlueprintEvent)
// Parameters:
// EFireMode                               NewFireMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFireMode                               PreviousFireMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromPlayerInput                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWWeaponStatus::BPOwnerWeaponSetFireMode(EFireMode NewFireMode, EFireMode PreviousFireMode, bool bFromPlayerInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWWeaponStatus", "BPOwnerWeaponSetFireMode");

	Params::HDUIUWWeaponStatus_BPOwnerWeaponSetFireMode Parms{};

	Parms.NewFireMode = NewFireMode;
	Parms.PreviousFireMode = PreviousFireMode;
	Parms.bFromPlayerInput = bFromPlayerInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWWeaponStatus.OwnerAimStyleChanged
// (Final, Native, Private)
// Parameters:
// class AHDPlayerCharacter*               Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDWeaponAimStyle                       NewAimStyle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDWeaponAimStyle                       PrevAimStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromPlayerInput                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWWeaponStatus::OwnerAimStyleChanged(class AHDPlayerCharacter* Character, EHDWeaponAimStyle NewAimStyle, EHDWeaponAimStyle PrevAimStyle, bool bFromPlayerInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWWeaponStatus", "OwnerAimStyleChanged");

	Params::HDUIUWWeaponStatus_OwnerAimStyleChanged Parms{};

	Parms.Character = Character;
	Parms.NewAimStyle = NewAimStyle;
	Parms.PrevAimStyle = PrevAimStyle;
	Parms.bFromPlayerInput = bFromPlayerInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDUIUWWeaponStatus.OwnerSetAimStyle
// (Event, Protected, BlueprintEvent)
// Parameters:
// EHDWeaponAimStyle                       NewAimStyle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHDWeaponAimStyle                       PrevAimStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromPlayerInput                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWWeaponStatus::OwnerSetAimStyle(EHDWeaponAimStyle NewAimStyle, EHDWeaponAimStyle PrevAimStyle, bool bFromPlayerInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWWeaponStatus", "OwnerSetAimStyle");

	Params::HDUIUWWeaponStatus_OwnerSetAimStyle Parms{};

	Parms.NewAimStyle = NewAimStyle;
	Parms.PrevAimStyle = PrevAimStyle;
	Parms.bFromPlayerInput = bFromPlayerInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDUIUWWeaponStatus.OwnerWeaponFireModeChanged
// (Final, Native, Private)
// Parameters:
// class ADFBaseGun*                       Gun                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFireMode                               NewFireMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFireMode                               PrevFireMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromPlayerInput                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDUIUWWeaponStatus::OwnerWeaponFireModeChanged(class ADFBaseGun* Gun, EFireMode NewFireMode, EFireMode PrevFireMode, bool bFromPlayerInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDUIUWWeaponStatus", "OwnerWeaponFireModeChanged");

	Params::HDUIUWWeaponStatus_OwnerWeaponFireModeChanged Parms{};

	Parms.Gun = Gun;
	Parms.NewFireMode = NewFireMode;
	Parms.PrevFireMode = PrevFireMode;
	Parms.bFromPlayerInput = bFromPlayerInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDVoipIndicatorListingWidgetBase.OnVoiceMsgInfoSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsDesignTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDVoipIndicatorListingWidgetBase::OnVoiceMsgInfoSet(bool bIsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDVoipIndicatorListingWidgetBase", "OnVoiceMsgInfoSet");

	Params::HDVoipIndicatorListingWidgetBase_OnVoiceMsgInfoSet Parms{};

	Parms.bIsDesignTime = bIsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDVoipIndicatorListingWidgetBase.SetupVoiceListing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UHDVoiceChatMsgInfo*              InVoiceMsgInfo                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDVoipIndicatorListingWidgetBase::SetupVoiceListing(class UHDVoiceChatMsgInfo* InVoiceMsgInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDVoipIndicatorListingWidgetBase", "SetupVoiceListing");

	Params::HDVoipIndicatorListingWidgetBase_SetupVoiceListing Parms{};

	Parms.InVoiceMsgInfo = InVoiceMsgInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.HDVoipIndicatorWidgetBase.OnOwningPlayerStartTalking
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class UHDVoiceChatMsgInfo*              LocalTalkerMsgInfo                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDVoipIndicatorWidgetBase::OnOwningPlayerStartTalking(class UHDVoiceChatMsgInfo* LocalTalkerMsgInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDVoipIndicatorWidgetBase", "OnOwningPlayerStartTalking");

	Params::HDVoipIndicatorWidgetBase_OnOwningPlayerStartTalking Parms{};

	Parms.LocalTalkerMsgInfo = LocalTalkerMsgInfo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDVoipIndicatorWidgetBase.OnOwningPlayerStopTalking
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class UHDVoiceChatMsgInfo*              LocalTalkerMsgInfo                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDVoipIndicatorWidgetBase::OnOwningPlayerStopTalking(class UHDVoiceChatMsgInfo* LocalTalkerMsgInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDVoipIndicatorWidgetBase", "OnOwningPlayerStopTalking");

	Params::HDVoipIndicatorWidgetBase_OnOwningPlayerStopTalking Parms{};

	Parms.LocalTalkerMsgInfo = LocalTalkerMsgInfo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDVoipIndicatorWidgetBase.OnPlayerStartTalking
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class UHDVoiceChatMsgInfo*              TalkerMsgInfo                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDVoipIndicatorWidgetBase::OnPlayerStartTalking(class UHDVoiceChatMsgInfo* TalkerMsgInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDVoipIndicatorWidgetBase", "OnPlayerStartTalking");

	Params::HDVoipIndicatorWidgetBase_OnPlayerStartTalking Parms{};

	Parms.TalkerMsgInfo = TalkerMsgInfo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.HDVoipIndicatorWidgetBase.OnPlayerStopTalking
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class UHDVoiceChatMsgInfo*              TalkerMsgInfo                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHDVoipIndicatorWidgetBase::OnPlayerStopTalking(class UHDVoiceChatMsgInfo* TalkerMsgInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HDVoipIndicatorWidgetBase", "OnPlayerStopTalking");

	Params::HDVoipIndicatorWidgetBase_OnPlayerStopTalking Parms{};

	Parms.TalkerMsgInfo = TalkerMsgInfo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HDMain.SquadListEntry.GetParentPlatoonState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlatoonState*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDPlatoonState* USquadListEntry::GetParentPlatoonState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadListEntry", "GetParentPlatoonState");

	Params::SquadListEntry_GetParentPlatoonState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.SquadMemberInfo.GetParentPlatoonState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDPlatoonState*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDPlatoonState* USquadMemberInfo::GetParentPlatoonState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadMemberInfo", "GetParentPlatoonState");

	Params::SquadMemberInfo_GetParentPlatoonState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.SquadMemberInfo.GetParentSquadState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AHDSquadState*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHDSquadState* USquadMemberInfo::GetParentSquadState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SquadMemberInfo", "GetParentSquadState");

	Params::SquadMemberInfo_GetParentSquadState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDMain.VictoryMenu.Init
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHDGameRoundEndEventDetails      InRoundDetails                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bInWinner                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVictoryMenu::Init(struct FHDGameRoundEndEventDetails& InRoundDetails, bool bInWinner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VictoryMenu", "Init");

	Params::VictoryMenu_Init Parms{};

	Parms.InRoundDetails = std::move(InRoundDetails);
	Parms.bInWinner = bInWinner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HDMain.VictoryMenu.OnVictoryInit
// (Event, Protected, BlueprintEvent)

void UVictoryMenu::OnVictoryInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VictoryMenu", "OnVictoryInit");

	UObject::ProcessEvent(Func, nullptr);
}

}


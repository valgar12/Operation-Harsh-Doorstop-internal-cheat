#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HDMain

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DonkehFramework_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum HDMain.EHDTeam
// NumValues: 0x0004
enum class EHDTeam : uint8
{
	Red                                      = 0,
	Blue                                     = 1,
	NoTeam                                   = 255,
	EHDTeam_MAX                              = 256,
};

// Enum HDMain.EHDWeaponAimStyle
// NumValues: 0x0006
enum class EHDWeaponAimStyle : uint8
{
	None                                     = 0,
	PointAim                                 = 1,
	OpticMode1                               = 2,
	OpticMode2                               = 3,
	OpticMode3                               = 4,
	EHDWeaponAimStyle_MAX                    = 5,
};

// Enum HDMain.EHDAIThreatLevel
// NumValues: 0x0006
enum class EHDAIThreatLevel : uint8
{
	None                                     = 0,
	Safe                                     = 1,
	Aware                                    = 2,
	Combat                                   = 3,
	Danger                                   = 4,
	EHDAIThreatLevel_MAX                     = 5,
};

// Enum HDMain.EHDAICombatTargetType
// NumValues: 0x0007
enum class EHDAICombatTargetType : uint8
{
	None                                     = 0,
	EnemyActor                               = 1,
	SuppressionLocation                      = 2,
	SafeSuppressionLocation                  = 3,
	CustomSetLocation                        = 4,
	ClearTarget                              = 5,
	EHDAICombatTargetType_MAX                = 6,
};

// Enum HDMain.EHDPrimaryAssetType
// NumValues: 0x0006
enum class EHDPrimaryAssetType : uint8
{
	Faction                                  = 0,
	GameMode                                 = 1,
	Map                                      = 2,
	Platoon                                  = 3,
	Ruleset                                  = 4,
	EHDPrimaryAssetType_MAX                  = 5,
};

// Enum HDMain.EHDAIVocalizationType
// NumValues: 0x0008
enum class EHDAIVocalizationType : uint8
{
	None                                     = 0,
	Contact                                  = 1,
	LostContact                              = 2,
	Reloading                                = 3,
	BeenHit                                  = 4,
	UnderSuppression                         = 5,
	Death                                    = 6,
	EHDAIVocalizationType_MAX                = 7,
};

// Enum HDMain.EHDAICaptureMode
// NumValues: 0x0004
enum class EHDAICaptureMode : uint8
{
	Attack                                   = 0,
	Defend                                   = 1,
	None                                     = 2,
	EHDAICaptureMode_MAX                     = 3,
};

// Enum HDMain.EHDControlPointObjectiveType
// NumValues: 0x0004
enum class EHDControlPointObjectiveType : uint8
{
	Offensive                                = 0,
	Defensive                                = 1,
	NoObjective                              = 2,
	EHDControlPointObjectiveType_MAX         = 3,
};

// Enum HDMain.EHDServerListSortBy
// NumValues: 0x0008
enum class EHDServerListSortBy : uint8
{
	None                                     = 0,
	Name                                     = 1,
	Mode                                     = 2,
	Map                                      = 3,
	PlayerCount                              = 4,
	Ping                                     = 5,
	Version                                  = 6,
	EHDServerListSortBy_MAX                  = 7,
};

// Enum HDMain.EHDFilterRuleComparisonOp
// NumValues: 0x0003
enum class EHDFilterRuleComparisonOp : uint8
{
	EqualTo                                  = 0,
	NotEqualTo                               = 1,
	EHDFilterRuleComparisonOp_MAX            = 2,
};

// Enum HDMain.EHDFilterRuleBehavior
// NumValues: 0x0004
enum class EHDFilterRuleBehavior : uint8
{
	Show                                     = 0,
	Hide                                     = 1,
	OnlyShow                                 = 2,
	EHDFilterRuleBehavior_MAX                = 3,
};

// Enum HDMain.EHDUICharacterStanceState
// NumValues: 0x0009
enum class EHDUICharacterStanceState : uint8
{
	Stand                                    = 0,
	StandAim                                 = 1,
	StandMount                               = 2,
	Sprint                                   = 3,
	Crouch                                   = 4,
	CrouchAim                                = 5,
	CrouchMount                              = 6,
	Prone                                    = 7,
	EHDUICharacterStanceState_MAX            = 8,
};

// ScriptStruct HDMain.HDAISpecificItemTypeAttackData
// 0x002C (0x002C - 0x0000)
struct FHDAISpecificItemTypeAttackData final 
{
public:
	float                                         AttackRateMin;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackRateMax;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BurstAttackProbability;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BurstAttackNumberMin;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BurstAttackNumberMax;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponStopFireTimeMin;                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponStopFireTimeMax;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterEquipCooldownTime;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecialtyItemUseTimeLimit;                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterSpecialtyItemUsedTimeLimit;                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bWeaponMovementFire : 1;                           // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1134[0x3];                                     // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FHDAISpecificItemTypeAttackData) == 0x000004, "Wrong alignment on FHDAISpecificItemTypeAttackData");
//(sizeof(FHDAISpecificItemTypeAttackData) == 0x00002C, "Wrong size on FHDAISpecificItemTypeAttackData");
//(offsetof(FHDAISpecificItemTypeAttackData, AttackRateMin) == 0x000000, "Member 'FHDAISpecificItemTypeAttackData::AttackRateMin' has a wrong offset!");
//(offsetof(FHDAISpecificItemTypeAttackData, AttackRateMax) == 0x000004, "Member 'FHDAISpecificItemTypeAttackData::AttackRateMax' has a wrong offset!");
//(offsetof(FHDAISpecificItemTypeAttackData, BurstAttackProbability) == 0x000008, "Member 'FHDAISpecificItemTypeAttackData::BurstAttackProbability' has a wrong offset!");
//(offsetof(FHDAISpecificItemTypeAttackData, BurstAttackNumberMin) == 0x00000C, "Member 'FHDAISpecificItemTypeAttackData::BurstAttackNumberMin' has a wrong offset!");
//(offsetof(FHDAISpecificItemTypeAttackData, BurstAttackNumberMax) == 0x000010, "Member 'FHDAISpecificItemTypeAttackData::BurstAttackNumberMax' has a wrong offset!");
//(offsetof(FHDAISpecificItemTypeAttackData, WeaponStopFireTimeMin) == 0x000014, "Member 'FHDAISpecificItemTypeAttackData::WeaponStopFireTimeMin' has a wrong offset!");
//(offsetof(FHDAISpecificItemTypeAttackData, WeaponStopFireTimeMax) == 0x000018, "Member 'FHDAISpecificItemTypeAttackData::WeaponStopFireTimeMax' has a wrong offset!");
//(offsetof(FHDAISpecificItemTypeAttackData, AfterEquipCooldownTime) == 0x00001C, "Member 'FHDAISpecificItemTypeAttackData::AfterEquipCooldownTime' has a wrong offset!");
//(offsetof(FHDAISpecificItemTypeAttackData, SpecialtyItemUseTimeLimit) == 0x000020, "Member 'FHDAISpecificItemTypeAttackData::SpecialtyItemUseTimeLimit' has a wrong offset!");
//(offsetof(FHDAISpecificItemTypeAttackData, AfterSpecialtyItemUsedTimeLimit) == 0x000024, "Member 'FHDAISpecificItemTypeAttackData::AfterSpecialtyItemUsedTimeLimit' has a wrong offset!");

// ScriptStruct HDMain.HDSquadAssignmentInfo
// 0x0010 (0x0010 - 0x0000)
struct FHDSquadAssignmentInfo final 
{
public:
	class AHDSquadState*                          SquadState;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SquadAssignmentTime;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1135[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FHDSquadAssignmentInfo) == 0x000008, "Wrong alignment on FHDSquadAssignmentInfo");
//(sizeof(FHDSquadAssignmentInfo) == 0x000010, "Wrong size on FHDSquadAssignmentInfo");
//(offsetof(FHDSquadAssignmentInfo, SquadState) == 0x000000, "Member 'FHDSquadAssignmentInfo::SquadState' has a wrong offset!");
//(offsetof(FHDSquadAssignmentInfo, SquadAssignmentTime) == 0x000008, "Member 'FHDSquadAssignmentInfo::SquadAssignmentTime' has a wrong offset!");

// ScriptStruct HDMain.HDAIItemData
// 0x0008 (0x0008 - 0x0000)
struct FHDAIItemData final 
{
public:
	ESpecificItemType                             SpecificType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1136[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InventoryIndex;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FHDAIItemData) == 0x000004, "Wrong alignment on FHDAIItemData");
//(sizeof(FHDAIItemData) == 0x000008, "Wrong size on FHDAIItemData");
//(offsetof(FHDAIItemData, SpecificType) == 0x000000, "Member 'FHDAIItemData::SpecificType' has a wrong offset!");
//(offsetof(FHDAIItemData, InventoryIndex) == 0x000004, "Member 'FHDAIItemData::InventoryIndex' has a wrong offset!");

// ScriptStruct HDMain.HDAISuppressionSource
// 0x0018 (0x0018 - 0x0000)
struct FHDAISuppressionSource final 
{
public:
	class ADFBaseCharacter*                       OwnerChar;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1137[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FHDAISuppressionSource) == 0x000008, "Wrong alignment on FHDAISuppressionSource");
//(sizeof(FHDAISuppressionSource) == 0x000018, "Wrong size on FHDAISuppressionSource");
//(offsetof(FHDAISuppressionSource, OwnerChar) == 0x000000, "Member 'FHDAISuppressionSource::OwnerChar' has a wrong offset!");
//(offsetof(FHDAISuppressionSource, Location) == 0x000008, "Member 'FHDAISuppressionSource::Location' has a wrong offset!");

// ScriptStruct HDMain.HDUIWeaponAmmoState
// 0x0018 (0x0018 - 0x0000)
struct FHDUIWeaponAmmoState final 
{
public:
	int32                                         TotalFreeAmmo;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumFreeAmmoClips;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentClipAmmo;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentClipMaxAmmo;                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADFBaseAmmoClip>            CurrentClipAmmoClass;                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FHDUIWeaponAmmoState) == 0x000008, "Wrong alignment on FHDUIWeaponAmmoState");
//(sizeof(FHDUIWeaponAmmoState) == 0x000018, "Wrong size on FHDUIWeaponAmmoState");
//(offsetof(FHDUIWeaponAmmoState, TotalFreeAmmo) == 0x000000, "Member 'FHDUIWeaponAmmoState::TotalFreeAmmo' has a wrong offset!");
//(offsetof(FHDUIWeaponAmmoState, NumFreeAmmoClips) == 0x000004, "Member 'FHDUIWeaponAmmoState::NumFreeAmmoClips' has a wrong offset!");
//(offsetof(FHDUIWeaponAmmoState, CurrentClipAmmo) == 0x000008, "Member 'FHDUIWeaponAmmoState::CurrentClipAmmo' has a wrong offset!");
//(offsetof(FHDUIWeaponAmmoState, CurrentClipMaxAmmo) == 0x00000C, "Member 'FHDUIWeaponAmmoState::CurrentClipMaxAmmo' has a wrong offset!");
//(offsetof(FHDUIWeaponAmmoState, CurrentClipAmmoClass) == 0x000010, "Member 'FHDUIWeaponAmmoState::CurrentClipAmmoClass' has a wrong offset!");

// ScriptStruct HDMain.HDAIGroupData
// 0x0038 (0x0038 - 0x0000)
struct FHDAIGroupData final 
{
public:
	class AHDBaseCapturePoint*                    CapturePoint;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDAICaptureMode                              CaptureMode;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1138[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NavigationAnchor;                                  // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FormationIndex;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FormationOffset;                                   // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1139[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FHDAIGroupData) == 0x000008, "Wrong alignment on FHDAIGroupData");
//(sizeof(FHDAIGroupData) == 0x000038, "Wrong size on FHDAIGroupData");
//(offsetof(FHDAIGroupData, CapturePoint) == 0x000000, "Member 'FHDAIGroupData::CapturePoint' has a wrong offset!");
//(offsetof(FHDAIGroupData, CaptureMode) == 0x000008, "Member 'FHDAIGroupData::CaptureMode' has a wrong offset!");
//(offsetof(FHDAIGroupData, NavigationAnchor) == 0x00000C, "Member 'FHDAIGroupData::NavigationAnchor' has a wrong offset!");
//(offsetof(FHDAIGroupData, TargetLocation) == 0x000018, "Member 'FHDAIGroupData::TargetLocation' has a wrong offset!");
//(offsetof(FHDAIGroupData, FormationIndex) == 0x000024, "Member 'FHDAIGroupData::FormationIndex' has a wrong offset!");
//(offsetof(FHDAIGroupData, FormationOffset) == 0x000028, "Member 'FHDAIGroupData::FormationOffset' has a wrong offset!");

// ScriptStruct HDMain.HDAIMasterNavPoint
// 0x0010 (0x0010 - 0x0000)
struct FHDAIMasterNavPoint final 
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToNext;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FHDAIMasterNavPoint) == 0x000004, "Wrong alignment on FHDAIMasterNavPoint");
//(sizeof(FHDAIMasterNavPoint) == 0x000010, "Wrong size on FHDAIMasterNavPoint");
//(offsetof(FHDAIMasterNavPoint, Location) == 0x000000, "Member 'FHDAIMasterNavPoint::Location' has a wrong offset!");
//(offsetof(FHDAIMasterNavPoint, DistanceToNext) == 0x00000C, "Member 'FHDAIMasterNavPoint::DistanceToNext' has a wrong offset!");

// ScriptStruct HDMain.HDPrimaryAssetSearchPath
// 0x0018 (0x0018 - 0x0000)
struct FHDPrimaryAssetSearchPath final 
{
public:
	EHDPrimaryAssetType                           AssetType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Directory;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FHDPrimaryAssetSearchPath) == 0x000008, "Wrong alignment on FHDPrimaryAssetSearchPath");
//(sizeof(FHDPrimaryAssetSearchPath) == 0x000018, "Wrong size on FHDPrimaryAssetSearchPath");
//(offsetof(FHDPrimaryAssetSearchPath, AssetType) == 0x000000, "Member 'FHDPrimaryAssetSearchPath::AssetType' has a wrong offset!");
//(offsetof(FHDPrimaryAssetSearchPath, Directory) == 0x000008, "Member 'FHDPrimaryAssetSearchPath::Directory' has a wrong offset!");

// ScriptStruct HDMain.PTTKeyState
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FPTTKeyState final 
{
public:
	uint8                                         Pad_113B[0xC];                                     // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FPTTKeyState) == 0x000004, "Wrong alignment on FPTTKeyState");
//(sizeof(FPTTKeyState) == 0x00000C, "Wrong size on FPTTKeyState");

// ScriptStruct HDMain.ControlPointRulesetSettings
// 0x0020 (0x0020 - 0x0000)
struct FControlPointRulesetSettings final 
{
public:
	int32                                         TicketsGainedForCapture;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsGainedForCaptureFromNeutral;                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostOnCapture;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForNeutralize;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForCapture;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForDefense;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsOnCaptureProgress;                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsOnDefenseProgress;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FControlPointRulesetSettings) == 0x000004, "Wrong alignment on FControlPointRulesetSettings");
//(sizeof(FControlPointRulesetSettings) == 0x000020, "Wrong size on FControlPointRulesetSettings");
//(offsetof(FControlPointRulesetSettings, TicketsGainedForCapture) == 0x000000, "Member 'FControlPointRulesetSettings::TicketsGainedForCapture' has a wrong offset!");
//(offsetof(FControlPointRulesetSettings, TicketsGainedForCaptureFromNeutral) == 0x000004, "Member 'FControlPointRulesetSettings::TicketsGainedForCaptureFromNeutral' has a wrong offset!");
//(offsetof(FControlPointRulesetSettings, TicketsLostOnCapture) == 0x000008, "Member 'FControlPointRulesetSettings::TicketsLostOnCapture' has a wrong offset!");
//(offsetof(FControlPointRulesetSettings, PointsForNeutralize) == 0x00000C, "Member 'FControlPointRulesetSettings::PointsForNeutralize' has a wrong offset!");
//(offsetof(FControlPointRulesetSettings, PointsForCapture) == 0x000010, "Member 'FControlPointRulesetSettings::PointsForCapture' has a wrong offset!");
//(offsetof(FControlPointRulesetSettings, PointsForDefense) == 0x000014, "Member 'FControlPointRulesetSettings::PointsForDefense' has a wrong offset!");
//(offsetof(FControlPointRulesetSettings, PointsOnCaptureProgress) == 0x000018, "Member 'FControlPointRulesetSettings::PointsOnCaptureProgress' has a wrong offset!");
//(offsetof(FControlPointRulesetSettings, PointsOnDefenseProgress) == 0x00001C, "Member 'FControlPointRulesetSettings::PointsOnDefenseProgress' has a wrong offset!");

// ScriptStruct HDMain.KillDeathRulesetSettings
// 0x0028 (0x0028 - 0x0000)
struct FKillDeathRulesetSettings final 
{
public:
	int32                                         TicketsGainedForKill;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostOnKill;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostOnTeamKill;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostOnDeath;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostOnSuicide;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForKill;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForAssist;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForTeamKill;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForDeath;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForSuicide;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FKillDeathRulesetSettings) == 0x000004, "Wrong alignment on FKillDeathRulesetSettings");
//(sizeof(FKillDeathRulesetSettings) == 0x000028, "Wrong size on FKillDeathRulesetSettings");
//(offsetof(FKillDeathRulesetSettings, TicketsGainedForKill) == 0x000000, "Member 'FKillDeathRulesetSettings::TicketsGainedForKill' has a wrong offset!");
//(offsetof(FKillDeathRulesetSettings, TicketsLostOnKill) == 0x000004, "Member 'FKillDeathRulesetSettings::TicketsLostOnKill' has a wrong offset!");
//(offsetof(FKillDeathRulesetSettings, TicketsLostOnTeamKill) == 0x000008, "Member 'FKillDeathRulesetSettings::TicketsLostOnTeamKill' has a wrong offset!");
//(offsetof(FKillDeathRulesetSettings, TicketsLostOnDeath) == 0x00000C, "Member 'FKillDeathRulesetSettings::TicketsLostOnDeath' has a wrong offset!");
//(offsetof(FKillDeathRulesetSettings, TicketsLostOnSuicide) == 0x000010, "Member 'FKillDeathRulesetSettings::TicketsLostOnSuicide' has a wrong offset!");
//(offsetof(FKillDeathRulesetSettings, PointsForKill) == 0x000014, "Member 'FKillDeathRulesetSettings::PointsForKill' has a wrong offset!");
//(offsetof(FKillDeathRulesetSettings, PointsForAssist) == 0x000018, "Member 'FKillDeathRulesetSettings::PointsForAssist' has a wrong offset!");
//(offsetof(FKillDeathRulesetSettings, PointsForTeamKill) == 0x00001C, "Member 'FKillDeathRulesetSettings::PointsForTeamKill' has a wrong offset!");
//(offsetof(FKillDeathRulesetSettings, PointsForDeath) == 0x000020, "Member 'FKillDeathRulesetSettings::PointsForDeath' has a wrong offset!");
//(offsetof(FKillDeathRulesetSettings, PointsForSuicide) == 0x000024, "Member 'FKillDeathRulesetSettings::PointsForSuicide' has a wrong offset!");

// ScriptStruct HDMain.TicketBleedRulesetSettings
// 0x000C (0x000C - 0x0000)
struct FTicketBleedRulesetSettings final 
{
public:
	int32                                         TicketBleed;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MercyTicketBleed;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowMercyTicketBleed : 1;                        // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_113C[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FTicketBleedRulesetSettings) == 0x000004, "Wrong alignment on FTicketBleedRulesetSettings");
//(sizeof(FTicketBleedRulesetSettings) == 0x00000C, "Wrong size on FTicketBleedRulesetSettings");
//(offsetof(FTicketBleedRulesetSettings, TicketBleed) == 0x000000, "Member 'FTicketBleedRulesetSettings::TicketBleed' has a wrong offset!");
//(offsetof(FTicketBleedRulesetSettings, MercyTicketBleed) == 0x000004, "Member 'FTicketBleedRulesetSettings::MercyTicketBleed' has a wrong offset!");

// ScriptStruct HDMain.UniqueNetIdVoipWrapper
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FUniqueNetIdVoipWrapper final 
{
public:
	uint8                                         Pad_113D[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FUniqueNetIdVoipWrapper) == 0x000008, "Wrong alignment on FUniqueNetIdVoipWrapper");
//(sizeof(FUniqueNetIdVoipWrapper) == 0x000018, "Wrong size on FUniqueNetIdVoipWrapper");

// ScriptStruct HDMain.AICharacterVocalProfile
// 0x0060 (0x0068 - 0x0008)
struct FAICharacterVocalProfile final  : public FTableRowBase
{
public:
	TArray<class USoundBase*>                     ContactSounds;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     LostContactSounds;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     ReloadingSounds;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     BeenHitSounds;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     UnderSuppressionSounds;                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     DeathSounds;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FAICharacterVocalProfile) == 0x000008, "Wrong alignment on FAICharacterVocalProfile");
//(sizeof(FAICharacterVocalProfile) == 0x000068, "Wrong size on FAICharacterVocalProfile");
//(offsetof(FAICharacterVocalProfile, ContactSounds) == 0x000008, "Member 'FAICharacterVocalProfile::ContactSounds' has a wrong offset!");
//(offsetof(FAICharacterVocalProfile, LostContactSounds) == 0x000018, "Member 'FAICharacterVocalProfile::LostContactSounds' has a wrong offset!");
//(offsetof(FAICharacterVocalProfile, ReloadingSounds) == 0x000028, "Member 'FAICharacterVocalProfile::ReloadingSounds' has a wrong offset!");
//(offsetof(FAICharacterVocalProfile, BeenHitSounds) == 0x000038, "Member 'FAICharacterVocalProfile::BeenHitSounds' has a wrong offset!");
//(offsetof(FAICharacterVocalProfile, UnderSuppressionSounds) == 0x000048, "Member 'FAICharacterVocalProfile::UnderSuppressionSounds' has a wrong offset!");
//(offsetof(FAICharacterVocalProfile, DeathSounds) == 0x000058, "Member 'FAICharacterVocalProfile::DeathSounds' has a wrong offset!");

// ScriptStruct HDMain.HDGameRoundEndEventDetails
// 0x0010 (0x0010 - 0x0000)
struct FHDGameRoundEndEventDetails final 
{
public:
	int32                                         ElapsedTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDTeam                                       WinningTeam;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113E[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BluforTickets;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpforTickets;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FHDGameRoundEndEventDetails) == 0x000004, "Wrong alignment on FHDGameRoundEndEventDetails");
//(sizeof(FHDGameRoundEndEventDetails) == 0x000010, "Wrong size on FHDGameRoundEndEventDetails");
//(offsetof(FHDGameRoundEndEventDetails, ElapsedTime) == 0x000000, "Member 'FHDGameRoundEndEventDetails::ElapsedTime' has a wrong offset!");
//(offsetof(FHDGameRoundEndEventDetails, WinningTeam) == 0x000004, "Member 'FHDGameRoundEndEventDetails::WinningTeam' has a wrong offset!");
//(offsetof(FHDGameRoundEndEventDetails, BluforTickets) == 0x000008, "Member 'FHDGameRoundEndEventDetails::BluforTickets' has a wrong offset!");
//(offsetof(FHDGameRoundEndEventDetails, OpforTickets) == 0x00000C, "Member 'FHDGameRoundEndEventDetails::OpforTickets' has a wrong offset!");

// ScriptStruct HDMain.HDCharacterVariationData
// 0x0000 (0x0068 - 0x0068)
struct FHDCharacterVariationData final  : public FDFCharacterVariationData
{
};
//(alignof(FHDCharacterVariationData) == 0x000008, "Wrong alignment on FHDCharacterVariationData");
//(sizeof(FHDCharacterVariationData) == 0x000068, "Wrong size on FHDCharacterVariationData");

// ScriptStruct HDMain.HDPlatoonCreationParams
// 0x0010 (0x0010 - 0x0000)
struct FHDPlatoonCreationParams final 
{
public:
	class UHDPlatoonInfo*                         Info;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDTeamState*                           OwnerTeam;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FHDPlatoonCreationParams) == 0x000008, "Wrong alignment on FHDPlatoonCreationParams");
//(sizeof(FHDPlatoonCreationParams) == 0x000010, "Wrong size on FHDPlatoonCreationParams");
//(offsetof(FHDPlatoonCreationParams, Info) == 0x000000, "Member 'FHDPlatoonCreationParams::Info' has a wrong offset!");
//(offsetof(FHDPlatoonCreationParams, OwnerTeam) == 0x000008, "Member 'FHDPlatoonCreationParams::OwnerTeam' has a wrong offset!");

// ScriptStruct HDMain.HDSquadCreationParams
// 0x0030 (0x0030 - 0x0000)
struct FHDSquadCreationParams final 
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class AHDPlatoonState*                        OwnerPlatoon;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHDPlayerState*                         SquadLeader;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLocked : 1;                                       // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_113F[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FHDSquadCreationParams) == 0x000008, "Wrong alignment on FHDSquadCreationParams");
//(sizeof(FHDSquadCreationParams) == 0x000030, "Wrong size on FHDSquadCreationParams");
//(offsetof(FHDSquadCreationParams, DisplayName) == 0x000000, "Member 'FHDSquadCreationParams::DisplayName' has a wrong offset!");
//(offsetof(FHDSquadCreationParams, OwnerPlatoon) == 0x000018, "Member 'FHDSquadCreationParams::OwnerPlatoon' has a wrong offset!");
//(offsetof(FHDSquadCreationParams, SquadLeader) == 0x000020, "Member 'FHDSquadCreationParams::SquadLeader' has a wrong offset!");

// ScriptStruct HDMain.HDPlatoonAttributes
// 0x0020 (0x0020 - 0x0000)
struct FHDPlatoonAttributes final 
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1140[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
//(alignof(FHDPlatoonAttributes) == 0x000008, "Wrong alignment on FHDPlatoonAttributes");
//(sizeof(FHDPlatoonAttributes) == 0x000020, "Wrong size on FHDPlatoonAttributes");
//(offsetof(FHDPlatoonAttributes, ID) == 0x000000, "Member 'FHDPlatoonAttributes::ID' has a wrong offset!");
//(offsetof(FHDPlatoonAttributes, TeamId) == 0x000004, "Member 'FHDPlatoonAttributes::TeamId' has a wrong offset!");
//(offsetof(FHDPlatoonAttributes, DisplayName) == 0x000008, "Member 'FHDPlatoonAttributes::DisplayName' has a wrong offset!");

// ScriptStruct HDMain.HDItemEntry
// 0x0010 (0x0010 - 0x0000)
struct FHDItemEntry final 
{
public:
	TSubclassOf<class AHDBaseWeapon>              ItemClass;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1141[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FHDItemEntry) == 0x000008, "Wrong alignment on FHDItemEntry");
//(sizeof(FHDItemEntry) == 0x000010, "Wrong size on FHDItemEntry");
//(offsetof(FHDItemEntry, ItemClass) == 0x000000, "Member 'FHDItemEntry::ItemClass' has a wrong offset!");
//(offsetof(FHDItemEntry, SlotNum) == 0x000008, "Member 'FHDItemEntry::SlotNum' has a wrong offset!");

// ScriptStruct HDMain.HDServerInfoFlags
// 0x0004 (0x0004 - 0x0000)
struct FHDServerInfoFlags final 
{
public:
	bool                                          bPasswordProtected;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDFPlayerWhitelistType                        WhitelistType;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportersOnlyWhitelist;                          // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUtilizesUGC;                                      // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FHDServerInfoFlags) == 0x000001, "Wrong alignment on FHDServerInfoFlags");
//(sizeof(FHDServerInfoFlags) == 0x000004, "Wrong size on FHDServerInfoFlags");
//(offsetof(FHDServerInfoFlags, bPasswordProtected) == 0x000000, "Member 'FHDServerInfoFlags::bPasswordProtected' has a wrong offset!");
//(offsetof(FHDServerInfoFlags, WhitelistType) == 0x000001, "Member 'FHDServerInfoFlags::WhitelistType' has a wrong offset!");
//(offsetof(FHDServerInfoFlags, bSupportersOnlyWhitelist) == 0x000002, "Member 'FHDServerInfoFlags::bSupportersOnlyWhitelist' has a wrong offset!");
//(offsetof(FHDServerInfoFlags, bUtilizesUGC) == 0x000003, "Member 'FHDServerInfoFlags::bUtilizesUGC' has a wrong offset!");

// ScriptStruct HDMain.HDServerInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FHDServerInfo final 
{
public:
	uint8                                         Pad_1142[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameVersion;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1143[0x10];                                    // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHDServerInfoFlags                     ServerFlags;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1144[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ModName;                                           // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        MapId;                                             // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MapBannerImg;                                      // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MapThumbnailImg;                                   // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPlayers;                                    // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0094(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ping;                                              // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1145[0x4];                                     // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FHDServerInfo) == 0x000008, "Wrong alignment on FHDServerInfo");
//(sizeof(FHDServerInfo) == 0x0000A0, "Wrong size on FHDServerInfo");
//(offsetof(FHDServerInfo, GameVersion) == 0x000008, "Member 'FHDServerInfo::GameVersion' has a wrong offset!");
//(offsetof(FHDServerInfo, ServerName) == 0x000018, "Member 'FHDServerInfo::ServerName' has a wrong offset!");
//(offsetof(FHDServerInfo, ServerFlags) == 0x000038, "Member 'FHDServerInfo::ServerFlags' has a wrong offset!");
//(offsetof(FHDServerInfo, ModName) == 0x000040, "Member 'FHDServerInfo::ModName' has a wrong offset!");
//(offsetof(FHDServerInfo, GameMode) == 0x000050, "Member 'FHDServerInfo::GameMode' has a wrong offset!");
//(offsetof(FHDServerInfo, MapName) == 0x000060, "Member 'FHDServerInfo::MapName' has a wrong offset!");
//(offsetof(FHDServerInfo, MapId) == 0x000070, "Member 'FHDServerInfo::MapId' has a wrong offset!");
//(offsetof(FHDServerInfo, MapBannerImg) == 0x000080, "Member 'FHDServerInfo::MapBannerImg' has a wrong offset!");
//(offsetof(FHDServerInfo, MapThumbnailImg) == 0x000088, "Member 'FHDServerInfo::MapThumbnailImg' has a wrong offset!");
//(offsetof(FHDServerInfo, CurrentPlayers) == 0x000090, "Member 'FHDServerInfo::CurrentPlayers' has a wrong offset!");
//(offsetof(FHDServerInfo, MaxPlayers) == 0x000094, "Member 'FHDServerInfo::MaxPlayers' has a wrong offset!");
//(offsetof(FHDServerInfo, Ping) == 0x000098, "Member 'FHDServerInfo::Ping' has a wrong offset!");

// ScriptStruct HDMain.HDFilterRuleParams
// 0x0002 (0x0002 - 0x0000)
struct FHDFilterRuleParams final 
{
public:
	EHDFilterRuleBehavior                         Behavior;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHDFilterRuleComparisonOp                     ComparisonOp;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FHDFilterRuleParams) == 0x000001, "Wrong alignment on FHDFilterRuleParams");
//(sizeof(FHDFilterRuleParams) == 0x000002, "Wrong size on FHDFilterRuleParams");
//(offsetof(FHDFilterRuleParams, Behavior) == 0x000000, "Member 'FHDFilterRuleParams::Behavior' has a wrong offset!");
//(offsetof(FHDFilterRuleParams, ComparisonOp) == 0x000001, "Member 'FHDFilterRuleParams::ComparisonOp' has a wrong offset!");

}


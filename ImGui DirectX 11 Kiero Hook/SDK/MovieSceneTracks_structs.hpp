#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieSceneTracks

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "MovieScene_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MovieSceneTracks.MovieScene3DPathSection_Axis
// NumValues: 0x0007
enum class EMovieScene3DPathSection_Axis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	NEG_X                                    = 3,
	NEG_Y                                    = 4,
	NEG_Z                                    = 5,
	MovieScene3DPathSection_MAX              = 6,
};

// Enum MovieSceneTracks.EFireEventsAtPosition
// NumValues: 0x0004
enum class EFireEventsAtPosition : uint8
{
	AtStartOfEvaluation                      = 0,
	AtEndOfEvaluation                        = 1,
	AfterSpawn                               = 2,
	EFireEventsAtPosition_MAX                = 3,
};

// Enum MovieSceneTracks.ELevelVisibility
// NumValues: 0x0003
enum class ELevelVisibility : uint8
{
	Visible                                  = 0,
	Hidden                                   = 1,
	ELevelVisibility_MAX                     = 2,
};

// Enum MovieSceneTracks.EParticleKey
// NumValues: 0x0004
enum class EParticleKey : uint8
{
	Activate                                 = 0,
	Deactivate                               = 1,
	Trigger                                  = 2,
	EParticleKey_MAX                         = 3,
};

// ScriptStruct MovieSceneTracks.MovieScene3DAttachSectionTemplate
// 0x0030 (0x0050 - 0x0020)
struct FMovieScene3DAttachSectionTemplate final  : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneObjectBindingID             AttachBindingID;                                   // 0x0020(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachComponentName;                               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AttachmentLocationRule;                            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AttachmentRotationRule;                            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AttachmentScaleRule;                               // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetachmentRule                               DetachmentLocationRule;                            // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetachmentRule                               DetachmentRotationRule;                            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetachmentRule                               DetachmentScaleRule;                               // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168A[0x2];                                     // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieScene3DAttachSectionTemplate) == 0x000008, "Wrong alignment on FMovieScene3DAttachSectionTemplate");
static_assert(sizeof(FMovieScene3DAttachSectionTemplate) == 0x000050, "Wrong size on FMovieScene3DAttachSectionTemplate");
static_assert(offsetof(FMovieScene3DAttachSectionTemplate, AttachBindingID) == 0x000020, "Member 'FMovieScene3DAttachSectionTemplate::AttachBindingID' has a wrong offset!");
static_assert(offsetof(FMovieScene3DAttachSectionTemplate, AttachSocketName) == 0x000038, "Member 'FMovieScene3DAttachSectionTemplate::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FMovieScene3DAttachSectionTemplate, AttachComponentName) == 0x000040, "Member 'FMovieScene3DAttachSectionTemplate::AttachComponentName' has a wrong offset!");
static_assert(offsetof(FMovieScene3DAttachSectionTemplate, AttachmentLocationRule) == 0x000048, "Member 'FMovieScene3DAttachSectionTemplate::AttachmentLocationRule' has a wrong offset!");
static_assert(offsetof(FMovieScene3DAttachSectionTemplate, AttachmentRotationRule) == 0x000049, "Member 'FMovieScene3DAttachSectionTemplate::AttachmentRotationRule' has a wrong offset!");
static_assert(offsetof(FMovieScene3DAttachSectionTemplate, AttachmentScaleRule) == 0x00004A, "Member 'FMovieScene3DAttachSectionTemplate::AttachmentScaleRule' has a wrong offset!");
static_assert(offsetof(FMovieScene3DAttachSectionTemplate, DetachmentLocationRule) == 0x00004B, "Member 'FMovieScene3DAttachSectionTemplate::DetachmentLocationRule' has a wrong offset!");
static_assert(offsetof(FMovieScene3DAttachSectionTemplate, DetachmentRotationRule) == 0x00004C, "Member 'FMovieScene3DAttachSectionTemplate::DetachmentRotationRule' has a wrong offset!");
static_assert(offsetof(FMovieScene3DAttachSectionTemplate, DetachmentScaleRule) == 0x00004D, "Member 'FMovieScene3DAttachSectionTemplate::DetachmentScaleRule' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieScene3DPathSectionTemplate
// 0x00C0 (0x00E0 - 0x0020)
struct FMovieScene3DPathSectionTemplate final  : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneObjectBindingID             PathBindingID;                                     // 0x0020(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                TimingCurve;                                       // 0x0038(0x00A0)(NativeAccessSpecifierPublic)
	EMovieScene3DPathSection_Axis                 FrontAxisEnum;                                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieScene3DPathSection_Axis                 UpAxisEnum;                                        // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168B[0x2];                                     // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bFollow : 1;                                       // 0x00DC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReverse : 1;                                      // 0x00DC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bForceUpright : 1;                                 // 0x00DC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_168C[0x3];                                     // 0x00DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieScene3DPathSectionTemplate) == 0x000008, "Wrong alignment on FMovieScene3DPathSectionTemplate");
static_assert(sizeof(FMovieScene3DPathSectionTemplate) == 0x0000E0, "Wrong size on FMovieScene3DPathSectionTemplate");
static_assert(offsetof(FMovieScene3DPathSectionTemplate, PathBindingID) == 0x000020, "Member 'FMovieScene3DPathSectionTemplate::PathBindingID' has a wrong offset!");
static_assert(offsetof(FMovieScene3DPathSectionTemplate, TimingCurve) == 0x000038, "Member 'FMovieScene3DPathSectionTemplate::TimingCurve' has a wrong offset!");
static_assert(offsetof(FMovieScene3DPathSectionTemplate, FrontAxisEnum) == 0x0000D8, "Member 'FMovieScene3DPathSectionTemplate::FrontAxisEnum' has a wrong offset!");
static_assert(offsetof(FMovieScene3DPathSectionTemplate, UpAxisEnum) == 0x0000D9, "Member 'FMovieScene3DPathSectionTemplate::UpAxisEnum' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneTransformMask
// 0x0004 (0x0004 - 0x0000)
struct FMovieSceneTransformMask final 
{
public:
	uint32                                        Mask;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneTransformMask) == 0x000004, "Wrong alignment on FMovieSceneTransformMask");
static_assert(sizeof(FMovieSceneTransformMask) == 0x000004, "Wrong size on FMovieSceneTransformMask");
static_assert(offsetof(FMovieSceneTransformMask, Mask) == 0x000000, "Member 'FMovieSceneTransformMask::Mask' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieScene3DTransformKeyStruct
// 0x0040 (0x0048 - 0x0008)
struct FMovieScene3DTransformKeyStruct final  : public FMovieSceneKeyStruct
{
public:
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           Time;                                              // 0x002C(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168D[0x18];                                    // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieScene3DTransformKeyStruct) == 0x000008, "Wrong alignment on FMovieScene3DTransformKeyStruct");
static_assert(sizeof(FMovieScene3DTransformKeyStruct) == 0x000048, "Wrong size on FMovieScene3DTransformKeyStruct");
static_assert(offsetof(FMovieScene3DTransformKeyStruct, Location) == 0x000008, "Member 'FMovieScene3DTransformKeyStruct::Location' has a wrong offset!");
static_assert(offsetof(FMovieScene3DTransformKeyStruct, Rotation) == 0x000014, "Member 'FMovieScene3DTransformKeyStruct::Rotation' has a wrong offset!");
static_assert(offsetof(FMovieScene3DTransformKeyStruct, Scale) == 0x000020, "Member 'FMovieScene3DTransformKeyStruct::Scale' has a wrong offset!");
static_assert(offsetof(FMovieScene3DTransformKeyStruct, Time) == 0x00002C, "Member 'FMovieScene3DTransformKeyStruct::Time' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneSlomoSectionTemplate
// 0x00A0 (0x00C0 - 0x0020)
struct FMovieSceneSlomoSectionTemplate final  : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneFloatChannel                SlomoCurve;                                        // 0x0020(0x00A0)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneSlomoSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneSlomoSectionTemplate");
static_assert(sizeof(FMovieSceneSlomoSectionTemplate) == 0x0000C0, "Wrong size on FMovieSceneSlomoSectionTemplate");
static_assert(offsetof(FMovieSceneSlomoSectionTemplate, SlomoCurve) == 0x000020, "Member 'FMovieSceneSlomoSectionTemplate::SlomoCurve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieScene3DScaleKeyStruct
// 0x0028 (0x0030 - 0x0008)
struct FMovieScene3DScaleKeyStruct final  : public FMovieSceneKeyStruct
{
public:
	struct FVector                                Scale;                                             // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           Time;                                              // 0x0014(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168E[0x18];                                    // 0x0018(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieScene3DScaleKeyStruct) == 0x000008, "Wrong alignment on FMovieScene3DScaleKeyStruct");
static_assert(sizeof(FMovieScene3DScaleKeyStruct) == 0x000030, "Wrong size on FMovieScene3DScaleKeyStruct");
static_assert(offsetof(FMovieScene3DScaleKeyStruct, Scale) == 0x000008, "Member 'FMovieScene3DScaleKeyStruct::Scale' has a wrong offset!");
static_assert(offsetof(FMovieScene3DScaleKeyStruct, Time) == 0x000014, "Member 'FMovieScene3DScaleKeyStruct::Time' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieScene3DRotationKeyStruct
// 0x0028 (0x0030 - 0x0008)
struct FMovieScene3DRotationKeyStruct final  : public FMovieSceneKeyStruct
{
public:
	struct FRotator                               Rotation;                                          // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFrameNumber                           Time;                                              // 0x0014(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168F[0x18];                                    // 0x0018(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieScene3DRotationKeyStruct) == 0x000008, "Wrong alignment on FMovieScene3DRotationKeyStruct");
static_assert(sizeof(FMovieScene3DRotationKeyStruct) == 0x000030, "Wrong size on FMovieScene3DRotationKeyStruct");
static_assert(offsetof(FMovieScene3DRotationKeyStruct, Rotation) == 0x000008, "Member 'FMovieScene3DRotationKeyStruct::Rotation' has a wrong offset!");
static_assert(offsetof(FMovieScene3DRotationKeyStruct, Time) == 0x000014, "Member 'FMovieScene3DRotationKeyStruct::Time' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieScene3DLocationKeyStruct
// 0x0028 (0x0030 - 0x0008)
struct FMovieScene3DLocationKeyStruct final  : public FMovieSceneKeyStruct
{
public:
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           Time;                                              // 0x0014(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1690[0x18];                                    // 0x0018(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieScene3DLocationKeyStruct) == 0x000008, "Wrong alignment on FMovieScene3DLocationKeyStruct");
static_assert(sizeof(FMovieScene3DLocationKeyStruct) == 0x000030, "Wrong size on FMovieScene3DLocationKeyStruct");
static_assert(offsetof(FMovieScene3DLocationKeyStruct, Location) == 0x000008, "Member 'FMovieScene3DLocationKeyStruct::Location' has a wrong offset!");
static_assert(offsetof(FMovieScene3DLocationKeyStruct, Time) == 0x000014, "Member 'FMovieScene3DLocationKeyStruct::Time' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieScene3DTransformTemplateData
// 0x0650 (0x0650 - 0x0000)
struct FMovieScene3DTransformTemplateData final 
{
public:
	struct FMovieSceneFloatChannel                TranslationCurve[0x3];                             // 0x0000(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                RotationCurve[0x3];                                // 0x01E0(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                ScaleCurve[0x3];                                   // 0x03C0(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                ManualWeight;                                      // 0x05A0(0x00A0)(NativeAccessSpecifierPublic)
	EMovieSceneBlendType                          BlendType;                                         // 0x0640(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1691[0x3];                                     // 0x0641(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneTransformMask               Mask;                                              // 0x0644(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseQuaternionInterpolation;                       // 0x0648(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1692[0x7];                                     // 0x0649(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieScene3DTransformTemplateData) == 0x000008, "Wrong alignment on FMovieScene3DTransformTemplateData");
static_assert(sizeof(FMovieScene3DTransformTemplateData) == 0x000650, "Wrong size on FMovieScene3DTransformTemplateData");
static_assert(offsetof(FMovieScene3DTransformTemplateData, TranslationCurve) == 0x000000, "Member 'FMovieScene3DTransformTemplateData::TranslationCurve' has a wrong offset!");
static_assert(offsetof(FMovieScene3DTransformTemplateData, RotationCurve) == 0x0001E0, "Member 'FMovieScene3DTransformTemplateData::RotationCurve' has a wrong offset!");
static_assert(offsetof(FMovieScene3DTransformTemplateData, ScaleCurve) == 0x0003C0, "Member 'FMovieScene3DTransformTemplateData::ScaleCurve' has a wrong offset!");
static_assert(offsetof(FMovieScene3DTransformTemplateData, ManualWeight) == 0x0005A0, "Member 'FMovieScene3DTransformTemplateData::ManualWeight' has a wrong offset!");
static_assert(offsetof(FMovieScene3DTransformTemplateData, BlendType) == 0x000640, "Member 'FMovieScene3DTransformTemplateData::BlendType' has a wrong offset!");
static_assert(offsetof(FMovieScene3DTransformTemplateData, Mask) == 0x000644, "Member 'FMovieScene3DTransformTemplateData::Mask' has a wrong offset!");
static_assert(offsetof(FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation) == 0x000648, "Member 'FMovieScene3DTransformTemplateData::bUseQuaternionInterpolation' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneComponentTransformSectionTemplate
// 0x0650 (0x0670 - 0x0020)
struct FMovieSceneComponentTransformSectionTemplate final  : public FMovieSceneEvalTemplate
{
public:
	struct FMovieScene3DTransformTemplateData     TemplateData;                                      // 0x0020(0x0650)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneComponentTransformSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneComponentTransformSectionTemplate");
static_assert(sizeof(FMovieSceneComponentTransformSectionTemplate) == 0x000670, "Wrong size on FMovieSceneComponentTransformSectionTemplate");
static_assert(offsetof(FMovieSceneComponentTransformSectionTemplate, TemplateData) == 0x000020, "Member 'FMovieSceneComponentTransformSectionTemplate::TemplateData' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneActorReferenceKey
// 0x0028 (0x0028 - 0x0000)
struct FMovieSceneActorReferenceKey final 
{
public:
	struct FMovieSceneObjectBindingID             Object;                                            // 0x0000(0x0018)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentName;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneActorReferenceKey) == 0x000004, "Wrong alignment on FMovieSceneActorReferenceKey");
static_assert(sizeof(FMovieSceneActorReferenceKey) == 0x000028, "Wrong size on FMovieSceneActorReferenceKey");
static_assert(offsetof(FMovieSceneActorReferenceKey, Object) == 0x000000, "Member 'FMovieSceneActorReferenceKey::Object' has a wrong offset!");
static_assert(offsetof(FMovieSceneActorReferenceKey, ComponentName) == 0x000018, "Member 'FMovieSceneActorReferenceKey::ComponentName' has a wrong offset!");
static_assert(offsetof(FMovieSceneActorReferenceKey, SocketName) == 0x000020, "Member 'FMovieSceneActorReferenceKey::SocketName' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneActorReferenceData
// 0x00A8 (0x00B0 - 0x0008)
struct FMovieSceneActorReferenceData final  : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   KeyTimes;                                          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1693[0x28];                                    // 0x0018(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneActorReferenceKey>   KeyValues;                                         // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1694[0x60];                                    // 0x0050(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneActorReferenceData) == 0x000008, "Wrong alignment on FMovieSceneActorReferenceData");
static_assert(sizeof(FMovieSceneActorReferenceData) == 0x0000B0, "Wrong size on FMovieSceneActorReferenceData");
static_assert(offsetof(FMovieSceneActorReferenceData, KeyTimes) == 0x000008, "Member 'FMovieSceneActorReferenceData::KeyTimes' has a wrong offset!");
static_assert(offsetof(FMovieSceneActorReferenceData, KeyValues) == 0x000040, "Member 'FMovieSceneActorReferenceData::KeyValues' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimationParams
// 0x00D8 (0x00D8 - 0x0000)
struct FMovieSceneSkeletalAnimationParams
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           FirstLoopStartFrameOffset;                         // 0x0008(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           StartFrameOffset;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           EndFrameOffset;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bReverse : 1;                                      // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1695[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SlotName;                                          // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1696[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                Weight;                                            // 0x0028(0x00A0)(NativeAccessSpecifierPublic)
	bool                                          bSkipAnimNotifiers;                                // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceCustomMode;                                  // 0x00C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1697[0x2];                                     // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartOffset;                                       // 0x00CC(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x00D0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1698[0x4];                                     // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneSkeletalAnimationParams) == 0x000008, "Wrong alignment on FMovieSceneSkeletalAnimationParams");
static_assert(sizeof(FMovieSceneSkeletalAnimationParams) == 0x0000D8, "Wrong size on FMovieSceneSkeletalAnimationParams");
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, Animation) == 0x000000, "Member 'FMovieSceneSkeletalAnimationParams::Animation' has a wrong offset!");
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset) == 0x000008, "Member 'FMovieSceneSkeletalAnimationParams::FirstLoopStartFrameOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, StartFrameOffset) == 0x00000C, "Member 'FMovieSceneSkeletalAnimationParams::StartFrameOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, EndFrameOffset) == 0x000010, "Member 'FMovieSceneSkeletalAnimationParams::EndFrameOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, PlayRate) == 0x000014, "Member 'FMovieSceneSkeletalAnimationParams::PlayRate' has a wrong offset!");
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, SlotName) == 0x00001C, "Member 'FMovieSceneSkeletalAnimationParams::SlotName' has a wrong offset!");
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, Weight) == 0x000028, "Member 'FMovieSceneSkeletalAnimationParams::Weight' has a wrong offset!");
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers) == 0x0000C8, "Member 'FMovieSceneSkeletalAnimationParams::bSkipAnimNotifiers' has a wrong offset!");
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, bForceCustomMode) == 0x0000C9, "Member 'FMovieSceneSkeletalAnimationParams::bForceCustomMode' has a wrong offset!");
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, StartOffset) == 0x0000CC, "Member 'FMovieSceneSkeletalAnimationParams::StartOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, EndOffset) == 0x0000D0, "Member 'FMovieSceneSkeletalAnimationParams::EndOffset' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplateParameters
// 0x0008 (0x00E0 - 0x00D8)
struct FMovieSceneSkeletalAnimationSectionTemplateParameters final  : public FMovieSceneSkeletalAnimationParams
{
public:
	struct FFrameNumber                           SectionStartTime;                                  // 0x00D8(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           SectionEndTime;                                    // 0x00DC(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSkeletalAnimationSectionTemplateParameters) == 0x000008, "Wrong alignment on FMovieSceneSkeletalAnimationSectionTemplateParameters");
static_assert(sizeof(FMovieSceneSkeletalAnimationSectionTemplateParameters) == 0x0000E0, "Wrong size on FMovieSceneSkeletalAnimationSectionTemplateParameters");
static_assert(offsetof(FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime) == 0x0000D8, "Member 'FMovieSceneSkeletalAnimationSectionTemplateParameters::SectionStartTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime) == 0x0000DC, "Member 'FMovieSceneSkeletalAnimationSectionTemplateParameters::SectionEndTime' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplate
// 0x00E0 (0x0100 - 0x0020)
struct FMovieSceneSkeletalAnimationSectionTemplate final  : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneSkeletalAnimationSectionTemplateParameters Params;                                            // 0x0020(0x00E0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneSkeletalAnimationSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneSkeletalAnimationSectionTemplate");
static_assert(sizeof(FMovieSceneSkeletalAnimationSectionTemplate) == 0x000100, "Wrong size on FMovieSceneSkeletalAnimationSectionTemplate");
static_assert(offsetof(FMovieSceneSkeletalAnimationSectionTemplate, Params) == 0x000020, "Member 'FMovieSceneSkeletalAnimationSectionTemplate::Params' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneActorReferenceSectionTemplate
// 0x00D8 (0x00F8 - 0x0020)
struct FMovieSceneActorReferenceSectionTemplate final  : public FMovieSceneEvalTemplate
{
public:
	struct FMovieScenePropertySectionData         PropertyData;                                      // 0x0020(0x0028)(NativeAccessSpecifierPrivate)
	struct FMovieSceneActorReferenceData          ActorReferenceData;                                // 0x0048(0x00B0)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneActorReferenceSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneActorReferenceSectionTemplate");
static_assert(sizeof(FMovieSceneActorReferenceSectionTemplate) == 0x0000F8, "Wrong size on FMovieSceneActorReferenceSectionTemplate");
static_assert(offsetof(FMovieSceneActorReferenceSectionTemplate, PropertyData) == 0x000020, "Member 'FMovieSceneActorReferenceSectionTemplate::PropertyData' has a wrong offset!");
static_assert(offsetof(FMovieSceneActorReferenceSectionTemplate, ActorReferenceData) == 0x000048, "Member 'FMovieSceneActorReferenceSectionTemplate::ActorReferenceData' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneAudioSectionTemplate
// 0x0008 (0x0028 - 0x0020)
struct FMovieSceneAudioSectionTemplate final  : public FMovieSceneEvalTemplate
{
public:
	class UMovieSceneAudioSection*                AudioSection;                                      // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneAudioSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneAudioSectionTemplate");
static_assert(sizeof(FMovieSceneAudioSectionTemplate) == 0x000028, "Wrong size on FMovieSceneAudioSectionTemplate");
static_assert(offsetof(FMovieSceneAudioSectionTemplate, AudioSection) == 0x000020, "Member 'FMovieSceneAudioSectionTemplate::AudioSection' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneCameraAnimSectionData
// 0x0020 (0x0020 - 0x0000)
struct FMovieSceneCameraAnimSectionData final 
{
public:
	class UCameraAnim*                            CameraAnim;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayScale;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1699[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneCameraAnimSectionData) == 0x000008, "Wrong alignment on FMovieSceneCameraAnimSectionData");
static_assert(sizeof(FMovieSceneCameraAnimSectionData) == 0x000020, "Wrong size on FMovieSceneCameraAnimSectionData");
static_assert(offsetof(FMovieSceneCameraAnimSectionData, CameraAnim) == 0x000000, "Member 'FMovieSceneCameraAnimSectionData::CameraAnim' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraAnimSectionData, PlayRate) == 0x000008, "Member 'FMovieSceneCameraAnimSectionData::PlayRate' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraAnimSectionData, PlayScale) == 0x00000C, "Member 'FMovieSceneCameraAnimSectionData::PlayScale' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraAnimSectionData, BlendInTime) == 0x000010, "Member 'FMovieSceneCameraAnimSectionData::BlendInTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraAnimSectionData, BlendOutTime) == 0x000014, "Member 'FMovieSceneCameraAnimSectionData::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraAnimSectionData, bLooping) == 0x000018, "Member 'FMovieSceneCameraAnimSectionData::bLooping' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneAdditiveCameraAnimationTemplate
// 0x0000 (0x0020 - 0x0020)
struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
{
};
static_assert(alignof(FMovieSceneAdditiveCameraAnimationTemplate) == 0x000008, "Wrong alignment on FMovieSceneAdditiveCameraAnimationTemplate");
static_assert(sizeof(FMovieSceneAdditiveCameraAnimationTemplate) == 0x000020, "Wrong size on FMovieSceneAdditiveCameraAnimationTemplate");

// ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSectionData
// 0x0020 (0x0020 - 0x0000)
struct FMovieSceneCameraShakeSectionData final 
{
public:
	TSubclassOf<class UCameraShake>               ShakeClass;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayScale;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraAnimPlaySpace                          PlaySpace;                                         // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169A[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               UserDefinedPlaySpace;                              // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_169B[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneCameraShakeSectionData) == 0x000008, "Wrong alignment on FMovieSceneCameraShakeSectionData");
static_assert(sizeof(FMovieSceneCameraShakeSectionData) == 0x000020, "Wrong size on FMovieSceneCameraShakeSectionData");
static_assert(offsetof(FMovieSceneCameraShakeSectionData, ShakeClass) == 0x000000, "Member 'FMovieSceneCameraShakeSectionData::ShakeClass' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraShakeSectionData, PlayScale) == 0x000008, "Member 'FMovieSceneCameraShakeSectionData::PlayScale' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraShakeSectionData, PlaySpace) == 0x00000C, "Member 'FMovieSceneCameraShakeSectionData::PlaySpace' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace) == 0x000010, "Member 'FMovieSceneCameraShakeSectionData::UserDefinedPlaySpace' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSectionTemplate
// 0x0028 (0x0048 - 0x0020)
struct FMovieSceneCameraShakeSectionTemplate final  : public FMovieSceneAdditiveCameraAnimationTemplate
{
public:
	struct FMovieSceneCameraShakeSectionData      SourceData;                                        // 0x0020(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionStartTime;                                  // 0x0040(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_169C[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneCameraShakeSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneCameraShakeSectionTemplate");
static_assert(sizeof(FMovieSceneCameraShakeSectionTemplate) == 0x000048, "Wrong size on FMovieSceneCameraShakeSectionTemplate");
static_assert(offsetof(FMovieSceneCameraShakeSectionTemplate, SourceData) == 0x000020, "Member 'FMovieSceneCameraShakeSectionTemplate::SourceData' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraShakeSectionTemplate, SectionStartTime) == 0x000040, "Member 'FMovieSceneCameraShakeSectionTemplate::SectionStartTime' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneCameraAnimSectionTemplate
// 0x0028 (0x0048 - 0x0020)
struct FMovieSceneCameraAnimSectionTemplate final  : public FMovieSceneAdditiveCameraAnimationTemplate
{
public:
	struct FMovieSceneCameraAnimSectionData       SourceData;                                        // 0x0020(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FFrameNumber                           SectionStartTime;                                  // 0x0040(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_169D[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneCameraAnimSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneCameraAnimSectionTemplate");
static_assert(sizeof(FMovieSceneCameraAnimSectionTemplate) == 0x000048, "Wrong size on FMovieSceneCameraAnimSectionTemplate");
static_assert(offsetof(FMovieSceneCameraAnimSectionTemplate, SourceData) == 0x000020, "Member 'FMovieSceneCameraAnimSectionTemplate::SourceData' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraAnimSectionTemplate, SectionStartTime) == 0x000040, "Member 'FMovieSceneCameraAnimSectionTemplate::SectionStartTime' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneCameraCutSectionTemplate
// 0x0060 (0x0080 - 0x0020)
struct FMovieSceneCameraCutSectionTemplate final  : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneObjectBindingID             CameraBindingID;                                   // 0x0020(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169E[0x8];                                     // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CutTransform;                                      // 0x0040(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasCutTransform;                                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFinalSection;                                   // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169F[0xE];                                     // 0x0072(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneCameraCutSectionTemplate) == 0x000010, "Wrong alignment on FMovieSceneCameraCutSectionTemplate");
static_assert(sizeof(FMovieSceneCameraCutSectionTemplate) == 0x000080, "Wrong size on FMovieSceneCameraCutSectionTemplate");
static_assert(offsetof(FMovieSceneCameraCutSectionTemplate, CameraBindingID) == 0x000020, "Member 'FMovieSceneCameraCutSectionTemplate::CameraBindingID' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraCutSectionTemplate, CutTransform) == 0x000040, "Member 'FMovieSceneCameraCutSectionTemplate::CutTransform' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraCutSectionTemplate, bHasCutTransform) == 0x000070, "Member 'FMovieSceneCameraCutSectionTemplate::bHasCutTransform' has a wrong offset!");
static_assert(offsetof(FMovieSceneCameraCutSectionTemplate, bIsFinalSection) == 0x000071, "Member 'FMovieSceneCameraCutSectionTemplate::bIsFinalSection' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneColorKeyStruct
// 0x0030 (0x0038 - 0x0008)
struct FMovieSceneColorKeyStruct final  : public FMovieSceneKeyStruct
{
public:
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           Time;                                              // 0x0018(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A0[0x1C];                                    // 0x001C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneColorKeyStruct) == 0x000008, "Wrong alignment on FMovieSceneColorKeyStruct");
static_assert(sizeof(FMovieSceneColorKeyStruct) == 0x000038, "Wrong size on FMovieSceneColorKeyStruct");
static_assert(offsetof(FMovieSceneColorKeyStruct, Color) == 0x000008, "Member 'FMovieSceneColorKeyStruct::Color' has a wrong offset!");
static_assert(offsetof(FMovieSceneColorKeyStruct, Time) == 0x000018, "Member 'FMovieSceneColorKeyStruct::Time' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneColorSectionTemplate
// 0x0288 (0x02D0 - 0x0048)
struct FMovieSceneColorSectionTemplate final  : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneFloatChannel                Curves[0x4];                                       // 0x0048(0x00A0)(NativeAccessSpecifierPublic)
	EMovieSceneBlendType                          BlendType;                                         // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A1[0x7];                                     // 0x02C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneColorSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneColorSectionTemplate");
static_assert(sizeof(FMovieSceneColorSectionTemplate) == 0x0002D0, "Wrong size on FMovieSceneColorSectionTemplate");
static_assert(offsetof(FMovieSceneColorSectionTemplate, Curves) == 0x000048, "Member 'FMovieSceneColorSectionTemplate::Curves' has a wrong offset!");
static_assert(offsetof(FMovieSceneColorSectionTemplate, BlendType) == 0x0002C8, "Member 'FMovieSceneColorSectionTemplate::BlendType' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneEventPtrs
// 0x0028 (0x0028 - 0x0000)
struct FMovieSceneEventPtrs final 
{
public:
	class UFunction*                              Function;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TFieldPath<struct FProperty>                  BoundObjectProperty;                               // 0x0008(0x0020)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEventPtrs) == 0x000008, "Wrong alignment on FMovieSceneEventPtrs");
static_assert(sizeof(FMovieSceneEventPtrs) == 0x000028, "Wrong size on FMovieSceneEventPtrs");
static_assert(offsetof(FMovieSceneEventPtrs, Function) == 0x000000, "Member 'FMovieSceneEventPtrs::Function' has a wrong offset!");
static_assert(offsetof(FMovieSceneEventPtrs, BoundObjectProperty) == 0x000008, "Member 'FMovieSceneEventPtrs::BoundObjectProperty' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneEvent
// 0x0028 (0x0028 - 0x0000)
struct FMovieSceneEvent final 
{
public:
	struct FMovieSceneEventPtrs                   Ptrs;                                              // 0x0000(0x0028)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvent) == 0x000008, "Wrong alignment on FMovieSceneEvent");
static_assert(sizeof(FMovieSceneEvent) == 0x000028, "Wrong size on FMovieSceneEvent");
static_assert(offsetof(FMovieSceneEvent, Ptrs) == 0x000000, "Member 'FMovieSceneEvent::Ptrs' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneEventPayloadVariable
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneEventPayloadVariable final 
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEventPayloadVariable) == 0x000008, "Wrong alignment on FMovieSceneEventPayloadVariable");
static_assert(sizeof(FMovieSceneEventPayloadVariable) == 0x000010, "Wrong size on FMovieSceneEventPayloadVariable");
static_assert(offsetof(FMovieSceneEventPayloadVariable, Value) == 0x000000, "Member 'FMovieSceneEventPayloadVariable::Value' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneEventChannel
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEventChannel final  : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   KeyTimes;                                          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneEvent>               KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16A2[0x60];                                    // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEventChannel) == 0x000008, "Wrong alignment on FMovieSceneEventChannel");
static_assert(sizeof(FMovieSceneEventChannel) == 0x000088, "Wrong size on FMovieSceneEventChannel");
static_assert(offsetof(FMovieSceneEventChannel, KeyTimes) == 0x000008, "Member 'FMovieSceneEventChannel::KeyTimes' has a wrong offset!");
static_assert(offsetof(FMovieSceneEventChannel, KeyValues) == 0x000018, "Member 'FMovieSceneEventChannel::KeyValues' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneEventParameters
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMovieSceneEventParameters final 
{
public:
	uint8                                         Pad_16A3[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEventParameters) == 0x000008, "Wrong alignment on FMovieSceneEventParameters");
static_assert(sizeof(FMovieSceneEventParameters) == 0x000028, "Wrong size on FMovieSceneEventParameters");

// ScriptStruct MovieSceneTracks.EventPayload
// 0x0030 (0x0030 - 0x0000)
struct FEventPayload final 
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneEventParameters             Parameters;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventPayload) == 0x000008, "Wrong alignment on FEventPayload");
static_assert(sizeof(FEventPayload) == 0x000030, "Wrong size on FEventPayload");
static_assert(offsetof(FEventPayload, EventName) == 0x000000, "Member 'FEventPayload::EventName' has a wrong offset!");
static_assert(offsetof(FEventPayload, Parameters) == 0x000008, "Member 'FEventPayload::Parameters' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneEventSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEventSectionData final  : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FEventPayload>                  KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16A4[0x60];                                    // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEventSectionData) == 0x000008, "Wrong alignment on FMovieSceneEventSectionData");
static_assert(sizeof(FMovieSceneEventSectionData) == 0x000088, "Wrong size on FMovieSceneEventSectionData");
static_assert(offsetof(FMovieSceneEventSectionData, Times) == 0x000008, "Member 'FMovieSceneEventSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEventSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEventSectionData::KeyValues' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneEventTemplateBase
// 0x0018 (0x0038 - 0x0020)
struct FMovieSceneEventTemplateBase : public FMovieSceneEvalTemplate
{
public:
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_16A5[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEventTemplateBase) == 0x000008, "Wrong alignment on FMovieSceneEventTemplateBase");
static_assert(sizeof(FMovieSceneEventTemplateBase) == 0x000038, "Wrong size on FMovieSceneEventTemplateBase");
static_assert(offsetof(FMovieSceneEventTemplateBase, EventReceivers) == 0x000020, "Member 'FMovieSceneEventTemplateBase::EventReceivers' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneEventRepeaterTemplate
// 0x0028 (0x0060 - 0x0038)
struct FMovieSceneEventRepeaterTemplate final  : public FMovieSceneEventTemplateBase
{
public:
	struct FMovieSceneEventPtrs                   EventToTrigger;                                    // 0x0038(0x0028)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEventRepeaterTemplate) == 0x000008, "Wrong alignment on FMovieSceneEventRepeaterTemplate");
static_assert(sizeof(FMovieSceneEventRepeaterTemplate) == 0x000060, "Wrong size on FMovieSceneEventRepeaterTemplate");
static_assert(offsetof(FMovieSceneEventRepeaterTemplate, EventToTrigger) == 0x000038, "Member 'FMovieSceneEventRepeaterTemplate::EventToTrigger' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneEventTriggerTemplate
// 0x0020 (0x0058 - 0x0038)
struct FMovieSceneEventTriggerTemplate final  : public FMovieSceneEventTemplateBase
{
public:
	TArray<struct FFrameNumber>                   EventTimes;                                        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneEventPtrs>           Events;                                            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEventTriggerTemplate) == 0x000008, "Wrong alignment on FMovieSceneEventTriggerTemplate");
static_assert(sizeof(FMovieSceneEventTriggerTemplate) == 0x000058, "Wrong size on FMovieSceneEventTriggerTemplate");
static_assert(offsetof(FMovieSceneEventTriggerTemplate, EventTimes) == 0x000038, "Member 'FMovieSceneEventTriggerTemplate::EventTimes' has a wrong offset!");
static_assert(offsetof(FMovieSceneEventTriggerTemplate, Events) == 0x000048, "Member 'FMovieSceneEventTriggerTemplate::Events' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneEventSectionTemplate
// 0x0088 (0x00C0 - 0x0038)
struct FMovieSceneEventSectionTemplate final  : public FMovieSceneEventTemplateBase
{
public:
	struct FMovieSceneEventSectionData            EventData;                                         // 0x0038(0x0088)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEventSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEventSectionTemplate");
static_assert(sizeof(FMovieSceneEventSectionTemplate) == 0x0000C0, "Wrong size on FMovieSceneEventSectionTemplate");
static_assert(offsetof(FMovieSceneEventSectionTemplate, EventData) == 0x000038, "Member 'FMovieSceneEventSectionTemplate::EventData' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneFadeSectionTemplate
// 0x00B8 (0x00D8 - 0x0020)
struct FMovieSceneFadeSectionTemplate final  : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneFloatChannel                FadeCurve;                                         // 0x0020(0x00A0)(NativeAccessSpecifierPrivate)
	struct FLinearColor                           FadeColor;                                         // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bFadeAudio : 1;                                    // 0x00D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_16A6[0x7];                                     // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneFadeSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneFadeSectionTemplate");
static_assert(sizeof(FMovieSceneFadeSectionTemplate) == 0x0000D8, "Wrong size on FMovieSceneFadeSectionTemplate");
static_assert(offsetof(FMovieSceneFadeSectionTemplate, FadeCurve) == 0x000020, "Member 'FMovieSceneFadeSectionTemplate::FadeCurve' has a wrong offset!");
static_assert(offsetof(FMovieSceneFadeSectionTemplate, FadeColor) == 0x0000C0, "Member 'FMovieSceneFadeSectionTemplate::FadeColor' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneLevelVisibilitySectionTemplate
// 0x0018 (0x0038 - 0x0020)
struct FMovieSceneLevelVisibilitySectionTemplate final  : public FMovieSceneEvalTemplate
{
public:
	ELevelVisibility                              Visibility;                                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16A7[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LevelNames;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneLevelVisibilitySectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneLevelVisibilitySectionTemplate");
static_assert(sizeof(FMovieSceneLevelVisibilitySectionTemplate) == 0x000038, "Wrong size on FMovieSceneLevelVisibilitySectionTemplate");
static_assert(offsetof(FMovieSceneLevelVisibilitySectionTemplate, Visibility) == 0x000020, "Member 'FMovieSceneLevelVisibilitySectionTemplate::Visibility' has a wrong offset!");
static_assert(offsetof(FMovieSceneLevelVisibilitySectionTemplate, LevelNames) == 0x000028, "Member 'FMovieSceneLevelVisibilitySectionTemplate::LevelNames' has a wrong offset!");

// ScriptStruct MovieSceneTracks.ScalarParameterNameAndCurve
// 0x00A8 (0x00A8 - 0x0000)
struct FScalarParameterNameAndCurve final 
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                ParameterCurve;                                    // 0x0008(0x00A0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FScalarParameterNameAndCurve) == 0x000008, "Wrong alignment on FScalarParameterNameAndCurve");
static_assert(sizeof(FScalarParameterNameAndCurve) == 0x0000A8, "Wrong size on FScalarParameterNameAndCurve");
static_assert(offsetof(FScalarParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FScalarParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FScalarParameterNameAndCurve, ParameterCurve) == 0x000008, "Member 'FScalarParameterNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.BoolParameterNameAndCurve
// 0x0098 (0x0098 - 0x0000)
struct FBoolParameterNameAndCurve final 
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneBoolChannel                 ParameterCurve;                                    // 0x0008(0x0090)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoolParameterNameAndCurve) == 0x000008, "Wrong alignment on FBoolParameterNameAndCurve");
static_assert(sizeof(FBoolParameterNameAndCurve) == 0x000098, "Wrong size on FBoolParameterNameAndCurve");
static_assert(offsetof(FBoolParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FBoolParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FBoolParameterNameAndCurve, ParameterCurve) == 0x000008, "Member 'FBoolParameterNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.Vector2DParameterNameAndCurves
// 0x0148 (0x0148 - 0x0000)
struct FVector2DParameterNameAndCurves final 
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                XCurve;                                            // 0x0008(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                YCurve;                                            // 0x00A8(0x00A0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector2DParameterNameAndCurves) == 0x000008, "Wrong alignment on FVector2DParameterNameAndCurves");
static_assert(sizeof(FVector2DParameterNameAndCurves) == 0x000148, "Wrong size on FVector2DParameterNameAndCurves");
static_assert(offsetof(FVector2DParameterNameAndCurves, ParameterName) == 0x000000, "Member 'FVector2DParameterNameAndCurves::ParameterName' has a wrong offset!");
static_assert(offsetof(FVector2DParameterNameAndCurves, XCurve) == 0x000008, "Member 'FVector2DParameterNameAndCurves::XCurve' has a wrong offset!");
static_assert(offsetof(FVector2DParameterNameAndCurves, YCurve) == 0x0000A8, "Member 'FVector2DParameterNameAndCurves::YCurve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.VectorParameterNameAndCurves
// 0x01E8 (0x01E8 - 0x0000)
struct FVectorParameterNameAndCurves final 
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                XCurve;                                            // 0x0008(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                YCurve;                                            // 0x00A8(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                ZCurve;                                            // 0x0148(0x00A0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVectorParameterNameAndCurves) == 0x000008, "Wrong alignment on FVectorParameterNameAndCurves");
static_assert(sizeof(FVectorParameterNameAndCurves) == 0x0001E8, "Wrong size on FVectorParameterNameAndCurves");
static_assert(offsetof(FVectorParameterNameAndCurves, ParameterName) == 0x000000, "Member 'FVectorParameterNameAndCurves::ParameterName' has a wrong offset!");
static_assert(offsetof(FVectorParameterNameAndCurves, XCurve) == 0x000008, "Member 'FVectorParameterNameAndCurves::XCurve' has a wrong offset!");
static_assert(offsetof(FVectorParameterNameAndCurves, YCurve) == 0x0000A8, "Member 'FVectorParameterNameAndCurves::YCurve' has a wrong offset!");
static_assert(offsetof(FVectorParameterNameAndCurves, ZCurve) == 0x000148, "Member 'FVectorParameterNameAndCurves::ZCurve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.ColorParameterNameAndCurves
// 0x0288 (0x0288 - 0x0000)
struct FColorParameterNameAndCurves final 
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                RedCurve;                                          // 0x0008(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                GreenCurve;                                        // 0x00A8(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                BlueCurve;                                         // 0x0148(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                AlphaCurve;                                        // 0x01E8(0x00A0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorParameterNameAndCurves) == 0x000008, "Wrong alignment on FColorParameterNameAndCurves");
static_assert(sizeof(FColorParameterNameAndCurves) == 0x000288, "Wrong size on FColorParameterNameAndCurves");
static_assert(offsetof(FColorParameterNameAndCurves, ParameterName) == 0x000000, "Member 'FColorParameterNameAndCurves::ParameterName' has a wrong offset!");
static_assert(offsetof(FColorParameterNameAndCurves, RedCurve) == 0x000008, "Member 'FColorParameterNameAndCurves::RedCurve' has a wrong offset!");
static_assert(offsetof(FColorParameterNameAndCurves, GreenCurve) == 0x0000A8, "Member 'FColorParameterNameAndCurves::GreenCurve' has a wrong offset!");
static_assert(offsetof(FColorParameterNameAndCurves, BlueCurve) == 0x000148, "Member 'FColorParameterNameAndCurves::BlueCurve' has a wrong offset!");
static_assert(offsetof(FColorParameterNameAndCurves, AlphaCurve) == 0x0001E8, "Member 'FColorParameterNameAndCurves::AlphaCurve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.TransformParameterNameAndCurves
// 0x05A8 (0x05A8 - 0x0000)
struct FTransformParameterNameAndCurves final 
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                Translation[0x3];                                  // 0x0008(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                Rotation[0x3];                                     // 0x01E8(0x00A0)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                Scale[0x3];                                        // 0x03C8(0x00A0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransformParameterNameAndCurves) == 0x000008, "Wrong alignment on FTransformParameterNameAndCurves");
static_assert(sizeof(FTransformParameterNameAndCurves) == 0x0005A8, "Wrong size on FTransformParameterNameAndCurves");
static_assert(offsetof(FTransformParameterNameAndCurves, ParameterName) == 0x000000, "Member 'FTransformParameterNameAndCurves::ParameterName' has a wrong offset!");
static_assert(offsetof(FTransformParameterNameAndCurves, Translation) == 0x000008, "Member 'FTransformParameterNameAndCurves::Translation' has a wrong offset!");
static_assert(offsetof(FTransformParameterNameAndCurves, Rotation) == 0x0001E8, "Member 'FTransformParameterNameAndCurves::Rotation' has a wrong offset!");
static_assert(offsetof(FTransformParameterNameAndCurves, Scale) == 0x0003C8, "Member 'FTransformParameterNameAndCurves::Scale' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneParameterSectionTemplate
// 0x0060 (0x0080 - 0x0020)
struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
{
public:
	TArray<struct FScalarParameterNameAndCurve>   Scalars;                                           // 0x0020(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FBoolParameterNameAndCurve>     Bools;                                             // 0x0030(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVector2DParameterNameAndCurves> Vector2Ds;                                         // 0x0040(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVectorParameterNameAndCurves>  Vectors;                                           // 0x0050(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FColorParameterNameAndCurves>   Colors;                                            // 0x0060(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FTransformParameterNameAndCurves> Transforms;                                        // 0x0070(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMovieSceneParameterSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneParameterSectionTemplate");
static_assert(sizeof(FMovieSceneParameterSectionTemplate) == 0x000080, "Wrong size on FMovieSceneParameterSectionTemplate");
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Scalars) == 0x000020, "Member 'FMovieSceneParameterSectionTemplate::Scalars' has a wrong offset!");
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Bools) == 0x000030, "Member 'FMovieSceneParameterSectionTemplate::Bools' has a wrong offset!");
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Vector2Ds) == 0x000040, "Member 'FMovieSceneParameterSectionTemplate::Vector2Ds' has a wrong offset!");
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Vectors) == 0x000050, "Member 'FMovieSceneParameterSectionTemplate::Vectors' has a wrong offset!");
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Colors) == 0x000060, "Member 'FMovieSceneParameterSectionTemplate::Colors' has a wrong offset!");
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Transforms) == 0x000070, "Member 'FMovieSceneParameterSectionTemplate::Transforms' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneMaterialParameterCollectionTemplate
// 0x0008 (0x0088 - 0x0080)
struct FMovieSceneMaterialParameterCollectionTemplate final  : public FMovieSceneParameterSectionTemplate
{
public:
	class UMaterialParameterCollection*           MPC;                                               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneMaterialParameterCollectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneMaterialParameterCollectionTemplate");
static_assert(sizeof(FMovieSceneMaterialParameterCollectionTemplate) == 0x000088, "Wrong size on FMovieSceneMaterialParameterCollectionTemplate");
static_assert(offsetof(FMovieSceneMaterialParameterCollectionTemplate, MPC) == 0x000080, "Member 'FMovieSceneMaterialParameterCollectionTemplate::MPC' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneObjectPropertyTemplate
// 0x00C0 (0x0108 - 0x0048)
struct FMovieSceneObjectPropertyTemplate final  : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneObjectPathChannel           ObjectChannel;                                     // 0x0048(0x00C0)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieSceneObjectPropertyTemplate) == 0x000008, "Wrong alignment on FMovieSceneObjectPropertyTemplate");
static_assert(sizeof(FMovieSceneObjectPropertyTemplate) == 0x000108, "Wrong size on FMovieSceneObjectPropertyTemplate");
static_assert(offsetof(FMovieSceneObjectPropertyTemplate, ObjectChannel) == 0x000048, "Member 'FMovieSceneObjectPropertyTemplate::ObjectChannel' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneComponentMaterialSectionTemplate
// 0x0008 (0x0088 - 0x0080)
struct FMovieSceneComponentMaterialSectionTemplate final  : public FMovieSceneParameterSectionTemplate
{
public:
	int32                                         MaterialIndex;                                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16A8[0x4];                                     // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneComponentMaterialSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneComponentMaterialSectionTemplate");
static_assert(sizeof(FMovieSceneComponentMaterialSectionTemplate) == 0x000088, "Wrong size on FMovieSceneComponentMaterialSectionTemplate");
static_assert(offsetof(FMovieSceneComponentMaterialSectionTemplate, MaterialIndex) == 0x000080, "Member 'FMovieSceneComponentMaterialSectionTemplate::MaterialIndex' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneParticleParameterSectionTemplate
// 0x0000 (0x0080 - 0x0080)
struct FMovieSceneParticleParameterSectionTemplate final  : public FMovieSceneParameterSectionTemplate
{
};
static_assert(alignof(FMovieSceneParticleParameterSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneParticleParameterSectionTemplate");
static_assert(sizeof(FMovieSceneParticleParameterSectionTemplate) == 0x000080, "Wrong size on FMovieSceneParticleParameterSectionTemplate");

// ScriptStruct MovieSceneTracks.MovieSceneParticleChannel
// 0x0000 (0x0098 - 0x0098)
struct FMovieSceneParticleChannel final  : public FMovieSceneByteChannel
{
};
static_assert(alignof(FMovieSceneParticleChannel) == 0x000008, "Wrong alignment on FMovieSceneParticleChannel");
static_assert(sizeof(FMovieSceneParticleChannel) == 0x000098, "Wrong size on FMovieSceneParticleChannel");

// ScriptStruct MovieSceneTracks.MovieSceneParticleSectionTemplate
// 0x0098 (0x00B8 - 0x0020)
struct FMovieSceneParticleSectionTemplate final  : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneParticleChannel             ParticleKeys;                                      // 0x0020(0x0098)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneParticleSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneParticleSectionTemplate");
static_assert(sizeof(FMovieSceneParticleSectionTemplate) == 0x0000B8, "Wrong size on FMovieSceneParticleSectionTemplate");
static_assert(offsetof(FMovieSceneParticleSectionTemplate, ParticleKeys) == 0x000020, "Member 'FMovieSceneParticleSectionTemplate::ParticleKeys' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieScenePrimitiveMaterialTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieScenePrimitiveMaterialTemplate final  : public FMovieSceneEvalTemplate
{
public:
	int32                                         MaterialIndex;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16A9[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectPathChannel           MaterialChannel;                                   // 0x0028(0x00C0)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMovieScenePrimitiveMaterialTemplate) == 0x000008, "Wrong alignment on FMovieScenePrimitiveMaterialTemplate");
static_assert(sizeof(FMovieScenePrimitiveMaterialTemplate) == 0x0000E8, "Wrong size on FMovieScenePrimitiveMaterialTemplate");
static_assert(offsetof(FMovieScenePrimitiveMaterialTemplate, MaterialIndex) == 0x000020, "Member 'FMovieScenePrimitiveMaterialTemplate::MaterialIndex' has a wrong offset!");
static_assert(offsetof(FMovieScenePrimitiveMaterialTemplate, MaterialChannel) == 0x000028, "Member 'FMovieScenePrimitiveMaterialTemplate::MaterialChannel' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneEulerTransformPropertySectionTemplate
// 0x0650 (0x0698 - 0x0048)
struct FMovieSceneEulerTransformPropertySectionTemplate final  : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieScene3DTransformTemplateData     TemplateData;                                      // 0x0048(0x0650)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMovieSceneEulerTransformPropertySectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEulerTransformPropertySectionTemplate");
static_assert(sizeof(FMovieSceneEulerTransformPropertySectionTemplate) == 0x000698, "Wrong size on FMovieSceneEulerTransformPropertySectionTemplate");
static_assert(offsetof(FMovieSceneEulerTransformPropertySectionTemplate, TemplateData) == 0x000048, "Member 'FMovieSceneEulerTransformPropertySectionTemplate::TemplateData' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneTransformPropertySectionTemplate
// 0x0650 (0x0698 - 0x0048)
struct FMovieSceneTransformPropertySectionTemplate final  : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieScene3DTransformTemplateData     TemplateData;                                      // 0x0048(0x0650)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMovieSceneTransformPropertySectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneTransformPropertySectionTemplate");
static_assert(sizeof(FMovieSceneTransformPropertySectionTemplate) == 0x000698, "Wrong size on FMovieSceneTransformPropertySectionTemplate");
static_assert(offsetof(FMovieSceneTransformPropertySectionTemplate, TemplateData) == 0x000048, "Member 'FMovieSceneTransformPropertySectionTemplate::TemplateData' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneVectorPropertySectionTemplate
// 0x0288 (0x02D0 - 0x0048)
struct FMovieSceneVectorPropertySectionTemplate final  : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneFloatChannel                ComponentCurves[0x4];                              // 0x0048(0x00A0)(Protected, NativeAccessSpecifierProtected)
	int32                                         NumChannelsUsed;                                   // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMovieSceneBlendType                          BlendType;                                         // 0x02CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16AA[0x3];                                     // 0x02CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneVectorPropertySectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneVectorPropertySectionTemplate");
static_assert(sizeof(FMovieSceneVectorPropertySectionTemplate) == 0x0002D0, "Wrong size on FMovieSceneVectorPropertySectionTemplate");
static_assert(offsetof(FMovieSceneVectorPropertySectionTemplate, ComponentCurves) == 0x000048, "Member 'FMovieSceneVectorPropertySectionTemplate::ComponentCurves' has a wrong offset!");
static_assert(offsetof(FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed) == 0x0002C8, "Member 'FMovieSceneVectorPropertySectionTemplate::NumChannelsUsed' has a wrong offset!");
static_assert(offsetof(FMovieSceneVectorPropertySectionTemplate, BlendType) == 0x0002CC, "Member 'FMovieSceneVectorPropertySectionTemplate::BlendType' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneStringChannel
// 0x0098 (0x00A0 - 0x0008)
struct FMovieSceneStringChannel final  : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         Values;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DefaultValue;                                      // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasDefaultValue;                                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_16AB[0x67];                                    // 0x0039(0x0067)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneStringChannel) == 0x000008, "Wrong alignment on FMovieSceneStringChannel");
static_assert(sizeof(FMovieSceneStringChannel) == 0x0000A0, "Wrong size on FMovieSceneStringChannel");
static_assert(offsetof(FMovieSceneStringChannel, Times) == 0x000008, "Member 'FMovieSceneStringChannel::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneStringChannel, Values) == 0x000018, "Member 'FMovieSceneStringChannel::Values' has a wrong offset!");
static_assert(offsetof(FMovieSceneStringChannel, DefaultValue) == 0x000028, "Member 'FMovieSceneStringChannel::DefaultValue' has a wrong offset!");
static_assert(offsetof(FMovieSceneStringChannel, bHasDefaultValue) == 0x000038, "Member 'FMovieSceneStringChannel::bHasDefaultValue' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneStringPropertySectionTemplate
// 0x00A0 (0x00E8 - 0x0048)
struct FMovieSceneStringPropertySectionTemplate final  : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneStringChannel               StringCurve;                                       // 0x0048(0x00A0)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMovieSceneStringPropertySectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneStringPropertySectionTemplate");
static_assert(sizeof(FMovieSceneStringPropertySectionTemplate) == 0x0000E8, "Wrong size on FMovieSceneStringPropertySectionTemplate");
static_assert(offsetof(FMovieSceneStringPropertySectionTemplate, StringCurve) == 0x000048, "Member 'FMovieSceneStringPropertySectionTemplate::StringCurve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneIntegerPropertySectionTemplate
// 0x0098 (0x00E0 - 0x0048)
struct FMovieSceneIntegerPropertySectionTemplate final  : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneIntegerChannel              IntegerCurve;                                      // 0x0048(0x0090)(Protected, NativeAccessSpecifierProtected)
	EMovieSceneBlendType                          BlendType;                                         // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16AC[0x7];                                     // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneIntegerPropertySectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneIntegerPropertySectionTemplate");
static_assert(sizeof(FMovieSceneIntegerPropertySectionTemplate) == 0x0000E0, "Wrong size on FMovieSceneIntegerPropertySectionTemplate");
static_assert(offsetof(FMovieSceneIntegerPropertySectionTemplate, IntegerCurve) == 0x000048, "Member 'FMovieSceneIntegerPropertySectionTemplate::IntegerCurve' has a wrong offset!");
static_assert(offsetof(FMovieSceneIntegerPropertySectionTemplate, BlendType) == 0x0000D8, "Member 'FMovieSceneIntegerPropertySectionTemplate::BlendType' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneEnumPropertySectionTemplate
// 0x0098 (0x00E0 - 0x0048)
struct FMovieSceneEnumPropertySectionTemplate final  : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneByteChannel                 EnumCurve;                                         // 0x0048(0x0098)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMovieSceneEnumPropertySectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEnumPropertySectionTemplate");
static_assert(sizeof(FMovieSceneEnumPropertySectionTemplate) == 0x0000E0, "Wrong size on FMovieSceneEnumPropertySectionTemplate");
static_assert(offsetof(FMovieSceneEnumPropertySectionTemplate, EnumCurve) == 0x000048, "Member 'FMovieSceneEnumPropertySectionTemplate::EnumCurve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneBytePropertySectionTemplate
// 0x0098 (0x00E0 - 0x0048)
struct FMovieSceneBytePropertySectionTemplate final  : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneByteChannel                 ByteCurve;                                         // 0x0048(0x0098)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMovieSceneBytePropertySectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneBytePropertySectionTemplate");
static_assert(sizeof(FMovieSceneBytePropertySectionTemplate) == 0x0000E0, "Wrong size on FMovieSceneBytePropertySectionTemplate");
static_assert(offsetof(FMovieSceneBytePropertySectionTemplate, ByteCurve) == 0x000048, "Member 'FMovieSceneBytePropertySectionTemplate::ByteCurve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneFloatPropertySectionTemplate
// 0x00A8 (0x00F0 - 0x0048)
struct FMovieSceneFloatPropertySectionTemplate final  : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneFloatChannel                FloatFunction;                                     // 0x0048(0x00A0)(Protected, NativeAccessSpecifierProtected)
	EMovieSceneBlendType                          BlendType;                                         // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16AD[0x7];                                     // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneFloatPropertySectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneFloatPropertySectionTemplate");
static_assert(sizeof(FMovieSceneFloatPropertySectionTemplate) == 0x0000F0, "Wrong size on FMovieSceneFloatPropertySectionTemplate");
static_assert(offsetof(FMovieSceneFloatPropertySectionTemplate, FloatFunction) == 0x000048, "Member 'FMovieSceneFloatPropertySectionTemplate::FloatFunction' has a wrong offset!");
static_assert(offsetof(FMovieSceneFloatPropertySectionTemplate, BlendType) == 0x0000E8, "Member 'FMovieSceneFloatPropertySectionTemplate::BlendType' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneBoolPropertySectionTemplate
// 0x0090 (0x00D8 - 0x0048)
struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
{
public:
	struct FMovieSceneBoolChannel                 BoolCurve;                                         // 0x0048(0x0090)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMovieSceneBoolPropertySectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneBoolPropertySectionTemplate");
static_assert(sizeof(FMovieSceneBoolPropertySectionTemplate) == 0x0000D8, "Wrong size on FMovieSceneBoolPropertySectionTemplate");
static_assert(offsetof(FMovieSceneBoolPropertySectionTemplate, BoolCurve) == 0x000048, "Member 'FMovieSceneBoolPropertySectionTemplate::BoolCurve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneSpawnSectionTemplate
// 0x0090 (0x00B0 - 0x0020)
struct FMovieSceneSpawnSectionTemplate final  : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneBoolChannel                 Curve;                                             // 0x0020(0x0090)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMovieSceneSpawnSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneSpawnSectionTemplate");
static_assert(sizeof(FMovieSceneSpawnSectionTemplate) == 0x0000B0, "Wrong size on FMovieSceneSpawnSectionTemplate");
static_assert(offsetof(FMovieSceneSpawnSectionTemplate, Curve) == 0x000020, "Member 'FMovieSceneSpawnSectionTemplate::Curve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneVectorKeyStructBase
// 0x0020 (0x0028 - 0x0008)
struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
{
public:
	struct FFrameNumber                           Time;                                              // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16AE[0x1C];                                    // 0x000C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneVectorKeyStructBase) == 0x000008, "Wrong alignment on FMovieSceneVectorKeyStructBase");
static_assert(sizeof(FMovieSceneVectorKeyStructBase) == 0x000028, "Wrong size on FMovieSceneVectorKeyStructBase");
static_assert(offsetof(FMovieSceneVectorKeyStructBase, Time) == 0x000008, "Member 'FMovieSceneVectorKeyStructBase::Time' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneVector4KeyStruct
// 0x0018 (0x0040 - 0x0028)
struct FMovieSceneVector4KeyStruct final  : public FMovieSceneVectorKeyStructBase
{
public:
	uint8                                         Pad_16AF[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Vector;                                            // 0x0030(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneVector4KeyStruct) == 0x000010, "Wrong alignment on FMovieSceneVector4KeyStruct");
static_assert(sizeof(FMovieSceneVector4KeyStruct) == 0x000040, "Wrong size on FMovieSceneVector4KeyStruct");
static_assert(offsetof(FMovieSceneVector4KeyStruct, Vector) == 0x000030, "Member 'FMovieSceneVector4KeyStruct::Vector' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneVectorKeyStruct
// 0x0010 (0x0038 - 0x0028)
struct FMovieSceneVectorKeyStruct final  : public FMovieSceneVectorKeyStructBase
{
public:
	struct FVector                                Vector;                                            // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B0[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneVectorKeyStruct) == 0x000008, "Wrong alignment on FMovieSceneVectorKeyStruct");
static_assert(sizeof(FMovieSceneVectorKeyStruct) == 0x000038, "Wrong size on FMovieSceneVectorKeyStruct");
static_assert(offsetof(FMovieSceneVectorKeyStruct, Vector) == 0x000028, "Member 'FMovieSceneVectorKeyStruct::Vector' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneVector2DKeyStruct
// 0x0008 (0x0030 - 0x0028)
struct FMovieSceneVector2DKeyStruct final  : public FMovieSceneVectorKeyStructBase
{
public:
	struct FVector2D                              Vector;                                            // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneVector2DKeyStruct) == 0x000008, "Wrong alignment on FMovieSceneVector2DKeyStruct");
static_assert(sizeof(FMovieSceneVector2DKeyStruct) == 0x000030, "Wrong size on FMovieSceneVector2DKeyStruct");
static_assert(offsetof(FMovieSceneVector2DKeyStruct, Vector) == 0x000028, "Member 'FMovieSceneVector2DKeyStruct::Vector' has a wrong offset!");

// ScriptStruct MovieSceneTracks.MovieSceneVisibilitySectionTemplate
// 0x0000 (0x00D8 - 0x00D8)
struct FMovieSceneVisibilitySectionTemplate final  : public FMovieSceneBoolPropertySectionTemplate
{
};
static_assert(alignof(FMovieSceneVisibilitySectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneVisibilitySectionTemplate");
static_assert(sizeof(FMovieSceneVisibilitySectionTemplate) == 0x0000D8, "Wrong size on FMovieSceneVisibilitySectionTemplate");

}


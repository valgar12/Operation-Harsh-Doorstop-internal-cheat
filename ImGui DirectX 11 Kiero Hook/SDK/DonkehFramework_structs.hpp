#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DonkehFramework

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum DonkehFramework.EFireMode
// NumValues: 0x0004
enum class EFireMode : uint8
{
	Semi                                     = 0,
	Auto                                     = 1,
	Burst                                    = 2,
	EFireMode_MAX                            = 3,
};

// Enum DonkehFramework.EDFVoteStatus
// NumValues: 0x0006
enum class EDFVoteStatus : uint8
{
	Inactive                                 = 0,
	InProgress                               = 1,
	Passed                                   = 2,
	FailedNotEnoughVotes                     = 3,
	FailedInsufficientVoteRatio              = 4,
	EDFVoteStatus_MAX                        = 5,
};

// Enum DonkehFramework.EDFPlayerWhitelistType
// NumValues: 0x0004
enum class EDFPlayerWhitelistType : uint8
{
	None                                     = 0,
	Manual                                   = 1,
	Token                                    = 2,
	EDFPlayerWhitelistType_MAX               = 3,
};

// Enum DonkehFramework.EDFItemEnabledMode
// NumValues: 0x0004
enum class EDFItemEnabledMode : uint8
{
	Enabled                                  = 0,
	Disabled                                 = 1,
	Hidden                                   = 2,
	EDFItemEnabledMode_MAX                   = 3,
};

// Enum DonkehFramework.ESessionSearchPresenceType
// NumValues: 0x0004
enum class ESessionSearchPresenceType : uint8
{
	AllServers                               = 0,
	ListenServersOnly                        = 1,
	DedicatedServersOnly                     = 2,
	ESessionSearchPresenceType_MAX           = 3,
};

// Enum DonkehFramework.ECharacterStance
// NumValues: 0x0006
enum class ECharacterStance : uint8
{
	None                                     = 0,
	Stand                                    = 1,
	Crouch                                   = 2,
	Prone                                    = 3,
	Custom                                   = 4,
	ECharacterStance_MAX                     = 5,
};

// Enum DonkehFramework.EDFCharacterCustomMovementMode
// NumValues: 0x0003
enum class EDFCharacterCustomMovementMode : uint8
{
	None                                     = 0,
	Vaulting                                 = 1,
	MAX                                      = 2,
};

// Enum DonkehFramework.EPlayerVoiceState
// NumValues: 0x0004
enum class EPlayerVoiceState : uint8
{
	NotTalking                               = 0,
	Talking                                  = 1,
	Muted                                    = 2,
	EPlayerVoiceState_MAX                    = 3,
};

// Enum DonkehFramework.EPlayerKind
// NumValues: 0x0004
enum class EPlayerKind : uint8
{
	Human                                    = 0,
	Bot                                      = 1,
	Either                                   = 2,
	EPlayerKind_MAX                          = 3,
};

// Enum DonkehFramework.ELogVerbosityBP
// NumValues: 0x0006
enum class ELogVerbosityBP : uint8
{
	Error                                    = 2,
	Warning                                  = 3,
	Log                                      = 5,
	Verbose                                  = 6,
	VeryVerbose                              = 7,
	MAX                                      = 0,
};

// Enum DonkehFramework.EGunReloadState
// NumValues: 0x0008
enum class EGunReloadState : uint8
{
	NotReloading                             = 0,
	PartialReloadStart                       = 1,
	FullReloadStart                          = 2,
	PartialReload                            = 3,
	FullReload                               = 4,
	PartialReloadEnd                         = 5,
	FullReloadEnd                            = 6,
	EGunReloadState_MAX                      = 7,
};

// Enum DonkehFramework.EAmmoClipReloadBehavior
// NumValues: 0x0004
enum class EAmmoClipReloadBehavior : uint8
{
	DiscardOnEmpty                           = 0,
	DiscardOnReload                          = 1,
	NoDiscard                                = 2,
	EAmmoClipReloadBehavior_MAX              = 3,
};

// Enum DonkehFramework.ECardinalDirection
// NumValues: 0x0005
enum class ECardinalDirection : uint8
{
	North                                    = 0,
	South                                    = 1,
	East                                     = 2,
	West                                     = 3,
	ECardinalDirection_MAX                   = 4,
};

// Enum DonkehFramework.EVaultBehavior
// NumValues: 0x0006
enum class EVaultBehavior : uint8
{
	None                                     = 0,
	VaultOver                                = 1,
	SprintVaultOver                          = 2,
	ClimbOnto                                = 3,
	SprintClimbOnto                          = 4,
	EVaultBehavior_MAX                       = 5,
};

// Enum DonkehFramework.ELeanDirection
// NumValues: 0x0004
enum class ELeanDirection : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	ELeanDirection_MAX                       = 3,
};

// Enum DonkehFramework.ESpecificItemType
// NumValues: 0x001D
enum class ESpecificItemType : uint8
{
	None                                     = 0,
	Rifle                                    = 10,
	MachineGun                               = 11,
	GrenadeLauncher                          = 12,
	RocketLauncher                           = 13,
	SniperRifle                              = 14,
	SubmachineGun                            = 30,
	Pistol                                   = 31,
	FragGrenade                              = 50,
	SmokeGrenade                             = 51,
	Melee                                    = 80,
	Bandage                                  = 110,
	AmmoBag                                  = 120,
	MedicBag                                 = 121,
	Binoculars                               = 150,
	Radio                                    = 151,
	Shovel                                   = 152,
	SpecialItem1                             = 210,
	SpecialItem2                             = 211,
	SpecialItem3                             = 212,
	SpecialItem4                             = 212,
	SpecialItem5                             = 212,
	CustomItem1                              = 220,
	CustomItem2                              = 221,
	CustomItem3                              = 222,
	CustomItem4                              = 223,
	CustomItem5                              = 224,
	Undefined                                = 255,
	ESpecificItemType_MAX                    = 256,
};

// Enum DonkehFramework.EItemType
// NumValues: 0x0007
enum class EItemType : uint8
{
	Melee                                    = 0,
	Other                                    = 1,
	Pistol                                   = 2,
	Throwable                                = 3,
	Rifle                                    = 4,
	Equipment                                = 5,
	EItemType_MAX                            = 6,
};

// Enum DonkehFramework.EDFVotingChannel
// NumValues: 0x0002
enum class EDFVotingChannel : uint8
{
	All                                      = 0,
	EDFVotingChannel_MAX                     = 1,
};

// ScriptStruct DonkehFramework.DFPlayerVoteSelection
// 0x0008 (0x0008 - 0x0000)
struct FDFPlayerVoteSelection final 
{
public:
	int32                                         SelectionIdx;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoteCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FDFPlayerVoteSelection) == 0x000004, "Wrong alignment on FDFPlayerVoteSelection");
//(sizeof(FDFPlayerVoteSelection) == 0x000008, "Wrong size on FDFPlayerVoteSelection");
//(offsetof(FDFPlayerVoteSelection, SelectionIdx) == 0x000000, "Member 'FDFPlayerVoteSelection::SelectionIdx' has a wrong offset!");
//(offsetof(FDFPlayerVoteSelection, VoteCount) == 0x000004, "Member 'FDFPlayerVoteSelection::VoteCount' has a wrong offset!");

// ScriptStruct DonkehFramework.DFVoteIssueDefinition
// 0x0010 (0x0010 - 0x0000)
struct FDFVoteIssueDefinition final 
{
public:
	TSubclassOf<class UDFVoteIssue>               IssueClass;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOnlyAdminsCanInitiateVote : 1;                    // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowAdminTargets : 1;                            // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CD0[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FDFVoteIssueDefinition) == 0x000008, "Wrong alignment on FDFVoteIssueDefinition");
//(sizeof(FDFVoteIssueDefinition) == 0x000010, "Wrong size on FDFVoteIssueDefinition");
//(offsetof(FDFVoteIssueDefinition, IssueClass) == 0x000000, "Member 'FDFVoteIssueDefinition::IssueClass' has a wrong offset!");

// ScriptStruct DonkehFramework.DFVoteIssueContext
// 0x0018 (0x0018 - 0x0000)
struct FDFVoteIssueContext final 
{
public:
	class APlayerState*                           TargetPlayer;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD1[0x10];                                     // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FDFVoteIssueContext) == 0x000008, "Wrong alignment on FDFVoteIssueContext");
//(sizeof(FDFVoteIssueContext) == 0x000018, "Wrong size on FDFVoteIssueContext");
//(offsetof(FDFVoteIssueContext, TargetPlayer) == 0x000000, "Member 'FDFVoteIssueContext::TargetPlayer' has a wrong offset!");

// ScriptStruct DonkehFramework.DFGenericObject
// 0x001C (0x0028 - 0x000C)
struct FDFGenericObject final  : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_CD2[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD3[0x8];                                      // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bPendingRemoval : 1;                               // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPredictivelyRemoved : 1;                          // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CD4[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FDFGenericObject) == 0x000008, "Wrong alignment on FDFGenericObject");
//(sizeof(FDFGenericObject) == 0x000028, "Wrong size on FDFGenericObject");
//(offsetof(FDFGenericObject, Object) == 0x000010, "Member 'FDFGenericObject::Object' has a wrong offset!");

// ScriptStruct DonkehFramework.DFGenericObjectContainer
// 0x0078 (0x0180 - 0x0108)
struct FDFGenericObjectContainer final  : public FFastArraySerializer
{
public:
	TArray<struct FDFGenericObject>               GenericObjects;                                    // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD5[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 RequiredClass;                                     // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CD6[0x58];                                     // 0x0128(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FDFGenericObjectContainer) == 0x000008, "Wrong alignment on FDFGenericObjectContainer");
//(sizeof(FDFGenericObjectContainer) == 0x000180, "Wrong size on FDFGenericObjectContainer");
//(offsetof(FDFGenericObjectContainer, GenericObjects) == 0x000108, "Member 'FDFGenericObjectContainer::GenericObjects' has a wrong offset!");
//(offsetof(FDFGenericObjectContainer, RequiredClass) == 0x000120, "Member 'FDFGenericObjectContainer::RequiredClass' has a wrong offset!");

// ScriptStruct DonkehFramework.DFActiveVoteInfo
// 0x0048 (0x0048 - 0x0000)
struct FDFActiveVoteInfo final 
{
public:
	TSubclassOf<class UDFVoteIssue>               IssueClass;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDFVoteIssueContext                    IssueContext;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	float                                         VoteEndTime;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD7[0x4];                                      // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           OwningPlayer;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDFVoteStatus                                 Status;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD8[0x7];                                      // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDFPlayerVoteSelection>         Votes;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FDFActiveVoteInfo) == 0x000008, "Wrong alignment on FDFActiveVoteInfo");
//(sizeof(FDFActiveVoteInfo) == 0x000048, "Wrong size on FDFActiveVoteInfo");
//(offsetof(FDFActiveVoteInfo, IssueClass) == 0x000000, "Member 'FDFActiveVoteInfo::IssueClass' has a wrong offset!");
//(offsetof(FDFActiveVoteInfo, IssueContext) == 0x000008, "Member 'FDFActiveVoteInfo::IssueContext' has a wrong offset!");
//(offsetof(FDFActiveVoteInfo, VoteEndTime) == 0x000020, "Member 'FDFActiveVoteInfo::VoteEndTime' has a wrong offset!");
//(offsetof(FDFActiveVoteInfo, OwningPlayer) == 0x000028, "Member 'FDFActiveVoteInfo::OwningPlayer' has a wrong offset!");
//(offsetof(FDFActiveVoteInfo, Status) == 0x000030, "Member 'FDFActiveVoteInfo::Status' has a wrong offset!");
//(offsetof(FDFActiveVoteInfo, Votes) == 0x000038, "Member 'FDFActiveVoteInfo::Votes' has a wrong offset!");

// ScriptStruct DonkehFramework.DFPropertyAssetBundles
// 0x0001 (0x0001 - 0x0000)
struct FDFPropertyAssetBundles final 
{
public:
	uint8                                         Pad_CD9[0x1];                                      // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FDFPropertyAssetBundles) == 0x000001, "Wrong alignment on FDFPropertyAssetBundles");
//(sizeof(FDFPropertyAssetBundles) == 0x000001, "Wrong size on FDFPropertyAssetBundles");

// ScriptStruct DonkehFramework.DFVaultTargetParams
// 0x0010 (0x0010 - 0x0000)
struct FDFVaultTargetParams final 
{
public:
	EVaultBehavior                                DesiredBehavior;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDA[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize10                  Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FDFVaultTargetParams) == 0x000004, "Wrong alignment on FDFVaultTargetParams");
//(sizeof(FDFVaultTargetParams) == 0x000010, "Wrong size on FDFVaultTargetParams");
//(offsetof(FDFVaultTargetParams, DesiredBehavior) == 0x000000, "Member 'FDFVaultTargetParams::DesiredBehavior' has a wrong offset!");
//(offsetof(FDFVaultTargetParams, Location) == 0x000004, "Member 'FDFVaultTargetParams::Location' has a wrong offset!");

// ScriptStruct DonkehFramework.DFVaultTraceData
// 0x0018 (0x0018 - 0x0000)
struct FDFVaultTraceData
{
public:
	struct FDFVaultTargetParams                   TargetParams;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EVaultBehavior                                Behavior;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDB[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Height;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FDFVaultTraceData) == 0x000004, "Wrong alignment on FDFVaultTraceData");
//(sizeof(FDFVaultTraceData) == 0x000018, "Wrong size on FDFVaultTraceData");
//(offsetof(FDFVaultTraceData, TargetParams) == 0x000000, "Member 'FDFVaultTraceData::TargetParams' has a wrong offset!");
//(offsetof(FDFVaultTraceData, Behavior) == 0x000010, "Member 'FDFVaultTraceData::Behavior' has a wrong offset!");
//(offsetof(FDFVaultTraceData, Height) == 0x000014, "Member 'FDFVaultTraceData::Height' has a wrong offset!");

// ScriptStruct DonkehFramework.DFVaultTraceResult
// 0x0004 (0x001C - 0x0018)
struct FDFVaultTraceResult final  : public FDFVaultTraceData
{
public:
	bool                                          bSuccess;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDC[0x3];                                      // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FDFVaultTraceResult) == 0x000004, "Wrong alignment on FDFVaultTraceResult");
//(sizeof(FDFVaultTraceResult) == 0x00001C, "Wrong size on FDFVaultTraceResult");
//(offsetof(FDFVaultTraceResult, bSuccess) == 0x000018, "Member 'FDFVaultTraceResult::bSuccess' has a wrong offset!");

// ScriptStruct DonkehFramework.SpawnPointDef
// 0x0050 (0x0050 - 0x0000)
struct FSpawnPointDef final 
{
public:
	int32                                         SpawnID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDD[0xC];                                      // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                SpawnContextObject;                                // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDE[0x8];                                      // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FSpawnPointDef) == 0x000010, "Wrong alignment on FSpawnPointDef");
//(sizeof(FSpawnPointDef) == 0x000050, "Wrong size on FSpawnPointDef");
//(offsetof(FSpawnPointDef, SpawnID) == 0x000000, "Member 'FSpawnPointDef::SpawnID' has a wrong offset!");
//(offsetof(FSpawnPointDef, SpawnTransform) == 0x000010, "Member 'FSpawnPointDef::SpawnTransform' has a wrong offset!");
//(offsetof(FSpawnPointDef, SpawnContextObject) == 0x000040, "Member 'FSpawnPointDef::SpawnContextObject' has a wrong offset!");

// ScriptStruct DonkehFramework.PlayerChatMsg
// 0x0030 (0x0030 - 0x0000)
struct FPlayerChatMsg final 
{
public:
	class APlayerState*                           SenderPS;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MsgTeamId;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDF[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MsgContent;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FPlayerChatMsg) == 0x000008, "Wrong alignment on FPlayerChatMsg");
//(sizeof(FPlayerChatMsg) == 0x000030, "Wrong size on FPlayerChatMsg");
//(offsetof(FPlayerChatMsg, SenderPS) == 0x000000, "Member 'FPlayerChatMsg::SenderPS' has a wrong offset!");
//(offsetof(FPlayerChatMsg, SenderName) == 0x000008, "Member 'FPlayerChatMsg::SenderName' has a wrong offset!");
//(offsetof(FPlayerChatMsg, MsgTeamId) == 0x000018, "Member 'FPlayerChatMsg::MsgTeamId' has a wrong offset!");
//(offsetof(FPlayerChatMsg, MsgContent) == 0x000020, "Member 'FPlayerChatMsg::MsgContent' has a wrong offset!");

// ScriptStruct DonkehFramework.AssetDescriptor
// 0x0020 (0x0020 - 0x0000)
struct FAssetDescriptor final 
{
public:
	class FName                                   AssetName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//(alignof(FAssetDescriptor) == 0x000008, "Wrong alignment on FAssetDescriptor");
//(sizeof(FAssetDescriptor) == 0x000020, "Wrong size on FAssetDescriptor");
//(offsetof(FAssetDescriptor, AssetName) == 0x000000, "Member 'FAssetDescriptor::AssetName' has a wrong offset!");
//(offsetof(FAssetDescriptor, DisplayText) == 0x000008, "Member 'FAssetDescriptor::DisplayText' has a wrong offset!");

// ScriptStruct DonkehFramework.DFCharacterVariationDataHandle
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDFCharacterVariationDataHandle final 
{
public:
	uint8                                         Pad_CE0[0x18];                                     // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FDFCharacterVariationDataHandle) == 0x000008, "Wrong alignment on FDFCharacterVariationDataHandle");
//(sizeof(FDFCharacterVariationDataHandle) == 0x000018, "Wrong size on FDFCharacterVariationDataHandle");

// ScriptStruct DonkehFramework.DFCharacterVariationDataSource
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDFCharacterVariationDataSource
{
public:
	uint8                                         Pad_CE1[0x8];                                      // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FDFCharacterVariationDataSource) == 0x000008, "Wrong alignment on FDFCharacterVariationDataSource");
//(sizeof(FDFCharacterVariationDataSource) == 0x000008, "Wrong size on FDFCharacterVariationDataSource");

// ScriptStruct DonkehFramework.DFCharacterVariationDataSource_TableRow
// 0x0018 (0x0020 - 0x0008)
struct FDFCharacterVariationDataSource_TableRow final  : public FDFCharacterVariationDataSource
{
public:
	struct FDataTableRowHandle                    RowHandle;                                         // 0x0008(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bValidRowHandle;                                   // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CE2[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FDFCharacterVariationDataSource_TableRow) == 0x000008, "Wrong alignment on FDFCharacterVariationDataSource_TableRow");
//(sizeof(FDFCharacterVariationDataSource_TableRow) == 0x000020, "Wrong size on FDFCharacterVariationDataSource_TableRow");
//(offsetof(FDFCharacterVariationDataSource_TableRow, RowHandle) == 0x000008, "Member 'FDFCharacterVariationDataSource_TableRow::RowHandle' has a wrong offset!");
//(offsetof(FDFCharacterVariationDataSource_TableRow, bValidRowHandle) == 0x000018, "Member 'FDFCharacterVariationDataSource_TableRow::bValidRowHandle' has a wrong offset!");

// ScriptStruct DonkehFramework.DFCharacterVariation
// 0x0030 (0x0030 - 0x0000)
struct FDFCharacterVariation final 
{
public:
	uint8                                         Pad_CE3[0x8];                                      // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FDFCharacterVariation) == 0x000008, "Wrong alignment on FDFCharacterVariation");
//(sizeof(FDFCharacterVariation) == 0x000030, "Wrong size on FDFCharacterVariation");
//(offsetof(FDFCharacterVariation, Mesh) == 0x000008, "Member 'FDFCharacterVariation::Mesh' has a wrong offset!");

// ScriptStruct DonkehFramework.DFCharacterVariationData
// 0x0060 (0x0068 - 0x0008)
struct FDFCharacterVariationData : public FTableRowBase
{
public:
	struct FDFCharacterVariation                  Variation;                                         // 0x0008(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDFCharacterVariation                  VariationFPP;                                      // 0x0038(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
//(alignof(FDFCharacterVariationData) == 0x000008, "Wrong alignment on FDFCharacterVariationData");
//(sizeof(FDFCharacterVariationData) == 0x000068, "Wrong size on FDFCharacterVariationData");
//(offsetof(FDFCharacterVariationData, Variation) == 0x000008, "Member 'FDFCharacterVariationData::Variation' has a wrong offset!");
//(offsetof(FDFCharacterVariationData, VariationFPP) == 0x000038, "Member 'FDFCharacterVariationData::VariationFPP' has a wrong offset!");

// ScriptStruct DonkehFramework.PerspectiveSound
// 0x0010 (0x0010 - 0x0000)
struct FPerspectiveSound final 
{
public:
	class USoundBase*                             Sound1P;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound3P;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FPerspectiveSound) == 0x000008, "Wrong alignment on FPerspectiveSound");
//(sizeof(FPerspectiveSound) == 0x000010, "Wrong size on FPerspectiveSound");
//(offsetof(FPerspectiveSound, Sound1P) == 0x000000, "Member 'FPerspectiveSound::Sound1P' has a wrong offset!");
//(offsetof(FPerspectiveSound, Sound3P) == 0x000008, "Member 'FPerspectiveSound::Sound3P' has a wrong offset!");

// ScriptStruct DonkehFramework.WeaponSoundCollection
// 0x0080 (0x0080 - 0x0000)
struct FWeaponSoundCollection final 
{
public:
	struct FPerspectiveSound                      EquipSound;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveSound                      UnEquipSound;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveSound                      FireSound;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveSound                      FireLastSound;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveSound                      DryFireSound;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveSound                      ReloadSound;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveSound                      ReloadFullSound;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveSound                      FireModeSound;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FWeaponSoundCollection) == 0x000008, "Wrong alignment on FWeaponSoundCollection");
//(sizeof(FWeaponSoundCollection) == 0x000080, "Wrong size on FWeaponSoundCollection");
//(offsetof(FWeaponSoundCollection, EquipSound) == 0x000000, "Member 'FWeaponSoundCollection::EquipSound' has a wrong offset!");
//(offsetof(FWeaponSoundCollection, UnEquipSound) == 0x000010, "Member 'FWeaponSoundCollection::UnEquipSound' has a wrong offset!");
//(offsetof(FWeaponSoundCollection, FireSound) == 0x000020, "Member 'FWeaponSoundCollection::FireSound' has a wrong offset!");
//(offsetof(FWeaponSoundCollection, FireLastSound) == 0x000030, "Member 'FWeaponSoundCollection::FireLastSound' has a wrong offset!");
//(offsetof(FWeaponSoundCollection, DryFireSound) == 0x000040, "Member 'FWeaponSoundCollection::DryFireSound' has a wrong offset!");
//(offsetof(FWeaponSoundCollection, ReloadSound) == 0x000050, "Member 'FWeaponSoundCollection::ReloadSound' has a wrong offset!");
//(offsetof(FWeaponSoundCollection, ReloadFullSound) == 0x000060, "Member 'FWeaponSoundCollection::ReloadFullSound' has a wrong offset!");
//(offsetof(FWeaponSoundCollection, FireModeSound) == 0x000070, "Member 'FWeaponSoundCollection::FireModeSound' has a wrong offset!");

// ScriptStruct DonkehFramework.CharacterSoundCollection
// 0x0010 (0x0010 - 0x0000)
struct FCharacterSoundCollection final 
{
public:
	struct FPerspectiveSound                      DeathSound;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FCharacterSoundCollection) == 0x000008, "Wrong alignment on FCharacterSoundCollection");
//(sizeof(FCharacterSoundCollection) == 0x000010, "Wrong size on FCharacterSoundCollection");
//(offsetof(FCharacterSoundCollection, DeathSound) == 0x000000, "Member 'FCharacterSoundCollection::DeathSound' has a wrong offset!");

// ScriptStruct DonkehFramework.IntrinsicWeaponAnimSubset
// 0x0028 (0x0028 - 0x0000)
struct FIntrinsicWeaponAnimSubset final 
{
public:
	class UAnimMontage*                           Equip;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           UnEquip;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Fire;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Reload;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReloadEmpty;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FIntrinsicWeaponAnimSubset) == 0x000008, "Wrong alignment on FIntrinsicWeaponAnimSubset");
//(sizeof(FIntrinsicWeaponAnimSubset) == 0x000028, "Wrong size on FIntrinsicWeaponAnimSubset");
//(offsetof(FIntrinsicWeaponAnimSubset, Equip) == 0x000000, "Member 'FIntrinsicWeaponAnimSubset::Equip' has a wrong offset!");
//(offsetof(FIntrinsicWeaponAnimSubset, UnEquip) == 0x000008, "Member 'FIntrinsicWeaponAnimSubset::UnEquip' has a wrong offset!");
//(offsetof(FIntrinsicWeaponAnimSubset, Fire) == 0x000010, "Member 'FIntrinsicWeaponAnimSubset::Fire' has a wrong offset!");
//(offsetof(FIntrinsicWeaponAnimSubset, Reload) == 0x000018, "Member 'FIntrinsicWeaponAnimSubset::Reload' has a wrong offset!");
//(offsetof(FIntrinsicWeaponAnimSubset, ReloadEmpty) == 0x000020, "Member 'FIntrinsicWeaponAnimSubset::ReloadEmpty' has a wrong offset!");

// ScriptStruct DonkehFramework.LocomotionWeaponAnimSubset
// 0x0018 (0x0018 - 0x0000)
struct FLocomotionWeaponAnimSubset final 
{
public:
	class UAnimSequence*                          Idle;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Move;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Sprint;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FLocomotionWeaponAnimSubset) == 0x000008, "Wrong alignment on FLocomotionWeaponAnimSubset");
//(sizeof(FLocomotionWeaponAnimSubset) == 0x000018, "Wrong size on FLocomotionWeaponAnimSubset");
//(offsetof(FLocomotionWeaponAnimSubset, Idle) == 0x000000, "Member 'FLocomotionWeaponAnimSubset::Idle' has a wrong offset!");
//(offsetof(FLocomotionWeaponAnimSubset, Move) == 0x000008, "Member 'FLocomotionWeaponAnimSubset::Move' has a wrong offset!");
//(offsetof(FLocomotionWeaponAnimSubset, Sprint) == 0x000010, "Member 'FLocomotionWeaponAnimSubset::Sprint' has a wrong offset!");

// ScriptStruct DonkehFramework.SingleActionWeaponAnimSubset
// 0x0008 (0x0008 - 0x0000)
struct FSingleActionWeaponAnimSubset final 
{
public:
	class UAnimMontage*                           Action;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FSingleActionWeaponAnimSubset) == 0x000008, "Wrong alignment on FSingleActionWeaponAnimSubset");
//(sizeof(FSingleActionWeaponAnimSubset) == 0x000008, "Wrong size on FSingleActionWeaponAnimSubset");
//(offsetof(FSingleActionWeaponAnimSubset, Action) == 0x000000, "Member 'FSingleActionWeaponAnimSubset::Action' has a wrong offset!");

// ScriptStruct DonkehFramework.SingleLoadWeaponAnimSubset
// 0x0010 (0x0010 - 0x0000)
struct FSingleLoadWeaponAnimSubset final 
{
public:
	class UAnimMontage*                           StartReload;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           EndReload;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FSingleLoadWeaponAnimSubset) == 0x000008, "Wrong alignment on FSingleLoadWeaponAnimSubset");
//(sizeof(FSingleLoadWeaponAnimSubset) == 0x000010, "Wrong size on FSingleLoadWeaponAnimSubset");
//(offsetof(FSingleLoadWeaponAnimSubset, StartReload) == 0x000000, "Member 'FSingleLoadWeaponAnimSubset::StartReload' has a wrong offset!");
//(offsetof(FSingleLoadWeaponAnimSubset, EndReload) == 0x000008, "Member 'FSingleLoadWeaponAnimSubset::EndReload' has a wrong offset!");

// ScriptStruct DonkehFramework.ThrowableWeaponAnimSubset
// 0x0020 (0x0020 - 0x0000)
struct FThrowableWeaponAnimSubset final 
{
public:
	class UAnimSequence*                          ReadyBasePose;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Cock;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThrowOverhand;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThrowUnderhand;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FThrowableWeaponAnimSubset) == 0x000008, "Wrong alignment on FThrowableWeaponAnimSubset");
//(sizeof(FThrowableWeaponAnimSubset) == 0x000020, "Wrong size on FThrowableWeaponAnimSubset");
//(offsetof(FThrowableWeaponAnimSubset, ReadyBasePose) == 0x000000, "Member 'FThrowableWeaponAnimSubset::ReadyBasePose' has a wrong offset!");
//(offsetof(FThrowableWeaponAnimSubset, Cock) == 0x000008, "Member 'FThrowableWeaponAnimSubset::Cock' has a wrong offset!");
//(offsetof(FThrowableWeaponAnimSubset, ThrowOverhand) == 0x000010, "Member 'FThrowableWeaponAnimSubset::ThrowOverhand' has a wrong offset!");
//(offsetof(FThrowableWeaponAnimSubset, ThrowUnderhand) == 0x000018, "Member 'FThrowableWeaponAnimSubset::ThrowUnderhand' has a wrong offset!");

// ScriptStruct DonkehFramework.PerspectiveAnim
// 0x0010 (0x0010 - 0x0000)
struct FPerspectiveAnim final 
{
public:
	class UAnimSequenceBase*                      Anim1P;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Anim3P;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FPerspectiveAnim) == 0x000008, "Wrong alignment on FPerspectiveAnim");
//(sizeof(FPerspectiveAnim) == 0x000010, "Wrong size on FPerspectiveAnim");
//(offsetof(FPerspectiveAnim, Anim1P) == 0x000000, "Member 'FPerspectiveAnim::Anim1P' has a wrong offset!");
//(offsetof(FPerspectiveAnim, Anim3P) == 0x000008, "Member 'FPerspectiveAnim::Anim3P' has a wrong offset!");

// ScriptStruct DonkehFramework.CharacterAnimCollection
// 0x0128 (0x0128 - 0x0000)
struct FCharacterAnimCollection final 
{
public:
	class UAnimSequence*                          BasePose;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          BasePoseTPP;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AimBasePose;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Death;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntrinsicWeaponAnimSubset             Intrinsic;                                         // 0x0020(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLocomotionWeaponAnimSubset            Locomotion;                                        // 0x0048(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSingleActionWeaponAnimSubset          SingleAction;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSingleLoadWeaponAnimSubset            SingleLoad;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FThrowableWeaponAnimSubset             Throwable;                                         // 0x0078(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       DeathAnim;                                         // 0x0098(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       EquipAnim;                                         // 0x00A8(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       UnEquipAnim;                                       // 0x00B8(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       FireAnim;                                          // 0x00C8(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       ActionAnim;                                        // 0x00D8(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       ReloadAnim;                                        // 0x00E8(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       ReloadFullAnim;                                    // 0x00F8(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       StartReloadAnim;                                   // 0x0108(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       EndReloadAnim;                                     // 0x0118(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FCharacterAnimCollection) == 0x000008, "Wrong alignment on FCharacterAnimCollection");
//(sizeof(FCharacterAnimCollection) == 0x000128, "Wrong size on FCharacterAnimCollection");
//(offsetof(FCharacterAnimCollection, BasePose) == 0x000000, "Member 'FCharacterAnimCollection::BasePose' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, BasePoseTPP) == 0x000008, "Member 'FCharacterAnimCollection::BasePoseTPP' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, AimBasePose) == 0x000010, "Member 'FCharacterAnimCollection::AimBasePose' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, Death) == 0x000018, "Member 'FCharacterAnimCollection::Death' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, Intrinsic) == 0x000020, "Member 'FCharacterAnimCollection::Intrinsic' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, Locomotion) == 0x000048, "Member 'FCharacterAnimCollection::Locomotion' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, SingleAction) == 0x000060, "Member 'FCharacterAnimCollection::SingleAction' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, SingleLoad) == 0x000068, "Member 'FCharacterAnimCollection::SingleLoad' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, Throwable) == 0x000078, "Member 'FCharacterAnimCollection::Throwable' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, DeathAnim) == 0x000098, "Member 'FCharacterAnimCollection::DeathAnim' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, EquipAnim) == 0x0000A8, "Member 'FCharacterAnimCollection::EquipAnim' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, UnEquipAnim) == 0x0000B8, "Member 'FCharacterAnimCollection::UnEquipAnim' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, FireAnim) == 0x0000C8, "Member 'FCharacterAnimCollection::FireAnim' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, ActionAnim) == 0x0000D8, "Member 'FCharacterAnimCollection::ActionAnim' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, ReloadAnim) == 0x0000E8, "Member 'FCharacterAnimCollection::ReloadAnim' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, ReloadFullAnim) == 0x0000F8, "Member 'FCharacterAnimCollection::ReloadFullAnim' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, StartReloadAnim) == 0x000108, "Member 'FCharacterAnimCollection::StartReloadAnim' has a wrong offset!");
//(offsetof(FCharacterAnimCollection, EndReloadAnim) == 0x000118, "Member 'FCharacterAnimCollection::EndReloadAnim' has a wrong offset!");

// ScriptStruct DonkehFramework.WeaponAnimCollection
// 0x00F0 (0x00F0 - 0x0000)
struct FWeaponAnimCollection final 
{
public:
	class UAnimSequence*                          BasePose;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          EmptyBasePose;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntrinsicWeaponAnimSubset             Intrinsic;                                         // 0x0010(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSingleActionWeaponAnimSubset          SingleAction;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSingleLoadWeaponAnimSubset            SingleLoad;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FThrowableWeaponAnimSubset             Throwable;                                         // 0x0050(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       EquipAnim;                                         // 0x0070(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       UnEquipAnim;                                       // 0x0080(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       FireAnim;                                          // 0x0090(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       ActionAnim;                                        // 0x00A0(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       ReloadAnim;                                        // 0x00B0(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       ReloadFullAnim;                                    // 0x00C0(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       StartReloadAnim;                                   // 0x00D0(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveAnim                       EndReloadAnim;                                     // 0x00E0(0x0010)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FWeaponAnimCollection) == 0x000008, "Wrong alignment on FWeaponAnimCollection");
//(sizeof(FWeaponAnimCollection) == 0x0000F0, "Wrong size on FWeaponAnimCollection");
//(offsetof(FWeaponAnimCollection, BasePose) == 0x000000, "Member 'FWeaponAnimCollection::BasePose' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, EmptyBasePose) == 0x000008, "Member 'FWeaponAnimCollection::EmptyBasePose' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, Intrinsic) == 0x000010, "Member 'FWeaponAnimCollection::Intrinsic' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, SingleAction) == 0x000038, "Member 'FWeaponAnimCollection::SingleAction' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, SingleLoad) == 0x000040, "Member 'FWeaponAnimCollection::SingleLoad' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, Throwable) == 0x000050, "Member 'FWeaponAnimCollection::Throwable' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, EquipAnim) == 0x000070, "Member 'FWeaponAnimCollection::EquipAnim' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, UnEquipAnim) == 0x000080, "Member 'FWeaponAnimCollection::UnEquipAnim' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, FireAnim) == 0x000090, "Member 'FWeaponAnimCollection::FireAnim' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, ActionAnim) == 0x0000A0, "Member 'FWeaponAnimCollection::ActionAnim' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, ReloadAnim) == 0x0000B0, "Member 'FWeaponAnimCollection::ReloadAnim' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, ReloadFullAnim) == 0x0000C0, "Member 'FWeaponAnimCollection::ReloadFullAnim' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, StartReloadAnim) == 0x0000D0, "Member 'FWeaponAnimCollection::StartReloadAnim' has a wrong offset!");
//(offsetof(FWeaponAnimCollection, EndReloadAnim) == 0x0000E0, "Member 'FWeaponAnimCollection::EndReloadAnim' has a wrong offset!");

// ScriptStruct DonkehFramework.PerspectiveStaticMesh
// 0x0010 (0x0010 - 0x0000)
struct FPerspectiveStaticMesh final 
{
public:
	class UStaticMesh*                            Mesh1P;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh3P;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FPerspectiveStaticMesh) == 0x000008, "Wrong alignment on FPerspectiveStaticMesh");
//(sizeof(FPerspectiveStaticMesh) == 0x000010, "Wrong size on FPerspectiveStaticMesh");
//(offsetof(FPerspectiveStaticMesh, Mesh1P) == 0x000000, "Member 'FPerspectiveStaticMesh::Mesh1P' has a wrong offset!");
//(offsetof(FPerspectiveStaticMesh, Mesh3P) == 0x000008, "Member 'FPerspectiveStaticMesh::Mesh3P' has a wrong offset!");

// ScriptStruct DonkehFramework.PerspectiveSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct FPerspectiveSkeletalMesh final 
{
public:
	class USkeletalMesh*                          Mesh1P;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh3P;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FPerspectiveSkeletalMesh) == 0x000008, "Wrong alignment on FPerspectiveSkeletalMesh");
//(sizeof(FPerspectiveSkeletalMesh) == 0x000010, "Wrong size on FPerspectiveSkeletalMesh");
//(offsetof(FPerspectiveSkeletalMesh, Mesh1P) == 0x000000, "Member 'FPerspectiveSkeletalMesh::Mesh1P' has a wrong offset!");
//(offsetof(FPerspectiveSkeletalMesh, Mesh3P) == 0x000008, "Member 'FPerspectiveSkeletalMesh::Mesh3P' has a wrong offset!");

// ScriptStruct DonkehFramework.PerspectiveAnimSequence
// 0x0010 (0x0010 - 0x0000)
struct FPerspectiveAnimSequence final 
{
public:
	class UAnimSequence*                          Anim1P;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Anim3P;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FPerspectiveAnimSequence) == 0x000008, "Wrong alignment on FPerspectiveAnimSequence");
//(sizeof(FPerspectiveAnimSequence) == 0x000010, "Wrong size on FPerspectiveAnimSequence");
//(offsetof(FPerspectiveAnimSequence, Anim1P) == 0x000000, "Member 'FPerspectiveAnimSequence::Anim1P' has a wrong offset!");
//(offsetof(FPerspectiveAnimSequence, Anim3P) == 0x000008, "Member 'FPerspectiveAnimSequence::Anim3P' has a wrong offset!");

// ScriptStruct DonkehFramework.WeaponAnimMontage
// 0x0010 (0x0010 - 0x0000)
struct FWeaponAnimMontage final 
{
public:
	class UAnimMontage*                           CharAnim;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeapAnim;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FWeaponAnimMontage) == 0x000008, "Wrong alignment on FWeaponAnimMontage");
//(sizeof(FWeaponAnimMontage) == 0x000010, "Wrong size on FWeaponAnimMontage");
//(offsetof(FWeaponAnimMontage, CharAnim) == 0x000000, "Member 'FWeaponAnimMontage::CharAnim' has a wrong offset!");
//(offsetof(FWeaponAnimMontage, WeapAnim) == 0x000008, "Member 'FWeaponAnimMontage::WeapAnim' has a wrong offset!");

// ScriptStruct DonkehFramework.WeaponAnimSequence
// 0x0010 (0x0010 - 0x0000)
struct FWeaponAnimSequence final 
{
public:
	class UAnimSequence*                          CharAnim;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          WeapAnim;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FWeaponAnimSequence) == 0x000008, "Wrong alignment on FWeaponAnimSequence");
//(sizeof(FWeaponAnimSequence) == 0x000010, "Wrong size on FWeaponAnimSequence");
//(offsetof(FWeaponAnimSequence, CharAnim) == 0x000000, "Member 'FWeaponAnimSequence::CharAnim' has a wrong offset!");
//(offsetof(FWeaponAnimSequence, WeapAnim) == 0x000008, "Member 'FWeaponAnimSequence::WeapAnim' has a wrong offset!");

// ScriptStruct DonkehFramework.WeaponAnim
// 0x0010 (0x0010 - 0x0000)
struct FWeaponAnim final 
{
public:
	class UAnimSequenceBase*                      CharAnim;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      WeapAnim;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FWeaponAnim) == 0x000008, "Wrong alignment on FWeaponAnim");
//(sizeof(FWeaponAnim) == 0x000010, "Wrong size on FWeaponAnim");
//(offsetof(FWeaponAnim, CharAnim) == 0x000000, "Member 'FWeaponAnim::CharAnim' has a wrong offset!");
//(offsetof(FWeaponAnim, WeapAnim) == 0x000008, "Member 'FWeaponAnim::WeapAnim' has a wrong offset!");

// ScriptStruct DonkehFramework.AnimMontagePlaybackParams
// 0x0010 (0x0010 - 0x0000)
struct FAnimMontagePlaybackParams final 
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SourceMeshComp;                                    // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FAnimMontagePlaybackParams) == 0x000008, "Wrong alignment on FAnimMontagePlaybackParams");
//(sizeof(FAnimMontagePlaybackParams) == 0x000010, "Wrong size on FAnimMontagePlaybackParams");
//(offsetof(FAnimMontagePlaybackParams, Montage) == 0x000000, "Member 'FAnimMontagePlaybackParams::Montage' has a wrong offset!");
//(offsetof(FAnimMontagePlaybackParams, SourceMeshComp) == 0x000008, "Member 'FAnimMontagePlaybackParams::SourceMeshComp' has a wrong offset!");

// ScriptStruct DonkehFramework.RepShotInfo
// 0x0004 (0x0004 - 0x0000)
struct FRepShotInfo final 
{
public:
	uint16                                        ShotCounter;                                       // 0x0000(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFiring;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCompressByte;                                     // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
//(alignof(FRepShotInfo) == 0x000002, "Wrong alignment on FRepShotInfo");
//(sizeof(FRepShotInfo) == 0x000004, "Wrong size on FRepShotInfo");
//(offsetof(FRepShotInfo, ShotCounter) == 0x000000, "Member 'FRepShotInfo::ShotCounter' has a wrong offset!");
//(offsetof(FRepShotInfo, bIsFiring) == 0x000002, "Member 'FRepShotInfo::bIsFiring' has a wrong offset!");
//(offsetof(FRepShotInfo, bCompressByte) == 0x000003, "Member 'FRepShotInfo::bCompressByte' has a wrong offset!");

// ScriptStruct DonkehFramework.CSHitInfo
// 0x0070 (0x0070 - 0x0000)
struct FCSHitInfo final 
{
public:
	uint8                                         bBlockingHit : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CE4[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    Location;                                          // 0x0008(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              Normal;                                            // 0x0014(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    ShootLoc;                                          // 0x0028(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ShootDir;                                          // 0x0034(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    TraceStart;                                        // 0x0040(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    TraceEnd;                                          // 0x004C(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>     Component;                                         // 0x0060(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AController>             InstigatingController;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FCSHitInfo) == 0x000004, "Wrong alignment on FCSHitInfo");
//(sizeof(FCSHitInfo) == 0x000070, "Wrong size on FCSHitInfo");
//(offsetof(FCSHitInfo, Distance) == 0x000004, "Member 'FCSHitInfo::Distance' has a wrong offset!");
//(offsetof(FCSHitInfo, Location) == 0x000008, "Member 'FCSHitInfo::Location' has a wrong offset!");
//(offsetof(FCSHitInfo, Normal) == 0x000014, "Member 'FCSHitInfo::Normal' has a wrong offset!");
//(offsetof(FCSHitInfo, BoneName) == 0x000020, "Member 'FCSHitInfo::BoneName' has a wrong offset!");
//(offsetof(FCSHitInfo, ShootLoc) == 0x000028, "Member 'FCSHitInfo::ShootLoc' has a wrong offset!");
//(offsetof(FCSHitInfo, ShootDir) == 0x000034, "Member 'FCSHitInfo::ShootDir' has a wrong offset!");
//(offsetof(FCSHitInfo, TraceStart) == 0x000040, "Member 'FCSHitInfo::TraceStart' has a wrong offset!");
//(offsetof(FCSHitInfo, TraceEnd) == 0x00004C, "Member 'FCSHitInfo::TraceEnd' has a wrong offset!");
//(offsetof(FCSHitInfo, Actor) == 0x000058, "Member 'FCSHitInfo::Actor' has a wrong offset!");
//(offsetof(FCSHitInfo, Component) == 0x000060, "Member 'FCSHitInfo::Component' has a wrong offset!");
//(offsetof(FCSHitInfo, InstigatingController) == 0x000068, "Member 'FCSHitInfo::InstigatingController' has a wrong offset!");

// ScriptStruct DonkehFramework.DFDamageParams
// 0x0000 (0x0014 - 0x0014)
struct FDFDamageParams final  : public FRadialDamageParams
{
};
//(alignof(FDFDamageParams) == 0x000004, "Wrong alignment on FDFDamageParams");
//(sizeof(FDFDamageParams) == 0x000014, "Wrong size on FDFDamageParams");

// ScriptStruct DonkehFramework.TakeHitInfo
// 0x0120 (0x0120 - 0x0000)
struct FTakeHitInfo final 
{
public:
	float                                         ActualDamage;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE5[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DamageTypeClass;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APawn>                   PawnInstigator;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  DamageCauser;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageEventClassID;                                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bKilled : 1;                                       // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         EnsureReplicationByte;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CE6[0x2];                                      // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           GeneralDamageEvent;                                // 0x0028(0x0010)(NativeAccessSpecifierPrivate)
	struct FPointDamageEvent                      PointDamageEvent;                                  // 0x0038(0x00A8)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FRadialDamageEvent                     RadialDamageEvent;                                 // 0x00E0(0x0040)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
};
//(alignof(FTakeHitInfo) == 0x000008, "Wrong alignment on FTakeHitInfo");
//(sizeof(FTakeHitInfo) == 0x000120, "Wrong size on FTakeHitInfo");
//(offsetof(FTakeHitInfo, ActualDamage) == 0x000000, "Member 'FTakeHitInfo::ActualDamage' has a wrong offset!");
//(offsetof(FTakeHitInfo, DamageTypeClass) == 0x000008, "Member 'FTakeHitInfo::DamageTypeClass' has a wrong offset!");
//(offsetof(FTakeHitInfo, PawnInstigator) == 0x000010, "Member 'FTakeHitInfo::PawnInstigator' has a wrong offset!");
//(offsetof(FTakeHitInfo, DamageCauser) == 0x000018, "Member 'FTakeHitInfo::DamageCauser' has a wrong offset!");
//(offsetof(FTakeHitInfo, DamageEventClassID) == 0x000020, "Member 'FTakeHitInfo::DamageEventClassID' has a wrong offset!");
//(offsetof(FTakeHitInfo, EnsureReplicationByte) == 0x000025, "Member 'FTakeHitInfo::EnsureReplicationByte' has a wrong offset!");
//(offsetof(FTakeHitInfo, GeneralDamageEvent) == 0x000028, "Member 'FTakeHitInfo::GeneralDamageEvent' has a wrong offset!");
//(offsetof(FTakeHitInfo, PointDamageEvent) == 0x000038, "Member 'FTakeHitInfo::PointDamageEvent' has a wrong offset!");
//(offsetof(FTakeHitInfo, RadialDamageEvent) == 0x0000E0, "Member 'FTakeHitInfo::RadialDamageEvent' has a wrong offset!");

// ScriptStruct DonkehFramework.DecalData
// 0x0010 (0x0010 - 0x0000)
struct FDecalData final 
{
public:
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalSize;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FDecalData) == 0x000008, "Wrong alignment on FDecalData");
//(sizeof(FDecalData) == 0x000010, "Wrong size on FDecalData");
//(offsetof(FDecalData, DecalMaterial) == 0x000000, "Member 'FDecalData::DecalMaterial' has a wrong offset!");
//(offsetof(FDecalData, DecalSize) == 0x000008, "Member 'FDecalData::DecalSize' has a wrong offset!");
//(offsetof(FDecalData, LifeSpan) == 0x00000C, "Member 'FDecalData::LifeSpan' has a wrong offset!");

// ScriptStruct DonkehFramework.DFPlayerVote
// 0x0010 (0x0010 - 0x0000)
struct FDFPlayerVote final 
{
public:
	class APlayerState*                           VoterPS;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionIdx;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE7[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FDFPlayerVote) == 0x000008, "Wrong alignment on FDFPlayerVote");
//(sizeof(FDFPlayerVote) == 0x000010, "Wrong size on FDFPlayerVote");
//(offsetof(FDFPlayerVote, VoterPS) == 0x000000, "Member 'FDFPlayerVote::VoterPS' has a wrong offset!");
//(offsetof(FDFPlayerVote, SelectionIdx) == 0x000008, "Member 'FDFPlayerVote::SelectionIdx' has a wrong offset!");

// ScriptStruct DonkehFramework.DFVotingComponentConfig
// 0x0010 (0x0010 - 0x0000)
struct FDFVotingComponentConfig final 
{
public:
	TArray<TSubclassOf<class UDFVoteIssue>>       AllowedVoteIssues;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FDFVotingComponentConfig) == 0x000008, "Wrong alignment on FDFVotingComponentConfig");
//(sizeof(FDFVotingComponentConfig) == 0x000010, "Wrong size on FDFVotingComponentConfig");
//(offsetof(FDFVotingComponentConfig, AllowedVoteIssues) == 0x000000, "Member 'FDFVotingComponentConfig::AllowedVoteIssues' has a wrong offset!");

}


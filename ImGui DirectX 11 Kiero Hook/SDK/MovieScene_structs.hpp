#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieScene

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum MovieScene.EMovieSceneKeyInterpolation
// NumValues: 0x0006
enum class EMovieSceneKeyInterpolation : uint8
{
	Auto                                     = 0,
	User                                     = 1,
	Break                                    = 2,
	Linear                                   = 3,
	Constant                                 = 4,
	EMovieSceneKeyInterpolation_MAX          = 5,
};

// Enum MovieScene.EMovieSceneBlendType
// NumValues: 0x0005
enum class EMovieSceneBlendType : uint8
{
	Invalid                                  = 0,
	Absolute                                 = 1,
	Additive                                 = 2,
	Relative                                 = 4,
	EMovieSceneBlendType_MAX                 = 5,
};

// Enum MovieScene.EMovieSceneBuiltInEasing
// NumValues: 0x0017
enum class EMovieSceneBuiltInEasing : uint8
{
	Linear                                   = 0,
	SinIn                                    = 1,
	SinOut                                   = 2,
	SinInOut                                 = 3,
	QuadIn                                   = 4,
	QuadOut                                  = 5,
	QuadInOut                                = 6,
	CubicIn                                  = 7,
	CubicOut                                 = 8,
	CubicInOut                               = 9,
	QuartIn                                  = 10,
	QuartOut                                 = 11,
	QuartInOut                               = 12,
	QuintIn                                  = 13,
	QuintOut                                 = 14,
	QuintInOut                               = 15,
	ExpoIn                                   = 16,
	ExpoOut                                  = 17,
	ExpoInOut                                = 18,
	CircIn                                   = 19,
	CircOut                                  = 20,
	CircInOut                                = 21,
	EMovieSceneBuiltInEasing_MAX             = 22,
};

// Enum MovieScene.EEvaluationMethod
// NumValues: 0x0003
enum class EEvaluationMethod : uint8
{
	Static                                   = 0,
	Swept                                    = 1,
	EEvaluationMethod_MAX                    = 2,
};

// Enum MovieScene.EUpdateClockSource
// NumValues: 0x0007
enum class EUpdateClockSource : uint8
{
	Tick                                     = 0,
	Platform                                 = 1,
	Audio                                    = 2,
	RelativeTimecode                         = 3,
	Timecode                                 = 4,
	Custom                                   = 5,
	EUpdateClockSource_MAX                   = 6,
};

// Enum MovieScene.EMovieSceneEvaluationType
// NumValues: 0x0003
enum class EMovieSceneEvaluationType : uint8
{
	FrameLocked                              = 0,
	WithSubFrames                            = 1,
	EMovieSceneEvaluationType_MAX            = 2,
};

// Enum MovieScene.EMovieScenePlayerStatus
// NumValues: 0x0008
enum class EMovieScenePlayerStatus : uint8
{
	Stopped                                  = 0,
	Playing                                  = 1,
	Recording                                = 2,
	Scrubbing                                = 3,
	Jumping                                  = 4,
	Stepping                                 = 5,
	Paused                                   = 6,
	MAX                                      = 7,
};

// Enum MovieScene.EMovieSceneObjectBindingSpace
// NumValues: 0x0003
enum class EMovieSceneObjectBindingSpace : uint8
{
	Local                                    = 0,
	Root                                     = 1,
	EMovieSceneObjectBindingSpace_MAX        = 2,
};

// Enum MovieScene.EMovieSceneCompletionMode
// NumValues: 0x0004
enum class EMovieSceneCompletionMode : uint8
{
	KeepState                                = 0,
	RestoreState                             = 1,
	ProjectDefault                           = 2,
	EMovieSceneCompletionMode_MAX            = 3,
};

// Enum MovieScene.ESectionEvaluationFlags
// NumValues: 0x0004
enum class ESectionEvaluationFlags : uint8
{
	None                                     = 0,
	PreRoll                                  = 1,
	PostRoll                                 = 2,
	ESectionEvaluationFlags_MAX              = 3,
};

// Enum MovieScene.EUpdatePositionMethod
// NumValues: 0x0004
enum class EUpdatePositionMethod : uint8
{
	Play                                     = 0,
	Jump                                     = 1,
	Scrub                                    = 2,
	EUpdatePositionMethod_MAX                = 3,
};

// Enum MovieScene.ESpawnOwnership
// NumValues: 0x0004
enum class ESpawnOwnership : uint8
{
	InnerSequence                            = 0,
	MasterSequence                           = 1,
	External                                 = 2,
	ESpawnOwnership_MAX                      = 3,
};

// ScriptStruct MovieScene.MovieSceneTimeTransform
// 0x000C (0x000C - 0x0000)
struct FMovieSceneTimeTransform final 
{
public:
	float                                         TimeScale;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameTime                             Offset;                                            // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneTimeTransform) == 0x000004, "Wrong alignment on FMovieSceneTimeTransform");
//(sizeof(FMovieSceneTimeTransform) == 0x00000C, "Wrong size on FMovieSceneTimeTransform");
//(offsetof(FMovieSceneTimeTransform, TimeScale) == 0x000000, "Member 'FMovieSceneTimeTransform::TimeScale' has a wrong offset!");
//(offsetof(FMovieSceneTimeTransform, Offset) == 0x000004, "Member 'FMovieSceneTimeTransform::Offset' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTimeWarping
// 0x0008 (0x0008 - 0x0000)
struct FMovieSceneTimeWarping final 
{
public:
	struct FFrameNumber                           Start;                                             // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           End;                                               // 0x0004(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneTimeWarping) == 0x000004, "Wrong alignment on FMovieSceneTimeWarping");
//(sizeof(FMovieSceneTimeWarping) == 0x000008, "Wrong size on FMovieSceneTimeWarping");
//(offsetof(FMovieSceneTimeWarping, Start) == 0x000000, "Member 'FMovieSceneTimeWarping::Start' has a wrong offset!");
//(offsetof(FMovieSceneTimeWarping, End) == 0x000004, "Member 'FMovieSceneTimeWarping::End' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneNestedSequenceTransform
// 0x0014 (0x0014 - 0x0000)
struct FMovieSceneNestedSequenceTransform final 
{
public:
	struct FMovieSceneTimeTransform               LinearTransform;                                   // 0x0000(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMovieSceneTimeWarping                 Warping;                                           // 0x000C(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneNestedSequenceTransform) == 0x000004, "Wrong alignment on FMovieSceneNestedSequenceTransform");
//(sizeof(FMovieSceneNestedSequenceTransform) == 0x000014, "Wrong size on FMovieSceneNestedSequenceTransform");
//(offsetof(FMovieSceneNestedSequenceTransform, LinearTransform) == 0x000000, "Member 'FMovieSceneNestedSequenceTransform::LinearTransform' has a wrong offset!");
//(offsetof(FMovieSceneNestedSequenceTransform, Warping) == 0x00000C, "Member 'FMovieSceneNestedSequenceTransform::Warping' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceTransform
// 0x0020 (0x0020 - 0x0000)
struct FMovieSceneSequenceTransform final 
{
public:
	struct FMovieSceneTimeTransform               LinearTransform;                                   // 0x0000(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1377[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneNestedSequenceTransform> NestedTransforms;                                  // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneSequenceTransform) == 0x000008, "Wrong alignment on FMovieSceneSequenceTransform");
//(sizeof(FMovieSceneSequenceTransform) == 0x000020, "Wrong size on FMovieSceneSequenceTransform");
//(offsetof(FMovieSceneSequenceTransform, LinearTransform) == 0x000000, "Member 'FMovieSceneSequenceTransform::LinearTransform' has a wrong offset!");
//(offsetof(FMovieSceneSequenceTransform, NestedTransforms) == 0x000010, "Member 'FMovieSceneSequenceTransform::NestedTransforms' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceID
// 0x0004 (0x0004 - 0x0000)
struct FMovieSceneSequenceID final 
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneSequenceID) == 0x000004, "Wrong alignment on FMovieSceneSequenceID");
//(sizeof(FMovieSceneSequenceID) == 0x000004, "Wrong size on FMovieSceneSequenceID");
//(offsetof(FMovieSceneSequenceID, Value) == 0x000000, "Member 'FMovieSceneSequenceID::Value' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneFrameRange
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FMovieSceneFrameRange final 
{
public:
	uint8                                         Pad_1378[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneFrameRange) == 0x000004, "Wrong alignment on FMovieSceneFrameRange");
//(sizeof(FMovieSceneFrameRange) == 0x000010, "Wrong size on FMovieSceneFrameRange");

// ScriptStruct MovieScene.MovieSceneSequenceInstanceDataPtr
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMovieSceneSequenceInstanceDataPtr final 
{
public:
	uint8                                         Pad_1379[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneSequenceInstanceDataPtr) == 0x000008, "Wrong alignment on FMovieSceneSequenceInstanceDataPtr");
//(sizeof(FMovieSceneSequenceInstanceDataPtr) == 0x000018, "Wrong size on FMovieSceneSequenceInstanceDataPtr");

// ScriptStruct MovieScene.MovieSceneSubSequenceData
// 0x00E8 (0x00E8 - 0x0000)
struct FMovieSceneSubSequenceData final 
{
public:
	struct FSoftObjectPath                        Sequence;                                          // 0x0000(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceTransform           RootToSequenceTransform;                           // 0x0018(0x0020)(NativeAccessSpecifierPublic)
	struct FFrameRate                             TickResolution;                                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceID                  DeterministicSequenceID;                           // 0x0040(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneFrameRange                  PlayRange;                                         // 0x0044(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMovieSceneFrameRange                  FullPlayRange;                                     // 0x0054(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMovieSceneFrameRange                  UnwarpedPlayRange;                                 // 0x0064(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMovieSceneFrameRange                  PreRollRange;                                      // 0x0074(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMovieSceneFrameRange                  PostRollRange;                                     // 0x0084(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HierarchicalBias;                                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceInstanceDataPtr     InstanceData;                                      // 0x0098(0x0018)(NativeAccessSpecifierPublic)
	uint8                                         Pad_137A[0x8];                                     // 0x00B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  SubSectionSignature;                               // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMovieSceneSequenceTransform           OuterToInnerTransform;                             // 0x00C8(0x0020)(NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneSubSequenceData) == 0x000008, "Wrong alignment on FMovieSceneSubSequenceData");
//(sizeof(FMovieSceneSubSequenceData) == 0x0000E8, "Wrong size on FMovieSceneSubSequenceData");
//(offsetof(FMovieSceneSubSequenceData, Sequence) == 0x000000, "Member 'FMovieSceneSubSequenceData::Sequence' has a wrong offset!");
//(offsetof(FMovieSceneSubSequenceData, RootToSequenceTransform) == 0x000018, "Member 'FMovieSceneSubSequenceData::RootToSequenceTransform' has a wrong offset!");
//(offsetof(FMovieSceneSubSequenceData, TickResolution) == 0x000038, "Member 'FMovieSceneSubSequenceData::TickResolution' has a wrong offset!");
//(offsetof(FMovieSceneSubSequenceData, DeterministicSequenceID) == 0x000040, "Member 'FMovieSceneSubSequenceData::DeterministicSequenceID' has a wrong offset!");
//(offsetof(FMovieSceneSubSequenceData, PlayRange) == 0x000044, "Member 'FMovieSceneSubSequenceData::PlayRange' has a wrong offset!");
//(offsetof(FMovieSceneSubSequenceData, FullPlayRange) == 0x000054, "Member 'FMovieSceneSubSequenceData::FullPlayRange' has a wrong offset!");
//(offsetof(FMovieSceneSubSequenceData, UnwarpedPlayRange) == 0x000064, "Member 'FMovieSceneSubSequenceData::UnwarpedPlayRange' has a wrong offset!");
//(offsetof(FMovieSceneSubSequenceData, PreRollRange) == 0x000074, "Member 'FMovieSceneSubSequenceData::PreRollRange' has a wrong offset!");
//(offsetof(FMovieSceneSubSequenceData, PostRollRange) == 0x000084, "Member 'FMovieSceneSubSequenceData::PostRollRange' has a wrong offset!");
//(offsetof(FMovieSceneSubSequenceData, HierarchicalBias) == 0x000094, "Member 'FMovieSceneSubSequenceData::HierarchicalBias' has a wrong offset!");
//(offsetof(FMovieSceneSubSequenceData, InstanceData) == 0x000098, "Member 'FMovieSceneSubSequenceData::InstanceData' has a wrong offset!");
//(offsetof(FMovieSceneSubSequenceData, SubSectionSignature) == 0x0000B8, "Member 'FMovieSceneSubSequenceData::SubSectionSignature' has a wrong offset!");
//(offsetof(FMovieSceneSubSequenceData, OuterToInnerTransform) == 0x0000C8, "Member 'FMovieSceneSubSequenceData::OuterToInnerTransform' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvalTemplateBase
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMovieSceneEvalTemplateBase
{
public:
	uint8                                         Pad_137B[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneEvalTemplateBase) == 0x000008, "Wrong alignment on FMovieSceneEvalTemplateBase");
//(sizeof(FMovieSceneEvalTemplateBase) == 0x000010, "Wrong size on FMovieSceneEvalTemplateBase");

// ScriptStruct MovieScene.MovieSceneKeyHandleMap
// 0x0000 (0x0060 - 0x0060)
struct FMovieSceneKeyHandleMap final  : public FKeyHandleLookupTable
{
};
//(alignof(FMovieSceneKeyHandleMap) == 0x000008, "Wrong alignment on FMovieSceneKeyHandleMap");
//(sizeof(FMovieSceneKeyHandleMap) == 0x000060, "Wrong size on FMovieSceneKeyHandleMap");

// ScriptStruct MovieScene.MovieSceneTangentData
// 0x0014 (0x0014 - 0x0000)
struct FMovieSceneTangentData final 
{
public:
	float                                         ArriveTangent;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaveTangent;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArriveTangentWeight;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaveTangentWeight;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERichCurveTangentWeightMode                   TangentWeightMode;                                 // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_137C[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneTangentData) == 0x000004, "Wrong alignment on FMovieSceneTangentData");
//(sizeof(FMovieSceneTangentData) == 0x000014, "Wrong size on FMovieSceneTangentData");
//(offsetof(FMovieSceneTangentData, ArriveTangent) == 0x000000, "Member 'FMovieSceneTangentData::ArriveTangent' has a wrong offset!");
//(offsetof(FMovieSceneTangentData, LeaveTangent) == 0x000004, "Member 'FMovieSceneTangentData::LeaveTangent' has a wrong offset!");
//(offsetof(FMovieSceneTangentData, ArriveTangentWeight) == 0x000008, "Member 'FMovieSceneTangentData::ArriveTangentWeight' has a wrong offset!");
//(offsetof(FMovieSceneTangentData, LeaveTangentWeight) == 0x00000C, "Member 'FMovieSceneTangentData::LeaveTangentWeight' has a wrong offset!");
//(offsetof(FMovieSceneTangentData, TangentWeightMode) == 0x000010, "Member 'FMovieSceneTangentData::TangentWeightMode' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneFloatValue
// 0x001C (0x001C - 0x0000)
struct FMovieSceneFloatValue final 
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneTangentData                 Tangent;                                           // 0x0004(0x0014)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ERichCurveInterpMode                          InterpMode;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERichCurveTangentMode                         TangentMode;                                       // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PaddingByte;                                       // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_137D[0x1];                                     // 0x001B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneFloatValue) == 0x000004, "Wrong alignment on FMovieSceneFloatValue");
//(sizeof(FMovieSceneFloatValue) == 0x00001C, "Wrong size on FMovieSceneFloatValue");
//(offsetof(FMovieSceneFloatValue, Value) == 0x000000, "Member 'FMovieSceneFloatValue::Value' has a wrong offset!");
//(offsetof(FMovieSceneFloatValue, Tangent) == 0x000004, "Member 'FMovieSceneFloatValue::Tangent' has a wrong offset!");
//(offsetof(FMovieSceneFloatValue, InterpMode) == 0x000018, "Member 'FMovieSceneFloatValue::InterpMode' has a wrong offset!");
//(offsetof(FMovieSceneFloatValue, TangentMode) == 0x000019, "Member 'FMovieSceneFloatValue::TangentMode' has a wrong offset!");
//(offsetof(FMovieSceneFloatValue, PaddingByte) == 0x00001A, "Member 'FMovieSceneFloatValue::PaddingByte' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneChannel
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FMovieSceneChannel
{
public:
	uint8                                         Pad_137E[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneChannel) == 0x000008, "Wrong alignment on FMovieSceneChannel");
//(sizeof(FMovieSceneChannel) == 0x000008, "Wrong size on FMovieSceneChannel");

// ScriptStruct MovieScene.MovieSceneFloatChannel
// 0x0098 (0x00A0 - 0x0008)
struct FMovieSceneFloatChannel final  : public FMovieSceneChannel
{
public:
	ERichCurveExtrapolation                       PreInfinityExtrap;                                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERichCurveExtrapolation                       PostInfinityExtrap;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_137F[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFrameNumber>                   Times;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneFloatValue>          Values;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DefaultValue;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasDefaultValue;                                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1380[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneKeyHandleMap                KeyHandles;                                        // 0x0038(0x0060)(Transient, NativeAccessSpecifierPrivate)
	struct FFrameRate                             TickResolution;                                    // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneFloatChannel) == 0x000008, "Wrong alignment on FMovieSceneFloatChannel");
//(sizeof(FMovieSceneFloatChannel) == 0x0000A0, "Wrong size on FMovieSceneFloatChannel");
//(offsetof(FMovieSceneFloatChannel, PreInfinityExtrap) == 0x000008, "Member 'FMovieSceneFloatChannel::PreInfinityExtrap' has a wrong offset!");
//(offsetof(FMovieSceneFloatChannel, PostInfinityExtrap) == 0x000009, "Member 'FMovieSceneFloatChannel::PostInfinityExtrap' has a wrong offset!");
//(offsetof(FMovieSceneFloatChannel, Times) == 0x000010, "Member 'FMovieSceneFloatChannel::Times' has a wrong offset!");
//(offsetof(FMovieSceneFloatChannel, Values) == 0x000020, "Member 'FMovieSceneFloatChannel::Values' has a wrong offset!");
//(offsetof(FMovieSceneFloatChannel, DefaultValue) == 0x000030, "Member 'FMovieSceneFloatChannel::DefaultValue' has a wrong offset!");
//(offsetof(FMovieSceneFloatChannel, bHasDefaultValue) == 0x000034, "Member 'FMovieSceneFloatChannel::bHasDefaultValue' has a wrong offset!");
//(offsetof(FMovieSceneFloatChannel, KeyHandles) == 0x000038, "Member 'FMovieSceneFloatChannel::KeyHandles' has a wrong offset!");
//(offsetof(FMovieSceneFloatChannel, TickResolution) == 0x000098, "Member 'FMovieSceneFloatChannel::TickResolution' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSegment
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FMovieSceneSegment final 
{
public:
	uint8                                         Pad_1381[0x58];                                    // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneSegment) == 0x000008, "Wrong alignment on FMovieSceneSegment");
//(sizeof(FMovieSceneSegment) == 0x000058, "Wrong size on FMovieSceneSegment");

// ScriptStruct MovieScene.MovieSceneEvaluationTrackSegments
// 0x0020 (0x0020 - 0x0000)
struct FMovieSceneEvaluationTrackSegments final 
{
public:
	TArray<int32>                                 SegmentIdentifierToIndex;                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneSegment>             SortedSegments;                                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneEvaluationTrackSegments) == 0x000008, "Wrong alignment on FMovieSceneEvaluationTrackSegments");
//(sizeof(FMovieSceneEvaluationTrackSegments) == 0x000020, "Wrong size on FMovieSceneEvaluationTrackSegments");
//(offsetof(FMovieSceneEvaluationTrackSegments, SegmentIdentifierToIndex) == 0x000000, "Member 'FMovieSceneEvaluationTrackSegments::SegmentIdentifierToIndex' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTrackSegments, SortedSegments) == 0x000010, "Member 'FMovieSceneEvaluationTrackSegments::SortedSegments' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvalTemplate
// 0x0010 (0x0020 - 0x0010)
struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
{
public:
	EMovieSceneCompletionMode                     CompletionMode;                                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1382[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMovieSceneSection>      SourceSectionPtr;                                  // 0x0014(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1383[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneEvalTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvalTemplate");
//(sizeof(FMovieSceneEvalTemplate) == 0x000020, "Wrong size on FMovieSceneEvalTemplate");
//(offsetof(FMovieSceneEvalTemplate, CompletionMode) == 0x000010, "Member 'FMovieSceneEvalTemplate::CompletionMode' has a wrong offset!");
//(offsetof(FMovieSceneEvalTemplate, SourceSectionPtr) == 0x000014, "Member 'FMovieSceneEvalTemplate::SourceSectionPtr' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneObjectBindingID
// 0x0018 (0x0018 - 0x0000)
struct FMovieSceneObjectBindingID final 
{
public:
	int32                                         SequenceID;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMovieSceneObjectBindingSpace                 Space;                                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1384[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneObjectBindingID) == 0x000004, "Wrong alignment on FMovieSceneObjectBindingID");
//(sizeof(FMovieSceneObjectBindingID) == 0x000018, "Wrong size on FMovieSceneObjectBindingID");
//(offsetof(FMovieSceneObjectBindingID, SequenceID) == 0x000000, "Member 'FMovieSceneObjectBindingID::SequenceID' has a wrong offset!");
//(offsetof(FMovieSceneObjectBindingID, Space) == 0x000004, "Member 'FMovieSceneObjectBindingID::Space' has a wrong offset!");
//(offsetof(FMovieSceneObjectBindingID, Guid) == 0x000008, "Member 'FMovieSceneObjectBindingID::Guid' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneByteChannel
// 0x0090 (0x0098 - 0x0008)
struct FMovieSceneByteChannel : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         DefaultValue;                                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasDefaultValue;                                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1385[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Values;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEnum*                                  Enum;                                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1386[0x60];                                    // 0x0038(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneByteChannel) == 0x000008, "Wrong alignment on FMovieSceneByteChannel");
//(sizeof(FMovieSceneByteChannel) == 0x000098, "Wrong size on FMovieSceneByteChannel");
//(offsetof(FMovieSceneByteChannel, Times) == 0x000008, "Member 'FMovieSceneByteChannel::Times' has a wrong offset!");
//(offsetof(FMovieSceneByteChannel, DefaultValue) == 0x000018, "Member 'FMovieSceneByteChannel::DefaultValue' has a wrong offset!");
//(offsetof(FMovieSceneByteChannel, bHasDefaultValue) == 0x000019, "Member 'FMovieSceneByteChannel::bHasDefaultValue' has a wrong offset!");
//(offsetof(FMovieSceneByteChannel, Values) == 0x000020, "Member 'FMovieSceneByteChannel::Values' has a wrong offset!");
//(offsetof(FMovieSceneByteChannel, Enum) == 0x000030, "Member 'FMovieSceneByteChannel::Enum' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneBoolChannel
// 0x0088 (0x0090 - 0x0008)
struct FMovieSceneBoolChannel final  : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          DefaultValue;                                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasDefaultValue;                                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1387[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  Values;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1388[0x60];                                    // 0x0030(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneBoolChannel) == 0x000008, "Wrong alignment on FMovieSceneBoolChannel");
//(sizeof(FMovieSceneBoolChannel) == 0x000090, "Wrong size on FMovieSceneBoolChannel");
//(offsetof(FMovieSceneBoolChannel, Times) == 0x000008, "Member 'FMovieSceneBoolChannel::Times' has a wrong offset!");
//(offsetof(FMovieSceneBoolChannel, DefaultValue) == 0x000018, "Member 'FMovieSceneBoolChannel::DefaultValue' has a wrong offset!");
//(offsetof(FMovieSceneBoolChannel, bHasDefaultValue) == 0x000019, "Member 'FMovieSceneBoolChannel::bHasDefaultValue' has a wrong offset!");
//(offsetof(FMovieSceneBoolChannel, Values) == 0x000020, "Member 'FMovieSceneBoolChannel::Values' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationGroupLUTIndex
// 0x000C (0x000C - 0x0000)
struct FMovieSceneEvaluationGroupLUTIndex final 
{
public:
	int32                                         LUTOffset;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumInitPtrs;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEvalPtrs;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneEvaluationGroupLUTIndex) == 0x000004, "Wrong alignment on FMovieSceneEvaluationGroupLUTIndex");
//(sizeof(FMovieSceneEvaluationGroupLUTIndex) == 0x00000C, "Wrong size on FMovieSceneEvaluationGroupLUTIndex");
//(offsetof(FMovieSceneEvaluationGroupLUTIndex, LUTOffset) == 0x000000, "Member 'FMovieSceneEvaluationGroupLUTIndex::LUTOffset' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs) == 0x000004, "Member 'FMovieSceneEvaluationGroupLUTIndex::NumInitPtrs' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs) == 0x000008, "Member 'FMovieSceneEvaluationGroupLUTIndex::NumEvalPtrs' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvalTemplatePtr
// 0x0088 (0x0088 - 0x0000)
struct alignas(0x08) FMovieSceneEvalTemplatePtr final 
{
public:
	uint8                                         Pad_1389[0x88];                                    // 0x0000(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneEvalTemplatePtr) == 0x000008, "Wrong alignment on FMovieSceneEvalTemplatePtr");
//(sizeof(FMovieSceneEvalTemplatePtr) == 0x000088, "Wrong size on FMovieSceneEvalTemplatePtr");

// ScriptStruct MovieScene.MovieSceneExpansionState
// 0x0001 (0x0001 - 0x0000)
struct FMovieSceneExpansionState final 
{
public:
	bool                                          bExpanded;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneExpansionState) == 0x000001, "Wrong alignment on FMovieSceneExpansionState");
//(sizeof(FMovieSceneExpansionState) == 0x000001, "Wrong size on FMovieSceneExpansionState");
//(offsetof(FMovieSceneExpansionState, bExpanded) == 0x000000, "Member 'FMovieSceneExpansionState::bExpanded' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneIntegerChannel
// 0x0088 (0x0090 - 0x0008)
struct FMovieSceneIntegerChannel final  : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DefaultValue;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasDefaultValue;                                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138A[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Values;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138B[0x60];                                    // 0x0030(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneIntegerChannel) == 0x000008, "Wrong alignment on FMovieSceneIntegerChannel");
//(sizeof(FMovieSceneIntegerChannel) == 0x000090, "Wrong size on FMovieSceneIntegerChannel");
//(offsetof(FMovieSceneIntegerChannel, Times) == 0x000008, "Member 'FMovieSceneIntegerChannel::Times' has a wrong offset!");
//(offsetof(FMovieSceneIntegerChannel, DefaultValue) == 0x000018, "Member 'FMovieSceneIntegerChannel::DefaultValue' has a wrong offset!");
//(offsetof(FMovieSceneIntegerChannel, bHasDefaultValue) == 0x00001C, "Member 'FMovieSceneIntegerChannel::bHasDefaultValue' has a wrong offset!");
//(offsetof(FMovieSceneIntegerChannel, Values) == 0x000020, "Member 'FMovieSceneIntegerChannel::Values' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneObjectBindingIDs
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneObjectBindingIDs final 
{
public:
	TArray<struct FMovieSceneObjectBindingID>     IDs;                                               // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneObjectBindingIDs) == 0x000008, "Wrong alignment on FMovieSceneObjectBindingIDs");
//(sizeof(FMovieSceneObjectBindingIDs) == 0x000010, "Wrong size on FMovieSceneObjectBindingIDs");
//(offsetof(FMovieSceneObjectBindingIDs, IDs) == 0x000000, "Member 'FMovieSceneObjectBindingIDs::IDs' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTrackImplementation
// 0x0000 (0x0010 - 0x0010)
struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
{
};
//(alignof(FMovieSceneTrackImplementation) == 0x000008, "Wrong alignment on FMovieSceneTrackImplementation");
//(sizeof(FMovieSceneTrackImplementation) == 0x000010, "Wrong size on FMovieSceneTrackImplementation");

// ScriptStruct MovieScene.MovieSceneSubSectionFieldData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FMovieSceneSubSectionFieldData final 
{
public:
	uint8                                         Pad_138C[0x60];                                    // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneSubSectionFieldData) == 0x000008, "Wrong alignment on FMovieSceneSubSectionFieldData");
//(sizeof(FMovieSceneSubSectionFieldData) == 0x000060, "Wrong size on FMovieSceneSubSectionFieldData");

// ScriptStruct MovieScene.MovieSceneTrackIdentifier
// 0x0004 (0x0004 - 0x0000)
struct FMovieSceneTrackIdentifier final 
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneTrackIdentifier) == 0x000004, "Wrong alignment on FMovieSceneTrackIdentifier");
//(sizeof(FMovieSceneTrackIdentifier) == 0x000004, "Wrong size on FMovieSceneTrackIdentifier");
//(offsetof(FMovieSceneTrackIdentifier, Value) == 0x000000, "Member 'FMovieSceneTrackIdentifier::Value' has a wrong offset!");

// ScriptStruct MovieScene.SectionEvaluationDataTree
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FSectionEvaluationDataTree final 
{
public:
	uint8                                         Pad_138D[0x60];                                    // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FSectionEvaluationDataTree) == 0x000008, "Wrong alignment on FSectionEvaluationDataTree");
//(sizeof(FSectionEvaluationDataTree) == 0x000060, "Wrong size on FSectionEvaluationDataTree");

// ScriptStruct MovieScene.MovieSceneTrackImplementationPtr
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FMovieSceneTrackImplementationPtr final 
{
public:
	uint8                                         Pad_138E[0x38];                                    // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneTrackImplementationPtr) == 0x000008, "Wrong alignment on FMovieSceneTrackImplementationPtr");
//(sizeof(FMovieSceneTrackImplementationPtr) == 0x000038, "Wrong size on FMovieSceneTrackImplementationPtr");

// ScriptStruct MovieScene.MovieSceneEvaluationTrack
// 0x00F8 (0x00F8 - 0x0000)
struct FMovieSceneEvaluationTrack final 
{
public:
	struct FGuid                                  ObjectBindingID;                                   // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        EvaluationPriority;                                // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EEvaluationMethod                             EvaluationMethod;                                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138F[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvaluationTrackSegments     Segments;                                          // 0x0018(0x0020)(NativeAccessSpecifierPrivate)
	class UMovieSceneTrack*                       SourceTrack;                                       // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSectionEvaluationDataTree             EvaluationTree;                                    // 0x0040(0x0060)(NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneEvalTemplatePtr>     ChildTemplates;                                    // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMovieSceneTrackImplementationPtr      TrackTemplate;                                     // 0x00B0(0x0038)(NativeAccessSpecifierPrivate)
	class FName                                   EvaluationGroup;                                   // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEvaluateInPreroll : 1;                            // 0x00F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bEvaluateInPostroll : 1;                           // 0x00F0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bTearDownPriority : 1;                             // 0x00F0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_1390[0x7];                                     // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneEvaluationTrack) == 0x000008, "Wrong alignment on FMovieSceneEvaluationTrack");
//(sizeof(FMovieSceneEvaluationTrack) == 0x0000F8, "Wrong size on FMovieSceneEvaluationTrack");
//(offsetof(FMovieSceneEvaluationTrack, ObjectBindingID) == 0x000000, "Member 'FMovieSceneEvaluationTrack::ObjectBindingID' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTrack, EvaluationPriority) == 0x000010, "Member 'FMovieSceneEvaluationTrack::EvaluationPriority' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTrack, EvaluationMethod) == 0x000012, "Member 'FMovieSceneEvaluationTrack::EvaluationMethod' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTrack, Segments) == 0x000018, "Member 'FMovieSceneEvaluationTrack::Segments' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTrack, SourceTrack) == 0x000038, "Member 'FMovieSceneEvaluationTrack::SourceTrack' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTrack, EvaluationTree) == 0x000040, "Member 'FMovieSceneEvaluationTrack::EvaluationTree' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTrack, ChildTemplates) == 0x0000A0, "Member 'FMovieSceneEvaluationTrack::ChildTemplates' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTrack, TrackTemplate) == 0x0000B0, "Member 'FMovieSceneEvaluationTrack::TrackTemplate' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTrack, EvaluationGroup) == 0x0000E8, "Member 'FMovieSceneEvaluationTrack::EvaluationGroup' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSegmentIdentifier
// 0x0004 (0x0004 - 0x0000)
struct FMovieSceneSegmentIdentifier final 
{
public:
	int32                                         IdentifierIndex;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneSegmentIdentifier) == 0x000004, "Wrong alignment on FMovieSceneSegmentIdentifier");
//(sizeof(FMovieSceneSegmentIdentifier) == 0x000004, "Wrong size on FMovieSceneSegmentIdentifier");
//(offsetof(FMovieSceneSegmentIdentifier, IdentifierIndex) == 0x000000, "Member 'FMovieSceneSegmentIdentifier::IdentifierIndex' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationFieldTrackPtr
// 0x0008 (0x0008 - 0x0000)
struct FMovieSceneEvaluationFieldTrackPtr
{
public:
	struct FMovieSceneSequenceID                  SequenceID;                                        // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneTrackIdentifier             TrackIdentifier;                                   // 0x0004(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneEvaluationFieldTrackPtr) == 0x000004, "Wrong alignment on FMovieSceneEvaluationFieldTrackPtr");
//(sizeof(FMovieSceneEvaluationFieldTrackPtr) == 0x000008, "Wrong size on FMovieSceneEvaluationFieldTrackPtr");
//(offsetof(FMovieSceneEvaluationFieldTrackPtr, SequenceID) == 0x000000, "Member 'FMovieSceneEvaluationFieldTrackPtr::SequenceID' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier) == 0x000004, "Member 'FMovieSceneEvaluationFieldTrackPtr::TrackIdentifier' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationFieldSegmentPtr
// 0x0004 (0x000C - 0x0008)
struct FMovieSceneEvaluationFieldSegmentPtr final  : public FMovieSceneEvaluationFieldTrackPtr
{
public:
	struct FMovieSceneSegmentIdentifier           SegmentID;                                         // 0x0008(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneEvaluationFieldSegmentPtr) == 0x000004, "Wrong alignment on FMovieSceneEvaluationFieldSegmentPtr");
//(sizeof(FMovieSceneEvaluationFieldSegmentPtr) == 0x00000C, "Wrong size on FMovieSceneEvaluationFieldSegmentPtr");
//(offsetof(FMovieSceneEvaluationFieldSegmentPtr, SegmentID) == 0x000008, "Member 'FMovieSceneEvaluationFieldSegmentPtr::SegmentID' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationGroup
// 0x0020 (0x0020 - 0x0000)
struct FMovieSceneEvaluationGroup final 
{
public:
	TArray<struct FMovieSceneEvaluationGroupLUTIndex> LUTIndices;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneEvaluationFieldSegmentPtr> SegmentPtrLUT;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneEvaluationGroup) == 0x000008, "Wrong alignment on FMovieSceneEvaluationGroup");
//(sizeof(FMovieSceneEvaluationGroup) == 0x000020, "Wrong size on FMovieSceneEvaluationGroup");
//(offsetof(FMovieSceneEvaluationGroup, LUTIndices) == 0x000000, "Member 'FMovieSceneEvaluationGroup::LUTIndices' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationGroup, SegmentPtrLUT) == 0x000010, "Member 'FMovieSceneEvaluationGroup::SegmentPtrLUT' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationKey
// 0x000C (0x000C - 0x0000)
struct FMovieSceneEvaluationKey final 
{
public:
	struct FMovieSceneSequenceID                  SequenceID;                                        // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneTrackIdentifier             TrackIdentifier;                                   // 0x0004(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SectionIndex;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneEvaluationKey) == 0x000004, "Wrong alignment on FMovieSceneEvaluationKey");
//(sizeof(FMovieSceneEvaluationKey) == 0x00000C, "Wrong size on FMovieSceneEvaluationKey");
//(offsetof(FMovieSceneEvaluationKey, SequenceID) == 0x000000, "Member 'FMovieSceneEvaluationKey::SequenceID' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationKey, TrackIdentifier) == 0x000004, "Member 'FMovieSceneEvaluationKey::TrackIdentifier' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationKey, SectionIndex) == 0x000008, "Member 'FMovieSceneEvaluationKey::SectionIndex' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneOrderedEvaluationKey
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneOrderedEvaluationKey final 
{
public:
	struct FMovieSceneEvaluationKey               Key;                                               // 0x0000(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SetupIndex;                                        // 0x000C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TearDownIndex;                                     // 0x000E(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneOrderedEvaluationKey) == 0x000004, "Wrong alignment on FMovieSceneOrderedEvaluationKey");
//(sizeof(FMovieSceneOrderedEvaluationKey) == 0x000010, "Wrong size on FMovieSceneOrderedEvaluationKey");
//(offsetof(FMovieSceneOrderedEvaluationKey, Key) == 0x000000, "Member 'FMovieSceneOrderedEvaluationKey::Key' has a wrong offset!");
//(offsetof(FMovieSceneOrderedEvaluationKey, SetupIndex) == 0x00000C, "Member 'FMovieSceneOrderedEvaluationKey::SetupIndex' has a wrong offset!");
//(offsetof(FMovieSceneOrderedEvaluationKey, TearDownIndex) == 0x00000E, "Member 'FMovieSceneOrderedEvaluationKey::TearDownIndex' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationMetaData
// 0x0070 (0x0070 - 0x0000)
struct FMovieSceneEvaluationMetaData final 
{
public:
	TArray<struct FMovieSceneSequenceID>          ActiveSequences;                                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneOrderedEvaluationKey> ActiveEntities;                                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FMovieSceneSequenceID, uint32>    SubTemplateSerialNumbers;                          // 0x0020(0x0050)(NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneEvaluationMetaData) == 0x000008, "Wrong alignment on FMovieSceneEvaluationMetaData");
//(sizeof(FMovieSceneEvaluationMetaData) == 0x000070, "Wrong size on FMovieSceneEvaluationMetaData");
//(offsetof(FMovieSceneEvaluationMetaData, ActiveSequences) == 0x000000, "Member 'FMovieSceneEvaluationMetaData::ActiveSequences' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationMetaData, ActiveEntities) == 0x000010, "Member 'FMovieSceneEvaluationMetaData::ActiveEntities' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationMetaData, SubTemplateSerialNumbers) == 0x000020, "Member 'FMovieSceneEvaluationMetaData::SubTemplateSerialNumbers' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationField
// 0x0030 (0x0030 - 0x0000)
struct FMovieSceneEvaluationField final 
{
public:
	TArray<struct FMovieSceneFrameRange>          Ranges;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneEvaluationGroup>     Groups;                                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneEvaluationMetaData>  MetaData;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneEvaluationField) == 0x000008, "Wrong alignment on FMovieSceneEvaluationField");
//(sizeof(FMovieSceneEvaluationField) == 0x000030, "Wrong size on FMovieSceneEvaluationField");
//(offsetof(FMovieSceneEvaluationField, Ranges) == 0x000000, "Member 'FMovieSceneEvaluationField::Ranges' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationField, Groups) == 0x000010, "Member 'FMovieSceneEvaluationField::Groups' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationField, MetaData) == 0x000020, "Member 'FMovieSceneEvaluationField::MetaData' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceHierarchyNode
// 0x0018 (0x0018 - 0x0000)
struct FMovieSceneSequenceHierarchyNode final 
{
public:
	struct FMovieSceneSequenceID                  ParentID;                                          // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1391[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneSequenceID>          Children;                                          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneSequenceHierarchyNode) == 0x000008, "Wrong alignment on FMovieSceneSequenceHierarchyNode");
//(sizeof(FMovieSceneSequenceHierarchyNode) == 0x000018, "Wrong size on FMovieSceneSequenceHierarchyNode");
//(offsetof(FMovieSceneSequenceHierarchyNode, ParentID) == 0x000000, "Member 'FMovieSceneSequenceHierarchyNode::ParentID' has a wrong offset!");
//(offsetof(FMovieSceneSequenceHierarchyNode, Children) == 0x000008, "Member 'FMovieSceneSequenceHierarchyNode::Children' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceHierarchy
// 0x00A0 (0x00A0 - 0x0000)
struct FMovieSceneSequenceHierarchy final 
{
public:
	TMap<struct FMovieSceneSequenceID, struct FMovieSceneSubSequenceData> SubSequences;                                      // 0x0000(0x0050)(NativeAccessSpecifierPrivate)
	TMap<struct FMovieSceneSequenceID, struct FMovieSceneSequenceHierarchyNode> Hierarchy;                                         // 0x0050(0x0050)(NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneSequenceHierarchy) == 0x000008, "Wrong alignment on FMovieSceneSequenceHierarchy");
//(sizeof(FMovieSceneSequenceHierarchy) == 0x0000A0, "Wrong size on FMovieSceneSequenceHierarchy");
//(offsetof(FMovieSceneSequenceHierarchy, SubSequences) == 0x000000, "Member 'FMovieSceneSequenceHierarchy::SubSequences' has a wrong offset!");
//(offsetof(FMovieSceneSequenceHierarchy, Hierarchy) == 0x000050, "Member 'FMovieSceneSequenceHierarchy::Hierarchy' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEvaluationTemplateSerialNumber
// 0x0004 (0x0004 - 0x0000)
struct FMovieSceneEvaluationTemplateSerialNumber final 
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneEvaluationTemplateSerialNumber) == 0x000004, "Wrong alignment on FMovieSceneEvaluationTemplateSerialNumber");
//(sizeof(FMovieSceneEvaluationTemplateSerialNumber) == 0x000004, "Wrong size on FMovieSceneEvaluationTemplateSerialNumber");
//(offsetof(FMovieSceneEvaluationTemplateSerialNumber, Value) == 0x000000, "Member 'FMovieSceneEvaluationTemplateSerialNumber::Value' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTemplateGenerationLedger
// 0x00A8 (0x00A8 - 0x0000)
struct FMovieSceneTemplateGenerationLedger final 
{
public:
	struct FMovieSceneTrackIdentifier             LastTrackIdentifier;                               // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1392[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGuid, struct FMovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;                   // 0x0008(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FMovieSceneFrameRange> SubSectionRanges;                                  // 0x0058(0x0050)(NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneTemplateGenerationLedger) == 0x000008, "Wrong alignment on FMovieSceneTemplateGenerationLedger");
//(sizeof(FMovieSceneTemplateGenerationLedger) == 0x0000A8, "Wrong size on FMovieSceneTemplateGenerationLedger");
//(offsetof(FMovieSceneTemplateGenerationLedger, LastTrackIdentifier) == 0x000000, "Member 'FMovieSceneTemplateGenerationLedger::LastTrackIdentifier' has a wrong offset!");
//(offsetof(FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier) == 0x000008, "Member 'FMovieSceneTemplateGenerationLedger::TrackSignatureToTrackIdentifier' has a wrong offset!");
//(offsetof(FMovieSceneTemplateGenerationLedger, SubSectionRanges) == 0x000058, "Member 'FMovieSceneTemplateGenerationLedger::SubSectionRanges' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTrackFieldData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FMovieSceneTrackFieldData final 
{
public:
	uint8                                         Pad_1393[0x60];                                    // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneTrackFieldData) == 0x000008, "Wrong alignment on FMovieSceneTrackFieldData");
//(sizeof(FMovieSceneTrackFieldData) == 0x000060, "Wrong size on FMovieSceneTrackFieldData");

// ScriptStruct MovieScene.MovieSceneEvaluationTemplate
// 0x02F0 (0x02F0 - 0x0000)
struct FMovieSceneEvaluationTemplate final 
{
public:
	TMap<struct FMovieSceneTrackIdentifier, struct FMovieSceneEvaluationTrack> Tracks;                                            // 0x0000(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1394[0x50];                                    // 0x0050(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvaluationField             EvaluationField;                                   // 0x00A0(0x0030)(NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceHierarchy           Hierarchy;                                         // 0x00D0(0x00A0)(NativeAccessSpecifierPublic)
	struct FGuid                                  SequenceSignature;                                 // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;                              // 0x0180(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1395[0x4];                                     // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneTemplateGenerationLedger    TemplateLedger;                                    // 0x0188(0x00A8)(NativeAccessSpecifierPrivate)
	struct FMovieSceneTrackFieldData              TrackFieldData;                                    // 0x0230(0x0060)(NativeAccessSpecifierPrivate)
	struct FMovieSceneSubSectionFieldData         SubSectionFieldData;                               // 0x0290(0x0060)(NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneEvaluationTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvaluationTemplate");
//(sizeof(FMovieSceneEvaluationTemplate) == 0x0002F0, "Wrong size on FMovieSceneEvaluationTemplate");
//(offsetof(FMovieSceneEvaluationTemplate, Tracks) == 0x000000, "Member 'FMovieSceneEvaluationTemplate::Tracks' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTemplate, EvaluationField) == 0x0000A0, "Member 'FMovieSceneEvaluationTemplate::EvaluationField' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTemplate, Hierarchy) == 0x0000D0, "Member 'FMovieSceneEvaluationTemplate::Hierarchy' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTemplate, SequenceSignature) == 0x000170, "Member 'FMovieSceneEvaluationTemplate::SequenceSignature' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTemplate, TemplateSerialNumber) == 0x000180, "Member 'FMovieSceneEvaluationTemplate::TemplateSerialNumber' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTemplate, TemplateLedger) == 0x000188, "Member 'FMovieSceneEvaluationTemplate::TemplateLedger' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTemplate, TrackFieldData) == 0x000230, "Member 'FMovieSceneEvaluationTemplate::TrackFieldData' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationTemplate, SubSectionFieldData) == 0x000290, "Member 'FMovieSceneEvaluationTemplate::SubSectionFieldData' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceInstanceData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FMovieSceneSequenceInstanceData
{
public:
	uint8                                         Pad_1396[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneSequenceInstanceData) == 0x000008, "Wrong alignment on FMovieSceneSequenceInstanceData");
//(sizeof(FMovieSceneSequenceInstanceData) == 0x000008, "Wrong size on FMovieSceneSequenceInstanceData");

// ScriptStruct MovieScene.MovieSceneEvaluationOperand
// 0x0014 (0x0014 - 0x0000)
struct FMovieSceneEvaluationOperand final 
{
public:
	struct FGuid                                  ObjectBindingID;                                   // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequenceID                  SequenceID;                                        // 0x0010(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneEvaluationOperand) == 0x000004, "Wrong alignment on FMovieSceneEvaluationOperand");
//(sizeof(FMovieSceneEvaluationOperand) == 0x000014, "Wrong size on FMovieSceneEvaluationOperand");
//(offsetof(FMovieSceneEvaluationOperand, ObjectBindingID) == 0x000000, "Member 'FMovieSceneEvaluationOperand::ObjectBindingID' has a wrong offset!");
//(offsetof(FMovieSceneEvaluationOperand, SequenceID) == 0x000010, "Member 'FMovieSceneEvaluationOperand::SequenceID' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneMarkedFrame
// 0x0018 (0x0018 - 0x0000)
struct FMovieSceneMarkedFrame final 
{
public:
	struct FFrameNumber                           FrameNumber;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1397[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Label;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneMarkedFrame) == 0x000008, "Wrong alignment on FMovieSceneMarkedFrame");
//(sizeof(FMovieSceneMarkedFrame) == 0x000018, "Wrong size on FMovieSceneMarkedFrame");
//(offsetof(FMovieSceneMarkedFrame, FrameNumber) == 0x000000, "Member 'FMovieSceneMarkedFrame::FrameNumber' has a wrong offset!");
//(offsetof(FMovieSceneMarkedFrame, Label) == 0x000008, "Member 'FMovieSceneMarkedFrame::Label' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSectionGroup
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneSectionGroup final 
{
public:
	TArray<TWeakObjectPtr<class UMovieSceneSection>> Sections;                                          // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
//(alignof(FMovieSceneSectionGroup) == 0x000008, "Wrong alignment on FMovieSceneSectionGroup");
//(sizeof(FMovieSceneSectionGroup) == 0x000010, "Wrong size on FMovieSceneSectionGroup");
//(offsetof(FMovieSceneSectionGroup, Sections) == 0x000000, "Member 'FMovieSceneSectionGroup::Sections' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTrackLabels
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneTrackLabels final 
{
public:
	TArray<class FString>                         Strings;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneTrackLabels) == 0x000008, "Wrong alignment on FMovieSceneTrackLabels");
//(sizeof(FMovieSceneTrackLabels) == 0x000010, "Wrong size on FMovieSceneTrackLabels");
//(offsetof(FMovieSceneTrackLabels, Strings) == 0x000000, "Member 'FMovieSceneTrackLabels::Strings' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEditorData
// 0x00F0 (0x00F0 - 0x0000)
struct FMovieSceneEditorData final 
{
public:
	TMap<class FString, struct FMovieSceneExpansionState> ExpansionStates;                                   // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TArray<class FString>                         PinnedNodes;                                       // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ViewStart;                                         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ViewEnd;                                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        WorkStart;                                         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        WorkEnd;                                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FFrameNumber>                     MarkedFrames;                                      // 0x0080(0x0050)(Deprecated, NativeAccessSpecifierPublic)
	struct FFloatRange                            WorkingRange;                                      // 0x00D0(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            ViewRange;                                         // 0x00E0(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneEditorData) == 0x000008, "Wrong alignment on FMovieSceneEditorData");
//(sizeof(FMovieSceneEditorData) == 0x0000F0, "Wrong size on FMovieSceneEditorData");
//(offsetof(FMovieSceneEditorData, ExpansionStates) == 0x000000, "Member 'FMovieSceneEditorData::ExpansionStates' has a wrong offset!");
//(offsetof(FMovieSceneEditorData, PinnedNodes) == 0x000050, "Member 'FMovieSceneEditorData::PinnedNodes' has a wrong offset!");
//(offsetof(FMovieSceneEditorData, ViewStart) == 0x000060, "Member 'FMovieSceneEditorData::ViewStart' has a wrong offset!");
//(offsetof(FMovieSceneEditorData, ViewEnd) == 0x000068, "Member 'FMovieSceneEditorData::ViewEnd' has a wrong offset!");
//(offsetof(FMovieSceneEditorData, WorkStart) == 0x000070, "Member 'FMovieSceneEditorData::WorkStart' has a wrong offset!");
//(offsetof(FMovieSceneEditorData, WorkEnd) == 0x000078, "Member 'FMovieSceneEditorData::WorkEnd' has a wrong offset!");
//(offsetof(FMovieSceneEditorData, MarkedFrames) == 0x000080, "Member 'FMovieSceneEditorData::MarkedFrames' has a wrong offset!");
//(offsetof(FMovieSceneEditorData, WorkingRange) == 0x0000D0, "Member 'FMovieSceneEditorData::WorkingRange' has a wrong offset!");
//(offsetof(FMovieSceneEditorData, ViewRange) == 0x0000E0, "Member 'FMovieSceneEditorData::ViewRange' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneTimecodeSource
// 0x0018 (0x0018 - 0x0000)
struct FMovieSceneTimecodeSource final 
{
public:
	struct FTimecode                              Timecode;                                          // 0x0000(0x0014)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           DeltaFrame;                                        // 0x0014(0x0004)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneTimecodeSource) == 0x000004, "Wrong alignment on FMovieSceneTimecodeSource");
//(sizeof(FMovieSceneTimecodeSource) == 0x000018, "Wrong size on FMovieSceneTimecodeSource");
//(offsetof(FMovieSceneTimecodeSource, Timecode) == 0x000000, "Member 'FMovieSceneTimecodeSource::Timecode' has a wrong offset!");
//(offsetof(FMovieSceneTimecodeSource, DeltaFrame) == 0x000014, "Member 'FMovieSceneTimecodeSource::DeltaFrame' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneBinding
// 0x0030 (0x0030 - 0x0000)
struct FMovieSceneBinding final 
{
public:
	struct FGuid                                  ObjectGuid;                                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 BindingName;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMovieSceneTrack*>               Tracks;                                            // 0x0020(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneBinding) == 0x000008, "Wrong alignment on FMovieSceneBinding");
//(sizeof(FMovieSceneBinding) == 0x000030, "Wrong size on FMovieSceneBinding");
//(offsetof(FMovieSceneBinding, ObjectGuid) == 0x000000, "Member 'FMovieSceneBinding::ObjectGuid' has a wrong offset!");
//(offsetof(FMovieSceneBinding, BindingName) == 0x000010, "Member 'FMovieSceneBinding::BindingName' has a wrong offset!");
//(offsetof(FMovieSceneBinding, Tracks) == 0x000020, "Member 'FMovieSceneBinding::Tracks' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneBindingOverrideData
// 0x0024 (0x0024 - 0x0000)
struct FMovieSceneBindingOverrideData final 
{
public:
	struct FMovieSceneObjectBindingID             ObjectBindingID;                                   // 0x0000(0x0018)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 Object;                                            // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridesDefault;                                 // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1398[0x3];                                     // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneBindingOverrideData) == 0x000004, "Wrong alignment on FMovieSceneBindingOverrideData");
//(sizeof(FMovieSceneBindingOverrideData) == 0x000024, "Wrong size on FMovieSceneBindingOverrideData");
//(offsetof(FMovieSceneBindingOverrideData, ObjectBindingID) == 0x000000, "Member 'FMovieSceneBindingOverrideData::ObjectBindingID' has a wrong offset!");
//(offsetof(FMovieSceneBindingOverrideData, Object) == 0x000018, "Member 'FMovieSceneBindingOverrideData::Object' has a wrong offset!");
//(offsetof(FMovieSceneBindingOverrideData, bOverridesDefault) == 0x000020, "Member 'FMovieSceneBindingOverrideData::bOverridesDefault' has a wrong offset!");

// ScriptStruct MovieScene.OptionalMovieSceneBlendType
// 0x0002 (0x0002 - 0x0000)
struct FOptionalMovieSceneBlendType final 
{
public:
	EMovieSceneBlendType                          BlendType;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsValid;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
//(alignof(FOptionalMovieSceneBlendType) == 0x000001, "Wrong alignment on FOptionalMovieSceneBlendType");
//(sizeof(FOptionalMovieSceneBlendType) == 0x000002, "Wrong size on FOptionalMovieSceneBlendType");
//(offsetof(FOptionalMovieSceneBlendType, BlendType) == 0x000000, "Member 'FOptionalMovieSceneBlendType::BlendType' has a wrong offset!");
//(offsetof(FOptionalMovieSceneBlendType, bIsValid) == 0x000001, "Member 'FOptionalMovieSceneBlendType::bIsValid' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEmptyStruct
// 0x0001 (0x0001 - 0x0000)
struct FMovieSceneEmptyStruct final 
{
public:
	uint8                                         Pad_1399[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneEmptyStruct) == 0x000001, "Wrong alignment on FMovieSceneEmptyStruct");
//(sizeof(FMovieSceneEmptyStruct) == 0x000001, "Wrong size on FMovieSceneEmptyStruct");

// ScriptStruct MovieScene.MovieSceneSubSectionData
// 0x001C (0x001C - 0x0000)
struct FMovieSceneSubSectionData final 
{
public:
	TWeakObjectPtr<class UMovieSceneSubSection>   Section;                                           // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ObjectBindingID;                                   // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESectionEvaluationFlags                       Flags;                                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139A[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneSubSectionData) == 0x000004, "Wrong alignment on FMovieSceneSubSectionData");
//(sizeof(FMovieSceneSubSectionData) == 0x00001C, "Wrong size on FMovieSceneSubSectionData");
//(offsetof(FMovieSceneSubSectionData, Section) == 0x000000, "Member 'FMovieSceneSubSectionData::Section' has a wrong offset!");
//(offsetof(FMovieSceneSubSectionData, ObjectBindingID) == 0x000008, "Member 'FMovieSceneSubSectionData::ObjectBindingID' has a wrong offset!");
//(offsetof(FMovieSceneSubSectionData, Flags) == 0x000018, "Member 'FMovieSceneSubSectionData::Flags' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneRootEvaluationTemplateInstance
// 0x0320 (0x0320 - 0x0000)
struct FMovieSceneRootEvaluationTemplateInstance final 
{
public:
	uint8                                         Pad_139B[0x18];                                    // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FMovieSceneSequenceID, class UObject*> DirectorInstances;                                 // 0x0018(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_139C[0x2B8];                                   // 0x0068(0x02B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneRootEvaluationTemplateInstance) == 0x000008, "Wrong alignment on FMovieSceneRootEvaluationTemplateInstance");
//(sizeof(FMovieSceneRootEvaluationTemplateInstance) == 0x000320, "Wrong size on FMovieSceneRootEvaluationTemplateInstance");
//(offsetof(FMovieSceneRootEvaluationTemplateInstance, DirectorInstances) == 0x000018, "Member 'FMovieSceneRootEvaluationTemplateInstance::DirectorInstances' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneKeyStruct
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FMovieSceneKeyStruct
{
public:
	uint8                                         Pad_139D[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneKeyStruct) == 0x000008, "Wrong alignment on FMovieSceneKeyStruct");
//(sizeof(FMovieSceneKeyStruct) == 0x000008, "Wrong size on FMovieSceneKeyStruct");

// ScriptStruct MovieScene.MovieSceneKeyTimeStruct
// 0x0020 (0x0028 - 0x0008)
struct FMovieSceneKeyTimeStruct final  : public FMovieSceneKeyStruct
{
public:
	struct FFrameNumber                           Time;                                              // 0x0008(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139E[0x1C];                                    // 0x000C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneKeyTimeStruct) == 0x000008, "Wrong alignment on FMovieSceneKeyTimeStruct");
//(sizeof(FMovieSceneKeyTimeStruct) == 0x000028, "Wrong size on FMovieSceneKeyTimeStruct");
//(offsetof(FMovieSceneKeyTimeStruct, Time) == 0x000008, "Member 'FMovieSceneKeyTimeStruct::Time' has a wrong offset!");

// ScriptStruct MovieScene.GeneratedMovieSceneKeyStruct
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FGeneratedMovieSceneKeyStruct final 
{
public:
	uint8                                         Pad_139F[0x50];                                    // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FGeneratedMovieSceneKeyStruct) == 0x000010, "Wrong alignment on FGeneratedMovieSceneKeyStruct");
//(sizeof(FGeneratedMovieSceneKeyStruct) == 0x000050, "Wrong size on FGeneratedMovieSceneKeyStruct");

// ScriptStruct MovieScene.MovieSceneObjectPathChannelKeyValue
// 0x0030 (0x0030 - 0x0000)
struct FMovieSceneObjectPathChannelKeyValue final 
{
public:
	TSoftObjectPtr<class UObject>                 SoftPtr;                                           // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                HardPtr;                                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
//(alignof(FMovieSceneObjectPathChannelKeyValue) == 0x000008, "Wrong alignment on FMovieSceneObjectPathChannelKeyValue");
//(sizeof(FMovieSceneObjectPathChannelKeyValue) == 0x000030, "Wrong size on FMovieSceneObjectPathChannelKeyValue");
//(offsetof(FMovieSceneObjectPathChannelKeyValue, SoftPtr) == 0x000000, "Member 'FMovieSceneObjectPathChannelKeyValue::SoftPtr' has a wrong offset!");
//(offsetof(FMovieSceneObjectPathChannelKeyValue, HardPtr) == 0x000028, "Member 'FMovieSceneObjectPathChannelKeyValue::HardPtr' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneObjectPathChannel
// 0x00B8 (0x00C0 - 0x0008)
struct FMovieSceneObjectPathChannel final  : public FMovieSceneChannel
{
public:
	class UClass*                                 PropertyClass;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFrameNumber>                   Times;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMovieSceneObjectPathChannelKeyValue> Values;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMovieSceneObjectPathChannelKeyValue   DefaultValue;                                      // 0x0030(0x0030)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_13A0[0x60];                                    // 0x0060(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneObjectPathChannel) == 0x000008, "Wrong alignment on FMovieSceneObjectPathChannel");
//(sizeof(FMovieSceneObjectPathChannel) == 0x0000C0, "Wrong size on FMovieSceneObjectPathChannel");
//(offsetof(FMovieSceneObjectPathChannel, PropertyClass) == 0x000008, "Member 'FMovieSceneObjectPathChannel::PropertyClass' has a wrong offset!");
//(offsetof(FMovieSceneObjectPathChannel, Times) == 0x000010, "Member 'FMovieSceneObjectPathChannel::Times' has a wrong offset!");
//(offsetof(FMovieSceneObjectPathChannel, Values) == 0x000020, "Member 'FMovieSceneObjectPathChannel::Values' has a wrong offset!");
//(offsetof(FMovieSceneObjectPathChannel, DefaultValue) == 0x000030, "Member 'FMovieSceneObjectPathChannel::DefaultValue' has a wrong offset!");

// ScriptStruct MovieScene.MovieScenePossessable
// 0x0048 (0x0048 - 0x0000)
struct FMovieScenePossessable final 
{
public:
	TArray<class FName>                           Tags;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Name;                                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UClass*                                 PossessedObjectClass;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ParentGuid;                                        // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
//(alignof(FMovieScenePossessable) == 0x000008, "Wrong alignment on FMovieScenePossessable");
//(sizeof(FMovieScenePossessable) == 0x000048, "Wrong size on FMovieScenePossessable");
//(offsetof(FMovieScenePossessable, Tags) == 0x000000, "Member 'FMovieScenePossessable::Tags' has a wrong offset!");
//(offsetof(FMovieScenePossessable, Guid) == 0x000010, "Member 'FMovieScenePossessable::Guid' has a wrong offset!");
//(offsetof(FMovieScenePossessable, Name) == 0x000020, "Member 'FMovieScenePossessable::Name' has a wrong offset!");
//(offsetof(FMovieScenePossessable, PossessedObjectClass) == 0x000030, "Member 'FMovieScenePossessable::PossessedObjectClass' has a wrong offset!");
//(offsetof(FMovieScenePossessable, ParentGuid) == 0x000038, "Member 'FMovieScenePossessable::ParentGuid' has a wrong offset!");

// ScriptStruct MovieScene.MovieScenePropertySectionData
// 0x0028 (0x0028 - 0x0000)
struct FMovieScenePropertySectionData final 
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyPath;                                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FunctionName;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotifyFunctionName;                                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieScenePropertySectionData) == 0x000008, "Wrong alignment on FMovieScenePropertySectionData");
//(sizeof(FMovieScenePropertySectionData) == 0x000028, "Wrong size on FMovieScenePropertySectionData");
//(offsetof(FMovieScenePropertySectionData, PropertyName) == 0x000000, "Member 'FMovieScenePropertySectionData::PropertyName' has a wrong offset!");
//(offsetof(FMovieScenePropertySectionData, PropertyPath) == 0x000008, "Member 'FMovieScenePropertySectionData::PropertyPath' has a wrong offset!");
//(offsetof(FMovieScenePropertySectionData, FunctionName) == 0x000018, "Member 'FMovieScenePropertySectionData::FunctionName' has a wrong offset!");
//(offsetof(FMovieScenePropertySectionData, NotifyFunctionName) == 0x000020, "Member 'FMovieScenePropertySectionData::NotifyFunctionName' has a wrong offset!");

// ScriptStruct MovieScene.MovieScenePropertySectionTemplate
// 0x0028 (0x0048 - 0x0020)
struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
{
public:
	struct FMovieScenePropertySectionData         PropertyData;                                      // 0x0020(0x0028)(Protected, NativeAccessSpecifierProtected)
};
//(alignof(FMovieScenePropertySectionTemplate) == 0x000008, "Wrong alignment on FMovieScenePropertySectionTemplate");
//(sizeof(FMovieScenePropertySectionTemplate) == 0x000048, "Wrong size on FMovieScenePropertySectionTemplate");
//(offsetof(FMovieScenePropertySectionTemplate, PropertyData) == 0x000020, "Member 'FMovieScenePropertySectionTemplate::PropertyData' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneEasingSettings
// 0x0038 (0x0038 - 0x0000)
struct FMovieSceneEasingSettings final 
{
public:
	int32                                         AutoEaseInDuration;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoEaseOutDuration;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IMovieSceneEasingFunction> EaseIn;                                            // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bManualEaseIn;                                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A1[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ManualEaseInDuration;                              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IMovieSceneEasingFunction> EaseOut;                                           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bManualEaseOut;                                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A2[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ManualEaseOutDuration;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneEasingSettings) == 0x000008, "Wrong alignment on FMovieSceneEasingSettings");
//(sizeof(FMovieSceneEasingSettings) == 0x000038, "Wrong size on FMovieSceneEasingSettings");
//(offsetof(FMovieSceneEasingSettings, AutoEaseInDuration) == 0x000000, "Member 'FMovieSceneEasingSettings::AutoEaseInDuration' has a wrong offset!");
//(offsetof(FMovieSceneEasingSettings, AutoEaseOutDuration) == 0x000004, "Member 'FMovieSceneEasingSettings::AutoEaseOutDuration' has a wrong offset!");
//(offsetof(FMovieSceneEasingSettings, EaseIn) == 0x000008, "Member 'FMovieSceneEasingSettings::EaseIn' has a wrong offset!");
//(offsetof(FMovieSceneEasingSettings, bManualEaseIn) == 0x000018, "Member 'FMovieSceneEasingSettings::bManualEaseIn' has a wrong offset!");
//(offsetof(FMovieSceneEasingSettings, ManualEaseInDuration) == 0x00001C, "Member 'FMovieSceneEasingSettings::ManualEaseInDuration' has a wrong offset!");
//(offsetof(FMovieSceneEasingSettings, EaseOut) == 0x000020, "Member 'FMovieSceneEasingSettings::EaseOut' has a wrong offset!");
//(offsetof(FMovieSceneEasingSettings, bManualEaseOut) == 0x000030, "Member 'FMovieSceneEasingSettings::bManualEaseOut' has a wrong offset!");
//(offsetof(FMovieSceneEasingSettings, ManualEaseOutDuration) == 0x000034, "Member 'FMovieSceneEasingSettings::ManualEaseOutDuration' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSectionEvalOptions
// 0x0002 (0x0002 - 0x0000)
struct FMovieSceneSectionEvalOptions final 
{
public:
	bool                                          bCanEditCompletionMode;                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneCompletionMode                     CompletionMode;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneSectionEvalOptions) == 0x000001, "Wrong alignment on FMovieSceneSectionEvalOptions");
//(sizeof(FMovieSceneSectionEvalOptions) == 0x000002, "Wrong size on FMovieSceneSectionEvalOptions");
//(offsetof(FMovieSceneSectionEvalOptions, bCanEditCompletionMode) == 0x000000, "Member 'FMovieSceneSectionEvalOptions::bCanEditCompletionMode' has a wrong offset!");
//(offsetof(FMovieSceneSectionEvalOptions, CompletionMode) == 0x000001, "Member 'FMovieSceneSectionEvalOptions::CompletionMode' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSectionParameters
// 0x0024 (0x0024 - 0x0000)
struct FMovieSceneSectionParameters final 
{
public:
	struct FFrameNumber                           StartFrameOffset;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanLoop;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A3[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameNumber                           EndFrameOffset;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           FirstLoopStartFrameOffset;                         // 0x000C(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HierarchicalBias;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x0018(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrerollTime;                                       // 0x001C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostrollTime;                                      // 0x0020(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneSectionParameters) == 0x000004, "Wrong alignment on FMovieSceneSectionParameters");
//(sizeof(FMovieSceneSectionParameters) == 0x000024, "Wrong size on FMovieSceneSectionParameters");
//(offsetof(FMovieSceneSectionParameters, StartFrameOffset) == 0x000000, "Member 'FMovieSceneSectionParameters::StartFrameOffset' has a wrong offset!");
//(offsetof(FMovieSceneSectionParameters, bCanLoop) == 0x000004, "Member 'FMovieSceneSectionParameters::bCanLoop' has a wrong offset!");
//(offsetof(FMovieSceneSectionParameters, EndFrameOffset) == 0x000008, "Member 'FMovieSceneSectionParameters::EndFrameOffset' has a wrong offset!");
//(offsetof(FMovieSceneSectionParameters, FirstLoopStartFrameOffset) == 0x00000C, "Member 'FMovieSceneSectionParameters::FirstLoopStartFrameOffset' has a wrong offset!");
//(offsetof(FMovieSceneSectionParameters, TimeScale) == 0x000010, "Member 'FMovieSceneSectionParameters::TimeScale' has a wrong offset!");
//(offsetof(FMovieSceneSectionParameters, HierarchicalBias) == 0x000014, "Member 'FMovieSceneSectionParameters::HierarchicalBias' has a wrong offset!");
//(offsetof(FMovieSceneSectionParameters, StartOffset) == 0x000018, "Member 'FMovieSceneSectionParameters::StartOffset' has a wrong offset!");
//(offsetof(FMovieSceneSectionParameters, PrerollTime) == 0x00001C, "Member 'FMovieSceneSectionParameters::PrerollTime' has a wrong offset!");
//(offsetof(FMovieSceneSectionParameters, PostrollTime) == 0x000020, "Member 'FMovieSceneSectionParameters::PostrollTime' has a wrong offset!");

// ScriptStruct MovieScene.SectionEvaluationData
// 0x000C (0x000C - 0x0000)
struct FSectionEvaluationData final 
{
public:
	int32                                         ImplIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           ForcedTime;                                        // 0x0004(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESectionEvaluationFlags                       Flags;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A4[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FSectionEvaluationData) == 0x000004, "Wrong alignment on FSectionEvaluationData");
//(sizeof(FSectionEvaluationData) == 0x00000C, "Wrong size on FSectionEvaluationData");
//(offsetof(FSectionEvaluationData, ImplIndex) == 0x000000, "Member 'FSectionEvaluationData::ImplIndex' has a wrong offset!");
//(offsetof(FSectionEvaluationData, ForcedTime) == 0x000004, "Member 'FSectionEvaluationData::ForcedTime' has a wrong offset!");
//(offsetof(FSectionEvaluationData, Flags) == 0x000008, "Member 'FSectionEvaluationData::Flags' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceLoopCount
// 0x0004 (0x0004 - 0x0000)
struct FMovieSceneSequenceLoopCount final 
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneSequenceLoopCount) == 0x000004, "Wrong alignment on FMovieSceneSequenceLoopCount");
//(sizeof(FMovieSceneSequenceLoopCount) == 0x000004, "Wrong size on FMovieSceneSequenceLoopCount");
//(offsetof(FMovieSceneSequenceLoopCount, Value) == 0x000000, "Member 'FMovieSceneSequenceLoopCount::Value' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequencePlaybackSettings
// 0x0014 (0x0014 - 0x0000)
struct FMovieSceneSequencePlaybackSettings final 
{
public:
	uint8                                         bAutoPlay : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_13A5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneSequenceLoopCount           LoopCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRandomStartTime : 1;                              // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRestoreState : 1;                                 // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableMovementInput : 1;                         // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableLookAtInput : 1;                           // 0x0010(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHidePlayer : 1;                                   // 0x0010(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHideHud : 1;                                      // 0x0010(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableCameraCuts : 1;                            // 0x0010(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPauseAtEnd : 1;                                   // 0x0010(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_13A6[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneSequencePlaybackSettings) == 0x000004, "Wrong alignment on FMovieSceneSequencePlaybackSettings");
//(sizeof(FMovieSceneSequencePlaybackSettings) == 0x000014, "Wrong size on FMovieSceneSequencePlaybackSettings");
//(offsetof(FMovieSceneSequencePlaybackSettings, LoopCount) == 0x000004, "Member 'FMovieSceneSequencePlaybackSettings::LoopCount' has a wrong offset!");
//(offsetof(FMovieSceneSequencePlaybackSettings, PlayRate) == 0x000008, "Member 'FMovieSceneSequencePlaybackSettings::PlayRate' has a wrong offset!");
//(offsetof(FMovieSceneSequencePlaybackSettings, StartTime) == 0x00000C, "Member 'FMovieSceneSequencePlaybackSettings::StartTime' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSequenceReplProperties
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneSequenceReplProperties final 
{
public:
	struct FFrameTime                             LastKnownPosition;                                 // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieScenePlayerStatus                       LastKnownStatus;                                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A7[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastKnownNumLoops;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneSequenceReplProperties) == 0x000004, "Wrong alignment on FMovieSceneSequenceReplProperties");
//(sizeof(FMovieSceneSequenceReplProperties) == 0x000010, "Wrong size on FMovieSceneSequenceReplProperties");
//(offsetof(FMovieSceneSequenceReplProperties, LastKnownPosition) == 0x000000, "Member 'FMovieSceneSequenceReplProperties::LastKnownPosition' has a wrong offset!");
//(offsetof(FMovieSceneSequenceReplProperties, LastKnownStatus) == 0x000008, "Member 'FMovieSceneSequenceReplProperties::LastKnownStatus' has a wrong offset!");
//(offsetof(FMovieSceneSequenceReplProperties, LastKnownNumLoops) == 0x00000C, "Member 'FMovieSceneSequenceReplProperties::LastKnownNumLoops' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneWarpCounter
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneWarpCounter final 
{
public:
	TArray<uint32>                                WarpCounts;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
//(alignof(FMovieSceneWarpCounter) == 0x000008, "Wrong alignment on FMovieSceneWarpCounter");
//(sizeof(FMovieSceneWarpCounter) == 0x000010, "Wrong size on FMovieSceneWarpCounter");
//(offsetof(FMovieSceneWarpCounter, WarpCounts) == 0x000000, "Member 'FMovieSceneWarpCounter::WarpCounts' has a wrong offset!");

// ScriptStruct MovieScene.MovieSceneSpawnable
// 0x0090 (0x0090 - 0x0000)
struct FMovieSceneSpawnable final 
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0030(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinuouslyRespawn;                              // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A8[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13A9[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                ObjectTemplate;                                    // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FGuid>                          ChildPossessables;                                 // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESpawnOwnership                               Ownership;                                         // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13AA[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LevelName;                                         // 0x0084(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13AB[0x4];                                     // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneSpawnable) == 0x000010, "Wrong alignment on FMovieSceneSpawnable");
//(sizeof(FMovieSceneSpawnable) == 0x000090, "Wrong size on FMovieSceneSpawnable");
//(offsetof(FMovieSceneSpawnable, SpawnTransform) == 0x000000, "Member 'FMovieSceneSpawnable::SpawnTransform' has a wrong offset!");
//(offsetof(FMovieSceneSpawnable, Tags) == 0x000030, "Member 'FMovieSceneSpawnable::Tags' has a wrong offset!");
//(offsetof(FMovieSceneSpawnable, bContinuouslyRespawn) == 0x000040, "Member 'FMovieSceneSpawnable::bContinuouslyRespawn' has a wrong offset!");
//(offsetof(FMovieSceneSpawnable, Guid) == 0x000044, "Member 'FMovieSceneSpawnable::Guid' has a wrong offset!");
//(offsetof(FMovieSceneSpawnable, Name) == 0x000058, "Member 'FMovieSceneSpawnable::Name' has a wrong offset!");
//(offsetof(FMovieSceneSpawnable, ObjectTemplate) == 0x000068, "Member 'FMovieSceneSpawnable::ObjectTemplate' has a wrong offset!");
//(offsetof(FMovieSceneSpawnable, ChildPossessables) == 0x000070, "Member 'FMovieSceneSpawnable::ChildPossessables' has a wrong offset!");
//(offsetof(FMovieSceneSpawnable, Ownership) == 0x000080, "Member 'FMovieSceneSpawnable::Ownership' has a wrong offset!");
//(offsetof(FMovieSceneSpawnable, LevelName) == 0x000084, "Member 'FMovieSceneSpawnable::LevelName' has a wrong offset!");

// ScriptStruct MovieScene.TestMovieSceneEvalTemplate
// 0x0000 (0x0020 - 0x0020)
struct FTestMovieSceneEvalTemplate final  : public FMovieSceneEvalTemplate
{
};
//(alignof(FTestMovieSceneEvalTemplate) == 0x000008, "Wrong alignment on FTestMovieSceneEvalTemplate");
//(sizeof(FTestMovieSceneEvalTemplate) == 0x000020, "Wrong size on FTestMovieSceneEvalTemplate");

// ScriptStruct MovieScene.MovieSceneTrackDisplayOptions
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FMovieSceneTrackDisplayOptions final 
{
public:
	uint8                                         bShowVerticalFrames : 1;                           // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_13AC[0x3];                                     // 0x0001(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneTrackDisplayOptions) == 0x000004, "Wrong alignment on FMovieSceneTrackDisplayOptions");
//(sizeof(FMovieSceneTrackDisplayOptions) == 0x000004, "Wrong size on FMovieSceneTrackDisplayOptions");

// ScriptStruct MovieScene.MovieSceneTrackEvalOptions
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FMovieSceneTrackEvalOptions final 
{
public:
	uint8                                         bCanEvaluateNearestSection : 1;                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvalNearestSection : 1;                           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvaluateInPreroll : 1;                            // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvaluateInPostroll : 1;                           // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvaluateNearestSection : 1;                       // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_13AD[0x3];                                     // 0x0001(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
//(alignof(FMovieSceneTrackEvalOptions) == 0x000004, "Wrong alignment on FMovieSceneTrackEvalOptions");
//(sizeof(FMovieSceneTrackEvalOptions) == 0x000004, "Wrong size on FMovieSceneTrackEvalOptions");

}


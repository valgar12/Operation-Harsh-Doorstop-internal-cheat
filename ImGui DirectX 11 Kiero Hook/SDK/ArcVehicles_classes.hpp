#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ArcVehicles

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ArcVehicles_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class ArcVehicles.ArcVehiclePawn
// 0x0000 (0x0280 - 0x0280)
class AArcVehiclePawn : public APawn
{
public:
	class AArcBaseVehicle* GetOwningVehicle();
	class UArcVehicleSeatConfig* GetSeatConfig();
	void NotifyPlayerSeatChangeEvent(class APlayerState* Player, class UArcVehicleSeatConfig* ToSeat, class UArcVehicleSeatConfig* FromSeat, EArcVehicleSeatChangeType SeatChangeEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcVehiclePawn">();
	}
	static class AArcVehiclePawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AArcVehiclePawn>();
	}
};
//(alignof(AArcVehiclePawn) == 0x000008, "Wrong alignment on AArcVehiclePawn");
//(sizeof(AArcVehiclePawn) == 0x000280, "Wrong size on AArcVehiclePawn");

// Class ArcVehicles.ArcVehiclePlayerSeatComponent
// 0x00E8 (0x0198 - 0x00B0)
class UArcVehiclePlayerSeatComponent : public UActorComponent
{
public:
	struct FArcVehicleSeatReference               CurrentSeatConfig;                                 // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, EditConst, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	struct FArcVehicleSeatReference               PreviousSeatConfig;                                // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	class APlayerState*                           StoredPlayerState;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1270[0x58];                                    // 0x00D8(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ServerDebugStrings;                                // 0x0130(0x0010)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1271[0x8];                                     // 0x0140(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UPrimitiveComponent*, ECollisionResponse> PreviousVehicleCollisionResponses;                 // 0x0148(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void BP_OnRep_StoredPlayerState(class APlayerState* InPreviousPlayerState);
	void OnRep_SeatConfig(struct FArcVehicleSeatReference& InPreviousSeatConfig);
	void OnRep_ServerDebugStrings();
	void OnRep_StoredPlayerState(class APlayerState* InPreviousPlayerState);
	void OnSeatChangeEvent(EArcVehicleSeatChangeType SeatChangeType);
	void ServerPrintDebug_Request();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcVehiclePlayerSeatComponent">();
	}
	static class UArcVehiclePlayerSeatComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArcVehiclePlayerSeatComponent>();
	}
};
//(alignof(UArcVehiclePlayerSeatComponent) == 0x000008, "Wrong alignment on UArcVehiclePlayerSeatComponent");
//(sizeof(UArcVehiclePlayerSeatComponent) == 0x000198, "Wrong size on UArcVehiclePlayerSeatComponent");
//(offsetof(UArcVehiclePlayerSeatComponent, CurrentSeatConfig) == 0x0000B0, "Member 'UArcVehiclePlayerSeatComponent::CurrentSeatConfig' has a wrong offset!");
//(offsetof(UArcVehiclePlayerSeatComponent, PreviousSeatConfig) == 0x0000C0, "Member 'UArcVehiclePlayerSeatComponent::PreviousSeatConfig' has a wrong offset!");
//(offsetof(UArcVehiclePlayerSeatComponent, StoredPlayerState) == 0x0000D0, "Member 'UArcVehiclePlayerSeatComponent::StoredPlayerState' has a wrong offset!");
//(offsetof(UArcVehiclePlayerSeatComponent, ServerDebugStrings) == 0x000130, "Member 'UArcVehiclePlayerSeatComponent::ServerDebugStrings' has a wrong offset!");
//(offsetof(UArcVehiclePlayerSeatComponent, PreviousVehicleCollisionResponses) == 0x000148, "Member 'UArcVehiclePlayerSeatComponent::PreviousVehicleCollisionResponses' has a wrong offset!");

// Class ArcVehicles.ArcBaseVehicle
// 0x0048 (0x02C8 - 0x0280)
class AArcBaseVehicle : public AArcVehiclePawn
{
public:
	class UArcVehicleSeatConfig*                  DriverSeatConfig;                                  // 0x0280(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UArcVehicleSeatConfig*>          AdditionalSeatConfigs;                             // 0x0288(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UArcVehicleSeatConfig*>          ReplicatedSeatConfigs;                             // 0x0298(0x0010)(ExportObject, Net, ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FArcVehicleSeatChangeEvent>     SeatChangeQueue;                                   // 0x02A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ServerDebugStrings;                                // 0x02B8(0x0010)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void GetAllSeats(TArray<class UArcVehicleSeatConfig*>* Seats);
	class UArcVehicleSeatConfig* GetDriverSeat();
	struct FTransform GetNearestExitTransform(const struct FTransform& InputLocation);
	void OnRep_ServerDebugStrings();
	void RequestEnterAnySeat(class APlayerState* InPlayerState);
	void RequestEnterSeat(class APlayerState* InPlayerState, int32 RequestedSeatIndex, bool bIgnoreRestrictions);
	void RequestLeaveVehicle(class APlayerState* InPlayerState);
	void ServerPrintDebug_Request();
	void SetupSeat(class UArcVehicleSeatConfig* SeatConfig);

	void GetSortedExitPoints(const struct FTransform& InputLocation, TArray<struct FTransform>* OutTransformArray) const;
	bool IsValidSeatIndex(int32 InSeatIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcBaseVehicle">();
	}
	static class AArcBaseVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AArcBaseVehicle>();
	}
};
//(alignof(AArcBaseVehicle) == 0x000008, "Wrong alignment on AArcBaseVehicle");
//(sizeof(AArcBaseVehicle) == 0x0002C8, "Wrong size on AArcBaseVehicle");
//(offsetof(AArcBaseVehicle, DriverSeatConfig) == 0x000280, "Member 'AArcBaseVehicle::DriverSeatConfig' has a wrong offset!");
//(offsetof(AArcBaseVehicle, AdditionalSeatConfigs) == 0x000288, "Member 'AArcBaseVehicle::AdditionalSeatConfigs' has a wrong offset!");
//(offsetof(AArcBaseVehicle, ReplicatedSeatConfigs) == 0x000298, "Member 'AArcBaseVehicle::ReplicatedSeatConfigs' has a wrong offset!");
//(offsetof(AArcBaseVehicle, SeatChangeQueue) == 0x0002A8, "Member 'AArcBaseVehicle::SeatChangeQueue' has a wrong offset!");
//(offsetof(AArcBaseVehicle, ServerDebugStrings) == 0x0002B8, "Member 'AArcBaseVehicle::ServerDebugStrings' has a wrong offset!");

// Class ArcVehicles.ArcVehicleBPFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UArcVehicleBPFunctionLibrary final  : public UBlueprintFunctionLibrary
{
public:
	static class AArcBaseVehicle* GetVehicleFromSeatConfig(const struct FArcVehicleSeatReference& SeatRef);
	static class UArcVehicleSeatConfig* GetVehicleSeatConfigFromRef(const struct FArcVehicleSeatReference& SeatRef);
	static bool IsSeatRefValid(const struct FArcVehicleSeatReference& SeatRef);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcVehicleBPFunctionLibrary">();
	}
	static class UArcVehicleBPFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArcVehicleBPFunctionLibrary>();
	}
};
//(alignof(UArcVehicleBPFunctionLibrary) == 0x000008, "Wrong alignment on UArcVehicleBPFunctionLibrary");
//(sizeof(UArcVehicleBPFunctionLibrary) == 0x000028, "Wrong size on UArcVehicleBPFunctionLibrary");

// Class ArcVehicles.ArcVehicleDeveloperSettings
// 0x0010 (0x0048 - 0x0038)
class UArcVehicleDeveloperSettings final  : public UDeveloperSettings
{
public:
	TSubclassOf<class UArcVehiclePlayerSeatComponent> PlayerSeatComponentClass;                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UArcVehiclePlayerStateComponent> PlayerStateComponentClass;                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcVehicleDeveloperSettings">();
	}
	static class UArcVehicleDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArcVehicleDeveloperSettings>();
	}
};
//(alignof(UArcVehicleDeveloperSettings) == 0x000008, "Wrong alignment on UArcVehicleDeveloperSettings");
//(sizeof(UArcVehicleDeveloperSettings) == 0x000048, "Wrong size on UArcVehicleDeveloperSettings");
//(offsetof(UArcVehicleDeveloperSettings, PlayerSeatComponentClass) == 0x000038, "Member 'UArcVehicleDeveloperSettings::PlayerSeatComponentClass' has a wrong offset!");
//(offsetof(UArcVehicleDeveloperSettings, PlayerStateComponentClass) == 0x000040, "Member 'UArcVehicleDeveloperSettings::PlayerStateComponentClass' has a wrong offset!");

// Class ArcVehicles.ArcVehicleEngineSubsystem
// 0x0010 (0x0040 - 0x0030)
class UArcVehicleEngineSubsystem final  : public UEngineSubsystem
{
public:
	uint8                                         Pad_1275[0x10];                                    // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcVehicleEngineSubsystem">();
	}
	static class UArcVehicleEngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArcVehicleEngineSubsystem>();
	}
};
//(alignof(UArcVehicleEngineSubsystem) == 0x000008, "Wrong alignment on UArcVehicleEngineSubsystem");
//(sizeof(UArcVehicleEngineSubsystem) == 0x000040, "Wrong size on UArcVehicleEngineSubsystem");

// Class ArcVehicles.ArcVehicleExitPoint
// 0x0000 (0x01F0 - 0x01F0)
class UArcVehicleExitPoint final  : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcVehicleExitPoint">();
	}
	static class UArcVehicleExitPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArcVehicleExitPoint>();
	}
};
//(alignof(UArcVehicleExitPoint) == 0x000010, "Wrong alignment on UArcVehicleExitPoint");
//(sizeof(UArcVehicleExitPoint) == 0x0001F0, "Wrong size on UArcVehicleExitPoint");

// Class ArcVehicles.ArcVehiclePlayerStateComponent
// 0x0008 (0x00B8 - 0x00B0)
class UArcVehiclePlayerStateComponent final  : public UActorComponent
{
public:
	class APawn*                                  StoredPlayerPawn;                                  // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcVehiclePlayerStateComponent">();
	}
	static class UArcVehiclePlayerStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArcVehiclePlayerStateComponent>();
	}
};
//(alignof(UArcVehiclePlayerStateComponent) == 0x000008, "Wrong alignment on UArcVehiclePlayerStateComponent");
//(sizeof(UArcVehiclePlayerStateComponent) == 0x0000B8, "Wrong size on UArcVehiclePlayerStateComponent");
//(offsetof(UArcVehiclePlayerStateComponent, StoredPlayerPawn) == 0x0000B0, "Member 'UArcVehiclePlayerStateComponent::StoredPlayerPawn' has a wrong offset!");

// Class ArcVehicles.ArcVehicleSeat
// 0x0008 (0x0288 - 0x0280)
class AArcVehicleSeat final  : public AArcVehiclePawn
{
public:
	class UArcVehicleSeatConfig*                  SeatConfig;                                        // 0x0280(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcVehicleSeat">();
	}
	static class AArcVehicleSeat* GetDefaultObj()
	{
		return GetDefaultObjImpl<AArcVehicleSeat>();
	}
};
//(alignof(AArcVehicleSeat) == 0x000008, "Wrong alignment on AArcVehicleSeat");
//(sizeof(AArcVehicleSeat) == 0x000288, "Wrong size on AArcVehicleSeat");
//(offsetof(AArcVehicleSeat, SeatConfig) == 0x000280, "Member 'AArcVehicleSeat::SeatConfig' has a wrong offset!");

// Class ArcVehicles.ArcVehicleSeatConfig
// 0x0028 (0x00D8 - 0x00B0)
class UArcVehicleSeatConfig : public UActorComponent
{
public:
	struct FArcOwnerAttachmentReference           AttachSeatToComponent;                             // 0x00B0(0x0010)(Edit, Net, NoDestructor, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerInSeat;                                      // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArcVehiclePlayerSeatComponent*         PlayerSeatComponent;                               // 0x00C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerVisible;                                    // 0x00D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1276[0x7];                                     // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttachPlayerToSeat(class APlayerState* Player);
	void BP_AttachPlayerToSeat(class APlayerState* Player);
	void BP_UnAttachPlayerFromSeat(class APlayerState* Player);
	void SetupSeatAttachment();
	void UnAttachPlayerFromSeat(class APlayerState* Player);

	class AArcBaseVehicle* GetVehicleOwner() const;
	bool IsDriverSeat() const;
	bool IsOpenSeat() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcVehicleSeatConfig">();
	}
	static class UArcVehicleSeatConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArcVehicleSeatConfig>();
	}
};
//(alignof(UArcVehicleSeatConfig) == 0x000008, "Wrong alignment on UArcVehicleSeatConfig");
//(sizeof(UArcVehicleSeatConfig) == 0x0000D8, "Wrong size on UArcVehicleSeatConfig");
//(offsetof(UArcVehicleSeatConfig, AttachSeatToComponent) == 0x0000B0, "Member 'UArcVehicleSeatConfig::AttachSeatToComponent' has a wrong offset!");
//(offsetof(UArcVehicleSeatConfig, PlayerInSeat) == 0x0000C0, "Member 'UArcVehicleSeatConfig::PlayerInSeat' has a wrong offset!");
//(offsetof(UArcVehicleSeatConfig, PlayerSeatComponent) == 0x0000C8, "Member 'UArcVehicleSeatConfig::PlayerSeatComponent' has a wrong offset!");
//(offsetof(UArcVehicleSeatConfig, bPlayerVisible) == 0x0000D0, "Member 'UArcVehicleSeatConfig::bPlayerVisible' has a wrong offset!");

// Class ArcVehicles.ArcVehicleSeatConfig_PlayerAttachment
// 0x0000 (0x00D8 - 0x00D8)
class UArcVehicleSeatConfig_PlayerAttachment : public UArcVehicleSeatConfig
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcVehicleSeatConfig_PlayerAttachment">();
	}
	static class UArcVehicleSeatConfig_PlayerAttachment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArcVehicleSeatConfig_PlayerAttachment>();
	}
};
//(alignof(UArcVehicleSeatConfig_PlayerAttachment) == 0x000008, "Wrong alignment on UArcVehicleSeatConfig_PlayerAttachment");
//(sizeof(UArcVehicleSeatConfig_PlayerAttachment) == 0x0000D8, "Wrong size on UArcVehicleSeatConfig_PlayerAttachment");

// Class ArcVehicles.ArcVehicleSeatConfig_SeatPawn
// 0x0028 (0x0100 - 0x00D8)
class UArcVehicleSeatConfig_SeatPawn final  : public UArcVehicleSeatConfig_PlayerAttachment
{
public:
	TSubclassOf<class AArcVehicleSeat>            SeatPawnClass;                                     // 0x00D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FArcOwnerAttachmentReference           PlayerCharacterAttachToComponent;                  // 0x00E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bResetControlRotationOnEnter;                      // 0x00F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1277[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AArcVehiclePawn*                        SeatPawn;                                          // 0x00F8(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnRep_SeatPawn(class AArcVehiclePawn* OldSeatPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcVehicleSeatConfig_SeatPawn">();
	}
	static class UArcVehicleSeatConfig_SeatPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArcVehicleSeatConfig_SeatPawn>();
	}
};
//(alignof(UArcVehicleSeatConfig_SeatPawn) == 0x000008, "Wrong alignment on UArcVehicleSeatConfig_SeatPawn");
//(sizeof(UArcVehicleSeatConfig_SeatPawn) == 0x000100, "Wrong size on UArcVehicleSeatConfig_SeatPawn");
//(offsetof(UArcVehicleSeatConfig_SeatPawn, SeatPawnClass) == 0x0000D8, "Member 'UArcVehicleSeatConfig_SeatPawn::SeatPawnClass' has a wrong offset!");
//(offsetof(UArcVehicleSeatConfig_SeatPawn, PlayerCharacterAttachToComponent) == 0x0000E0, "Member 'UArcVehicleSeatConfig_SeatPawn::PlayerCharacterAttachToComponent' has a wrong offset!");
//(offsetof(UArcVehicleSeatConfig_SeatPawn, bResetControlRotationOnEnter) == 0x0000F0, "Member 'UArcVehicleSeatConfig_SeatPawn::bResetControlRotationOnEnter' has a wrong offset!");
//(offsetof(UArcVehicleSeatConfig_SeatPawn, SeatPawn) == 0x0000F8, "Member 'UArcVehicleSeatConfig_SeatPawn::SeatPawn' has a wrong offset!");

// Class ArcVehicles.ArcVehicleTurretMovementComp
// 0x0088 (0x01C0 - 0x0138)
class alignas(0x10) UArcVehicleTurretMovementComp final  : public UPawnMovementComponent
{
public:
	bool                                          bIgnoreBaseRotation;                               // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePitch;                                      // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreYaw;                                        // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreRoll;                                       // 0x013B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1278[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        UpdatedPitchComponent;                             // 0x0140(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationRate;                                      // 0x0148(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1279[0x2C];                                    // 0x0154(0x002C)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CurrentBase;                                       // 0x0180(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FArcVehicleTurretMovementPostPhysicsTickFunction PostPhysicsTickFunction;                           // 0x0188(0x0030)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_127A[0x8];                                     // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Server_ServerMove(const struct FRotator& FullRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArcVehicleTurretMovementComp">();
	}
	static class UArcVehicleTurretMovementComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArcVehicleTurretMovementComp>();
	}
};
//(alignof(UArcVehicleTurretMovementComp) == 0x000010, "Wrong alignment on UArcVehicleTurretMovementComp");
//(sizeof(UArcVehicleTurretMovementComp) == 0x0001C0, "Wrong size on UArcVehicleTurretMovementComp");
//(offsetof(UArcVehicleTurretMovementComp, bIgnoreBaseRotation) == 0x000138, "Member 'UArcVehicleTurretMovementComp::bIgnoreBaseRotation' has a wrong offset!");
//(offsetof(UArcVehicleTurretMovementComp, bIgnorePitch) == 0x000139, "Member 'UArcVehicleTurretMovementComp::bIgnorePitch' has a wrong offset!");
//(offsetof(UArcVehicleTurretMovementComp, bIgnoreYaw) == 0x00013A, "Member 'UArcVehicleTurretMovementComp::bIgnoreYaw' has a wrong offset!");
//(offsetof(UArcVehicleTurretMovementComp, bIgnoreRoll) == 0x00013B, "Member 'UArcVehicleTurretMovementComp::bIgnoreRoll' has a wrong offset!");
//(offsetof(UArcVehicleTurretMovementComp, UpdatedPitchComponent) == 0x000140, "Member 'UArcVehicleTurretMovementComp::UpdatedPitchComponent' has a wrong offset!");
//(offsetof(UArcVehicleTurretMovementComp, RotationRate) == 0x000148, "Member 'UArcVehicleTurretMovementComp::RotationRate' has a wrong offset!");
//(offsetof(UArcVehicleTurretMovementComp, CurrentBase) == 0x000180, "Member 'UArcVehicleTurretMovementComp::CurrentBase' has a wrong offset!");
//(offsetof(UArcVehicleTurretMovementComp, PostPhysicsTickFunction) == 0x000188, "Member 'UArcVehicleTurretMovementComp::PostPhysicsTickFunction' has a wrong offset!");

}

